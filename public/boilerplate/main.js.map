{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/libs/dist/lib/geometry/primitives.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/math/core.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/libs/dist/lib/geometry/quad.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/libs/dist/lib/fp/core.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/painter/dist/lib/utils/stackgl.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///./boilerplate/glsl/base.vert","webpack:///./boilerplate/glsl/base.frag","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/libs/dist/lib/math/random.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///./boilerplate/context.ts","webpack:///./boilerplate/viewport.ts","webpack:///./boilerplate/state.ts","webpack:///../libs/libs/lib/utils/sequence.ts","webpack:///./boilerplate/geometries.ts","webpack:///./boilerplate/shaders.ts","webpack:///./boilerplate/renderer.ts","webpack:///./boilerplate/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","unequal","equalArray","a","b","arr1","arr2","length","lerpVecs","translate","rotateLeft","normal","_utils_sequence__WEBPACK_IMPORTED_MODULE_0__","_fp_core__WEBPACK_IMPORTED_MODULE_1__","_math_core__WEBPACK_IMPORTED_MODULE_2__","_math_vectors__WEBPACK_IMPORTED_MODULE_3__","fn","step","start","end","vec","map","v","unshift","pop","rotateLeftInPlace","concat","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","[object Object]","contants","Type","Float32Array","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","target","width","height","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","defaultTextureSettings","defaultForms","renderQuad","attribs","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","form_Form","this","id","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","line","join","Sketch","drawSettings","form","shade","uniforms","destroy","layer_StaticLayer","_texture","asset","generateMipmap","assign","layer_DrawingLayer","targets","buffered","sequence","canvas","forEach","sketches","sketch","update","undefined","painter_Painter","resize","createForm","result","createFlatSketch","multiplier","forceUpdateTargets","context","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","Error","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","once","repeat","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","tpf","updates","requestAnimationFrame","windowSize","callback","window","innerWidth","innerHeight","addEventListener","removeEventListener","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","sign","num","lerp","clamp","min","max","Math","PI","EPSILON","ARRAY_TYPE","RANDOM","random","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b1","b2","b3","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","extrudeRight","extrudeBottom","divideHorizontal","divideVertical","quadTriangles","triangulate","_primitives__WEBPACK_IMPORTED_MODULE_0__","_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","combineEdges","e1","e2","direction","edge","extrudeTop","leftRatio","rightRatio","v1","v2","v3","v4","v11","v22","topRatio","bottomRatio","v44","quadCount","mouse","Buttons","LEFT","MIDDLE","RIGHT","opts","cb","element","document","enableRightButton","state","pressed","drag","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","PerspectiveCamera","WithKeyNavigation","WithMouseRotation","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","Camera","props","position","rotationX","rotationY","rotationXMat","rotationYMat","projectionMat","viewMat","needsUpdateView","amount","super","needsUpdateProjection","Cam","speed","keys","UP","W","moveForward","DOWN","A","moveLeft","D","_oldMouse","deltaX","deltaY","updateRotationX","updateRotationY","partial","args","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","obj","convertStackGLGeometry","_contants__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","stackglGeometry","geometry","prop","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","getState","addSystem","dispatch","baseEvents","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_0__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_4__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_5__","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","painter","device","cancelWindow","cancelMouse","cancelKeys","RESIZE","init","forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","val","reset","systems","FRAME","Keys","keyboard","onKeydown","keyCode","Date","now","onKeyup","vec1","vec2","scalar","sum","cross2D","randInt","int","randIntInRange","from","to","normalRand","getContext","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","getElementById","painterState","events","viewPort","camera","updatePosFromKeys","moveSpeed","updateRotFromMouse","lookSpeed","state_Quad","transform","gl_matrix","color","en","entities","quad","geometries_quad","planeForm","stackgl","primitives","cells","baseShade","base_default","glsl_base_default","updateDrawSettings","scene","projection","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","scheduler","compose"],"mappings":"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","file":"boilerplate/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 79);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { zip } from '../utils/sequence';\nimport { partial } from '../fp/core';\nimport { lerp } from '../math/core';\nimport { add, normalize, cross, sub, cross2D } from '../math/vectors';\nexport function interpolate(fn, step, start, end) {\n    return zip(partial(fn, step), start, end);\n}\nexport const lerpVecs = partial(interpolate, lerp);\nexport function split(part, [v1, v2]) {\n    const p = lerpVecs(part, v1, v2);\n    return [[v1, p], [p, v2]];\n}\nexport function translate(vec, p) {\n    return p.map(v => add(vec, v));\n}\nexport function rotateLeftInPlace(p) {\n    p.unshift(p.pop());\n    return p;\n}\nexport function rotateRightInPlace(p) {\n    p.push(p.shift());\n    return p;\n}\nexport function rotateLeft(p) {\n    return rotateLeftInPlace(p.concat());\n}\nexport function rotateRight(p) {\n    return rotateRightInPlace(p.concat());\n}\nexport function normal(p) {\n    return normalize(cross(sub(p[0], p[1]), sub(p[2], p[1])));\n}\nexport function side(e, v) {\n    return cross2D(sub(v, e[0]), sub(e[1], e[0]));\n}\n//# sourceMappingURL=primitives.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            break;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\n\t\t\tattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\n\t\t\tattribute vec2 ${constants.GEOMETRY_PROP_UV};\n\t\t\tvarying vec2 ${constants.VARYING_UV_COORDS};\n\t\t\tvoid main() {\n\t\t\t\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\t\t\t\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n\t\t\t}`,\n        frag: `precision mediump float;\n\t\t\tuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\n\t\t\tvarying vec2 ${constants.VARYING_UV_COORDS};\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n\t\t\t}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { getGLTypeForTypedArray } from './render-utils';\nexport class Form {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nexport class Shade {\n    constructor(gl) {\n        this.gl = gl;\n        this.program = gl.createProgram(),\n            this.frag = gl.createShader(gl.FRAGMENT_SHADER),\n            this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","export class Sketch {\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nexport class StaticLayer {\n    constructor(gl) {\n        this.data = {};\n        this.gl = gl;\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nexport class DrawingLayer {\n    constructor(gl) {\n        this.gl = gl;\n        this.data = {};\n    }\n    texture(i = 0) { return (this.targets && this.targets[0].textures[i]) || null; }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(() => ({\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), 2);\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            {},\n            {}\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm() { return new Form(this.gl); }\n    createShade() { return new Shade(this.gl); }\n    createSketch() { return new Sketch(); }\n    createFlatSketch() {\n        return this.createSketch().update({\n            form: this.renderQuad,\n            shade: this.createShade().update(defaultShaders.basicEffect)\n        });\n    }\n    createStaticLayer() { return new StaticLayer(this.gl); }\n    createDrawingLayer() { return new DrawingLayer(this.gl); }\n    createEffectLayer() {\n        return this.createDrawingLayer().update({\n            sketches: [this.createFlatSketch()]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings } = sketch;\n    const { uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[1].frameBuffer);\n        gl.viewport(0, 0, layer.targets[1].width, layer.targets[1].height);\n    }\n    else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { lerpVecs, translate, rotateLeft } from './primitives';\nimport { times, flatten } from '../utils/sequence';\nexport function top(q) {\n    return [q[0], q[1]];\n}\nexport function right(q) {\n    return [q[1], q[2]];\n}\nexport function bottom(q) {\n    return [q[2], q[3]];\n}\nexport function left(q) {\n    return [q[3], q[0]];\n}\nexport function combineEdges(e1, e2) {\n    return e1.concat(rotateLeft(e2));\n}\nexport function extrudeTop(direction, edge) {\n    return combineEdges(translate(direction, edge), edge);\n}\nexport function extrudeRight(direction, edge) {\n    return rotateLeft(extrudeTop(direction, edge));\n}\nexport function extrudeBottom(direction, edge) {\n    return combineEdges(edge, translate(direction, edge));\n}\nexport function extrudeLeft(direction, edge) {\n    return rotateLeft(extrudeBottom(direction, edge));\n}\nexport function divideHorizontal(leftRatio, rightRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(leftRatio, v1, v4);\n    const v22 = lerpVecs(rightRatio, v2, v3);\n    return [[v1, v2, v22, v11], [v11, v22, v3, v4]];\n}\nexport function divideVertical(topRatio, bottomRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(topRatio, v1, v2);\n    const v44 = lerpVecs(bottomRatio, v4, v3);\n    return [[v1, v11, v44, v4], [v11, v2, v3, v44]];\n}\nexport const quadTriangles = [[0, 2, 1], [0, 3, 2]];\nexport function triangulate(quadCount) {\n    return flatten(times(i => quadTriangles.map((t => t.map(j => 4 * i + j))), quadCount));\n}\n//# sourceMappingURL=quad.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t}\n\n\tupdateRotationX (amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY (amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[8], this.rotationYMat[9], this.rotationYMat[10])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[0], this.rotationYMat[1], this.rotationYMat[2])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[4], this.rotationYMat[5], this.rotationYMat[6])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate () {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper()\n\t\tObject.assign(this, props)\n\t}\n\n\tupdate () {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\n\nexport function WithKeyNavigation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys (speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function WithMouseRotation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse (speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function curry(fn) {\n    function curried(a, b) {\n        if (typeof b !== 'undefined')\n            return fn(a, b);\n        return (b) => fn(a, b);\n    }\n    return curried;\n}\nexport function partial(fn, ...args) {\n    return fn.bind(null, ...args);\n}\n//# sourceMappingURL=core.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","import * as constants from '../contants';\nimport { flatten } from 'tvs-libs/dist/lib/utils/sequence';\nexport const STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport const STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport const STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport const STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    const geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0\n    };\n    for (const prop in stackglGeometry) {\n        const arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            const buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer },\n                itemCount: buffer.length\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","import { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { once } from 'shared-utils/scheduler'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm())\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade())\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch())\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer())\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer())\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer())\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype System<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: System<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: System<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize()\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvNormal = normal;\\n\\tvColor = color;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vColor;\\nvarying vec3 normal;\\n\\nvoid main() {\\n  gl_FragColor = vec4(vColor, 1.0);\\n}\\n\"","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","export function getContext(canvas) {\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    multiplier = Math.max(1, multiplier);\n    const width = canvas.clientWidth * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","import { getPainter, getState, baseEvents } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './viewport'\nimport { Entities } from './state'\n\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort\n\tentities: Entities\n}\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { WithKeyNavigation, PerspectiveCamera, WithMouseRotation } from 'shared-utils/vr/camera'\nimport { set, addSystem } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class ViewPort {\n\tmoveSpeed = 0.04\n\tlookSpeed = 0.003\n\tcamera = new (WithKeyNavigation(WithMouseRotation(PerspectiveCamera)))({\n\t\tfovy: Math.PI * 0.3,\n\t\tposition: [0, 0, 5]\n\t})\n}\n\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf / 60\n\t\t\tv.camera.updatePosFromKeys(v.moveSpeed * tpf, s.device.keys)\n\t\t\tv.camera.updateRotFromMouse(v.lookSpeed * tpf, s.device.mouse)\n\t\t\tv.camera.update()\n\t\t\treturn\n\n\t\tcase events.RESIZE:\n\t\t\tv.camera.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tv.camera.needsUpdateProjection = true\n\t}\n})\n\n\nset<State>('viewPort', new ViewPort(), {reset: {moveSpeed: true, lookSpeed: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport { times } from 'tvs-libs/lib/utils/sequence'\nimport { normalRand } from 'tvs-libs/dist/lib/math/random'\nimport { addSystem, set } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class Quad {\n\ttransform = mat4.create()\n\tcolor = times(normalRand, 3)\n\tupdate (tpf: number) {\n\t\tmat4.rotateY(this.transform, this.transform, tpf * 0.003)\n\t}\n}\n\n\nexport class Entities {\n\tquad = new Quad()\n}\n\n\naddSystem<State>('entities', (e, s) => {\n\tconst en = s.entities\n\tswitch (e) {\n\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf\n\t\t\ten.quad.update(tpf)\n\t\t\treturn\n\t}\n})\n\n\nset<State>('entities', new Entities(), {reset: {quad: {color: true}}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { randInt, randIntInRange } from '../math/random'\n\n\nexport type Sequence<T> = {\n\tlength: number\n\t[n: number]: T\n}\n\n\nexport type Collection<T> = T[] | {[key: string]: T}\n\n\nexport function pickRandom<T>(arr: Sequence<T>): T {\n\treturn arr[randInt(arr.length)]\n}\n\n\nexport function doTimes (\n\tfn: (i: number) => void,\n\tcount: number\n): void {\n\tfor (let i = 0; i < count; i++) { fn(i) }\n}\n\n\nexport function times<T>(\n\tfn: (i: number) => T,\n\tcount: number,\n\tres: T[] = []\n): T[] {\n\tfor (let i = 0; i < count; i++) { res[i] = fn(i) }\n\treturn res\n}\n\n\nexport function zip<A, B, C>(\n\tfn: (a: A, b: B) => C,\n\tas: Sequence<A>,\n\tbs: Sequence<B>,\n\tres: Sequence<C> = []\n): C[] {\n\tconst length = Math.min(as.length, bs.length)\n\tfor (let i = 0; i < length; i++) {\n\t\tres[i] = fn(as[i], bs[i])\n\t}\n\treturn res as C[]\n}\n\n\nexport function flatten<T>(array: Sequence<T>[], res: T[] = []): T[] {\n\tfor (const subarray of array) {\n\t\tconst currentLength = res.length\n\t\tfor (let i = 0; i < subarray.length; i++) {\n\t\t\tres[i + currentLength] = subarray[i]\n\t\t}\n\t}\n\treturn res\n}\n\n\nexport function mapcat<A, B>(fn: (a: A) => B[], array: A[], res: B[] = []): B[] {\n\treturn flatten(array.map(fn), res)\n}\n\n\nexport function shuffle<T>(arr: T[]): T[] {\n\tconst shuffled: T[] = []\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst j = randIntInRange(i, arr.length)\n\t\tconst temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i]\n\t\tshuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j]\n\t\tshuffled[j] = temp\n\t}\n\n\treturn shuffled\n}\n\n\nexport function map<A, B>(fn: (val: A, key?: any) => B, coll: {[key: string]: A}): {[key: string]: B}\nexport function map<A, B>(fn: (val: A, key?: any) => B, coll: A[]): B[]\nexport function map<A, B>(fn: (val: A, key?: any) => B, coll: Collection<A>): Collection<B> {\n\tif (Array.isArray(coll)) {\n\t\treturn coll.map(fn)\n\t} else {\n\t\tconst obj = {} as {[key: string]: B}\n\t\tfor (const key in coll) {\n\t\t\tobj[key] = fn(coll[key], key)\n\t\t}\n\t\treturn obj\n\t}\n}\n\n\nexport function each<A> (fn: (val: A, key?: any) => any, coll: { [key: string]: A }): void\nexport function each<A> (fn: (val: A, key?: any) => any, coll: A[]): void\nexport function each<A> (fn: (val: A, key?: any) => any, coll: Collection<A>): void {\n\tfor (const key in coll) {\n\t\tfn((coll as any)[key], key)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { convertStackGLGeometry } from 'tvs-painter/dist/lib/utils/stackgl'\nimport { extrudeBottom, quadTriangles } from 'tvs-libs/dist/lib/geometry/quad'\nimport { normal } from 'tvs-libs/dist/lib/geometry/primitives'\nimport { getForm } from 'shared-utils/painterState'\nimport { painter, state } from './context'\n\n\n\nconst quad = extrudeBottom([0, -2, 0], [[-1, 1, 0], [1, 1, 0]])\n\n\nexport const planeForm = getForm(painter, 'plane')\n.update(\n\tconvertStackGLGeometry({\n\t\tposition: quad,\n\t\tcolor: quad.map(() => state.entities.quad.color),\n\t\tnormal: quad.map(() => normal(quad)),\n\t\tcells: quadTriangles\n\t})\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import vert from './glsl/base.vert'\nimport frag from './glsl/base.frag'\nimport { getShade } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const baseShade = getShade(painter, 'base')\n\t.update({ vert, frag })\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { gl, painter, state } from './context'\nimport { getSketch, getDrawingLayer } from 'shared-utils/painterState'\nimport { planeForm } from './geometries'\nimport { baseShade } from './shaders'\n\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1],\n\tenable: [gl.DEPTH_TEST]\n})\n\n\n// ===== objects =====\n\nconst sketch = getSketch(painter, 'quad')\n\t.update({\n\t\tform: planeForm,\n\t\tshade: baseShade,\n\t\tuniforms: { transform: () => state.entities.quad.transform }\n\t})\n\n\n// ===== layers =====\n\nexport const scene = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [sketch],\n\t\tuniforms: {\n\t\t\tview: () => state.viewPort.camera.viewMat,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat\n\t\t},\n\t\tdrawSettings: {\n\t\t\tclearBits: gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT\n\t\t}\n\t})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import './viewport'\nimport './state'\nimport { repeat } from 'shared-utils/scheduler'\nimport { scene } from './renderer'\nimport { painter, events } from './context'\nimport { get, dispatch } from 'shared-utils/painterState'\n\n\nrepeat(tpf => {\n\tget('device').tpf = tpf\n\tdispatch(events.FRAME)\n\tpainter.compose(scene)\n}, 'loop')\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}