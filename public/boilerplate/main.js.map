{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///./boilerplate/context.ts","webpack:///./boilerplate/viewport.ts","webpack:///./boilerplate/state.ts","webpack:///../libs/libs/lib/utils/sequence.ts","webpack:///./boilerplate/geometries.ts","webpack:///./boilerplate/shaders.ts","webpack:///./boilerplate/renderer.ts","webpack:///./boilerplate/index.ts","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/geometry/primitives.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/math/core.js","webpack:///../libs/libs/dist/lib/geometry/quad.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/libs/dist/lib/fp/core.js","webpack:///../libs/painter/dist/lib/utils/stackgl.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///./boilerplate/glsl/base.vert","webpack:///./boilerplate/glsl/base.frag","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/math/random.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","canvas","document","getElementById","painter","painterState","gl","state","events","assign","e","v","viewPort","FRAME","tpf","device","camera","updatePosFromKeys","moveSpeed","keys","updateRotFromMouse","lookSpeed","mouse","update","RESIZE","aspect","width","height","needsUpdateProjection","[object Object]","this","fovy","Math","PI","position","reset","state_Quad","transform","gl_matrix","color","fn","count","res","times","random","rotateY","en","entities","quad","geometries_quad","planeForm","stackgl","map","normal","primitives","cells","baseShade","vert","base_default","a","frag","glsl_base_default","updateDrawSettings","clearColor","enable","DEPTH_TEST","sketch","form","shade","uniforms","scene","sketches","view","viewMat","projection","projectionMat","drawSettings","clearBits","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","scheduler","compose","once","repeat","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","id","updates","requestAnimationFrame","unequal","equalArray","b","arr1","arr2","length","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","contants","Type","Float32Array","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","target","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearDepth","clear","revertDrawSettings","formCounter","form_Form","drawType","itemCount","attribs","attribData","createBuffer","bufferData","storeType","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shadeCounter","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","line","join","sketchCounter","Sketch","destroy","staticLayerCount","layer_StaticLayer","_texture","asset","asset_lib","generateMipmap","drawingLayerCount","layer_DrawingLayer","targets","buffered","sequence","doubleBuffered","forEach","basicEffect","undefined","painter_Painter","resize","renderQuad","createForm","result","createFlatSketch","multiplier","forceUpdateTargets","context","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","Error","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","debug","windowSize","callback","window","innerWidth","innerHeight","addEventListener","removeEventListener","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","lerpVecs","translate","rotateLeft","_utils_sequence__WEBPACK_IMPORTED_MODULE_0__","_fp_core__WEBPACK_IMPORTED_MODULE_1__","_math_core__WEBPACK_IMPORTED_MODULE_2__","_math_vectors__WEBPACK_IMPORTED_MODULE_3__","step","start","end","vec","unshift","pop","rotateLeftInPlace","concat","Buttons","LEFT","MIDDLE","RIGHT","opts","cb","element","enableRightButton","pressed","drag","x","y","dX","dY","dragging","oX","oY","onMouseDown","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","set","getState","addSystem","dispatch","baseEvents","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_4__","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_5__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","cancelWindow","cancelMouse","cancelKeys","sizeMultiplier","k","init","forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","prop","val","systems","sign","num","lerp","clamp","min","max","right","extrudeRight","extrudeBottom","divideHorizontal","divideVertical","quadTriangles","triangulate","_primitives__WEBPACK_IMPORTED_MODULE_0__","_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","q","combineEdges","e1","e2","direction","edge","extrudeTop","leftRatio","rightRatio","v1","v2","v3","v4","v11","v22","topRatio","bottomRatio","v44","quadCount","EPSILON","ARRAY_TYPE","RANDOM","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b1","b2","b3","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","bottom","top","near","far","rl","tb","nf","perspective","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","PerspectiveCamera","WithKeyNavigation","WithMouseRotation","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","Camera","props","rotationX","rotationY","rotationXMat","rotationYMat","needsUpdateView","amount","super","Cam","speed","UP","W","moveForward","DOWN","A","moveLeft","D","_oldMouse","deltaX","deltaY","updateRotationX","updateRotationY","partial","args","convertStackGLGeometry","_contants__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","stackglGeometry","geometry","arr","defaultTextureSettings","getDefaultLayerSettings","defaultForms","defaultShaders","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","pickRandom","doTimes","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","as","bs","array","subarray","currentLength","coll","obj","Keys","keyboard","onKeydown","keyCode","Date","now","onKeyup","vec1","vec2","scalar","sum","cross2D","getContext","contextAttributes","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","randInt","int","randIntInRange","from","to","normalRand"],"mappings":"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","file":"boilerplate/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 87);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","import { getPainter, getState, baseEvents } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './viewport'\nimport { Entities } from './state'\n\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort\n\tentities: Entities\n}\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { WithKeyNavigation, PerspectiveCamera, WithMouseRotation } from 'shared-utils/vr/camera'\nimport { set, addSystem } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class ViewPort {\n\tmoveSpeed = 0.04\n\tlookSpeed = 0.003\n\tcamera = new (WithKeyNavigation(WithMouseRotation(PerspectiveCamera)))({\n\t\tfovy: Math.PI * 0.3,\n\t\tposition: [0, 0, 5]\n\t})\n}\n\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf / 60\n\t\t\tv.camera.updatePosFromKeys(v.moveSpeed * tpf, s.device.keys)\n\t\t\tv.camera.updateRotFromMouse(v.lookSpeed * tpf, s.device.mouse)\n\t\t\tv.camera.update()\n\t\t\treturn\n\n\t\tcase events.RESIZE:\n\t\t\tv.camera.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tv.camera.needsUpdateProjection = true\n\t}\n})\n\n\nset<State>('viewPort', new ViewPort(), {reset: {moveSpeed: true, lookSpeed: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport { times } from 'tvs-libs/lib/utils/sequence'\nimport { normalRand } from 'tvs-libs/dist/lib/math/random'\nimport { addSystem, set } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class Quad {\n\ttransform = mat4.create()\n\tcolor = times(normalRand, 3)\n\tupdate (tpf: number) {\n\t\tmat4.rotateY(this.transform, this.transform, tpf * 0.003)\n\t}\n}\n\n\nexport class Entities {\n\tquad = new Quad()\n}\n\n\naddSystem<State>('entities', (e, s) => {\n\tconst en = s.entities\n\tswitch (e) {\n\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf\n\t\t\ten.quad.update(tpf)\n\t\t\treturn\n\t}\n})\n\n\nset<State>('entities', new Entities(), {reset: {quad: {color: true}}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { randInt, randIntInRange } from '../math/random'\n\n\nexport type Sequence<T> = {\n\tlength: number\n\t[n: number]: T\n}\n\n\nexport type Collection<T> = T[] | {[key: string]: T}\n\n\nexport function pickRandom<T>(arr: Sequence<T>): T {\n\treturn arr[randInt(arr.length)]\n}\n\n\nexport function doTimes (\n\tfn: (i: number) => void,\n\tcount: number\n): void {\n\tfor (let i = 0; i < count; i++) { fn(i) }\n}\n\n\nexport function times<T>(\n\tfn: (i: number) => T,\n\tcount: number,\n\tres: T[] = []\n): T[] {\n\tfor (let i = 0; i < count; i++) { res[i] = fn(i) }\n\treturn res\n}\n\n\nexport function zip<A, B, C>(\n\tfn: (a: A, b: B) => C,\n\tas: Sequence<A>,\n\tbs: Sequence<B>,\n\tres: Sequence<C> = []\n): C[] {\n\tconst length = Math.min(as.length, bs.length)\n\tfor (let i = 0; i < length; i++) {\n\t\tres[i] = fn(as[i], bs[i])\n\t}\n\treturn res as C[]\n}\n\n\nexport function flatten<T>(array: Sequence<T>[], res: T[] = []): T[] {\n\tfor (const subarray of array) {\n\t\tconst currentLength = res.length\n\t\tfor (let i = 0; i < subarray.length; i++) {\n\t\t\tres[i + currentLength] = subarray[i]\n\t\t}\n\t}\n\treturn res\n}\n\n\nexport function mapcat<A, B>(fn: (a: A) => B[], array: A[], res: B[] = []): B[] {\n\treturn flatten(array.map(fn), res)\n}\n\n\nexport function shuffle<T>(arr: T[]): T[] {\n\tconst shuffled: T[] = []\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst j = randIntInRange(i, arr.length)\n\t\tconst temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i]\n\t\tshuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j]\n\t\tshuffled[j] = temp\n\t}\n\n\treturn shuffled\n}\n\n\nexport function map<A, B>(fn: (val: A, key?: any) => B, coll: {[key: string]: A}): {[key: string]: B}\nexport function map<A, B>(fn: (val: A, key?: any) => B, coll: A[]): B[]\nexport function map<A, B>(fn: (val: A, key?: any) => B, coll: Collection<A>): Collection<B> {\n\tif (Array.isArray(coll)) {\n\t\treturn coll.map(fn)\n\t} else {\n\t\tconst obj = {} as {[key: string]: B}\n\t\tfor (const key in coll) {\n\t\t\tobj[key] = fn(coll[key], key)\n\t\t}\n\t\treturn obj\n\t}\n}\n\n\nexport function each<A> (fn: (val: A, key?: any) => any, coll: { [key: string]: A }): void\nexport function each<A> (fn: (val: A, key?: any) => any, coll: A[]): void\nexport function each<A> (fn: (val: A, key?: any) => any, coll: Collection<A>): void {\n\tfor (const key in coll) {\n\t\tfn((coll as any)[key], key)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { convertStackGLGeometry } from 'tvs-painter/dist/lib/utils/stackgl'\nimport { extrudeBottom, quadTriangles } from 'tvs-libs/dist/lib/geometry/quad'\nimport { normal } from 'tvs-libs/dist/lib/geometry/primitives'\nimport { getForm } from 'shared-utils/painterState'\nimport { painter, state } from './context'\n\n\n\nconst quad = extrudeBottom([0, -2, 0], [[-1, 1, 0], [1, 1, 0]])\n\n\nexport const planeForm = getForm(painter, 'plane')\n.update(\n\tconvertStackGLGeometry({\n\t\tposition: quad,\n\t\tcolor: quad.map(() => state.entities.quad.color),\n\t\tnormal: quad.map(() => normal(quad)),\n\t\tcells: quadTriangles\n\t})\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import vert from './glsl/base.vert'\nimport frag from './glsl/base.frag'\nimport { getShade } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const baseShade = getShade(painter, 'base')\n\t.update({ vert, frag })\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { gl, painter, state } from './context'\nimport { getSketch, getDrawingLayer } from 'shared-utils/painterState'\nimport { planeForm } from './geometries'\nimport { baseShade } from './shaders'\n\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1],\n\tenable: [gl.DEPTH_TEST]\n})\n\n\n// ===== objects =====\n\nconst sketch = getSketch(painter, 'quad')\n\t.update({\n\t\tform: planeForm,\n\t\tshade: baseShade,\n\t\tuniforms: { transform: () => state.entities.quad.transform }\n\t})\n\n\n// ===== layers =====\n\nexport const scene = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [sketch],\n\t\tuniforms: {\n\t\t\tview: () => state.viewPort.camera.viewMat,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat\n\t\t},\n\t\tdrawSettings: {\n\t\t\tclearBits: gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT\n\t\t}\n\t})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import './viewport'\nimport './state'\nimport { repeat } from 'shared-utils/scheduler'\nimport { scene } from './renderer'\nimport { painter, events } from './context'\nimport { get, dispatch } from 'shared-utils/painterState'\n\n\nrepeat(tpf => {\n\tget('device').tpf = tpf\n\tdispatch(events.FRAME)\n\tpainter.compose(scene)\n}, 'loop')\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n        this.program = gl.createProgram();\n        this.frag = gl.createShader(gl.FRAGMENT_SHADER);\n        this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nimport { Painter } from './painter';\nimport { defaultTextureSettings, defaultShaders } from './asset-lib';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        if (data.asset) {\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n        }\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), data.doubleBuffered ? 2 : 1);\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag, vert: defaultShaders.basicEffect.vert });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' }\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n        this.result.shade.update(defaultShaders.basicEffect);\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) { return new Form(this.gl, id); }\n    createShade(id) { return new Shade(this.gl, id); }\n    createSketch(id) { return new Sketch(id); }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade')\n        });\n    }\n    createStaticLayer(id) { return new StaticLayer(this.gl, id); }\n    createDrawingLayer(id) { return new DrawingLayer(this.gl, id); }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings, uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        const i = layer.targets.length - 1;\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else if (layer.targets.length === 2) {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","import { zip } from '../utils/sequence';\nimport { partial } from '../fp/core';\nimport { lerp } from '../math/core';\nimport { add, normalize, cross, sub, cross2D } from '../math/vectors';\nexport function interpolate(fn, step, start, end) {\n    return zip(partial(fn, step), start, end);\n}\nexport const lerpVecs = partial(interpolate, lerp);\nexport function split(part, [v1, v2]) {\n    const p = lerpVecs(part, v1, v2);\n    return [[v1, p], [p, v2]];\n}\nexport function translate(vec, p) {\n    return p.map(v => add(vec, v));\n}\nexport function rotateLeftInPlace(p) {\n    p.unshift(p.pop());\n    return p;\n}\nexport function rotateRightInPlace(p) {\n    p.push(p.shift());\n    return p;\n}\nexport function rotateLeft(p) {\n    return rotateLeftInPlace(p.concat());\n}\nexport function rotateRight(p) {\n    return rotateRightInPlace(p.concat());\n}\nexport function normal(p) {\n    return normalize(cross(sub(p[0], p[1]), sub(p[2], p[1])));\n}\nexport function side(e, v) {\n    return cross2D(sub(v, e[0]), sub(e[1], e[0]));\n}\n//# sourceMappingURL=primitives.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tsizeMultiplier: number\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: ActionHandler<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: ActionHandler<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize(state.device.sizeMultiplier)\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","import { lerpVecs, translate, rotateLeft } from './primitives';\nimport { times, flatten } from '../utils/sequence';\nexport function top(q) {\n    return [q[0], q[1]];\n}\nexport function right(q) {\n    return [q[1], q[2]];\n}\nexport function bottom(q) {\n    return [q[2], q[3]];\n}\nexport function left(q) {\n    return [q[3], q[0]];\n}\nexport function combineEdges(e1, e2) {\n    return e1.concat(rotateLeft(e2));\n}\nexport function extrudeTop(direction, edge) {\n    return combineEdges(translate(direction, edge), edge);\n}\nexport function extrudeRight(direction, edge) {\n    return rotateLeft(extrudeTop(direction, edge));\n}\nexport function extrudeBottom(direction, edge) {\n    return combineEdges(edge, translate(direction, edge));\n}\nexport function extrudeLeft(direction, edge) {\n    return rotateLeft(extrudeBottom(direction, edge));\n}\nexport function divideHorizontal(leftRatio, rightRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(leftRatio, v1, v4);\n    const v22 = lerpVecs(rightRatio, v2, v3);\n    return [[v1, v2, v22, v11], [v11, v22, v3, v4]];\n}\nexport function divideVertical(topRatio, bottomRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(topRatio, v1, v2);\n    const v44 = lerpVecs(bottomRatio, v4, v3);\n    return [[v1, v11, v44, v4], [v11, v2, v3, v44]];\n}\nexport const quadTriangles = [[0, 2, 1], [0, 3, 2]];\nexport function triangulate(quadCount) {\n    return flatten(times(i => quadTriangles.map((t => t.map(j => 4 * i + j))), quadCount));\n}\n//# sourceMappingURL=quad.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t}\n\n\tupdateRotationX (amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY (amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[8], this.rotationYMat[9], this.rotationYMat[10])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[0], this.rotationYMat[1], this.rotationYMat[2])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[4], this.rotationYMat[5], this.rotationYMat[6])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate () {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper()\n\t\tObject.assign(this, props)\n\t}\n\n\tupdate () {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\n\nexport function WithKeyNavigation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys (speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function WithMouseRotation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse (speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function curry(fn) {\n    function curried(a, b) {\n        if (typeof b !== 'undefined')\n            return fn(a, b);\n        return (b) => fn(a, b);\n    }\n    return curried;\n}\nexport function partial(fn, ...args) {\n    return fn.bind(null, ...args);\n}\n//# sourceMappingURL=core.js.map","import * as constants from '../contants';\nimport { flatten } from 'tvs-libs/dist/lib/utils/sequence';\nexport const STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport const STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport const STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport const STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    const geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0\n    };\n    for (const prop in stackglGeometry) {\n        const arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            const buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer },\n                itemCount: buffer.length\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvNormal = normal;\\n\\tvColor = color;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vColor;\\nvarying vec3 normal;\\n\\nvoid main() {\\n  gl_FragColor = vec4(vColor, 1.0);\\n}\\n\"","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function getContext(canvas, contextAttributes) {\n    const gl = canvas.getContext('webgl', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map"],"sourceRoot":""}