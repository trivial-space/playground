{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/contants.js","webpack:///../libs/libs/dist/events/dom.js","webpack:///../libs/libs/dist/events/mouse.js","webpack:///../libs/painter/dist/asset-lib.js","webpack:///../libs/painter/dist/render-utils.js","webpack:///../libs/painter/dist/form.js","webpack:///../libs/painter/dist/texture.js","webpack:///../libs/painter/dist/render-target.js","webpack:///../libs/painter/dist/frame.js","webpack:///../libs/painter/dist/layer.js","webpack:///../libs/painter/dist/shade.js","webpack:///../libs/painter/dist/sketch.js","webpack:///../libs/painter/dist/painter.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/utils/object.js","webpack:///../libs/libs/dist/utils/sequence.js","webpack:///../libs/libs/dist/events/keyboard.js","webpack:///./aquarell/glsl/base.frag","webpack:///../libs/libs/dist/math/random.js","webpack:///./shared-utils/scheduler.ts","webpack:///./aquarell/context.ts","webpack:///./aquarell/paint.ts","webpack:///./aquarell/renderer.ts","webpack:///./aquarell/index.ts","webpack:///../libs/libs/dist/utils/predicates.js","webpack:///../libs/painter/dist/utils/context.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","windowSize","callback","resize","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","Buttons","LEFT","MIDDLE","RIGHT","mouse","opts","cb","element","document","enableRightButton","state","pressed","drag","x","y","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","defaultTextureSettings","wrap","minFilter","magFilter","defaultForms","renderQuad","attribs","[object Object]","contants","buffer","Float32Array","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","_texture","samplerArraySetter","size","units","Int32Array","textures","index","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","b","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","formCounter","form_Form","_painter","id","this","data","_drawType","_itemCount","_attribs","attribData","createBuffer","bufferData","elements","_elements","glType","typedArray","Uint8ClampedArray","Error","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","undefined","textureCount","texture_Texture","_data","createTexture","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","asset","texImage2D","RGBA","isWebGL2","RGBA32F","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","indexOf","generateMipmap","assign","deleteTexture","render_target_targetCount","render_target_RenderTarget","frameBuffer","depthBuffer","bufferStructure","length","every","buf","predicates","createFramebuffer","bindFramebuffer","FRAMEBUFFER","some","getExtension","texCount","bufferAttachments","COLOR_ATTACHMENT0","glx","attachment","COLOR_ATTACHMENT0_WEBGL","drawBuffers","drawBuffersWEBGL","update","framebufferTexture2D","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","deleteFramebuffer","deleteRenderbuffer","frameCount","frame_Frame","layers","_targets","_textures","Array","isArray","selfReferencing","layerCount","reduce","layer","_uniforms","targetCount","drawingBufferWidth","drawingBufferHeight","_destroyTargets","targetData","sequence","forEach","tex","destroy","tmp","layer_layerCount","Layer","sketches","sketch","shade","uniforms","shadeCounter","shade_Shade","fragSource","trim","vertSource","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","_program","_frag","_vert","attachShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","_uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","uniformSetters","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","_attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","drawSettings","_drawSettings","form","painter_Painter","canvas","maxBufferSamples","useWebGL1","getContext","sizeMultiplier","getParameter","MAX_SAMPLES","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","_renderQuad","createForm","_staticSketch","createFlatSketch","context","createSketch","createShade","createLayer","globalUniforms","viewport","draw","frames","frame","renderFrame","idx","source","image","sources","useProgram","shadeForm","shadeUniforms","drawInstance","drawElements","drawArrays","renderLayer","target","layerPasses","j","_swapTargets","currentCanvas","painter","getPainter","device","cancelWindow","cancelMouse","cancelKeys","scheduler","dispatch","baseEvents","RESIZE","keyboard","k","keys","init","getForm","getShade","getSketch","getLayer","getFrame","getEffect","set","getState","addSystem","painterState_forms","shades","painterState_layers","painterState_frames","createFrame","effects","createEffect","tpf","prop","val","reset","deepOverride","obj1","obj2","opt","ignore","val1","val2","systems","FRAME","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","fn","res","as","bs","Math","min","array","subarray","currentLength","coll","obj","Keys","onKeydown","keyCode","Date","now","onKeyup","randInt","int","floor","random","randIntInRange","from","to","normalRand","once","repeat","stop","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","updates","requestAnimationFrame","getElementById","paint","painterState","events","PROCESS_PAINT","CLEANUP_PAINT","ctx","getImageData","putImageData","fillStyle","fillRect","paintLayer","renderer_layer","base_default","a","previous","automaton","compose","display","equalArray","equalObject","arr1","arr2","k1","makeClear","clearArray","item","toUpperCase","resizeCanvas","multiplier","clientWidth","clientHeight"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,IAIAlC,IAAAmC,EAAA,qCClFAnC,EAAAU,EAAA0B,EAAA,sBAAAC,IAAArC,EAAAU,EAAA0B,EAAA,sBAAAE,IAAAtC,EAAAU,EAAA0B,EAAA,sBAAAG,IAAAvC,EAAAU,EAAA0B,EAAA,sBAAAI,IAAAxC,EAAAU,EAAA0B,EAAA,sBAAAK,IAAAzC,EAAAU,EAAA0B,EAAA,sBAAAM,IAAO,MAAAL,EAAA,WACAC,EAAA,SACAC,EAAA,KACAC,EAAA,SACAC,EAAA,SACAC,EAAA,CACPC,MAAA,KACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,IAAA,KACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,KAAA,MACAC,UAAA,MACAC,UAAA,MACAC,UAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,aAAA,MACAC,WAAA,MACAC,kBAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,iBAAA,MACAC,wBAAA,MACAC,oBAAA,MACAC,aAAA,KACAC,kBAAA,MACAC,kBAAA,MACAC,kBAAA,MACAC,eAAA,MACAC,eAAA,MACAC,iBAAA,MACAC,qBAAA,MACAC,wBAAA,MACAC,wBAAA,MACAC,0BAAA,MACAC,8BAAA,MACAC,WAAA,KACAC,iBAAA,MACAC,WAAA,MACAC,iBAAA,MACAC,KAAA,KACAC,cAAA,KACAC,MAAA,KACAC,eAAA,KACAC,uBAAA,MACAC,uBAAA,MACAC,qBAAA,MACAC,WAAA,KACAC,4BAAA,MACAC,6BAAA,MACAC,yBAAA,MACAC,+BAAA,MACAC,kBAAA,kDC9DO,SAAAC,EAAAC,GACP,SAAAC,IACAD,EAAA,CACAE,MAAAC,OAAAC,WACAC,OAAAF,OAAAG,cAKA,OAFAH,OAAAI,iBAAA,SAAAN,GACAA,IACA,WACAE,OAAAK,oBAAA,SAAAP,eCVO,MAAAQ,EAAA,CACPC,KAAA,EACAC,OAAA,EACAC,MAAA,GAEO,SAAAC,EAAAC,EAAAd,GACP,MAAAe,EAAAf,GAAAc,GACAE,QAAWA,EAAAC,SAAAC,qBAAwCJ,EACnDK,EAAA,CACAC,QAAA,GACAC,KAAA,CAAeC,EAAA,EAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,GACfC,UAAA,GAEA,IAAAJ,EAAA,EAAAC,EAAA,EAAAI,EAAA,EAAAC,EAAA,EACA,SAAAC,EAAAC,GACAX,EAAAC,QAAAU,EAAAC,QAAAD,EACAA,EAAAC,SAAAtB,EAAAC,OACAY,EAAAK,EAAAG,EAAAE,QACAT,EAAAK,EAAAE,EAAAG,QACAd,EAAAO,UAAA,GAEAX,EAAAI,GAEA,SAAAe,EAAAJ,UACAX,EAAAC,QAAAU,EAAAC,eACAZ,EAAAE,KAAAc,MACAhB,EAAAE,KAAAC,EAAA,EACAH,EAAAE,KAAAE,EAAA,EACAJ,EAAAE,KAAAG,GAAA,EACAL,EAAAE,KAAAI,GAAA,EACAN,EAAAO,UAAA,EACAX,EAAAI,GAEA,SAAAiB,EAAAN,GACAX,EAAAO,WACAP,EAAAE,KAAAc,MAAAL,EACAX,EAAAE,KAAAC,IAAAQ,EAAAE,QACAb,EAAAE,KAAAE,IAAAO,EAAAG,QACAd,EAAAE,KAAAG,GAAAG,EAAAG,EAAAE,QACAb,EAAAE,KAAAI,GAAAG,EAAAE,EAAAG,QACAN,EAAAG,EAAAE,QACAJ,EAAAE,EAAAG,QACAlB,EAAAI,IAGA,SAAAkB,EAAAP,GACAA,EAAAO,iBASA,OAPArB,EAAAT,iBAAA,YAAAsB,GACAZ,SAAAV,iBAAA,UAAA2B,GACAjB,SAAAV,iBAAA,YAAA6B,GACAlB,GACAF,EAAAT,iBAAA,cAAA8B,GAEAtB,EAAAI,GACA,WACAH,EAAAR,oBAAA,YAAAqB,GACAZ,SAAAT,oBAAA,YAAA4B,GACAnB,SAAAT,oBAAA,UAAA0B,GACAhB,GACAF,EAAAR,oBAAA,cAAA6B,eC3DO,MAAAC,EAAA,CACPC,KAAA,gBACAC,UAAA,SACAC,UAAA,WAQO,MAAAC,EAAA,CACPC,WAAA,CACAC,QAAA,CACAC,CAAaC,EAAA,GAAgC,CAC7CC,OAAA,IAAAC,aAAA,uBACAC,UAAA,UAEAJ,CAAaC,EAAA,GAA0B,CACvCC,OAAA,IAAAC,aAAA,mBACAC,UAAA,WAGAC,SAAA,iBACAC,UAAA,IAGOC,EAAA,CACPC,YAAA,CACAC,yBACiBR,EAAA,sBACAA,EAAA,oBACFA,EAAA,wBAEZA,EAAA,OAAiCA,EAAA,4BACdA,EAAA,mBAEtBS,oDACoBT,EAAA,oBACLA,EAAA,iDAEaA,EAAA,MAAqCA,EAAA,WCxCjE,SAAAU,EAAAC,GACA,OAAAC,EAAAD,GAAAE,UA2BA,SAAAC,EAAAC,EAAAC,GACA,OAAAC,IACAF,EAAAG,UAAAF,EAAAC,IAGA,SAAAE,EAAAJ,EAAAC,GACA,OAAAC,IACAF,EAAAK,WAAAJ,EAAAC,IAGA,SAAAI,EAAAN,EAAAC,GACA,OAAAC,IACAF,EAAAO,WAAAN,EAAAC,IAGA,SAAAM,EAAAR,EAAAC,GACA,OAAAC,IACAF,EAAAS,WAAAR,EAAAC,IAGA,SAAAQ,EAAAV,EAAAC,GACA,OAAAC,IACAF,EAAAW,WAAAV,EAAAC,IAyEA,SAAAU,EAAAZ,EAAAJ,EAAAiB,EAAAZ,GACA,MAAAH,EAAAH,EAAAC,GACA,OAAAkB,IACAd,EAAAG,UAAAF,EAAAY,GACAb,EAAAe,cAAAf,EAAAgB,SAAAH,GACAb,EAAAiB,YAAAnB,EAAAgB,EAAAI,WAGA,SAAAC,EAAAnB,EAAAJ,EAAAiB,EAAAZ,EAAAmB,GACA,MAAAtB,EAAAH,EAAAC,GACAyB,EAAA,IAAAC,WAAAF,GACA,QAAAlL,EAAA,EAAmBA,EAAAkL,IAAUlL,EAC7BmL,EAAAnL,GAAA2K,EAAA3K,EAEA,OAAAqL,IACAvB,EAAAK,WAAAJ,EAAAoB,GACA,UAAAG,KAAAD,EACAvB,EAAAe,cAAAf,EAAAgB,SAAAK,EAAAG,IACAxB,EAAAiB,YAAAnB,EAAAyB,EAAAC,GAAAN,WAOA,MAAArB,EAAA,CACAb,CAAKC,EAAA,EAAOxG,OAAA,CACZgJ,KAAAtC,aACAiC,KAAA,EACAM,OArJA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA2B,UAAA1B,EAAAC,KAoJA0B,YAjJA,SAAA5B,EAAAC,GACA,OAAAC,IACAF,EAAA6B,WAAA5B,EAAAC,MAiJAlB,CAAKC,EAAA,EAAOvG,YAAA,CACZ+I,KAAAtC,aACAiC,KAAA,EACAM,OAjJA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA8B,WAAA7B,EAAAC,MAiJAlB,CAAKC,EAAA,EAAOtG,YAAA,CACZ8I,KAAAtC,aACAiC,KAAA,GACAM,OAjJA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA+B,WAAA9B,EAAAC,MAiJAlB,CAAKC,EAAA,EAAOrG,YAAA,CACZ6I,KAAAtC,aACAiC,KAAA,GACAM,OAjJA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAgC,WAAA/B,EAAAC,MAiJAlB,CAAKC,EAAA,EAAOpG,KAAA,CACZ4I,KAAAH,WACAF,KAAA,EACAM,OAAA3B,EACA6B,YAAAxB,GAEApB,CAAKC,EAAA,EAAOnG,UAAA,CAAa2I,KAAAH,WAAAF,KAAA,EAAAM,OAAApB,GACzBtB,CAAKC,EAAA,EAAOlG,UAAA,CAAa0I,KAAAH,WAAAF,KAAA,GAAAM,OAAAlB,GACzBxB,CAAKC,EAAA,EAAOjG,UAAA,CAAayI,KAAAH,WAAAF,KAAA,GAAAM,OAAAhB,GACzB1B,CAAKC,EAAA,EAAO5E,cAAA,CACZoH,KAAAQ,YACAb,KAAA,EACAM,OAjIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAkC,WAAAjC,EAAAC,KAgIA0B,YA7HA,SAAA5B,EAAAC,GACA,OAAAC,IACAF,EAAAmC,YAAAlC,EAAAC,MA6HAlB,CAAKC,EAAA,EAAO3E,mBAAA,CACZmH,KAAAQ,YACAb,KAAA,EACAM,OA7HA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAoC,YAAAnC,EAAAC,MA6HAlB,CAAKC,EAAA,EAAO1E,mBAAA,CACZkH,KAAAQ,YACAb,KAAA,GACAM,OA7HA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAqC,YAAApC,EAAAC,MA6HAlB,CAAKC,EAAA,EAAOzE,mBAAA,CACZiH,KAAAQ,YACAb,KAAA,GACAM,OA7HA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAsC,YAAArC,EAAAC,MA6HAlB,CAAKC,EAAA,EAAOhG,MAAA,CACZwI,KAAAQ,YACAb,KAAA,EACAM,OAAA3B,EACA6B,YAAAxB,GAEApB,CAAKC,EAAA,EAAO/F,WAAA,CAAcuI,KAAAQ,YAAAb,KAAA,EAAAM,OAAApB,GAC1BtB,CAAKC,EAAA,EAAO9F,WAAA,CAAcsI,KAAAQ,YAAAb,KAAA,GAAAM,OAAAlB,GAC1BxB,CAAKC,EAAA,EAAO7F,WAAA,CAAcqI,KAAAQ,YAAAb,KAAA,GAAAM,OAAAhB,GAC1B1B,CAAKC,EAAA,EAAO5F,YAAA,CACZoI,KAAAtC,aACAiC,KAAA,GACAM,OAtIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAuC,iBAAAtC,GAAA,EAAAC,MAsIAlB,CAAKC,EAAA,EAAO3F,YAAA,CACZmI,KAAAtC,aACAiC,KAAA,GACAM,OAtIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAwC,iBAAAvC,GAAA,EAAAC,MAsIAlB,CAAKC,EAAA,EAAO1F,YAAA,CACZkI,KAAAtC,aACAiC,KAAA,GACAM,OAtIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAAyC,iBAAAxC,GAAA,EAAAC,MAsIAlB,CAAKC,EAAA,EAAOrF,cAAA,CACZ6H,KAAAtC,aACAiC,KAAA,GACAM,OAtIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA0C,mBAAAzC,GAAA,EAAAC,MAsIAlB,CAAKC,EAAA,EAAOpF,cAAA,CACZ4H,KAAAtC,aACAiC,KAAA,GACAM,OAjIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA2C,mBAAA1C,GAAA,EAAAC,MAiIAlB,CAAKC,EAAA,EAAOnF,cAAA,CACZ2H,KAAAtC,aACAiC,KAAA,GACAM,OA3IA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA4C,mBAAA3C,GAAA,EAAAC,MA2IAlB,CAAKC,EAAA,EAAOlF,cAAA,CACZ0H,KAAAtC,aACAiC,KAAA,GACAM,OAjIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA6C,mBAAA5C,GAAA,EAAAC,MAiIAlB,CAAKC,EAAA,EAAOjF,cAAA,CACZyH,KAAAtC,aACAiC,KAAA,GACAM,OA3IA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA8C,mBAAA7C,GAAA,EAAAC,MA2IAlB,CAAKC,EAAA,EAAOhF,cAAA,CACZwH,KAAAtC,aACAiC,KAAA,GACAM,OAtIA,SAAA1B,EAAAC,GACA,OAAAC,IACAF,EAAA+C,mBAAA9C,GAAA,EAAAC,MAsIAlB,CAAKC,EAAA,EAAOzF,YAAA,CACZiI,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAOhE,YAE1B+D,CAAKC,EAAA,EAAOxF,cAAA,CACZgI,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO/D,kBAE1B8D,CAAKC,EAAA,EAAOvF,YAAA,CACZ+H,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO9D,YAE1B6D,CAAKC,EAAA,EAAOtF,mBAAA,CACZ8H,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAOhE,YAE1B+D,CAAKC,EAAA,EAAO/E,kBAAA,CACZuH,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO7D,kBAE1B4D,CAAKC,EAAA,EAAO9E,yBAAA,CACZsH,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO7D,kBAE1B4D,CAAKC,EAAA,EAAO7E,qBAAA,CACZqH,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO/D,kBAE1B8D,CAAKC,EAAA,EAAOxE,gBAAA,CACZgH,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAOhE,YAE1B+D,CAAKC,EAAA,EAAOvE,gBAAA,CACZ+G,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO9D,YAE1B6D,CAAKC,EAAA,EAAOtE,kBAAA,CACZ8G,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO/D,kBAE1B8D,CAAKC,EAAA,EAAOrE,sBAAA,CACZ6G,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO7D,kBAE1B4D,CAAKC,EAAA,EAAOpE,yBAAA,CACZ4G,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAOhE,YAE1B+D,CAAKC,EAAA,EAAOnE,yBAAA,CACZ2G,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO9D,YAE1B6D,CAAKC,EAAA,EAAOlE,2BAAA,CACZ0G,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO/D,kBAE1B8D,CAAKC,EAAA,EAAOjE,+BAAA,CACZyG,KAAA,KACAL,KAAA,EACAM,OAAAd,EACAgB,YAAAT,EACArB,UAAmBb,EAAA,EAAO7D,mBAG1B,SAAA4H,EAAAhD,EAAAC,EAAAgD,GACA,OAAAC,IACAlD,EAAAmD,WAAAnD,EAAAoD,aAAAF,EAAAhE,QACAc,EAAAqD,wBAAApD,GACAD,EAAAsD,oBAAArD,EAAAgD,EAAAM,SAA4DtE,EAAA,EAAOxG,MAAAyK,EAAAM,YAAA,EAAAN,EAAAO,QAAA,EAAAP,EAAAQ,QAAA,IAGnE,SAAAC,EAAA3D,EAAAC,EAAAgD,GACA,OAAAC,IACAlD,EAAAmD,WAAAnD,EAAAoD,aAAAF,EAAAhE,QACAc,EAAAqD,wBAAApD,GACAD,EAAA4D,qBAAA3D,EAAAgD,EAAAM,SAA6DtE,EAAA,EAAOpG,IAAAqK,EAAAO,QAAA,EAAAP,EAAAQ,QAAA,IAGpE,SAAAG,EAAA7D,EAAAC,EAAAgD,GACA,MAAAa,EAAAb,EAAA7B,KACA2C,EAAAd,EAAAc,MACA,OAAAb,IACAlD,EAAAmD,WAAAnD,EAAAoD,aAAAF,EAAAhE,QACA,MAAA8E,EAAAF,EACA1C,EAAA4C,EAAAD,EAEAN,EADA5D,EAAiCZ,EAAA,EAAOxG,OACxC2I,KAAA4C,EACAR,EAAAN,EAAAM,YAAA,EACAE,EAAAR,EAAAQ,QAAA,EACAO,EAAAR,EAAAM,EACA,QAAA7N,EAAA,EAAuBA,EAAA6N,IAAW7N,EAClC8J,EAAAqD,wBAAApD,EAAA/J,GACA8J,EAAAsD,oBAAArD,EAAA/J,EAAAkL,EAAuDnC,EAAA,EAAOxG,MAAA+K,EAAAC,EAAAC,EAAAO,EAAA/N,IAI9D,MAAAgO,EAAA,CACAlF,CAAKC,EAAA,EAAOxG,OAAA,CAAU2I,KAAA,EAAAM,OAAAsB,EAAAO,SAAA,GACtBvE,CAAKC,EAAA,EAAOvG,YAAA,CAAe0I,KAAA,EAAAM,OAAAsB,EAAAO,SAAA,GAC3BvE,CAAKC,EAAA,EAAOtG,YAAA,CAAeyI,KAAA,GAAAM,OAAAsB,EAAAO,SAAA,GAC3BvE,CAAKC,EAAA,EAAOrG,YAAA,CAAewI,KAAA,GAAAM,OAAAsB,EAAAO,SAAA,GAC3BvE,CAAKC,EAAA,EAAOpG,KAAA,CAAQuI,KAAA,EAAAM,OAAAiC,EAAAJ,SAAA,GACpBvE,CAAKC,EAAA,EAAOnG,UAAA,CAAasI,KAAA,EAAAM,OAAAiC,EAAAJ,SAAA,GACzBvE,CAAKC,EAAA,EAAOlG,UAAA,CAAaqI,KAAA,GAAAM,OAAAiC,EAAAJ,SAAA,GACzBvE,CAAKC,EAAA,EAAOjG,UAAA,CAAaoI,KAAA,GAAAM,OAAAiC,EAAAJ,SAAA,GACzBvE,CAAKC,EAAA,EAAO5E,cAAA,CAAiB+G,KAAA,EAAAM,OAAAiC,EAAAJ,SAAA,GAC7BvE,CAAKC,EAAA,EAAO3E,mBAAA,CACZ8G,KAAA,EACAM,OAAAiC,EACAJ,SAAA,GAEAvE,CAAKC,EAAA,EAAO1E,mBAAA,CACZ6G,KAAA,GACAM,OAAAiC,EACAJ,SAAA,GAEAvE,CAAKC,EAAA,EAAOzE,mBAAA,CACZ4G,KAAA,GACAM,OAAAiC,EACAJ,SAAA,GAEAvE,CAAKC,EAAA,EAAOhG,MAAA,CAASmI,KAAA,EAAAM,OAAAiC,EAAAJ,SAAA,GACrBvE,CAAKC,EAAA,EAAO/F,WAAA,CAAckI,KAAA,EAAAM,OAAAiC,EAAAJ,SAAA,GAC1BvE,CAAKC,EAAA,EAAO9F,WAAA,CAAciI,KAAA,GAAAM,OAAAiC,EAAAJ,SAAA,GAC1BvE,CAAKC,EAAA,EAAO7F,WAAA,CAAcgI,KAAA,GAAAM,OAAAiC,EAAAJ,SAAA,GAC1BvE,CAAKC,EAAA,EAAO5F,YAAA,CAAe+H,KAAA,EAAAM,OAAAmC,EAAAE,MAAA,GAC3B/E,CAAKC,EAAA,EAAO3F,YAAA,CAAe8H,KAAA,EAAAM,OAAAmC,EAAAE,MAAA,GAC3B/E,CAAKC,EAAA,EAAO1F,YAAA,CAAe6H,KAAA,GAAAM,OAAAmC,EAAAE,MAAA,IA2EfI,UACAC,WACAC,WACAC,YACAhD,WACAW,YACA9C,aACAmF,YACAA,YACAA,YACAA,YACArC,YACAA,YACAA,YACAA,YACAA,YAyDL,SAAAsC,EAAAvE,EAAAwE,GACP,GAAAA,EAAAC,OACA,UAAAC,KAAAF,EAAAC,OACAzE,EAAAyE,OAAAC,GAGA,GAAAF,EAAAG,QACA,UAAAD,KAAAF,EAAAG,QACA3E,EAAA2E,QAAAD,GAGAF,EAAAI,WACA5E,EAAA4E,UAAAC,MAAA7E,EAAAwE,EAAAI,WAEA,MAAAJ,EAAAM,WACA9E,EAAA8E,UAAAN,EAAAM,WAEA,MAAAN,EAAAO,UACA/E,EAAA+E,SAAAP,EAAAO,UAEA,MAAAP,EAAAQ,WACAhF,EAAAgF,UAAAR,EAAAQ,WAEA,MAAAR,EAAAS,WACAjF,EAAAiF,UAAAT,EAAAS,WAEAT,EAAAU,WACAlF,EAAAkF,UAAAL,MAAA7E,EAAAwE,EAAAU,WAEA,MAAAV,EAAAW,WACAnF,EAAAmF,UAAAX,EAAAW,WAEAX,EAAAY,YACApF,EAAAoF,WAAAP,MAAA7E,EAAAwE,EAAAY,YAEA,MAAAZ,EAAAa,YACArF,EAAAqF,WAAAb,EAAAa,YAEA,MAAAb,EAAAc,WACAtF,EAAAuF,MAAAf,EAAAc,WAGO,SAAAE,EAAAxF,EAAAwE,GACP,GAAAA,EAAAC,OACA,UAAAC,KAAAF,EAAAC,OACAzE,EAAA2E,QAAAD,GAGA,GAAAF,EAAAG,QACA,UAAAD,KAAAF,EAAAG,QACA3E,EAAAyE,OAAAC,GC7mBA,IAAAe,EAAA,EACO,MAAMC,EACb1G,YAAA2G,EAAAC,EAAA,OAAAH,KACAI,KAAAF,WACAE,KAAAD,KAEA5G,OAAA8G,GACA,MAAA9F,EAAA6F,KAAAF,SAAA3F,GACA8F,EAAAzG,WACAwG,KAAAE,UAAA/F,EAAA8F,EAAAzG,WAEAyG,EAAAxG,YACAuG,KAAAG,WAAAF,EAAAxG,WAEAuG,KAAAI,SAAAJ,KAAAI,UAAA,GACA,UAAAL,KAAAE,EAAA/G,QAAA,CACA,MAAAmH,EAAAJ,EAAA/G,QAAA6G,GACA,MAAAC,KAAAI,SAAAL,KACAC,KAAAI,SAAAL,GAAA,CACA1G,OAAAc,EAAAmG,iBAGAnG,EAAAmD,WAAAnD,EAAAoD,aAAAyC,KAAAI,SAAAL,GAAA1G,QACAc,EAAAoG,WAAApG,EAAAoD,aAAA8C,EAAAhH,OAAAc,GAAAkG,EAAA9G,WAAA,oBAEA,GAAA0G,EAAAO,SAAA,CACA,MAAAnH,EAAA4G,EAAAO,SAAAnH,OACA,MAAA2G,KAAAS,YACAT,KAAAS,UAAA,CACApH,OAAAc,EAAAmG,eACAI,OAAA,OAGAV,KAAAS,UAAAC,ODmeO,SAAAC,GACP,GAAAA,aAAArC,UACA,OAAelF,EAAA,EAAO5D,KAEtB,GAAAmL,aAAApC,WACA,OAAenF,EAAA,EAAO3D,cAEtB,GAAAkL,aAAAC,kBACA,OAAexH,EAAA,EAAO3D,cAEtB,GAAAkL,aAAAnC,WACA,OAAepF,EAAA,EAAO1D,MAEtB,GAAAiL,aAAAlC,YACA,OAAerF,EAAA,EAAOzD,eAEtB,GAAAgL,aAAAlF,WACA,OAAerC,EAAA,EAAOpG,IAEtB,GAAA2N,aAAAvE,YACA,OAAehD,EAAA,EAAO5E,aAEtB,GAAAmM,aAAArH,aACA,OAAeF,EAAA,EAAOxG,MAEtB,UAAAiO,MAAA,gCC5foCC,CAAsBzH,GAC1Dc,EAAAmD,WAAAnD,EAAA4G,qBAAAf,KAAAS,UAAApH,QACAc,EAAAoG,WAAApG,EAAA4G,qBAAA1H,EAAAc,GAAA8F,EAAAO,SAAAjH,WAAA,oBAEA,OAAAyG,KAEA7G,UACA,MAAAgB,EAAA6F,KAAAF,SAAA3F,GACA,UAAA4F,KAAAC,KAAAI,SACAjG,EAAA6G,aAAAhB,KAAAI,SAAAL,GAAA1G,QAEA2G,KAAAI,SAAA,GACAJ,KAAAS,YACAtG,EAAA6G,aAAAhB,KAAAS,UAAApH,QACA2G,KAAAS,eAAAQ,sBC/CA,IAAAC,EAAA,EACO,MAAMC,EACbhI,YAAA2G,EAAAC,EAAA,UAAAmB,KACAlB,KAAAF,WACAE,KAAAD,KACAC,KAAA3E,SAAA,KACA2E,KAAAoB,MAAA,GAEAjI,OAAA8G,GACA,MAAA9F,EAAA6F,KAAAF,SAAA3F,GAKA,GAJA,MAAA6F,KAAA3E,WACA2E,KAAA3E,SAAAlB,EAAAkH,iBAEAlH,EAAAiB,YAAAjB,EAAA/E,WAAA4K,KAAA3E,UACA4E,EAAApH,MAAAoH,EAAApH,OAAAmH,KAAAoB,MAAAvI,MACAoH,EAAAqB,OAAArB,EAAAqB,QAAAtB,KAAAoB,MAAAE,OACArB,EAAAsB,OAAAtB,EAAAsB,QAAAvB,KAAAoB,MAAAG,MAAA,CACA,IAAAD,EAAAC,EACAtB,EAAApH,KACAyI,EAAAC,EAAAtB,EAAApH,MAGA0I,EAAAtB,EAAAsB,OAAsC3I,EAAsBC,KAC5DyI,EAAArB,EAAAqB,OAAsC1I,EAAsBC,MAE5DsB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAsH,eAAAtH,EAAAmH,IACAnH,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAuH,eAAAvH,EAAAoH,SAEAvB,KAAAoB,MAAAvI,MAAAmH,KAAAoB,MAAAE,OAAAtB,KAAAoB,MAAAG,QACAvB,KAAAoB,MAAAvI,KAAAmH,KAAAoB,MAAAG,MAAAvB,KAAAoB,MAAAE,MAAoE1I,EAAsBC,KAC1FsB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAsH,eAAAtH,EAAA6F,KAAAoB,MAAAvI,OACAsB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAuH,eAAAvH,EAAA6F,KAAAoB,MAAAvI,QAiCA,OA/BAoH,EAAAlH,WAAAkH,EAAAlH,YAAAiH,KAAAoB,MAAArI,UACAoB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAwH,mBAAAxH,EAAA8F,EAAAlH,YAEAiH,KAAAoB,MAAArI,YACAiH,KAAAoB,MAAArI,UAAmCH,EAAsBG,UACzDoB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAwH,mBAAAxH,EAAA6F,KAAAoB,MAAArI,aAEAkH,EAAAnH,WAAAmH,EAAAnH,YAAAkH,KAAAoB,MAAAtI,UACAqB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAyH,mBAAAzH,EAAA8F,EAAAnH,YAEAkH,KAAAoB,MAAAtI,YACAkH,KAAAoB,MAAAtI,UAAmCF,EAAsBE,UACzDqB,EAAAqH,cAAArH,EAAA/E,WAAA+E,EAAAyH,mBAAAzH,EAAA6F,KAAAoB,MAAAtI,aAEAmH,EAAA4B,OACA1H,EAAA2H,WAAA3H,EAAA/E,WAAA,EAAA+E,EAAA4H,KAAA5H,EAAA4H,KAAA5H,EAAA1E,cAAAwK,EAAA4B,YAEAZ,IAAAhB,QACA9F,EAAA2H,WAAA3H,EAAA/E,WAAA,YAAA6K,EAAAlG,MAAAiG,KAAAF,SAAAkC,SACA7H,EAAA8H,QACA9H,EAAA4H,KAAA9B,EAAAzJ,MACAyJ,EAAAtJ,OAAA,EAAAwD,EAAA4H,KAAA5H,EAAA8F,EAAAlG,MAAA,iBAAAkG,QAEA,MAAAA,EAAAiC,OAAAjC,EAAAiC,QAAAlC,KAAAoB,MAAAc,OACA/H,EAAAgI,YAAAhI,EAAAiI,oBAAAnC,EAAAiC,OAEAjC,EAAAnH,WAAAmH,EAAAnH,UAAAuJ,QAAA,aACAlI,EAAAmI,eAAAnI,EAAA/E,YAEA+E,EAAAiB,YAAAjB,EAAA/E,WAAA,MACArE,OAAAwR,OAAAvC,KAAAoB,MAAAnB,GACAD,KAEA7G,UACA6G,KAAAF,SAAA3F,GAAAqI,cAAAxC,KAAA3E,UACA2E,KAAAoB,MAAA,GACApB,KAAA3E,SAAA,MCpEA,IAAIoH,EAAW,EACR,MAAMC,EACbvJ,YAAA2G,EAAAC,EAAA,OAAwC0C,KACxCzC,KAAAF,WACAE,KAAAD,KACAC,KAAAxJ,MAAA,EACAwJ,KAAArJ,OAAA,EACAqJ,KAAA2C,YAAA,KACA3C,KAAAtE,SAAA,GACAsE,KAAA4C,YAAA,KACA5C,KAAA6C,gBAAA,GACA7C,KAAAoB,MAAA,GAEAjI,OAAA8G,GACA,MAAA9F,EAAA6F,KAAAF,SAAA3F,GACA3D,EAAAyJ,EAAAzJ,OAAAwJ,KAAAxJ,MACAG,EAAAsJ,EAAAtJ,QAAAqJ,KAAArJ,OACA,IAAAH,IAAAG,EACA,OAAAqJ,KAEA,GAAAxJ,IAAAwJ,KAAAxJ,OAAAG,IAAAqJ,KAAArJ,OAAA,CACA,IAAAsJ,EAAA4C,gBACA,OAAA7C,KACA,GAAAC,EAAA4C,gBAAAC,SAAA9C,KAAA6C,gBAAAC,QACA9C,KAAA6C,gBAAAE,MAAA,CAAAC,EAAA3S,IAAuDU,OAAAkS,EAAA,EAAAlS,CAAWiS,EAAA/C,EAAA4C,gBAAAxS,KAClE,OAAA2P,KAGA,MAAAA,KAAA2C,cACA3C,KAAA2C,YAAAxI,EAAA+I,qBAEA/I,EAAAgJ,gBAAAhJ,EAAAiJ,YAAApD,KAAA2C,aACA1C,EAAA4C,iBAAA5C,EAAA4C,gBAAAC,SACA9C,KAAA6C,gBAAA5C,EAAA4C,gBACA7C,KAAA6C,gBAAAQ,KAAA9R,GAAA,UAAAA,EAAAwI,QACAiG,KAAAF,SAAAkC,SACA7H,EAAAmJ,aAAA,0BAGAnJ,EAAAmJ,aAAA,uBAIA,MAAAC,EAAAvD,KAAA6C,gBAAAC,QAAA,EACAU,EAAA,CAAArJ,EAAAsJ,mBACA,GAAAF,EAAA,GACA,IAAAG,EACA1D,KAAAF,SAAAkC,WACA0B,EAAAvJ,EAAAmJ,aAAA,uBAEA,MAAAK,EAAA3D,KAAAF,SAAAkC,SACA7H,EAAAsJ,kBACAC,EAAAE,wBACA,QAAAvT,EAAA,EAA2BA,EAAAkT,EAAclT,IACzCmT,EAAAnT,GAAAsT,EAAAtT,EAEA2P,KAAAF,SAAAkC,SACA7H,EAAA0J,YAAAL,GACAE,EAAAI,iBAAAN,GAEA,QAAAnT,EAAA,EAAuBA,EAAAkT,EAAclT,IAAA,CACrC2P,KAAAtE,SAAArL,KACA2P,KAAAtE,SAAArL,GAAA,IAAuC8Q,EAAOnB,KAAAF,SAAAE,KAAAD,GAAA,WAAA1P,IAE9C,MAAA4K,EAAA+E,KAAAtE,SAAArL,GACA4K,EAAA8I,OAAAhT,OAAAwR,OAAA,CAA0CzJ,UAAA,UAAAC,UAAA,WAA6CiH,KAAA6C,gBAAAxS,GAAA,CAA4B4P,KAAA,KAAAzJ,QACnHG,YACAwD,EAAA6J,qBAAA7J,EAAAiJ,YAAAI,EAAAnT,GAAA8J,EAAA/E,WAAA6F,EAAAI,SAAA,GAEA,MAAA2E,KAAA4C,cACA5C,KAAA4C,YAAAzI,EAAA8J,sBAEA9J,EAAA+J,iBAAA/J,EAAAgK,aAAAnE,KAAA4C,aACAzI,EAAAiK,oBAAAjK,EAAAgK,aAAAhK,EAAAkK,kBAAA7N,EAAAG,GACAwD,EAAAmK,wBAAAnK,EAAAiJ,YAAAjJ,EAAAoK,iBAAApK,EAAAgK,aAAAnE,KAAA4C,aACA,MAAA4B,EAAArK,EAAAsK,uBAAAtK,EAAAiJ,aAUA,OATAoB,IAAArK,EAAAuK,sBACAC,QAAAC,MAAA,oBAAAJ,EAAAvE,GAEA9F,EAAAgJ,gBAAAhJ,EAAAiJ,YAAA,MACAjJ,EAAAiB,YAAAjB,EAAA/E,WAAA,MACA+E,EAAA+J,iBAAA/J,EAAAgK,aAAA,MACApT,OAAAwR,OAAAvC,KAAAoB,MAAAnB,GACAD,KAAAxJ,QACAwJ,KAAArJ,SACAqJ,KAEA7G,UACA,MAAAgB,EAAA6F,KAAAF,SAAA3F,GACAA,EAAA0K,kBAAA7E,KAAA2C,aACAxI,EAAA2K,mBAAA9E,KAAA4C,aACA,UAAA3H,KAAA+E,KAAAtE,SACAvB,EAAAqI,cAAAvH,GAEA+E,KAAAtE,SAAA,GACAsE,KAAA2C,YAAA,KACA3C,KAAA4C,YAAA,KACA5C,KAAAoB,MAAA,GACApB,KAAA6C,gBAAA,GACA7C,KAAAxJ,MAAA,EACAwJ,KAAArJ,OAAA,GCnGA,IAAAoO,EAAA,EACO,MAAMC,EACb7L,YAAA2G,EAAAC,EAAA,QAAAgF,KACA/E,KAAAF,WACAE,KAAAD,KACAC,KAAAxJ,MAAA,EACAwJ,KAAArJ,OAAA,EACAqJ,KAAAiF,OAAA,GACAjF,KAAAoB,MAAA,GACApB,KAAAkF,SAAA,GACAlF,KAAAmF,UAAA,GAEAhM,MAAA9I,EAAA,GACA,OAAA2P,KAAAkF,SAAApC,QACA9C,KAAAkF,SAAAlF,KAAAkF,SAAApC,OAAA,GAAApH,SAAArL,IACA2P,KAAAmF,UAAA9U,GAEA8I,OAAA8G,EAAA,IACA,MAAA9F,EAAA6F,KAAAF,SAAA3F,GACA8K,EAAAG,MAAAC,QAAApF,EAAAgF,QACAhF,EAAAgF,OACAhF,EAAAgF,OACA,CAAAhF,EAAAgF,QACAjF,KAAAiF,OACAK,EAAArF,EAAAqF,iBAAAtF,KAAAoB,MAAAkE,gBACAC,EAAAN,EAAAO,OAAA,CAAAtH,EAAAuH,IAAAvH,GAAAuH,EAAAC,UAAA5C,QAAA,MACA6C,EAAAL,GAAAC,EAAA,IAAAA,EACA/O,EAAAyJ,EAAAzJ,OAAAwJ,KAAAoB,MAAA5K,OAAA2D,EAAAyL,mBACAjP,EAAAsJ,EAAAtJ,QAAAqJ,KAAAoB,MAAAzK,QAAAwD,EAAA0L,oBACAF,IAAA3F,KAAAkF,SAAApC,QACA9C,KAAA8F,kBAEA,MAAAC,EAAAhV,OAAAwR,OAAA,GAA2CtC,EAAA,CAASzJ,QAAAG,WAsBpD,OArBAqJ,KAAAkF,SAAApC,QAAA6C,EAAA,EACA3F,KAAAkF,SAA4BnU,OAAAiV,EAAA,EAAAjV,CAAKV,GAAA,IAAUqS,EAAY1C,KAAAF,SAAAE,KAAAD,GAAA,WAAA1P,EAAA,IAAA0T,OAAAgC,GAAAJ,GAEvD3F,KAAAkF,SAAApC,QACA9C,KAAAkF,SAAAe,QAAA1U,IACAA,EAAAwS,OAAAgC,KAGA9F,EAAAhF,UAEA+E,KAAAmF,UAAA,KACAnF,KAAAmF,UAAA,OAAwChE,EAAOnB,KAAAF,SAAAE,KAAAD,GAAA,cAE/CE,EAAAhF,QAAAzE,MAAAyJ,EAAAhF,QAAAzE,SACAyJ,EAAAhF,QAAAtE,OAAAsJ,EAAAhF,QAAAtE,UACAqJ,KAAAmF,UAAA,GAAApB,OAAA9D,EAAAhF,UAEAlK,OAAAwR,OAAAvC,KAAAoB,MAAAnB,GACAD,KAAAiF,SACAjF,KAAAxJ,QACAwJ,KAAArJ,SACAqJ,KAEA7G,UACA6G,KAAA8F,kBACA9F,KAAAmF,UAAAc,QAAAC,KAAAC,WACAnG,KAAAmF,UAAA,GACAnF,KAAAoB,MAAA,GACApB,KAAAiF,OAAA,GACAjF,KAAAxJ,MAAA,EACAwJ,KAAArJ,OAAA,EAEAwC,kBACA6G,KAAAkF,SAAAe,QAAA1U,KAAA4U,WACAnG,KAAAkF,SAAA,GAEA/L,eACA,GAAA6G,KAAAkF,SAAApC,OAAA,GACA,MAAAsD,EAAApG,KAAAkF,SAAA,GACAlF,KAAAkF,SAAA,GAAAlF,KAAAkF,SAAA,GACAlF,KAAAkF,SAAA,GAAAkB,IC5EA,IAAIC,EAAU,EACP,MAAAC,EACPnN,YAAA4G,EAAA,eAAsCsG,KACtCrG,KAAAD,KACAC,KAAAuG,SAAA,GACAvG,KAAAoB,MAAA,GACApB,KAAA0F,UAAA,GAEAvM,OAAA8G,GAMA,GALAA,EAAAsG,WACAvG,KAAAuG,SAAAnB,MAAAC,QAAApF,EAAAsG,UACAtG,EAAAsG,SACA,CAAAtG,EAAAsG,WAEAtG,EAAApG,KAAA,CACA,MAAA2M,EAAAxG,KAAAuG,UAAAvG,KAAAuG,SAAA,GACAC,GACAA,EAAAC,MAAA1C,OAAA,CAAqClK,KAAAoG,EAAApG,OASrC,OANAoG,EAAAyG,WACA1G,KAAA0F,UAAAN,MAAAC,QAAApF,EAAAyG,UACAzG,EAAAyG,SACA,CAAAzG,EAAAyG,WAEA3V,OAAAwR,OAAAvC,KAAAoB,MAAAnB,GACAD,KAEA7G,UACA,UAAAqN,KAAAxG,KAAAuG,SACAC,EAAAL,UAEAnG,KAAAoB,MAAAmF,SAAA,GACAvG,KAAAoB,MAAA,GACApB,KAAA0F,UAAA,ICjCA,IAAAiB,EAAA,EACO,MAAMC,EACbzN,YAAA2G,EAAAC,EAAA,QAAA4G,KACA3G,KAAAF,WACAE,KAAAD,KAEA5G,OAAA8G,GACA,MAAA9F,EAAA6F,KAAAF,SAAA3F,GACA0M,EAAA5G,EAAApG,MAAAoG,EAAApG,KAAAiN,QAAA9G,KAAA6G,WACAE,EAAA9G,EAAArG,MAAAqG,EAAArG,KAAAkN,QAAA9G,KAAA+G,WACA,IAAAF,IACAE,GACAF,IAAA7G,KAAA6G,YAAAE,IAAA/G,KAAA+G,WACA,OAAA/G,KAEAA,KAAAmG,UACAU,EAAAxE,QAAA,2BACAlI,EAAAmJ,aAAA,sBAEA,MAAA0D,EAAA7M,EAAA8M,gBACApN,EAAAM,EAAA+M,aAAA/M,EAAAgN,iBACAvN,EAAAO,EAAA+M,aAAA/M,EAAAiN,eACA,GAAAJ,GAAApN,GAAAC,EAAA,CAmBA,GAjBAmG,KAAAqH,SAAAL,EACAhH,KAAAsH,MAAAzN,EACAmG,KAAAuH,MAAA3N,EACAO,EAAAqN,aAAAR,EAAApN,GACAO,EAAAqN,aAAAR,EAAAnN,GACAM,EAAAsN,aAAA7N,EAAAmN,GACA5M,EAAAsN,aAAA5N,EAAAgN,GACA1M,EAAAuN,cAAA9N,GACAO,EAAAuN,cAAA7N,GACAM,EAAAwN,mBAAA/N,EAAAO,EAAAyN,iBACAjD,QAAAC,MAAA,mCAAAzK,EAAA0N,iBAAAjO,GAAAkO,EAAAf,IAEA5M,EAAAwN,mBAAA9N,EAAAM,EAAAyN,iBACAjD,QAAAC,MAAA,qCAAAzK,EAAA0N,iBAAAhO,GAAAiO,EAAAjB,IAEA1M,EAAA4N,YAAAf,IACA7M,EAAA6N,oBAAAhB,EAAA7M,EAAA8N,aACA,CACA,MAAAC,EAAA/N,EAAAgO,kBAAAnB,GACArC,QAAAC,MAAA,4BAAAsD,GAMA,OAJAlI,KAAAoI,gBN6XO,SAAAjO,EAAA6M,GACP,IAAAqB,EAAA,EACA,SAAAC,EAAAtB,EAAAuB,GACA,MAAAnO,EAAAD,EAAAqO,mBAAAxB,EAAAuB,EAAA3X,MACAyU,EAAAkD,EAAAhN,KAAA,WAAAgN,EAAA3X,KAAA6X,QAAA,GACA1O,EAAAwO,EAAAxO,KACAqD,EAAApD,EAAAD,GACA,IAAAqD,EACA,UAAAyD,MAAA,mBAAA9G,EAAA2O,SAAA,KAEA,SAAAtO,EACA,OAEA,IAAAyB,EACA,GArSA,OAqSAuB,EArSAxB,KAqSA,CAEA,MAAAZ,EAAAqN,EACAA,GAAAE,EAAAhN,KAEAM,EADAwJ,EACAjI,EAAArB,YAAA5B,EAAAJ,EAAAiB,EAAAZ,EAAAmO,EAAAhN,MAGA6B,EAAAvB,OAAA1B,EAAAJ,EAAAiB,EAAAZ,QAKAyB,EADAuB,EAAArB,aAAAsJ,EACAjI,EAAArB,YAAA5B,EAAAC,GAGAgD,EAAAvB,OAAA1B,EAAAC,GAGA,OAAgByB,SAAAzB,YAEhB,MAAAuO,EAAA,GACAC,EAAAzO,EAAA6N,oBAAAhB,EAAA7M,EAAA0O,iBACA,QAAAxY,EAAA,EAAmBA,EAAAuY,IAAiBvY,EAAA,CACpC,MAAAkY,EAAApO,EAAA2O,iBAAA9B,EAAA3W,GACA,IAAAkY,EACA,SAEA,IAAA3X,EAAA2X,EAAA3X,KAKA,GAHA,QAAAA,EAAA6X,QAAA,KACA7X,IAAA6X,OAAA,EAAA7X,EAAAkS,OAAA,IAEAkE,EAAA,CACA,MAAAnL,EAAAyM,EAAAtB,EAAAuB,GACA1M,IACA8M,EAAA/X,GAAAiL,IAIA,OAAA8M,EMnb+BI,CAAoB5O,EAAA6M,GACnDhH,KAAAgJ,kBNobO,SAAA7O,EAAA6M,GACP,MAAAiC,EAAA,GACAC,EAAA/O,EAAA6N,oBAAAhB,EAAA7M,EAAAgP,mBACA,QAAA9Y,EAAA,EAAmBA,EAAA6Y,EAAgB7Y,IAAA,CACnC,MAAA+Y,EAAAjP,EAAAkP,gBAAArC,EAAA3W,GACA,IAAA+Y,EACA,MAEA,MAAAhP,EAAAD,EAAAmP,kBAAAtC,EAAAoC,EAAAxY,MACAwM,EAAAiB,EAAA+K,EAAArP,MACA8B,EAAAuB,EAAAvB,OAAA1B,EAAAC,EAAAgD,GACA6L,EAAAG,EAAAxY,MAAA,CAA0CiL,SAAAzB,YAE1C,OAAA6O,EMjciCM,CAAsBpP,EAAA6M,GACvDhH,KAAA6G,aACA7G,KAAA+G,aACA/G,MAEA7G,UACA,MAAAgB,EAAA6F,KAAAF,SAAA3F,GACAA,EAAAqP,cAAAxJ,KAAAqH,UACAlN,EAAAsP,aAAAzJ,KAAAsH,OACAnN,EAAAsP,aAAAzJ,KAAAuH,OACAvH,KAAA+G,gBAAA9F,EACAjB,KAAA6G,gBAAA5F,EACAjB,KAAAgJ,kBAAA,GACAhJ,KAAAoI,gBAAA,IAGA,SAAAN,EAAA4B,GACA,OAAAA,EACA5C,OACA6C,MAAA,MACAC,IAAA,CAAAC,EAAAxZ,MAAA,OAAAwZ,GACAC,KAAA,MCpEA,IAAAC,EAAA,EACO,MAAAC,EACP7Q,YAAA4G,EAAA,SAAAgK,KACA/J,KAAAD,KACAC,KAAA0F,UAAA,GAEAvM,OAAA8G,GAeA,OAdAA,EAAAgK,eACAjK,KAAAkK,cAAAjK,EAAAgK,cAEAhK,EAAAkK,OACAnK,KAAAmK,KAAAlK,EAAAkK,MAEAlK,EAAAwG,QACAzG,KAAAyG,MAAAxG,EAAAwG,OAEAxG,EAAAyG,WACA1G,KAAA0F,UAAAN,MAAAC,QAAApF,EAAAyG,UACAzG,EAAAyG,SACA,CAAAzG,EAAAyG,WAEA1G,KAEA7G,UACA6G,KAAAmK,MAAAnK,KAAAmK,KAAAhE,UACAnG,KAAAyG,OAAAzG,KAAAyG,MAAAN,UACAnG,KAAAkK,mBAAAjJ,EACAjB,KAAA0F,UAAA,eCnBO,MAAM0E,EACbjR,YAAAkR,EAAAjT,EAAA,IACA4I,KAAAqK,SACArK,KAAAgC,UAAA,EACAhC,KAAAsK,iBAAA,EACA,IAAAnQ,EAAA,KAYA,GAXA/C,EAAAmT,YACApQ,EACAkQ,EAAAG,WAAA,SAAApT,IACAiT,EAAAG,WAAA,sBAAApT,IAEA,MAAA+C,IACA6F,KAAAgC,UAAA,EACA7H,EACAkQ,EAAAG,WAAA,QAAApT,IACAiT,EAAAG,WAAA,qBAAApT,IAEA,MAAA+C,EACA,MAAA0G,MAAA,4BAEAb,KAAA7F,KACA6F,KAAAyK,eAAArT,EAAAqT,gBAAA,EACAzK,KAAAgC,WACAhC,KAAAsK,iBAAAnQ,EAAAuQ,aAAAvQ,EAAAwQ,cAEA3K,KAAAzJ,SACQmI,EAAiBvE,ET5BlB,SAAAA,GACP,OACAoF,WAAA,UACAR,UAAA,CAAA5E,EAAAyQ,UAAAzQ,EAAA0Q,sBSyB8BC,CAAuB3Q,IACrD6F,KAAA+K,YAAA/K,KAAAgL,aAAAjH,OAAoD/K,EAAYC,YAChE+G,KAAAiL,cAAAjL,KAAAkL,mBAEA/R,SAEA,OADQpI,OAAAoa,EAAA,EAAApa,CAAYiP,KAAA7F,GAAAkQ,OAAArK,KAAAyK,gBACpBzK,KAEA7G,UACA6G,KAAAiL,cAAA9E,UACAnG,KAAA+K,YAAA5E,UAEAhN,mBAAA8Q,GAEA,OADQvL,EAAiBsB,KAAA7F,GAAApJ,OAAAwR,OAAA,GAA0B0H,IACnDjK,KAEA7G,WAAA4G,GACA,WAAmBF,EAAIG,KAAAD,GAEvB5G,YAAA4G,GACA,WAAmB6G,EAAK5G,KAAAD,GAExB5G,aAAA4G,GACA,WAAmBiK,EAAMjK,GAEzB5G,iBAAA4G,GACA,MAAA3N,EAAA4N,KAAAoL,aAAArL,GACA,OAAA3N,EAAA2R,OAAA,CACAoG,KAAAnK,KAAA+K,YACAtE,MAAAzG,KAAAqL,YAAAjZ,EAAA2N,GAAA,iBAAAgE,OAAmErK,EAAcC,eAGjFR,YAAA4G,GACA,WAAmBiF,EAAKhF,KAAAD,GAExB5G,YAAA4G,GACA,WAAmBuG,EAAKvG,GAExB5G,aAAA4G,GACA,MAAAzP,EAAA0P,KAAAsL,YAAAvL,GACA,OAAAzP,EAAAyT,OAAA,CACAwC,SAAAvG,KAAAkL,iBAAA5a,EAAAyP,GAAA,mBAGA5G,KAAAqN,EAAA+E,GACA,MAAApR,EAAA6F,KAAA7F,GAIA,OAHAA,EAAAgJ,gBAAAhJ,EAAAiJ,YAAA,MACAjJ,EAAAqR,SAAA,IAAArR,EAAAyL,mBAAAzL,EAAA0L,qBACA4F,EAAAtR,EAAAqM,EAAA+E,GACAvL,KAEA7G,WAAAuS,GACA,UAAAC,KAAAD,EACAE,EAAA5L,KAAA7F,GAAAwR,GAEA,OAAA3L,KAEA7G,QAAAwS,EAAAE,EAAA,GACA,OAAA7L,KAAAyL,KAAAzL,KAAAiL,cAAA,CAA8Ca,OAAAH,EAAAI,MAAAF,MAG9C,SAAAJ,EAAAtR,EAAAqM,EAAA+E,EAAAS,GACA,MAAWvF,QAAA0D,OAAAD,cAAAD,EAAAvE,UAAAgB,GAA8EF,EACzF,IAAAC,IAAA0D,EACA,MAAAtJ,MAAA,+CAEA1G,EAAA8R,WAAAxF,EAAAY,UA2BA,SAAAZ,EAAA0D,GACA,UAAAvZ,KAAAuZ,EAAA/J,SAAA,CACA,MAAAvE,EAAA4K,EAAAuC,kBAAApY,GACAiL,GACAA,SAAAsO,EAAA/J,SAAAxP,KA9BAsb,CAAAzF,EAAA0D,GACAoB,GACAY,EAAA1F,EAAA8E,EAAAS,GAEA/B,GACQvL,EAAiBvE,EAAA8P,GAEzB,QAAA5Z,EAAA,EAAmBA,GAAAqW,EAAA5D,QAAA,GAA4BzS,IAC/C+b,EAAAjS,EAAAqM,EAAAE,EAAArW,GAAA2b,GAEA/B,GACQtK,EAAkBxF,EAAA8P,GAG1B,SAAAmC,EAAAjS,EAAAqM,EAAAE,EAAAsF,GACAtF,GACAyF,EAAA3F,EAAAC,MAAAC,EAAAsF,GAEAxF,EAAA2D,KAAA1J,WAAA,MAAA+F,EAAA2D,KAAA1J,UAAAC,QACAvG,EAAAmD,WAAAnD,EAAA4G,qBAAAyF,EAAA2D,KAAA1J,UAAApH,QACAc,EAAAkS,aAAA7F,EAAA2D,KAAAjK,UAAAsG,EAAA2D,KAAAhK,WAAAqG,EAAA2D,KAAA1J,UAAAC,OAAA,IAGAvG,EAAAmS,WAAA9F,EAAA2D,KAAAjK,UAAA,EAAAsG,EAAA2D,KAAAhK,YAWA,SAAAgM,EAAA1F,EAAAC,EAAAsF,GACA,UAAApb,KAAA8V,EAAA,CACA,MAAA7K,EAAA4K,EAAA2B,gBAAAxX,GACA,GAAAiL,EAAA,CACA,IAAAvK,EAAAoV,EAAA9V,GACA,mBAAAU,IACAA,OAEA,iBAAAA,GAAA0a,EACAnQ,SAAAmQ,EAAA1a,IAGAuK,SAAAvK,KAKA,SAAAib,EAAApS,EAAAsL,EAAAiB,EAAA8F,EAAAV,GACAU,GACArS,EAAAgJ,gBAAAhJ,EAAAiJ,YAAAoJ,EAAA7J,aACAxI,EAAAqR,SAAA,IAAAgB,EAAAhW,MAAAgW,EAAA7V,UAGAwD,EAAAgJ,gBAAAhJ,EAAAiJ,YAAA,MACAjJ,EAAAqR,SAAA,IAAArR,EAAAyL,mBAAAzL,EAAA0L,sBAEAJ,EAAArE,MAAA6I,cACQvL,EAAiBvE,EAAAsL,EAAArE,MAAA6I,cAEzB,UAAAzD,KAAAf,EAAAc,SACAkF,EAAAtR,EAAAqM,EAAAE,EAAAoF,GAEArG,EAAArE,MAAA6I,cACQtK,EAAkBxF,EAAAsL,EAAArE,MAAA6I,cAG1B,SAAA2B,EAAAzR,EAAAwR,GACA,QAAAtb,EAAA,EAAmBA,EAAAsb,EAAA1G,OAAAnC,OAAyBzS,IAAA,CAC5C,MAAAoV,EAAAkG,EAAA1G,OAAA5U,GACAoc,EAAAhH,EAAAC,UAAA5C,QAAA,EACA,QAAA4J,EAAA,EAAuBA,EAAAD,EAAiBC,IAAA,CACxC,MAAAF,EAAAb,EAAAzG,SAAA,GACA8G,EAAA3b,EAAAqc,IAAA,GAAAf,EAAAxG,UAAArC,OACA6I,EAAAxG,UACAwG,EAAAzG,SAAA,IAAAyG,EAAAzG,SAAA,GAAAxJ,SACA6Q,EAAApS,EAAAsL,IAAAC,UAAAgH,GAAAF,EAAAR,GACAL,EAAAgB,iBCtKA,IAAIC,EACAC,EAEG,SAASC,EAAWzC,EAA2BjT,GAErD,OAgHM,SAAciT,EAA2BjT,GAC3CiT,IAAWuC,IACdA,EAAgBvC,EAEhBwC,EAAU,IAAIzC,EAAQC,EAAQjT,GAE9BK,GAAMsV,OAAO1C,OAASA,EAEtB2C,IAAgBA,KAChBC,IAAeA,KACfC,IAAcA,KAEdF,GAAe3W,EAAW,IACzBtF,OAAAoc,EAAA,EAAApc,CAAK,KACJ8b,EAAQpC,eAAiBhT,GAAMsV,OAAOtC,eACtCoC,EAAQtW,SACR6W,GAASC,GAAWC,SAClB,WAGJL,GAAc9V,EACb,CAAEG,QAAS+S,EAAQ7S,mBAAmB,GACtC/G,GAAMgH,GAAMsV,OAAO5V,MAAQ1G,GAG5Byc,GAAanc,OAAAwc,EAAA,EAAAxc,CAASyc,GAAM/V,GAAMsV,OAAOU,KAAOD,IA1IjDE,CAAKrD,EAAQjT,GACNyV,EApBR5c,EAAAU,EAAA0B,EAAA,sBAAAya,IAAA7c,EAAAU,EAAA0B,EAAA,sBAAAsb,KAAA1d,EAAAU,EAAA0B,EAAA,sBAAAub,KAAA3d,EAAAU,EAAA0B,EAAA,sBAAAwb,KAAA5d,EAAAU,EAAA0B,EAAA,sBAAAyb,KAAA7d,EAAAU,EAAA0B,EAAA,sBAAA0b,KAAA9d,EAAAU,EAAA0B,EAAA,sBAAA2b,KAAA/d,EAAAU,EAAA0B,EAAA,sBAAAnB,KAAAjB,EAAAU,EAAA0B,EAAA,sBAAA4b,KAAAhe,EAAAU,EAAA0B,EAAA,sBAAA6b,KAAAje,EAAAU,EAAA0B,EAAA,sBAAA8b,KAAAle,EAAAU,EAAA0B,EAAA,sBAAA+a,KAAAnd,EAAAU,EAAA0B,EAAA,sBAAAgb,KAuBA,MAAMe,GAAgC,GAC/B,SAAST,GAAQd,EAAkB9M,GACzC,OAAOqO,GAAMrO,KAAQqO,GAAMrO,GAAM8M,EAAQ7B,WAAW,QAAUjL,IAG/D,MAAMsO,GAAkC,GACjC,SAAST,GAASf,EAAkB9M,GAC1C,OAAOsO,GAAOtO,KAAQsO,GAAOtO,GAAM8M,EAAQxB,YAAY,SAAWtL,IAGnE,MAAMwG,GAAqC,GACpC,SAASsH,GAAUhB,EAAkB9M,GAC3C,OAAOwG,GAASxG,KAAQwG,GAASxG,GAAM8M,EAAQzB,aAAa,UAAYrL,IAGzE,MAAMuO,GAAkC,GACjC,SAASR,GAASjB,EAAkB9M,GAC1C,OAAOuO,GAAOvO,KAAQuO,GAAOvO,GAAM8M,EAAQvB,YAAY,SAAWvL,IAGnE,MAAMwO,GAAkC,GACjC,SAASR,GAASlB,EAAkB9M,GAC1C,OAAOwO,GAAOxO,KAAQwO,GAAOxO,GAAM8M,EAAQ2B,YAAY,SAAWzO,IAGnE,MAAM0O,GAAmC,GAClC,SAAST,GAAUnB,EAAkB9M,GAC3C,OAAO0O,GAAQ1O,KAAQ0O,GAAQ1O,GAAM8M,EAAQ6B,aAAa,UAAY3O,IAgBhE,MAAMtI,GAAmB,CAC/BsV,OAAQ,CACP4B,IAAK,EACLlE,eAAgB,IAKX,SAASvZ,GAGd0d,GACD,OAAQnX,GAAYmX,GAGd,SAASX,GAGdrc,EAAQid,EAAWzX,GACpB,MAAMhF,EAAIqF,GACV,GAAIrF,EAAER,GAAM,CACX,MAAMkd,EAAQ1X,GAAQA,EAAK0X,OACb,IAAVA,IACHD,ECpEI,SAAAE,EAAAC,EAAAC,EAAAC,GACP,MAAAC,EAAAD,KAAAC,OACA,oBAAAH,GACA,iBAAAC,IACA7J,MAAAC,QAAA2J,KACA5J,MAAAC,QAAA4J,IACAD,IAAAC,EAAA,CACA,UAAArd,KAAAod,EACA,GAAAA,EAAA9c,eAAAN,MACAud,GAAAvd,KAAAud,IAAA,IAAAA,EAAAvd,IAAA,CACA,MAAAwd,EAAAJ,EAAApd,GACAyd,EAAAJ,EAAArd,QACAqP,IAAAoO,IACAL,EAAApd,GAAAmd,EAAAK,EAAAC,EAAA,CACAF,YAAAvd,MAKA,OAAAod,EAEA,OAAAC,ED+CSF,CAAaF,EAAKzc,EAAER,GAAM,CAAEud,OAAQL,KAG5C1c,EAAER,GAAOid,EAGH,SAASX,KACf,OAAOzW,GAxBNhB,OAAegB,MAAQA,GAkCzB,MAAM6X,GAAgD,GAE/C,SAASnB,GACfpO,EACA3N,GAEAkd,GAAQvP,GAAM3N,EAGR,SAASgb,GAAS3U,GACxB,IAAK,MAAM+U,KAAK8B,GACfA,GAAQ9B,GAAG/U,EAAOhB,IAIb,MAAM4V,GAAa,CACzBkC,MAAO,QACPjC,OAAQ,UAKT,IAAIN,GACAC,GACAC,mCElIJjd,EAAAU,EAAA0B,EAAA,sBAAAmd,IAAAvf,EAAAU,EAAA0B,EAAA,sBAAAod,IAAAxf,EAAAU,EAAA0B,EAAA,sBAAAqd,IAAAzf,EAAAU,EAAA0B,EAAA,sBAAAsd,IAAA1f,EAAAU,EAAA0B,EAAA,sBAAAud,IAAA3f,EAAAU,EAAA0B,EAAA,sBAAAwd,IAAA5f,EAAAU,EAAA0B,EAAA,sBAAAuX,IAAA3Z,EAAAU,EAAA0B,EAAA,sBAAAyd,IAAA,IAAAC,EAAA9f,EAAA,GACO,SAAAuf,EAAAQ,GACP,OAAAA,EAAejf,OAAAgf,EAAA,EAAAhf,CAAOif,EAAAlN,SAEf,SAAA2M,EAAAQ,EAAA/R,GACP,QAAA7N,EAAA,EAAmBA,EAAA6N,EAAW7N,IAC9B4f,EAAA5f,GAGO,SAAAqf,EAAAO,EAAA/R,EAAAgS,EAAA,IACP,QAAA7f,EAAA,EAAmBA,EAAA6N,EAAW7N,IAC9B6f,EAAA7f,GAAA4f,EAAA5f,GAEA,OAAA6f,EAEO,SAAAP,EAAAM,EAAAE,EAAAC,EAAAF,EAAA,IACP,MAAApN,EAAAuN,KAAAC,IAAAH,EAAArN,OAAAsN,EAAAtN,QACA,QAAAzS,EAAA,EAAmBA,EAAAyS,EAAYzS,IAC/B6f,EAAA7f,GAAA4f,EAAAE,EAAA9f,GAAA+f,EAAA/f,IAEA,OAAA6f,EAEO,SAAAN,EAAAW,EAAAL,EAAA,IACP,UAAAM,KAAAD,EAAA,CACA,MAAAE,EAAAP,EAAApN,OACA,QAAAzS,EAAA,EAAuBA,EAAAmgB,EAAA1N,OAAqBzS,IAC5C6f,EAAA7f,EAAAogB,GAAAD,EAAAngB,GAGA,OAAA6f,EAEO,SAAAL,EAAAI,EAAAM,EAAAL,EAAA,IACP,OAAAN,EAAAW,EAAA3G,IAAAqG,GAAAC,GAYO,SAAAtG,EAAAqG,EAAAS,GACP,GAAAtL,MAAAC,QAAAqL,GACA,OAAAA,EAAA9G,IAAAqG,GAEA,CACA,MAAAU,EAAA,GACA,UAAA/e,KAAA8e,EACAC,EAAA/e,GAAAqe,EAAAS,EAAA9e,MAEA,OAAA+e,GAGO,SAAAb,EAAAG,EAAAS,GACP,UAAA9e,KAAA8e,EACAT,EAAAS,EAAA9e,uCC1DO,IAAAgf,EAsHA,SAAArD,EAAAnW,EAAAd,GACP,MAAAe,EAAAf,GAAAc,GACAE,QAAWA,EAAAb,QAAmBW,EAC9BM,EAAA,GACA,SAAAmZ,EAAApY,GACAf,EAAAe,EAAAqY,SAAAC,KAAAC,MACA3Z,EAAAK,GAEA,SAAAuZ,EAAAxY,UACAf,EAAAe,EAAAqY,SACAzZ,EAAAK,GAKA,OAHAJ,EAAAT,iBAAA,QAAAoa,GAAA,GACA3Z,EAAAT,iBAAA,UAAAga,GAAA,GACAxZ,EAAAK,GACA,WACAJ,EAAAR,oBAAA,QAAAma,GACA3Z,EAAAR,oBAAA,UAAA+Z,IAvIA5gB,EAAAU,EAAA0B,EAAA,sBAAAue,IAAA3gB,EAAAU,EAAA0B,EAAA,sBAAAkb,IACA,SAAAqD,GACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,2BACAA,IAAA,aACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,gCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,eACAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,uBACAA,IAAA,qBACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,mBACAA,IAAA,iBAnHA,CAoHCA,MAAA,uBCrHDxgB,EAAAD,QAAA,+8CCAO,SAAA+gB,EAAAC,GACP,OAAAd,KAAAe,MAAAf,KAAAgB,SAAAF,GAEO,SAAAG,EAAAC,EAAAC,GACP,OAAAN,EAAAM,EAAAD,KAEO,SAAAE,IACP,OAAApB,KAAAgB,SAAAhB,KAAAgB,SAAAhB,KAAAgB,UAAA,EAPAphB,EAAAU,EAAA0B,EAAA,sBAAA6e,IAAAjhB,EAAAU,EAAA0B,EAAA,sBAAAif,IAAArhB,EAAAU,EAAA0B,EAAA,sBAAAof,oCCAAxhB,EAAAU,EAAA0B,EAAA,sBAAAqf,IAAAzhB,EAAAU,EAAA0B,EAAA,sBAAAsf,IAAA1hB,EAAAU,EAAA0B,EAAA,sBAAAuf,IAKA,IAAIC,EAAgD,KACpD,MAAMC,EAA2C,GAEjD,IAAIC,GAAa,EAEbC,EAAa,EAEbC,EAAU,EAEd,SAASC,EAAeC,GACvB,MAAMxD,EAAMsD,EAAUE,EAAOF,EAAUA,EAGvC,GAFAA,EAAUE,EAENN,EAAY,CACf,IAAK,MAAM9R,KAAM8R,EAChBA,EAAW9R,GAAI4O,GAEhBkD,EAAa,KAGd,IAAIO,EAAU,EACd,IAAK,MAAMrS,KAAM+R,EAChBM,IACAN,EAAa/R,GAAI4O,GAGbyD,EAIJC,sBAAsBH,IAHtBH,GAAa,EACbE,EAAU,GAML,SAASP,EAAKzB,EAAclQ,GAClCA,EAAKA,GAAMkQ,EAAGrf,MAAQohB,KACtBH,EAAaA,GAAc,IAChB9R,GAAMkQ,EAEZ8B,IACJM,sBAAsBH,GACtBH,GAAa,GAIR,SAASJ,EAAO1B,EAAclQ,GASpC,OARAA,EAAKA,GAAMkQ,EAAGrf,MAAQohB,IACtBF,EAAa/R,GAAMkQ,EAEd8B,IACJM,sBAAsBH,GACtBH,GAAa,GAGPhS,EAGD,SAAS6R,EAAK7R,GACF,mBAAPA,IACVA,EAAKA,EAAGnP,aAEFkhB,EAAa/R,8DCzDd,MAAMsK,EAAS9S,SAAS+a,eAAe,UACjCC,EAAQhb,SAAS+a,eAAe,SAEhCzF,EAAU9b,OAAAyhB,EAAA,EAAAzhB,CAAWsZ,GAMrBoI,GAJK5F,EAAQ1S,GAELpJ,OAAAyhB,EAAA,EAAAzhB,GAEFA,OAAAwR,OAAA,GACfiQ,EAAA,EAAU,CACbE,cAAe,gBACfC,cAAe,mBClBhB,MAAMC,EAAML,EAAM/H,WAAW,MAC7B,IAAKoI,EAAK,MAAM/R,MAAM,mCAEtB,MAAMZ,EAAO2S,EAAIC,aAAa,EAAG,EAAGN,EAAM/b,MAAO+b,EAAM5b,QAEvD,IAAK,IAAItG,EAAI,EAAGA,EAAI4P,EAAKA,KAAK6C,OAAQzS,GAAK,EAC1C4P,EAAKA,KAAK5P,GAAKggB,KAAKgB,SAAW,GAAM,IAAM,EAC3CpR,EAAKA,KAAK5P,EAAI,GAAK,IAGpBuiB,EAAIE,aAAa7S,EAAM,EAAG,GAE1BlP,OAAAyhB,EAAA,EAAAzhB,CAAiB,QAAS,CAACqH,EAAGhG,KACzBgG,IAAMqa,EAAOE,gBAChBC,EAAIG,UAAY,QAChBH,EAAII,SAAS,EAAG,EAAGT,EAAM/b,MAAO+b,EAAM5b,SAGvC,MAAMhG,EAAIyB,EAAE2a,OACZ,GAAI3U,IAAMqa,EAAOC,eAAiB/hB,EAAEwG,MAAMa,UAAYrH,EAAEwG,MAAMQ,KAAKc,MAAO,CACzE,MAAMH,QAAEA,EAAOC,QAAEA,GAAY5H,EAAEwG,MAAMQ,KAAKc,MACpCb,EAAIyY,KAAKe,MAAO9Y,EAAU7B,OAAOC,WAAc6b,EAAM/b,OACrDqB,EAAIwY,KAAKe,MAAO7Y,EAAU9B,OAAOG,YAAe2b,EAAM5b,QAC5Dic,EAAIG,UAAY,QAChBH,EAAII,SAASpb,EAAGC,EAAG,EAAG,2BCrBxB,MAAMob,EAAaliB,OAAAyhB,EAAA,EAAAzhB,CAAS8b,EAAS,SAI/BqG,EAAQniB,OAAAyhB,EAAA,EAAAzhB,CAAU8b,EAAS,SAAS9I,OAAO,CAChDlK,KAAMsZ,EAAAC,EACN1M,SAAU,CACTnL,KALiB,IAMjBgX,MAAO,IAAMU,EAAWlH,QACxBsH,SAAU,IAAM,OAILC,EAAYviB,OAAAyhB,EAAA,EAAAzhB,CAAS8b,EAAS,aAAa9I,OAAO,CAC9DkB,OAAQiO,EACR1c,MAbkB,IAclBG,OAdkB,IAelB2O,iBAAiB,EACjBzC,gBAAiB,CAChB,CACCX,OAAO,MAOVnR,OAAAyhB,EAAA,EAAAzhB,CAAU,WAAYqH,IACjBA,IAAMqa,EAAOlD,OAChB0D,EAAWlP,OAAO,CAAE9I,QAAS,CAAE4G,MAAO0Q,OC7BxCxhB,OAAAoc,EAAA,EAAApc,CAAO4d,IACN5d,OAAAyhB,EAAA,EAAAzhB,CAAI,UAAU4d,IAAMA,EACpB5d,OAAAyhB,EAAA,EAAAzhB,CAAS0hB,EAAOC,eAChB3hB,OAAAyhB,EAAA,EAAAzhB,CAAS0hB,EAAOlD,OAChB1C,EAAQ0G,QAAQD,GAAWE,QAAQF,GACnCviB,OAAAyhB,EAAA,EAAAzhB,CAAS0hB,EAAOE,gBACd,wCCZH1iB,EAAAU,EAAA0B,EAAA,sBAAAohB,IAAAxjB,EAAAU,EAAA0B,EAAA,sBAAAqhB,IAMO,SAAAD,EAAAE,EAAAC,GACP,GAAAD,IAAAC,EACA,SAEA,IAAAA,IAAAD,EACA,SAEA,GAAAA,EAAA7Q,SAAA8Q,EAAA9Q,OACA,SAEA,QAAAzS,EAAA,EAAmBA,EAAAsjB,EAAA7Q,OAAiBzS,IACpC,GAAAsjB,EAAAtjB,KAAAujB,EAAAvjB,GACA,SAGA,SAEO,SAAAqjB,EAAA1E,EAAAC,GACP,GAAAD,IAAAC,EACA,SAEA,IAAAA,EACA,SAEA,MAAA4E,EAAA9iB,OAAA0c,KAAAuB,GAEA,IAAAyE,EAAAI,EADA9iB,OAAA0c,KAAAwB,IAEA,SAEA,UAAArd,KAAAiiB,EACA,GAAA7E,EAAApd,KAAAqd,EAAArd,GACA,SAGA,0CCxCO,SAAAkiB,EAAA3Z,KAAA4Z,GACP,OAAAA,EAAAvO,OAAA,CAAA0K,EAAA8D,IAAA9D,EAAA/V,EAAA6Z,EAAAC,cAAA,kBAUO,SAAAC,EAAA7J,EAAA8J,EAAA,GACP,MAAA3d,EAAA6T,EAAA+J,YAAAD,EAAA,EACAxd,EAAA0T,EAAAgK,aAAAF,EAAA,EACA,OAAA9J,EAAA7T,WAAA6T,EAAA1T,cACA0T,EAAA7T,QACA6T,EAAA1T,UACA,GAjBA1G,EAAAU,EAAA0B,EAAA,sBAAAyhB,IAAA7jB,EAAAU,EAAA0B,EAAA,sBAAA6hB","file":"aquarell/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 59);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8b50,\n    FLOAT_VEC3: 0x8b51,\n    FLOAT_VEC4: 0x8b52,\n    INT: 0x1404,\n    INT_VEC2: 0x8b53,\n    INT_VEC3: 0x8b54,\n    INT_VEC4: 0x8b55,\n    BOOL: 0x8b56,\n    BOOL_VEC2: 0x8b57,\n    BOOL_VEC3: 0x8b58,\n    BOOL_VEC4: 0x8b59,\n    FLOAT_MAT2: 0x8b5a,\n    FLOAT_MAT3: 0x8b5b,\n    FLOAT_MAT4: 0x8b5c,\n    SAMPLER_2D: 0x8b5e,\n    SAMPLER_CUBE: 0x8b60,\n    SAMPLER_3D: 0x8b5f,\n    SAMPLER_2D_SHADOW: 0x8b62,\n    FLOAT_MAT2X3: 0x8b65,\n    FLOAT_MAT2X4: 0x8b66,\n    FLOAT_MAT3X2: 0x8b67,\n    FLOAT_MAT3X4: 0x8b68,\n    FLOAT_MAT4X2: 0x8b69,\n    FLOAT_MAT4X3: 0x8b6a,\n    SAMPLER_2D_ARRAY: 0x8dc1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n    SAMPLER_CUBE_SHADOW: 0x8dc5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8dc6,\n    UNSIGNED_INT_VEC3: 0x8dc7,\n    UNSIGNED_INT_VEC4: 0x8dc8,\n    INT_SAMPLER_2D: 0x8dca,\n    INT_SAMPLER_3D: 0x8dcb,\n    INT_SAMPLER_CUBE: 0x8dcc,\n    INT_SAMPLER_2D_ARRAY: 0x8dcf,\n    UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n    TEXTURE_2D: 0x0de1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806f,\n    TEXTURE_2D_ARRAY: 0x8c1a,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140b,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n    UNSIGNED_INT_24_8: 0x84fa,\n};\nexport const TEXTURE_FORMAT = {\n    RED: 0x1903,\n    RG: 0x8227,\n    RGB: 0x1907,\n    RGBA: 0x1908,\n    RED_INTEGER: 0x8d94,\n    RG_INTEGER: 0x8228,\n    RGB_INTEGER: 0x8d98,\n    RGBA_INTEGER: 0x8d99,\n    DEPTH_COMPONENT: 0x1902,\n};\nexport const TEXTURE_FORMAT_INTERNAL = {\n    R8: 0x8229,\n    RG8: 0x822b,\n    RGB8: 0x8051,\n    RGBA8: 0x8058,\n    R16F: 0x822d,\n    RG16F: 0x822f,\n    RGB16F: 0x881b,\n    RGBA16F: 0x881a,\n    R32F: 0x822e,\n    RG32F: 0x8230,\n    RGB32F: 0x8815,\n    RGBA32F: 0x8814,\n    R8I: 0x8231,\n    RG8I: 0x8237,\n    RGB8I: 0x8d8f,\n    RGBA8I: 0x8d8e,\n    R8UI: 0x8232,\n    RG8UI: 0x8238,\n    RGB8UI: 0x8d7d,\n    RGBA8UI: 0x8d7c,\n    R16I: 0x8233,\n    RG16I: 0x8239,\n    RGB16I: 0x8d89,\n    RGBA16I: 0x8d88,\n    R16UI: 0x8234,\n    RG16UI: 0x823a,\n    RGB16UI: 0x8d77,\n    RGBA16UI: 0x8d76,\n    R32I: 0x8235,\n    RG32I: 0x823b,\n    RGB32I: 0x8d83,\n    RGBA32I: 0x8d82,\n    R32UI: 0x8236,\n    RG32UI: 0x823c,\n    RGB32UI: 0x8d71,\n    RGBA32UI: 0x8d70,\n    RGB10_A2: 0x8059,\n    RGB10_A2UI: 0x906f,\n    SRGB: 0x8c40,\n    SRGB8: 0x8c41,\n    SRGB8_ALPHA8: 0x8c43,\n    R8_SNORM: 0x8f94,\n    RG8_SNORM: 0x8f95,\n    RGB8_SNORM: 0x8f96,\n    RGBA8_SNORM: 0x8f97,\n    DEPTH_COMPONENT16: 0x81a5,\n    DEPTH_COMPONENT24: 0x81a6,\n    DEPTH_COMPONENT32F: 0x8cac,\n};\nexport const TEXTURE_FORMAT_DEFAULTS = {\n    [GL_TYPE.UNSIGNED_BYTE]: {\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R8,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG8,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB8,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA8,\n    },\n    [GL_TYPE.UNSIGNED_SHORT]: {\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT16,\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R16UI,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG16UI,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB16UI,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA16UI,\n    },\n    [GL_TYPE.UNSIGNED_INT]: {\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT24,\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R32UI,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG32UI,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB32UI,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA32UI,\n    },\n    [GL_TYPE.FLOAT]: {\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R16F,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG16F,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB16F,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA16F,\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT32F,\n    },\n    COMPRESSED_TYPES: {},\n};\n//# sourceMappingURL=contants.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 },\n    };\n    const destroy = windowSize(s => (state.size = s));\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2,\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false,\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { },\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST',\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]),\n                storeType: 'STATIC',\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]),\n                storeType: 'STATIC',\n            },\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4,\n    },\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`,\n    },\n};\n//# sourceMappingURL=asset-lib.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return (v) => {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return (v) => {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return (v) => {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return (texture) => {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture._texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return (textures) => {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]._texture);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: {\n        Type: Float32Array,\n        size: 4,\n        setter: floatSetter,\n        arraySetter: floatArraySetter,\n    },\n    [GL_TYPE.FLOAT_VEC2]: {\n        Type: Float32Array,\n        size: 8,\n        setter: floatVec2Setter,\n    },\n    [GL_TYPE.FLOAT_VEC3]: {\n        Type: Float32Array,\n        size: 12,\n        setter: floatVec3Setter,\n    },\n    [GL_TYPE.FLOAT_VEC4]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatVec4Setter,\n    },\n    [GL_TYPE.INT]: {\n        Type: Int32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: uintSetter,\n        arraySetter: uintArraySetter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        Type: Uint32Array,\n        size: 8,\n        setter: uintVec2Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        Type: Uint32Array,\n        size: 12,\n        setter: uintVec3Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        Type: Uint32Array,\n        size: 16,\n        setter: uintVec4Setter,\n    },\n    [GL_TYPE.BOOL]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatMat2Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3]: {\n        Type: Float32Array,\n        size: 36,\n        setter: floatMat3Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4]: {\n        Type: Float32Array,\n        size: 64,\n        setter: floatMat4Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X3]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat23Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X4]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat24Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X2]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat32Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X4]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat34Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X2]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat42Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X3]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat43Setter,\n    },\n    [GL_TYPE.SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        size: 8,\n        setter: intAttribSetter,\n        itemSize: 2,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        size: 12,\n        setter: intAttribSetter,\n        itemSize: 3,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        size: 16,\n        setter: intAttribSetter,\n        itemSize: 4,\n    },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 },\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw new Error('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array,\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(_painter, id = 'Form' + formCounter++) {\n        this._painter = _painter;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        if (data.drawType) {\n            this._drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this._itemCount = data.itemCount;\n        }\n        this._attribs = this._attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this._attribs[id] == null) {\n                this._attribs[id] = {\n                    buffer: gl.createBuffer(),\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this._attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this._elements == null) {\n                this._elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null,\n                };\n            }\n            this._elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        for (const id in this._attribs) {\n            gl.deleteBuffer(this._attribs[id].buffer);\n        }\n        this._attribs = {};\n        if (this._elements) {\n            gl.deleteBuffer(this._elements.buffer);\n            this._elements = undefined;\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { defaultTextureSettings } from './asset-lib';\nlet textureCount = 1;\nexport class Texture {\n    constructor(_painter, id = 'Texture' + textureCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this._texture = null;\n        this._data = {};\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        if (this._texture == null) {\n            this._texture = gl.createTexture();\n        }\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\n        if ((data.wrap && data.wrap !== this._data.wrap) ||\n            (data.wrapS && data.wrapS !== this._data.wrapS) ||\n            (data.wrapT && data.wrapT !== this._data.wrapT)) {\n            let wrapS, wrapT;\n            if (data.wrap) {\n                wrapS = wrapT = data.wrap;\n            }\n            else {\n                wrapT = data.wrapT || defaultTextureSettings.wrap;\n                wrapS = data.wrapS || defaultTextureSettings.wrap;\n            }\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n        }\n        else if (!(this._data.wrap || this._data.wrapS || this._data.wrapT)) {\n            this._data.wrap = this._data.wrapT = this._data.wrapS = defaultTextureSettings.wrap;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[this._data.wrap]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[this._data.wrap]);\n        }\n        if (data.magFilter && data.magFilter !== this._data.magFilter) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n        }\n        else if (!this._data.magFilter) {\n            this._data.magFilter = defaultTextureSettings.magFilter;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[this._data.magFilter]);\n        }\n        if (data.minFilter && data.minFilter !== this._data.minFilter) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n        }\n        else if (!this._data.minFilter) {\n            this._data.minFilter = defaultTextureSettings.minFilter;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[this._data.minFilter]);\n        }\n        if (data.asset) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.data !== undefined) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, data.type === 'FLOAT' && this._painter.isWebGL2\n                ? gl.RGBA32F\n                : gl.RGBA, data.width, // width and height are required if using custom data\n            data.height, 0, gl.RGBA, gl[data.type || 'UNSIGNED_BYTE'], data.data);\n        }\n        if (data.flipY != null && data.flipY !== this._data.flipY) {\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        Object.assign(this._data, data);\n        return this;\n    }\n    destroy() {\n        this._painter.gl.deleteTexture(this._texture);\n        this._data = {};\n        this._texture = null;\n    }\n}\n//# sourceMappingURL=texture.js.map","import { equalObject } from 'tvs-libs/dist/utils/predicates';\nimport { Texture } from './texture';\nlet targetCount = 1;\nexport class RenderTarget {\n    constructor(_painter, id = 'Form' + targetCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this.width = 0;\n        this.height = 0;\n        this.frameBuffer = null;\n        this.textures = [];\n        this.depthBuffer = null;\n        this.bufferStructure = [];\n        this._data = {};\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        const width = data.width || this.width;\n        const height = data.height || this.height;\n        if (!(width && height)) {\n            return this;\n        }\n        else if (width === this.width && height === this.height) {\n            if (!data.bufferStructure)\n                return this;\n            if (data.bufferStructure.length === this.bufferStructure.length &&\n                this.bufferStructure.every((buf, i) => equalObject(buf, data.bufferStructure[i]))) {\n                return this;\n            }\n        }\n        if (this.frameBuffer == null) {\n            this.frameBuffer = gl.createFramebuffer();\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n        if (data.bufferStructure && data.bufferStructure.length) {\n            this.bufferStructure = data.bufferStructure;\n            if (this.bufferStructure.some(t => t.type === 'FLOAT')) {\n                if (this._painter.isWebGL2) {\n                    gl.getExtension('EXT_color_buffer_float');\n                }\n                else {\n                    gl.getExtension('OES_texture_float');\n                }\n            }\n        }\n        const texCount = this.bufferStructure.length || 1;\n        const bufferAttachments = [gl.COLOR_ATTACHMENT0];\n        if (texCount > 1) {\n            let glx;\n            if (!this._painter.isWebGL2) {\n                glx = gl.getExtension('WEBGL_draw_buffers');\n            }\n            const attachment = this._painter.isWebGL2\n                ? gl.COLOR_ATTACHMENT0\n                : glx.COLOR_ATTACHMENT0_WEBGL;\n            for (let i = 0; i < texCount; i++) {\n                bufferAttachments[i] = attachment + i;\n            }\n            this._painter.isWebGL2\n                ? gl.drawBuffers(bufferAttachments)\n                : glx.drawBuffersWEBGL(bufferAttachments);\n        }\n        for (let i = 0; i < texCount; i++) {\n            if (!this.textures[i]) {\n                this.textures[i] = new Texture(this._painter, this.id + '_Texture' + i);\n            }\n            const texture = this.textures[i];\n            texture.update(Object.assign({ minFilter: 'NEAREST', magFilter: 'NEAREST' }, this.bufferStructure[i], { data: null, width,\n                height }));\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture._texture, 0);\n        }\n        if (this.depthBuffer == null) {\n            this.depthBuffer = gl.createRenderbuffer();\n        }\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);\n        const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        if (err !== gl.FRAMEBUFFER_COMPLETE) {\n            console.error('framebuffer error', err, data);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        Object.assign(this._data, data);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        gl.deleteFramebuffer(this.frameBuffer);\n        gl.deleteRenderbuffer(this.depthBuffer);\n        for (const texture of this.textures) {\n            gl.deleteTexture(texture);\n        }\n        this.textures = [];\n        this.frameBuffer = null;\n        this.depthBuffer = null;\n        this._data = {};\n        this.bufferStructure = [];\n        this.width = 0;\n        this.height = 0;\n    }\n}\n//# sourceMappingURL=render-target.js.map","import { times } from 'tvs-libs/dist/utils/sequence';\nimport { RenderTarget } from './render-target';\nimport { Texture } from './texture';\nlet frameCount = 1;\nexport class Frame {\n    constructor(_painter, id = 'Frame' + frameCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this.width = 0;\n        this.height = 0;\n        this.layers = [];\n        this._data = {};\n        this._targets = [];\n        this._textures = [];\n    }\n    image(i = 0) {\n        return ((this._targets.length &&\n            this._targets[this._targets.length - 1].textures[i]) ||\n            this._textures[i]);\n    }\n    update(data = {}) {\n        const gl = this._painter.gl;\n        const layers = Array.isArray(data.layers)\n            ? data.layers\n            : data.layers\n                ? [data.layers]\n                : this.layers;\n        const selfReferencing = data.selfReferencing || this._data.selfReferencing;\n        const layerCount = layers.reduce((count, layer) => count + (layer._uniforms.length || 1), 0);\n        const targetCount = selfReferencing || layerCount > 1 ? 2 : layerCount;\n        const width = data.width || this._data.width || gl.drawingBufferWidth;\n        const height = data.height || this._data.height || gl.drawingBufferHeight;\n        if (targetCount !== this._targets.length) {\n            this._destroyTargets();\n        }\n        const targetData = Object.assign({}, data, { width, height });\n        if (!this._targets.length && targetCount > 0) {\n            this._targets = times(i => new RenderTarget(this._painter, this.id + '_target' + (i + 1)).update(targetData), targetCount);\n        }\n        else if (this._targets.length) {\n            this._targets.forEach(t => {\n                t.update(targetData);\n            });\n        }\n        if (data.texture) {\n            // Hardcode to one static texture for now\n            if (!this._textures[0]) {\n                this._textures[0] = new Texture(this._painter, this.id + '_Texture0');\n            }\n            data.texture.width = data.texture.width || width;\n            data.texture.height = data.texture.height || height;\n            this._textures[0].update(data.texture);\n        }\n        Object.assign(this._data, data);\n        this.layers = layers;\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    destroy() {\n        this._destroyTargets();\n        this._textures.forEach(tex => tex.destroy());\n        this._textures = [];\n        this._data = {};\n        this.layers = [];\n        this.width = 0;\n        this.height = 0;\n    }\n    _destroyTargets() {\n        this._targets.forEach(t => t.destroy());\n        this._targets = [];\n    }\n    _swapTargets() {\n        if (this._targets.length > 1) {\n            const tmp = this._targets[0];\n            this._targets[0] = this._targets[1];\n            this._targets[1] = tmp;\n        }\n    }\n}\n//# sourceMappingURL=frame.js.map","let layerCount = 1;\nexport class Layer {\n    constructor(id = 'DrawingLayer' + layerCount++) {\n        this.id = id;\n        this.sketches = [];\n        this._data = {};\n        this._uniforms = [];\n    }\n    update(data) {\n        if (data.sketches) {\n            this.sketches = Array.isArray(data.sketches)\n                ? data.sketches\n                : [data.sketches];\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this._uniforms = Array.isArray(data.uniforms)\n                ? data.uniforms\n                : [data.uniforms];\n        }\n        Object.assign(this._data, data);\n        return this;\n    }\n    destroy() {\n        for (const sketch of this.sketches) {\n            sketch.destroy();\n        }\n        this._data.sketches = [];\n        this._data = {};\n        this._uniforms = [];\n    }\n}\n//# sourceMappingURL=layer.js.map","import { createAttributeSetters, createUniformSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(_painter, id = 'Shade' + shadeCounter++) {\n        this._painter = _painter;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        const fragSource = (data.frag && data.frag.trim()) || this.fragSource;\n        const vertSource = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(fragSource &&\n            vertSource &&\n            (fragSource !== this.fragSource || vertSource !== this.vertSource))) {\n            return this;\n        }\n        this.destroy();\n        if (fragSource.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        const program = gl.createProgram();\n        const frag = gl.createShader(gl.FRAGMENT_SHADER);\n        const vert = gl.createShader(gl.VERTEX_SHADER);\n        if (!(program && vert && frag))\n            return;\n        this._program = program;\n        this._frag = frag;\n        this._vert = vert;\n        gl.attachShader(program, vert);\n        gl.attachShader(program, frag);\n        gl.shaderSource(vert, vertSource);\n        gl.shaderSource(frag, fragSource);\n        gl.compileShader(vert);\n        gl.compileShader(frag);\n        if (!gl.getShaderParameter(vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(vert), addLineNumbers(vertSource));\n        }\n        if (!gl.getShaderParameter(frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(frag), addLineNumbers(fragSource));\n        }\n        gl.linkProgram(program);\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(program);\n            console.error('Error in program linking:', lastError);\n        }\n        this._uniformSetters = createUniformSetters(gl, program);\n        this._attributeSetters = createAttributeSetters(gl, program);\n        this.fragSource = fragSource;\n        this.vertSource = vertSource;\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        gl.deleteProgram(this._program);\n        gl.deleteShader(this._frag);\n        gl.deleteShader(this._vert);\n        this.vertSource = undefined;\n        this.fragSource = undefined;\n        this._attributeSetters = {};\n        this._uniformSetters = {};\n    }\n}\nfunction addLineNumbers(src) {\n    return src\n        .trim()\n        .split('\\n')\n        .map((line, i) => i + 1 + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n        this._uniforms = [];\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this._drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this._uniforms = Array.isArray(data.uniforms)\n                ? data.uniforms\n                : [data.uniforms];\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n        this._drawSettings = undefined;\n        this._uniforms = [];\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { defaultForms, defaultShaders, getDefaultLayerSettings, } from './asset-lib';\nimport { Form } from './form';\nimport { Frame } from './frame';\nimport { Layer } from './layer';\nimport { applyDrawSettings, revertDrawSettings } from './render-utils';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { resizeCanvas } from './utils/context';\nexport class Painter {\n    constructor(canvas, opts = {}) {\n        this.canvas = canvas;\n        this.isWebGL2 = true;\n        this.maxBufferSamples = 0;\n        let gl = null;\n        if (!opts.useWebGL1) {\n            gl =\n                canvas.getContext('webgl2', opts) ||\n                    canvas.getContext('experimental-webgl2', opts);\n        }\n        if (gl == null) {\n            this.isWebGL2 = false;\n            gl =\n                canvas.getContext('webgl', opts) ||\n                    canvas.getContext('experimental-webgl', opts);\n        }\n        if (gl == null) {\n            throw Error('Cannot initialize WebGL.');\n        }\n        this.gl = gl;\n        this.sizeMultiplier = opts.sizeMultiplier || 1;\n        if (this.isWebGL2) {\n            this.maxBufferSamples = gl.getParameter(gl.MAX_SAMPLES);\n        }\n        this.resize();\n        applyDrawSettings(gl, getDefaultLayerSettings(gl));\n        this._renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this._staticSketch = this.createFlatSketch();\n    }\n    resize() {\n        resizeCanvas(this.gl.canvas, this.sizeMultiplier);\n        return this;\n    }\n    destroy() {\n        this._staticSketch.destroy();\n        this._renderQuad.destroy();\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, drawSettings));\n        return this;\n    }\n    createForm(id) {\n        return new Form(this, id);\n    }\n    createShade(id) {\n        return new Shade(this, id);\n    }\n    createSketch(id) {\n        return new Sketch(id);\n    }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this._renderQuad,\n            shade: this.createShade(s.id + '_defaultShade').update(defaultShaders.basicEffect),\n        });\n    }\n    createFrame(id) {\n        return new Frame(this, id);\n    }\n    createLayer(id) {\n        return new Layer(id);\n    }\n    createEffect(id) {\n        const l = this.createLayer(id);\n        return l.update({\n            sketches: this.createFlatSketch(l.id + '_effectSketch'),\n        });\n    }\n    draw(sketch, globalUniforms) {\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        draw(gl, sketch, globalUniforms);\n        return this;\n    }\n    compose(...frames) {\n        for (const frame of frames) {\n            renderFrame(this.gl, frame);\n        }\n        return this;\n    }\n    display(frame, idx = 0) {\n        return this.draw(this._staticSketch, { source: frame.image(idx) });\n    }\n}\nfunction draw(gl, sketch, globalUniforms, sources) {\n    const { shade: shade, form: form, _drawSettings: drawSettings, _uniforms: uniforms, } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade._program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, sources);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    for (let i = 0; i < (uniforms.length || 1); i++) {\n        drawInstance(gl, sketch, uniforms[i], sources);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, uniforms, sources) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, sources);\n    }\n    if (sketch.form._elements && sketch.form._elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form._elements.buffer);\n        gl.drawElements(sketch.form._drawType, sketch.form._itemCount, sketch.form._elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form._drawType, 0, sketch.form._itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form._attribs) {\n        const setter = shade._attributeSetters[name];\n        if (setter) {\n            setter.setter(form._attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, sources) {\n    for (const name in uniforms) {\n        const setter = shade._uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (typeof value === 'string' && sources) {\n                setter.setter(sources[value]);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, uniforms, target, source) {\n    if (target) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, target.width, target.height);\n    }\n    else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer._data.drawSettings) {\n        applyDrawSettings(gl, layer._data.drawSettings);\n    }\n    for (const sketch of layer.sketches) {\n        draw(gl, sketch, uniforms, source);\n    }\n    if (layer._data.drawSettings) {\n        revertDrawSettings(gl, layer._data.drawSettings);\n    }\n}\nfunction renderFrame(gl, frame) {\n    for (let i = 0; i < frame.layers.length; i++) {\n        const layer = frame.layers[i];\n        const layerPasses = layer._uniforms.length || 1;\n        for (let j = 0; j < layerPasses; j++) {\n            const target = frame._targets[0];\n            const sources = i + j === 0 && frame._textures.length\n                ? frame._textures\n                : frame._targets[1] && frame._targets[1].textures;\n            renderLayer(gl, layer, layer._uniforms[j], target, sources);\n            frame._swapTargets();\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/events/dom'\nimport { keyboard, KeyState } from 'tvs-libs/dist/events/keyboard'\nimport { mouse, MouseState } from 'tvs-libs/dist/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/utils/object'\nimport { PainterOptions } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/form'\nimport { Frame } from 'tvs-painter/dist/frame'\nimport { Layer } from 'tvs-painter/dist/layer'\nimport { Painter } from 'tvs-painter/dist/painter'\nimport { Shade } from 'tvs-painter/dist/shade'\nimport { Sketch } from 'tvs-painter/dist/sketch'\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement, opts?: PainterOptions) {\n\tinit(canvas, opts)\n\treturn painter\n}\n\nconst forms: { [id: string]: Form } = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: { [id: string]: Shade } = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: { [id: string]: Sketch } = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst layers: { [id: string]: Layer } = {}\nexport function getLayer(painter: Painter, id: string) {\n\treturn layers[id] || (layers[id] = painter.createLayer('Layer_' + id))\n}\n\nconst frames: { [id: string]: Frame } = {}\nexport function getFrame(painter: Painter, id: string) {\n\treturn frames[id] || (frames[id] = painter.createFrame('Frame_' + id))\n}\n\nconst effects: { [id: string]: Layer } = {}\nexport function getEffect(painter: Painter, id: string) {\n\treturn effects[id] || (effects[id] = painter.createEffect('Effect_' + id))\n}\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\ttpf: number\n\t\tcanvas: HTMLCanvasElement\n\t\tmouse: MouseState\n\t\tkeys: KeyState\n\t\tsizeMultiplier: number\n\t\tkeepCanvasSize?: boolean\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1,\n\t},\n} as BaseState\n;(window as any).state = state\n\nexport function get<\n\tS extends BaseState = BaseState,\n\tK extends keyof S = keyof S\n>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<\n\tS extends BaseState = BaseState,\n\tK extends keyof S = keyof S\n>(key: K, val: S[K], opts?: { reset: any }) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (\n\tevent: string,\n\tstate: S,\n) => void\n\nconst systems: { [id: string]: ActionHandler<any> } = {}\n\nexport function addSystem<S extends BaseState = BaseState>(\n\tid: string,\n\ts: ActionHandler<S>,\n) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize',\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init(canvas: HTMLCanvasElement, opts?: PainterOptions) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(canvas, opts)\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() =>\n\t\t\tonce(() => {\n\t\t\t\tpainter.sizeMultiplier = state.device.sizeMultiplier\n\t\t\t\tpainter.resize()\n\t\t\t\tdispatch(baseEvents.RESIZE)\n\t\t\t}, 'resize'),\n\t\t)\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => (state.device.mouse = m),\n\t\t)\n\n\t\tcancelKeys = keyboard(k => (state.device.keys = k))\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) &&\n                !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, {\n                        ignore: ignore && ignore[key],\n                    });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = shuffled[i] !== undefined ? shuffled[i] : arr[i];\n        shuffled[i] = shuffled[j] !== undefined ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { },\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D paint;\\nuniform sampler2D previous;\\nuniform float size;\\nvarying vec2 coords;\\n\\nint getCell(vec2 uv) {\\n\\tvec4 paintTex = texture2D(paint, uv);\\n\\tvec4 prevTex = texture2D(previous, uv);\\n\\tif (paintTex.r > 0.0 || prevTex.r > 0.0) {\\n\\t\\treturn 1;\\n\\t} else {\\n\\t\\treturn 0;\\n\\t}\\n}\\n\\nvoid main() {\\n\\tfloat one = 1.0 / size;\\n\\tvec2 uvR = vec2(coords.x + one, coords.y);\\n\\tvec2 uvL = vec2(coords.x - one, coords.y);\\n\\tvec2 uvRT = vec2(coords.x + one, coords.y - one);\\n\\tvec2 uvLT = vec2(coords.x - one, coords.y - one);\\n\\tvec2 uvRB = vec2(coords.x + one, coords.y + one);\\n\\tvec2 uvLB = vec2(coords.x - one, coords.y + one);\\n\\tvec2 uvT = vec2(coords.x, coords.y - one);\\n\\tvec2 uvB = vec2(coords.x, coords.y + one);\\n\\n\\tvec4 paintTex = texture2D(paint, coords);\\n\\tvec4 prevTex = texture2D(previous, coords);\\n\\n\\tint cellL = getCell(uvL);\\n\\tint cellR = getCell(uvR);\\n\\tint cellT = getCell(uvT);\\n\\tint cellB = getCell(uvB);\\n\\tint cellTL = getCell(uvLT);\\n\\tint cellTR = getCell(uvRT);\\n\\tint cellBL = getCell(uvLB);\\n\\tint cellBR = getCell(uvRB);\\n\\n\\tint neighbours = cellL + cellR + cellT + cellB + cellTL + cellTR + cellBL + cellBR;\\n\\n\\tvec4 color = vec4(vec3(0.0), 1.0);\\n\\tif (neighbours == 3 || (neighbours == 2 && prevTex.r > 0.0) || paintTex.r > 0.0) {\\n\\t\\tcolor = vec4(1.0, 1.0, 0.0, 1.0);\\n\\t}\\n\\n\\tgl_FragColor = color;\\n}\\n\"","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","// onNextTick\n// schedule actions on next animation frame\n\ntype Callback = (n: number) => void\n\nlet updateOnce: { [id: string]: Callback } | null = null\nconst updateRepeat: { [id: string]: Callback } = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\nfunction processUpdates(time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\nexport function once(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\nexport function repeat(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\nexport function stop(id: Callback | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import {\n\tbaseEvents,\n\tBaseState,\n\tgetPainter,\n\tgetState,\n} from 'shared-utils/painterState'\n\nexport type State = BaseState\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\nexport const paint = document.getElementById('paint') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents,\n\tPROCESS_PAINT: 'process_paint',\n\tCLEANUP_PAINT: 'cleanup_paint',\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem } from 'shared-utils/painterState'\nimport { events, paint, State } from './context'\n\nconst ctx = paint.getContext('2d')\nif (!ctx) throw Error('unable to initialize 2d context')\n\nconst data = ctx.getImageData(0, 0, paint.width, paint.height)\n\nfor (let i = 0; i < data.data.length; i += 4) {\n\tdata.data[i] = Math.random() > 0.5 ? 255 : 0\n\tdata.data[i + 3] = 255\n}\n\nctx.putImageData(data, 0, 0)\n\naddSystem<State>('paint', (e, s) => {\n\tif (e === events.CLEANUP_PAINT) {\n\t\tctx.fillStyle = 'black'\n\t\tctx.fillRect(0, 0, paint.width, paint.height)\n\t}\n\n\tconst d = s.device\n\tif (e === events.PROCESS_PAINT && d.mouse.dragging && d.mouse.drag.event) {\n\t\tconst { clientX, clientY } = d.mouse.drag.event\n\t\tconst x = Math.floor((clientX / window.innerWidth) * paint.width)\n\t\tconst y = Math.floor((clientY / window.innerHeight) * paint.height)\n\t\tctx.fillStyle = 'white'\n\t\tctx.fillRect(x, y, 1, 1)\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem, getEffect, getFrame } from 'shared-utils/painterState'\nimport { events, paint, painter } from './context'\nimport base from './glsl/base.frag'\n\n// ===== layers =====\n\nconst paintLayer = getFrame(painter, 'paint')\n\nconst bufferSize = 256\n\nconst layer = getEffect(painter, 'layer').update({\n\tfrag: base,\n\tuniforms: {\n\t\tsize: bufferSize,\n\t\tpaint: () => paintLayer.image(),\n\t\tprevious: () => '0',\n\t},\n})\n\nexport const automaton = getFrame(painter, 'automaton').update({\n\tlayers: layer,\n\twidth: bufferSize,\n\theight: bufferSize,\n\tselfReferencing: true,\n\tbufferStructure: [\n\t\t{\n\t\t\tflipY: true,\n\t\t},\n\t],\n})\n\n// ===== state =====\n\naddSystem('renderer', e => {\n\tif (e === events.FRAME) {\n\t\tpaintLayer.update({ texture: { asset: paint } })\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { dispatch, get } from 'shared-utils/painterState'\nimport { repeat } from 'shared-utils/scheduler'\nimport { events, painter } from './context'\nimport './paint'\nimport { automaton } from './renderer'\n\nrepeat(tpf => {\n\tget('device').tpf = tpf\n\tdispatch(events.PROCESS_PAINT)\n\tdispatch(events.FRAME)\n\tpainter.compose(automaton).display(automaton)\n\tdispatch(events.CLEANUP_PAINT)\n}, 'loop')\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2 || !arr1) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","export function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map"],"sourceRoot":""}