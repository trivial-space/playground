{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/math/random.js","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/painter/dist/lib/utils/stackgl.js","webpack:///../libs/painter/dist/lib/utils/geometry/plane.js","webpack:///../libs/libs/dist/lib/math/geometry.js","webpack:///../libs/libs/dist/lib/math/coords.js","webpack:///./homage/glsl/ground-reflection-frag.glsl","webpack:///./homage/glsl/screen-vert.glsl","webpack:///./homage/glsl/screen-frag.glsl","webpack:///./homage/glsl/object-vert.glsl","webpack:///./homage/glsl/object-frag.glsl","webpack:///./homage/glsl/ground-vert.glsl","webpack:///./homage/glsl/ground-frag.glsl","webpack:///../node_modules/geo-3d-box/box.js","webpack:///./homage/context.ts","webpack:///./homage/viewport.ts","webpack:///./homage/state/ground.ts","webpack:///./homage/state/videos.ts","webpack:///./homage/geometries.ts","webpack:///./homage/state/screens.ts","webpack:///./homage/shaders.ts","webpack:///./homage/effects.ts","webpack:///./homage/renderer.ts","webpack:///./homage/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","x","y","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","fn","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","vectorScale","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","currentCanvas","painter","getPainter","canvas","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_0__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_1__","state","device","cancelWindow","cancelMouse","cancelKeys","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_5__","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_6__","resize","dispatch","baseEvents","RESIZE","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_4__","element","enableRightButton","mouse","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","keys","init","forms","getForm","id","createForm","shades","getShade","createShade","sketches","getSketch","createSketch","drawingLayers","getDrawingLayer","createDrawingLayer","staticLayers","getStaticLayer","createStaticLayer","effectLayers","getEffectLayer","createEffectLayer","tpf","prop","val","opts","reset","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_3__","ignore","getState","window","systems","addSystem","event","FRAME","pickRandom","arr","_math_random__WEBPACK_IMPORTED_MODULE_0__","doTimes","times","res","zip","as","bs","flatten","array","_i","array_1","subarray","currentLength","mapcat","map","coll","isArray","obj","each","Keys","keyboard","callback","cb","_a","pressed","onKeydown","keyCode","Date","now","onKeyup","addEventListener","removeEventListener","vec1","vec2","scalar","sum","cross2D","getContext","gl","Error","makeClear","clearArray","arguments","reduce","item","toUpperCase","resizeCanvas","multiplier","clientWidth","clientHeight","randInt","int","randIntInRange","from","to","normalRand","unequal","equalArray","arr1","arr2","render_utils_a","render_utils_b","render_utils_c","getBindPointForSamplerType","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","contants","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","drawBuffersWEBGL","bufferAttachments","push","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","_b","_c","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","asset_lib_a","defaultTextureSettings","defaultForms","renderQuad","attribs","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","form_Form","Form","this","update","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","destroy","deleteBuffer","shade_Shade","Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","name_1","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","location_1","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","line","join","Sketch","drawSettings","form","shade","uniforms","layer_StaticLayer","StaticLayer","asset","generateMipmap","assign","layer_DrawingLayer","DrawingLayer","buffered","sketch","__webpack_exports__","painter_Painter","__assign","Painter","targets","result","createFlatSketch","forceUpdateTargets","_this","context","updateDrawSettings","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","draw","globalUniforms","compose","layers","last","layer","newLast","directRender","renderLayer","composeLayers","defaultTexture","useProgram","shadeForm","shadeUniforms","uniforms_1","drawInstance","drawElements","drawArrays","name_2","resultSketch","source","renderToStack","viewport","drawingBufferWidth","drawingBufferHeight","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","updates","requestAnimationFrame","once","repeat","windowSize","innerWidth","innerHeight","deepOverride","deepmerge","obj1","obj2","val1","val2","opt","undefined","Buttons","LEFT","MIDDLE","RIGHT","document","drag","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","onMouseMove","preventDefault","PerspectiveCamera","_super","props","needsUpdateProjection","__extends","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","projectionMat","Camera","position","rotationX","rotationY","rotationXMat","rotationYMat","viewMat","needsUpdateView","updateRotationX","amount","updateRotationY","moveForward","moveLeft","moveUp","WithKeyNavigation","Cam","class_1","updatePosFromKeys","speed","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","UP","W","DOWN","A","WithMouseRotation","class_2","_oldMouse","updateRotFromMouse","deltaX","deltaY","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","convertStackGLGeometry","stackglGeometry","geometry","tvs_libs_dist_lib_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","_contants__WEBPACK_IMPORTED_MODULE_0__","plane","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","offset2","indices","normal","uv","planeFromNormalAndCoplanarPoint","point","_vectors__WEBPACK_IMPORTED_MODULE_0__","mirrorMatrixFromPlane","getYawQuat","rotYAngle","getRollQuat","rotZAngle","polarToCartesian2D","coords","phi","_flatten","results","_generatePanel","config","rows","step","halfY","grid","_generateRow","_generateGrid","cells","_generateCells","positions","_generateUvs","vertexCount","halfX","row","_clonePanel","panel","_makeNormals","slice","_generateBox","panels","segs","segments","zp","xp","yp","zm","xm","ym","_generateBoxPanels","offsetCells","cell","_offsetCellIndices","properties","_createConfig","getElementById","painterState","getCanvasSize","events","INIT","START","viewport_ViewPort","moveSpeed","lookSpeed","camera","viewPort","ground_Ground","Ground","transform","gl_matrix","groundMirrorView","planeEquation","mirrorMatrix","g","ground","names","videos","Promise","all","video","createElement","crossOrigin","loop","source1","source2","appendChild","createVideo","rej","setTimeout","log","play","clearTimeout","planeSize","planeForm","boxForm","stackgl","box_default","screens_Screens","Screens","radius","rotations","_","rot","screenTransforms","sequence","pos","pedestalTransforms","vectors","lights","concat","lightSize","groundShade","ground_vert_default","ground_frag_default","objectShade","object_vert_default","object_frag_default","screenShade","screen_vert_default","screen_frag_default","strength","passData","direction","effectLayer","ground_reflection_frag_default","effects_assign","videoTextures","groundSketch","reflection","screens","lightTex","screenSketch","tex","pedestalSketch","sceneLayer","withDistance","groundHeight","renderer_layers","tickCounter","then","vs","scheduler"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,IAIAlC,IAAAmC,EAAA,mOClFA,IAAAC,EAAA,WACAC,EAAA,SACAC,EAAA,KACAC,EAAA,SACAC,EAAA,SACAC,GACAC,MAAA,KACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,IAAA,KACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,KAAA,MACAC,UAAA,MACAC,UAAA,MACAC,UAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,aAAA,MACAC,WAAA,MACAC,kBAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,iBAAA,MACAC,wBAAA,MACAC,oBAAA,MACAC,aAAA,KACAC,kBAAA,MACAC,kBAAA,MACAC,kBAAA,MACAC,eAAA,MACAC,eAAA,MACAC,iBAAA,MACAC,qBAAA,MACAC,wBAAA,MACAC,wBAAA,MACAC,0BAAA,MACAC,8BAAA,MACAC,WAAA,KACAC,iBAAA,MACAC,WAAA,MACAC,iBAAA,MACAC,KAAA,KACAC,cAAA,KACAC,MAAA,KACAC,eAAA,KACAC,uBAAA,MACAC,uBAAA,MACAC,qBAAA,MACAC,WAAA,KACAC,4BAAA,MACAC,6BAAA,MACAC,yBAAA,MACAC,+BAAA,MACAC,kBAAA,4xaCxDA,MAAAC,EAAA,KACA,IAAAC,EAAA,oBAAAC,0BAAAC,MACA,MAAAC,EAAAC,KAAAC,OAOA,SAAAC,EAAAC,GACAP,EAAAO,EAGA,MAAAC,EAAAJ,KAAAK,GAAA,IAOA,SAAAC,EAAAC,GACA,OAAAA,EAAAH,EAYA,SAAAI,EAAAD,EAAAE,GACA,OAAAT,KAAAU,IAAAH,EAAAE,IAAAd,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAH,GAAAP,KAAAU,IAAAD,IC5BA,SAAAvF,IACA,IAAA0F,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAAC,EAAAN,GACA,IAAAK,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAUA,SAAAE,EAAAF,EAAAL,GAKA,OAJAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EASA,SAAAG,EAAAH,GAKA,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAYA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAR,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAaA,SAAAS,EAAAT,EAAAK,EAAAC,EAAAC,EAAAC,GAKA,OAJAR,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAUA,SAAAU,EAAAV,EAAAL,GAGA,GAAAK,IAAAL,EAAA,CACA,IAAAgB,EAAAhB,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAW,OAEAX,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GAGA,OAAAK,EAUA,SAAAY,EAAAZ,EAAAL,GACA,IAAAkB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAGAqB,EAAAH,EAAAE,EAAAD,EAAAH,EAEA,OAAAK,GAGAA,EAAA,EAAAA,EAEAhB,EAAA,GAAAe,EAAAC,EACAhB,EAAA,IAAAW,EAAAK,EACAhB,EAAA,IAAAc,EAAAE,EACAhB,EAAA,GAAAa,EAAAG,EAEAhB,GATA,KAmBA,SAAAiB,EAAAjB,EAAAL,GAEA,IAAAkB,EAAAlB,EAAA,GAMA,OALAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,GAAAa,EAEAb,EASA,SAAAkB,EAAAvB,GACA,OAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAWA,SAAAwB,EAAAnB,EAAAL,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAKA,OAJAG,EAAA,GAAAa,EAAAO,EAAAN,EAAAO,EACArB,EAAA,GAAAW,EAAAS,EAAAL,EAAAM,EACArB,EAAA,GAAAa,EAAAS,EAAAR,EAAAS,EACAvB,EAAA,GAAAW,EAAAW,EAAAP,EAAAQ,EACAvB,EAWA,SAAAwB,EAAAxB,EAAAL,EAAA8B,GACA,IAAAZ,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACA5E,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAKA,OAJAzB,EAAA,GAAAa,EAAAxH,EAAAyH,EAAA/F,EACAiF,EAAA,GAAAW,EAAAtH,EAAA0H,EAAAhG,EACAiF,EAAA,GAAAa,GAAA9F,EAAA+F,EAAAzH,EACA2G,EAAA,GAAAW,GAAA5F,EAAAgG,EAAA1H,EACA2G,EAWA,SAAA4B,EAAA5B,EAAAL,EAAAkC,GACA,IAAAhB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACAmC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAKA,OAJA7B,EAAA,GAAAa,EAAAiB,EACA9B,EAAA,GAAAW,EAAAmB,EACA9B,EAAA,GAAAc,EAAAiB,EACA/B,EAAA,GAAAe,EAAAgB,EACA/B,EAcA,SAAAgC,EAAAhC,EAAAyB,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAKA,OAJAzB,EAAA,GAAA3G,EACA2G,EAAA,GAAAjF,EACAiF,EAAA,IAAAjF,EACAiF,EAAA,GAAA3G,EACA2G,EAcA,SAAAiC,EAAAjC,EAAA6B,GAKA,OAJA7B,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA6B,EAAA,GACA7B,EASA,SAAAkC,EAAAvC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASA,SAAAwC,EAAAxC,GACA,OAAAP,KAAAgD,KAAAhD,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,OAWA,SAAA2C,EAAAC,EAAAC,EAAAC,EAAA9C,GAKA,OAJA4C,EAAA,GAAA5C,EAAA,GAAAA,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GAAA4C,EAAA,GAAAE,EAAA,IACAF,EAAAC,EAAAC,GAWA,SAAAC,EAAA1C,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAA2C,EAAA3C,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAUA,SAAA4C,EAAAjD,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAAgD,EAAAlD,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,KACAlC,KAAAU,IAAAiB,EAAAQ,IAAAxC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,IAWA,SAAAuB,EAAA9C,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAYA,SAAA+C,EAAA/C,EAAAL,EAAAE,EAAAmD,GAKA,OAJAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAOA,MAAAiD,EAAA9B,EAMA+B,EAAAP,EClYA,SAAAQ,IACA,IAAAnD,EAAA,IAAAhB,EAAA,GAOA,OANAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAAoD,EAAAzD,GACA,IAAAK,EAAA,IAAAhB,EAAA,GAOA,OANAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAUA,SAAAqD,EAAArD,EAAAL,GAOA,OANAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EASA,SAAAsD,EAAAtD,GAOA,OANAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAcA,SAAAuD,EAAA5D,EAAAE,EAAAxG,EAAAC,EAAAkK,EAAAC,GACA,IAAAzD,EAAA,IAAAhB,EAAA,GAOA,OANAgB,EAAA,GAAAL,EACAK,EAAA,GAAAH,EACAG,EAAA,GAAA3G,EACA2G,EAAA,GAAA1G,EACA0G,EAAA,GAAAwD,EACAxD,EAAA,GAAAyD,EACAzD,EAeA,SAAA0D,EAAA1D,EAAAL,EAAAE,EAAAxG,EAAAC,EAAAkK,EAAAC,GAOA,OANAzD,EAAA,GAAAL,EACAK,EAAA,GAAAH,EACAG,EAAA,GAAA3G,EACA2G,EAAA,GAAA1G,EACA0G,EAAA,GAAAwD,EACAxD,EAAA,GAAAyD,EACAzD,EAUA,SAAA2D,EAAA3D,EAAAL,GACA,IAAAiE,EAAAjE,EAAA,GAAAkE,EAAAlE,EAAA,GAAAmE,EAAAnE,EAAA,GAAAoE,EAAApE,EAAA,GACAqE,EAAArE,EAAA,GAAAsE,EAAAtE,EAAA,GAEAqB,EAAA4C,EAAAG,EAAAF,EAAAC,EACA,OAAA9C,GAGAA,EAAA,EAAAA,EAEAhB,EAAA,GAAA+D,EAAA/C,EACAhB,EAAA,IAAA6D,EAAA7C,EACAhB,EAAA,IAAA8D,EAAA9C,EACAhB,EAAA,GAAA4D,EAAA5C,EACAhB,EAAA,IAAA8D,EAAAG,EAAAF,EAAAC,GAAAhD,EACAhB,EAAA,IAAA6D,EAAAG,EAAAJ,EAAAK,GAAAjD,EACAhB,GAVA,KAmBA,SAAAkE,EAAAvE,GACA,OAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAWA,SAAAwE,GAAAnE,EAAAL,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GAOA,OANAG,EAAA,GAAAa,EAAAO,EAAAN,EAAAO,EACArB,EAAA,GAAAW,EAAAS,EAAAL,EAAAM,EACArB,EAAA,GAAAa,EAAAS,EAAAR,EAAAS,EACAvB,EAAA,GAAAW,EAAAW,EAAAP,EAAAQ,EACAvB,EAAA,GAAAa,EAAAyD,EAAAxD,EAAAyD,EAAAH,EACApE,EAAA,GAAAW,EAAA2D,EAAAvD,EAAAwD,EAAAF,EACArE,EAWA,SAAAwE,GAAAxE,EAAAL,EAAA8B,GACA,IAAAZ,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GACA5E,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAOA,OANAzB,EAAA,GAAAa,EAAAxH,EAAAyH,EAAA/F,EACAiF,EAAA,GAAAW,EAAAtH,EAAA0H,EAAAhG,EACAiF,EAAA,GAAAa,GAAA9F,EAAA+F,EAAAzH,EACA2G,EAAA,GAAAW,GAAA5F,EAAAgG,EAAA1H,EACA2G,EAAA,GAAAoE,EACApE,EAAA,GAAAqE,EACArE,EAWA,SAAAyE,GAAAzE,EAAAL,EAAAkC,GACA,IAAAhB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GACAmC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAOA,OANA7B,EAAA,GAAAa,EAAAiB,EACA9B,EAAA,GAAAW,EAAAmB,EACA9B,EAAA,GAAAc,EAAAiB,EACA/B,EAAA,GAAAe,EAAAgB,EACA/B,EAAA,GAAAoE,EACApE,EAAA,GAAAqE,EACArE,EAWA,SAAA0E,GAAA1E,EAAAL,EAAAkC,GACA,IAAAhB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GACAmC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAOA,OANA7B,EAAA,GAAAa,EACAb,EAAA,GAAAW,EACAX,EAAA,GAAAc,EACAd,EAAA,GAAAe,EACAf,EAAA,GAAAa,EAAAiB,EAAAhB,EAAAiB,EAAAqC,EACApE,EAAA,GAAAW,EAAAmB,EAAAf,EAAAgB,EAAAsC,EACArE,EAcA,SAAA2E,GAAA3E,EAAAyB,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GAAApI,EAAA+F,KAAAuC,IAAAF,GAOA,OANAzB,EAAA,GAAA3G,EACA2G,EAAA,GAAAjF,EACAiF,EAAA,IAAAjF,EACAiF,EAAA,GAAA3G,EACA2G,EAAA,KACAA,EAAA,KACAA,EAcA,SAAA4E,GAAA5E,EAAA6B,GAOA,OANA7B,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAAA,KACAA,EAcA,SAAA6E,GAAA7E,EAAA6B,GAOA,OANA7B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA6B,EAAA,GACA7B,EAAA,GAAA6B,EAAA,GACA7B,EASA,SAAA8E,GAAAnF,GACA,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASA,SAAAoF,GAAApF,GACA,OAAAP,KAAAgD,KAAAhD,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,SAWA,SAAAqF,GAAAhF,EAAAL,EAAAE,GAOA,OANAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAiF,GAAAjF,EAAAL,EAAAE,GAOA,OANAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAkF,GAAAlF,EAAAL,EAAAE,GAOA,OANAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAYA,SAAAmF,GAAAnF,EAAAL,EAAAE,EAAAmD,GAOA,OANAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAUA,SAAAoF,GAAAzF,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAAwF,GAAA1F,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,KACAlC,KAAAU,IAAAiB,EAAAQ,IAAAxC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KACAnC,KAAAU,IAAAsE,EAAAE,IAAAvF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAsE,GAAAhF,KAAAU,IAAAwE,KACAlF,KAAAU,IAAAuE,EAAAE,IAAAxF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAuE,GAAAjF,KAAAU,IAAAyE,IAOA,MAAAe,GAAAnB,GAMAoB,GAAAN,GCjbA,SAAAO,KACA,IAAAxF,EAAA,IAAAhB,EAAA,GAUA,OATAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUA,SAAAyF,GAAAzF,EAAAL,GAUA,OATAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,IACAK,EASA,SAAA0F,GAAA/F,GACA,IAAAK,EAAA,IAAAhB,EAAA,GAUA,OATAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAUA,SAAA2F,GAAA3F,EAAAL,GAUA,OATAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAiBA,SAAA4F,GAAAvF,EAAAC,EAAAuF,EAAAtF,EAAAC,EAAAsF,EAAAC,EAAAC,EAAAC,GACA,IAAAjG,EAAA,IAAAhB,EAAA,GAUA,OATAgB,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA6F,EACA7F,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAA8F,EACA9F,EAAA,GAAA+F,EACA/F,EAAA,GAAAgG,EACAhG,EAAA,GAAAiG,EACAjG,EAkBA,SAAAkG,GAAAlG,EAAAK,EAAAC,EAAAuF,EAAAtF,EAAAC,EAAAsF,EAAAC,EAAAC,EAAAC,GAUA,OATAjG,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA6F,EACA7F,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAA8F,EACA9F,EAAA,GAAA+F,EACA/F,EAAA,GAAAgG,EACAhG,EAAA,GAAAiG,EACAjG,EASA,SAAAmG,GAAAnG,GAUA,OATAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUA,SAAAoG,GAAApG,EAAAL,GAEA,GAAAK,IAAAL,EAAA,CACA,IAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA4G,EAAA5G,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAqG,EACArG,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAsG,EACAtG,EAAA,GAAAuG,OAEAvG,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GAGA,OAAAK,EAUA,SAAAwG,GAAAxG,EAAAL,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,GAEAoH,EAAAD,EAAAH,EAAAJ,EAAAM,EACAG,GAAAF,EAAAJ,EAAAH,EAAAK,EACAK,EAAAJ,EAAAH,EAAAC,EAAAC,EAGA5F,EAAAyF,EAAAM,EAAAV,EAAAW,EAAAV,EAAAW,EAEA,OAAAjG,GAGAA,EAAA,EAAAA,EAEAhB,EAAA,GAAA+G,EAAA/F,EACAhB,EAAA,KAAA8G,EAAAT,EAAAC,EAAAO,GAAA7F,EACAhB,EAAA,IAAAuG,EAAAF,EAAAC,EAAAK,GAAA3F,EACAhB,EAAA,GAAAgH,EAAAhG,EACAhB,EAAA,IAAA8G,EAAAL,EAAAH,EAAAM,GAAA5F,EACAhB,EAAA,KAAAuG,EAAAE,EAAAH,EAAAI,GAAA1F,EACAhB,EAAA,GAAAiH,EAAAjG,EACAhB,EAAA,KAAA6G,EAAAJ,EAAAJ,EAAAO,GAAA5F,EACAhB,EAAA,IAAA2G,EAAAF,EAAAJ,EAAAK,GAAA1F,EACAhB,GAbA,KAuBA,SAAAkH,GAAAlH,EAAAL,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,GAWA,OATAK,EAAA,GAAA2G,EAAAG,EAAAP,EAAAM,EACA7G,EAAA,GAAAsG,EAAAO,EAAAR,EAAAS,EACA9G,EAAA,GAAAqG,EAAAE,EAAAD,EAAAK,EACA3G,EAAA,GAAAuG,EAAAK,EAAAF,EAAAI,EACA9G,EAAA,GAAAyG,EAAAK,EAAAR,EAAAM,EACA5G,EAAA,GAAAsG,EAAAI,EAAAD,EAAAF,EACAvG,EAAA,GAAA0G,EAAAG,EAAAF,EAAAC,EACA5G,EAAA,GAAAqG,EAAAO,EAAAH,EAAAI,EACA7G,EAAA,GAAAyG,EAAAE,EAAAN,EAAAK,EACA1G,EASA,SAAAmH,GAAAxH,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,GAEA,OAAA8G,GAAAK,EAAAH,EAAAJ,EAAAM,GAAAR,IAAAS,EAAAJ,EAAAH,EAAAK,GAAAN,GAAAO,EAAAH,EAAAC,EAAAC,GAWA,SAAAQ,GAAApH,EAAAL,EAAAE,GACA,IAAA4G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,GAEA0H,EAAAxH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAyH,EAAAzH,EAAA,GACA0H,EAAA1H,EAAA,GAAAmH,EAAAnH,EAAA,GAAA2H,EAAA3H,EAAA,GACA4H,EAAA5H,EAAA,GAAAoH,EAAApH,EAAA,GAAA6H,EAAA7H,EAAA,GAaA,OAXAG,EAAA,GAAAqH,EAAAZ,EAAAM,EAAAL,EAAAY,EAAAV,EACA5G,EAAA,GAAAqH,EAAAhB,EAAAU,EAAAJ,EAAAW,EAAAT,EACA7G,EAAA,GAAAqH,EAAAf,EAAAS,EAAAR,EAAAe,EAAAR,EAEA9G,EAAA,GAAAuH,EAAAd,EAAAO,EAAAN,EAAAc,EAAAZ,EACA5G,EAAA,GAAAuH,EAAAlB,EAAAW,EAAAL,EAAAa,EAAAX,EACA7G,EAAA,GAAAuH,EAAAjB,EAAAU,EAAAT,EAAAiB,EAAAV,EAEA9G,EAAA,GAAAyH,EAAAhB,EAAAQ,EAAAP,EAAAgB,EAAAd,EACA5G,EAAA,GAAAyH,EAAApB,EAAAY,EAAAN,EAAAe,EAAAb,EACA7G,EAAA,GAAAyH,EAAAnB,EAAAW,EAAAV,EAAAmB,EAAAZ,EACA9G,EAWA,SAAA2H,GAAA3H,EAAAL,EAAAkC,GACA,IAAA4E,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,GACAiI,EAAA/F,EAAA,GAAAgG,EAAAhG,EAAA,GAaA,OAXA7B,EAAA,GAAAyG,EACAzG,EAAA,GAAAqG,EACArG,EAAA,GAAAsG,EAEAtG,EAAA,GAAA0G,EACA1G,EAAA,GAAA2G,EACA3G,EAAA,GAAAuG,EAEAvG,EAAA,GAAA4H,EAAAnB,EAAAoB,EAAAnB,EAAAE,EACA5G,EAAA,GAAA4H,EAAAvB,EAAAwB,EAAAlB,EAAAE,EACA7G,EAAA,GAAA4H,EAAAtB,EAAAuB,EAAAtB,EAAAO,EACA9G,EAWA,SAAA8H,GAAA9H,EAAAL,EAAA8B,GACA,IAAAgF,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,GAEA5E,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAaA,OAXAzB,EAAA,GAAA3G,EAAAoN,EAAA1L,EAAA2L,EACA1G,EAAA,GAAA3G,EAAAgN,EAAAtL,EAAA4L,EACA3G,EAAA,GAAA3G,EAAAiN,EAAAvL,EAAAwL,EAEAvG,EAAA,GAAA3G,EAAAqN,EAAA3L,EAAA0L,EACAzG,EAAA,GAAA3G,EAAAsN,EAAA5L,EAAAsL,EACArG,EAAA,GAAA3G,EAAAkN,EAAAxL,EAAAuL,EAEAtG,EAAA,GAAA4G,EACA5G,EAAA,GAAA6G,EACA7G,EAAA,GAAA8G,EACA9G,EAWA,SAAA+H,GAAA/H,EAAAL,EAAAkC,GACA,IAAA+F,EAAA/F,EAAA,GAAAgG,EAAAhG,EAAA,GAaA,OAXA7B,EAAA,GAAA4H,EAAAjI,EAAA,GACAK,EAAA,GAAA4H,EAAAjI,EAAA,GACAK,EAAA,GAAA4H,EAAAjI,EAAA,GAEAK,EAAA,GAAA6H,EAAAlI,EAAA,GACAK,EAAA,GAAA6H,EAAAlI,EAAA,GACAK,EAAA,GAAA6H,EAAAlI,EAAA,GAEAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAcA,SAAAgI,GAAAhI,EAAA6B,GAUA,OATA7B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA6B,EAAA,GACA7B,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAcA,SAAAiI,GAAAjI,EAAAyB,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GAAApI,EAAA+F,KAAAuC,IAAAF,GAaA,OAXAzB,EAAA,GAAA3G,EACA2G,EAAA,GAAAjF,EACAiF,EAAA,KAEAA,EAAA,IAAAjF,EACAiF,EAAA,GAAA3G,EACA2G,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAcA,SAAAkI,GAAAlI,EAAA6B,GAYA,OAXA7B,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUA,SAAAmI,GAAAnI,EAAAL,GAYA,OAXAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,KAEAA,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,KAEAA,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,KACAA,EAWA,SAAAoI,GAAApI,EAAAqI,GACA,IAAAT,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IAEAK,EAAAf,EAAAY,EACAI,EAAAf,EAAAW,EACAK,EAAAhB,EAAAY,EACAK,EAAAR,EAAAE,EACAO,EAAAT,EAAAG,EACAO,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAcA,OAZA1I,EAAA,KAAA6I,EAAAG,EACAhJ,EAAA,GAAA4I,EAAAO,EACAnJ,EAAA,GAAA8I,EAAAI,EAEAlJ,EAAA,GAAA4I,EAAAO,EACAnJ,EAAA,KAAA2I,EAAAK,EACAhJ,EAAA,GAAA+I,EAAAE,EAEAjJ,EAAA,GAAA8I,EAAAI,EACAlJ,EAAA,GAAA+I,EAAAE,EACAjJ,EAAA,KAAA2I,EAAAE,EAEA7I,EAWA,SAAAoJ,GAAApJ,EAAAL,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA0J,EAAA1J,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GAAA2J,EAAA3J,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,IAAA4J,EAAA5J,EAAA,IACA6J,EAAA7J,EAAA,IAAA8J,EAAA9J,EAAA,IAAA+J,EAAA/J,EAAA,IAAAgK,EAAAhK,EAAA,IAEA0H,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAA6C,EAAAD,EAAA3C,EACAkD,EAAAvD,EAAAE,EAAAD,EAAAK,EACAkD,EAAAxD,EAAAiD,EAAAD,EAAA1C,EACAmD,EAAAxD,EAAAgD,EAAAD,EAAA9C,EACAwD,EAAAnD,EAAA6C,EAAA5C,EAAA2C,EACAQ,EAAApD,EAAA8C,EAAA5C,EAAA0C,EACAS,EAAArD,EAAA+C,EAAAJ,EAAAC,EACAU,EAAArD,EAAA6C,EAAA5C,EAAA2C,EACAlC,EAAAV,EAAA8C,EAAAJ,EAAAE,EACAzC,EAAAF,EAAA6C,EAAAJ,EAAAG,EAGA1I,EAAAqG,EAAAL,EAAAD,EAAAQ,EAAAD,EAAA4C,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAA/I,GAGAA,EAAA,EAAAA,EAEAhB,EAAA,IAAA2G,EAAAK,EAAAT,EAAAgB,EAAA+B,EAAAY,GAAAlJ,EACAhB,EAAA,IAAAuG,EAAA0D,EAAAvD,EAAAM,EAAAsC,EAAAU,GAAAhJ,EACAhB,EAAA,IAAA0G,EAAAa,EAAAZ,EAAAsD,EAAAX,EAAAS,GAAA/I,EAEAhB,EAAA,IAAAsG,EAAAiB,EAAAlB,EAAAW,EAAAqC,EAAAa,GAAAlJ,EACAhB,EAAA,IAAAyG,EAAAO,EAAAV,EAAA2D,EAAAZ,EAAAW,GAAAhJ,EACAhB,EAAA,IAAAqG,EAAA4D,EAAAxD,EAAAc,EAAA8B,EAAAU,GAAA/I,EAEAhB,EAAA,IAAAyJ,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAA5I,EACAhB,EAAA,IAAA0J,EAAApC,EAAAkC,EAAAM,EAAAH,EAAA5C,GAAA/F,EACAhB,EAAA,IAAAwJ,EAAAK,EAAAJ,EAAAnC,EAAAqC,EAAAtC,GAAArG,EAEAhB,GAhBA,KA2BA,SAAAmK,GAAAnK,EAAAoK,EAAAC,GAUA,OATArK,EAAA,KAAAoK,EACApK,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAqK,EACArK,EAAA,KACAA,EAAA,MACAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAAsK,GAAA3K,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASA,SAAA4K,GAAA5K,GACA,OAAAP,KAAAgD,KAAAhD,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,OAWA,SAAA6K,GAAAxK,EAAAL,EAAAE,GAUA,OATAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAyK,GAAAzK,EAAAL,EAAAE,GAUA,OATAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAaA,SAAA0K,GAAA1K,EAAAL,EAAAE,GAUA,OATAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAYA,SAAA2K,GAAA3K,EAAAL,EAAAE,EAAAmD,GAUA,OATAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAUA,SAAA4K,GAAAjL,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAAgL,GAAAlL,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GAAAmL,EAAAnL,EAAA,GAAAoL,EAAApL,EAAA,GAAAqL,EAAArL,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAAAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GAAAoL,EAAApL,EAAA,GAAAqL,EAAArL,EAAA,GAAAsL,EAAAtL,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,KACAlC,KAAAU,IAAAiB,EAAAQ,IAAAxC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KACAnC,KAAAU,IAAAsE,EAAAE,IAAAvF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAsE,GAAAhF,KAAAU,IAAAwE,KACAlF,KAAAU,IAAAuE,EAAAE,IAAAxF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAuE,GAAAjF,KAAAU,IAAAyE,KACAnF,KAAAU,IAAAgL,EAAAG,IAAAlM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgL,GAAA1L,KAAAU,IAAAmL,KACA7L,KAAAU,IAAAiL,EAAAG,IAAAnM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiL,GAAA3L,KAAAU,IAAAoL,KACA9L,KAAAU,IAAAkL,EAAAG,IAAApM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkL,GAAA5L,KAAAU,IAAAqL,IAOA,MAAAC,GAAAhE,GAMAiE,GAAAZ,GC5tBA,SAAAa,KACA,IAAAtL,EAAA,IAAAhB,EAAA,IAiBA,OAhBAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EASA,SAAAuL,GAAA5L,GACA,IAAAK,EAAA,IAAAhB,EAAA,IAiBA,OAhBAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAUA,SAAAwL,GAAAxL,EAAAL,GAiBA,OAhBAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAwBA,SAAAyL,GAAApL,EAAAC,EAAAuF,EAAA6F,EAAAnL,EAAAC,EAAAsF,EAAA6F,EAAA5F,EAAAC,EAAAC,EAAA2F,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAhM,EAAA,IAAAhB,EAAA,IAiBA,OAhBAgB,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA6F,EACA7F,EAAA,GAAA0L,EACA1L,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAA8F,EACA9F,EAAA,GAAA2L,EACA3L,EAAA,GAAA+F,EACA/F,EAAA,GAAAgG,EACAhG,EAAA,IAAAiG,EACAjG,EAAA,IAAA4L,EACA5L,EAAA,IAAA6L,EACA7L,EAAA,IAAA8L,EACA9L,EAAA,IAAA+L,EACA/L,EAAA,IAAAgM,EACAhM,EAyBA,SAAAiM,GAAAjM,EAAAK,EAAAC,EAAAuF,EAAA6F,EAAAnL,EAAAC,EAAAsF,EAAA6F,EAAA5F,EAAAC,EAAAC,EAAA2F,EAAAC,EAAAC,EAAAC,EAAAC,GAiBA,OAhBAhM,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA6F,EACA7F,EAAA,GAAA0L,EACA1L,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAA8F,EACA9F,EAAA,GAAA2L,EACA3L,EAAA,GAAA+F,EACA/F,EAAA,GAAAgG,EACAhG,EAAA,IAAAiG,EACAjG,EAAA,IAAA4L,EACA5L,EAAA,IAAA6L,EACA7L,EAAA,IAAA8L,EACA9L,EAAA,IAAA+L,EACA/L,EAAA,IAAAgM,EACAhM,EAUA,SAAAkM,GAAAlM,GAiBA,OAhBAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAUA,SAAAmM,GAAAnM,EAAAL,GAEA,GAAAK,IAAAL,EAAA,CACA,IAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA0J,EAAA1J,EAAA,GACA4G,EAAA5G,EAAA,GAAA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,IAEAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,IACAK,EAAA,GAAAqG,EACArG,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,IACAK,EAAA,GAAAsG,EACAtG,EAAA,GAAAuG,EACAvG,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAqJ,EACArJ,EAAA,IAAAsJ,EACAtJ,EAAA,IAAAuJ,OAEAvJ,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,IACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,IACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IAGA,OAAAK,EAUA,SAAAoM,GAAApM,EAAAL,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA0J,EAAA1J,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GAAA2J,EAAA3J,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,IAAA4J,EAAA5J,EAAA,IACA6J,EAAA7J,EAAA,IAAA8J,EAAA9J,EAAA,IAAA+J,EAAA/J,EAAA,IAAAgK,EAAAhK,EAAA,IAEA0H,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAA6C,EAAAD,EAAA3C,EACAkD,EAAAvD,EAAAE,EAAAD,EAAAK,EACAkD,EAAAxD,EAAAiD,EAAAD,EAAA1C,EACAmD,EAAAxD,EAAAgD,EAAAD,EAAA9C,EACAwD,EAAAnD,EAAA6C,EAAA5C,EAAA2C,EACAQ,EAAApD,EAAA8C,EAAA5C,EAAA0C,EACAS,EAAArD,EAAA+C,EAAAJ,EAAAC,EACAU,EAAArD,EAAA6C,EAAA5C,EAAA2C,EACAlC,EAAAV,EAAA8C,EAAAJ,EAAAE,EACAzC,EAAAF,EAAA6C,EAAAJ,EAAAG,EAGA1I,EAAAqG,EAAAL,EAAAD,EAAAQ,EAAAD,EAAA4C,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAA/I,GAGAA,EAAA,EAAAA,EAEAhB,EAAA,IAAA2G,EAAAK,EAAAT,EAAAgB,EAAA+B,EAAAY,GAAAlJ,EACAhB,EAAA,IAAAsG,EAAAiB,EAAAlB,EAAAW,EAAAqC,EAAAa,GAAAlJ,EACAhB,EAAA,IAAAyJ,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAA5I,EACAhB,EAAA,IAAA8G,EAAA+C,EAAAhD,EAAAiD,EAAAP,EAAAK,GAAA5I,EACAhB,EAAA,IAAAuG,EAAA0D,EAAAvD,EAAAM,EAAAsC,EAAAU,GAAAhJ,EACAhB,EAAA,IAAAyG,EAAAO,EAAAV,EAAA2D,EAAAZ,EAAAW,GAAAhJ,EACAhB,EAAA,IAAA0J,EAAApC,EAAAkC,EAAAM,EAAAH,EAAA5C,GAAA/F,EACAhB,EAAA,IAAA4G,EAAAkD,EAAAhD,EAAAQ,EAAAiC,EAAAxC,GAAA/F,EACAhB,EAAA,IAAA0G,EAAAa,EAAAZ,EAAAsD,EAAAX,EAAAS,GAAA/I,EACAhB,EAAA,IAAAqG,EAAA4D,EAAAxD,EAAAc,EAAA8B,EAAAU,GAAA/I,EACAhB,EAAA,KAAAwJ,EAAAK,EAAAJ,EAAAnC,EAAAqC,EAAAtC,GAAArG,EACAhB,EAAA,KAAA6G,EAAAS,EAAAV,EAAAiD,EAAAN,EAAAlC,GAAArG,EACAhB,EAAA,KAAA2G,EAAAqD,EAAAtD,EAAAwD,EAAA3D,EAAAwD,GAAA/I,EACAhB,EAAA,KAAAyG,EAAAyD,EAAA7D,EAAA2D,EAAA1D,EAAAyD,GAAA/I,EACAhB,EAAA,KAAAyJ,EAAA1C,EAAAyC,EAAAI,EAAAF,EAAArC,GAAArG,EACAhB,EAAA,KAAA4G,EAAAgD,EAAA/C,EAAAE,EAAAD,EAAAO,GAAArG,EAEAhB,GArBA,KA+BA,SAAAqM,GAAArM,EAAAL,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA0J,EAAA1J,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GAAA2J,EAAA3J,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,IAAA4J,EAAA5J,EAAA,IACA6J,EAAA7J,EAAA,IAAA8J,EAAA9J,EAAA,IAAA+J,EAAA/J,EAAA,IAAAgK,EAAAhK,EAAA,IAkBA,OAhBAK,EAAA,GAAA2G,GAAAG,EAAA6C,EAAAJ,EAAAG,GAAA7C,GAAAN,EAAAoD,EAAAL,EAAAI,GAAAD,GAAAlD,EAAAgD,EAAAD,EAAAxC,GACA9G,EAAA,KAAAqG,GAAAS,EAAA6C,EAAAJ,EAAAG,GAAA7C,GAAAP,EAAAqD,EAAAN,EAAAK,GAAAD,GAAAnD,EAAAiD,EAAAF,EAAAvC,IACA9G,EAAA,GAAAqG,GAAAE,EAAAoD,EAAAL,EAAAI,GAAA/C,GAAAL,EAAAqD,EAAAN,EAAAK,GAAAD,GAAAnD,EAAAgD,EAAAD,EAAA9C,GACAvG,EAAA,KAAAqG,GAAAE,EAAAgD,EAAAD,EAAAxC,GAAAH,GAAAL,EAAAiD,EAAAF,EAAAvC,GAAAD,GAAAP,EAAAgD,EAAAD,EAAA9C,IACAvG,EAAA,KAAA0G,GAAAI,EAAA6C,EAAAJ,EAAAG,GAAA9C,GAAAL,EAAAoD,EAAAL,EAAAI,GAAAF,GAAAjD,EAAAgD,EAAAD,EAAAxC,IACA9G,EAAA,GAAAyG,GAAAK,EAAA6C,EAAAJ,EAAAG,GAAA9C,GAAAN,EAAAqD,EAAAN,EAAAK,GAAAF,GAAAlD,EAAAiD,EAAAF,EAAAvC,GACA9G,EAAA,KAAAyG,GAAAF,EAAAoD,EAAAL,EAAAI,GAAAhD,GAAAJ,EAAAqD,EAAAN,EAAAK,GAAAF,GAAAlD,EAAAgD,EAAAD,EAAA9C,IACAvG,EAAA,GAAAyG,GAAAF,EAAAgD,EAAAD,EAAAxC,GAAAJ,GAAAJ,EAAAiD,EAAAF,EAAAvC,GAAAF,GAAAN,EAAAgD,EAAAD,EAAA9C,GACAvG,EAAA,GAAA0G,GAAAG,EAAA8C,EAAAJ,EAAAE,GAAA7C,GAAAD,EAAAgD,EAAAL,EAAAG,GAAAD,GAAA7C,EAAA4C,EAAAD,EAAAzC,GACA7G,EAAA,KAAAyG,GAAAI,EAAA8C,EAAAJ,EAAAE,GAAA7C,GAAAP,EAAAsD,EAAAN,EAAAI,GAAAD,GAAAnD,EAAAkD,EAAAF,EAAAxC,IACA7G,EAAA,IAAAyG,GAAAE,EAAAgD,EAAAL,EAAAG,GAAA/C,GAAAL,EAAAsD,EAAAN,EAAAI,GAAAD,GAAAnD,EAAAiD,EAAAD,EAAA1C,GACA3G,EAAA,MAAAyG,GAAAE,EAAA4C,EAAAD,EAAAzC,GAAAH,GAAAL,EAAAkD,EAAAF,EAAAxC,GAAAD,GAAAP,EAAAiD,EAAAD,EAAA1C,IACA3G,EAAA,MAAA0G,GAAAG,EAAA6C,EAAA5C,EAAA2C,GAAA7C,GAAAD,EAAA+C,EAAAnD,EAAAkD,GAAAD,GAAA7C,EAAAG,EAAAP,EAAAM,IACA7G,EAAA,IAAAyG,GAAAI,EAAA6C,EAAA5C,EAAA2C,GAAA7C,GAAAP,EAAAqD,EAAApD,EAAAmD,GAAAD,GAAAnD,EAAAS,EAAAR,EAAAO,GACA7G,EAAA,MAAAyG,GAAAE,EAAA+C,EAAAnD,EAAAkD,GAAA/C,GAAAL,EAAAqD,EAAApD,EAAAmD,GAAAD,GAAAnD,EAAAE,EAAAD,EAAAK,IACA3G,EAAA,IAAAyG,GAAAE,EAAAG,EAAAP,EAAAM,GAAAH,GAAAL,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAE,EAAAD,EAAAK,GACA3G,EASA,SAAAsM,GAAA3M,GACA,IAAA8G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA0J,EAAA1J,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GAAA2J,EAAA3J,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,IAAA4J,EAAA5J,EAAA,IACA6J,EAAA7J,EAAA,IAAA8J,EAAA9J,EAAA,IAAA+J,EAAA/J,EAAA,IAAAgK,EAAAhK,EAAA,IAgBA,OAdA8G,EAAAE,EAAAN,EAAAK,IAWAI,EAAA6C,EAAAJ,EAAAG,IAVAjD,EAAAF,EAAAD,EAAAI,IASAG,EAAA8C,EAAAJ,EAAAE,IARAhD,EAAA6C,EAAAD,EAAA3C,IAOAG,EAAA6C,EAAA5C,EAAA2C,IANApD,EAAAE,EAAAD,EAAAK,IAKAC,EAAA+C,EAAAJ,EAAAC,IAJAnD,EAAAiD,EAAAD,EAAA1C,IAGAC,EAAA8C,EAAA5C,EAAA0C,IAFAlD,EAAAgD,EAAAD,EAAA9C,IACAK,EAAA6C,EAAA5C,EAAA2C,GAmBA,SAAA+C,GAAAvM,EAAAL,EAAAE,GACA,IAAA4G,EAAA9G,EAAA,GAAA0G,EAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,GAAA0J,EAAA1J,EAAA,GACA+G,EAAA/G,EAAA,GAAAgH,EAAAhH,EAAA,GAAA4G,EAAA5G,EAAA,GAAA2J,EAAA3J,EAAA,GACAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,GAAAmH,EAAAnH,EAAA,IAAA4J,EAAA5J,EAAA,IACA6J,EAAA7J,EAAA,IAAA8J,EAAA9J,EAAA,IAAA+J,EAAA/J,EAAA,IAAAgK,EAAAhK,EAAA,IAGAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAuBA,OAtBAG,EAAA,GAAAoB,EAAAqF,EAAApF,EAAAqF,EAAApF,EAAAsF,EAAArF,EAAAiI,EACAxJ,EAAA,GAAAoB,EAAAiF,EAAAhF,EAAAsF,EAAArF,EAAAuF,EAAAtF,EAAAkI,EACAzJ,EAAA,GAAAoB,EAAAkF,EAAAjF,EAAAkF,EAAAjF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,GAAAoB,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAoI,EAEAvI,EAAAvB,EAAA,GAAYwB,EAAAxB,EAAA,GAAWyB,EAAAzB,EAAA,GAAW0B,EAAA1B,EAAA,GAClCG,EAAA,GAAAoB,EAAAqF,EAAApF,EAAAqF,EAAApF,EAAAsF,EAAArF,EAAAiI,EACAxJ,EAAA,GAAAoB,EAAAiF,EAAAhF,EAAAsF,EAAArF,EAAAuF,EAAAtF,EAAAkI,EACAzJ,EAAA,GAAAoB,EAAAkF,EAAAjF,EAAAkF,EAAAjF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,GAAAoB,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAoI,EAEAvI,EAAAvB,EAAA,GAAYwB,EAAAxB,EAAA,GAAWyB,EAAAzB,EAAA,IAAY0B,EAAA1B,EAAA,IACnCG,EAAA,GAAAoB,EAAAqF,EAAApF,EAAAqF,EAAApF,EAAAsF,EAAArF,EAAAiI,EACAxJ,EAAA,GAAAoB,EAAAiF,EAAAhF,EAAAsF,EAAArF,EAAAuF,EAAAtF,EAAAkI,EACAzJ,EAAA,IAAAoB,EAAAkF,EAAAjF,EAAAkF,EAAAjF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,IAAAoB,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAoI,EAEAvI,EAAAvB,EAAA,IAAawB,EAAAxB,EAAA,IAAYyB,EAAAzB,EAAA,IAAY0B,EAAA1B,EAAA,IACrCG,EAAA,IAAAoB,EAAAqF,EAAApF,EAAAqF,EAAApF,EAAAsF,EAAArF,EAAAiI,EACAxJ,EAAA,IAAAoB,EAAAiF,EAAAhF,EAAAsF,EAAArF,EAAAuF,EAAAtF,EAAAkI,EACAzJ,EAAA,IAAAoB,EAAAkF,EAAAjF,EAAAkF,EAAAjF,EAAAwF,EAAAvF,EAAAmI,EACA1J,EAAA,IAAAoB,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAiI,EAAAhI,EAAAoI,EACA3J,EAWA,SAAAwM,GAAAxM,EAAAL,EAAAkC,GACA,IACA4E,EAAAJ,EAAAC,EAAA+C,EACA3C,EAAAC,EAAAJ,EAAA+C,EACA1C,EAAAC,EAAAC,EAAAyC,EAHA3B,EAAA/F,EAAA,GAAAgG,EAAAhG,EAAA,GAAAyG,EAAAzG,EAAA,GAyBA,OApBAlC,IAAAK,GACAA,EAAA,IAAAL,EAAA,GAAAiI,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,IACAK,EAAA,IAAAL,EAAA,GAAAiI,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,IACAK,EAAA,IAAAL,EAAA,GAAAiI,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,IAAA2I,EAAA3I,EAAA,IACAK,EAAA,IAAAL,EAAA,GAAAiI,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,IAAA2I,EAAA3I,EAAA,MAEA8G,EAAA9G,EAAA,GAAe0G,EAAA1G,EAAA,GAAY2G,EAAA3G,EAAA,GAAY0J,EAAA1J,EAAA,GACvC+G,EAAA/G,EAAA,GAAegH,EAAAhH,EAAA,GAAY4G,EAAA5G,EAAA,GAAY2J,EAAA3J,EAAA,GACvCiH,EAAAjH,EAAA,GAAekH,EAAAlH,EAAA,GAAYmH,EAAAnH,EAAA,IAAa4J,EAAA5J,EAAA,IAExCK,EAAA,GAAAyG,EAAiBzG,EAAA,GAAAqG,EAAcrG,EAAA,GAAAsG,EAActG,EAAA,GAAAqJ,EAC7CrJ,EAAA,GAAA0G,EAAiB1G,EAAA,GAAA2G,EAAc3G,EAAA,GAAAuG,EAAcvG,EAAA,GAAAsJ,EAC7CtJ,EAAA,GAAA4G,EAAiB5G,EAAA,GAAA6G,EAAc7G,EAAA,IAAA8G,EAAe9G,EAAA,IAAAuJ,EAE9CvJ,EAAA,IAAAyG,EAAAmB,EAAAlB,EAAAmB,EAAAjB,EAAA0B,EAAA3I,EAAA,IACAK,EAAA,IAAAqG,EAAAuB,EAAAjB,EAAAkB,EAAAhB,EAAAyB,EAAA3I,EAAA,IACAK,EAAA,IAAAsG,EAAAsB,EAAArB,EAAAsB,EAAAf,EAAAwB,EAAA3I,EAAA,IACAK,EAAA,IAAAqJ,EAAAzB,EAAA0B,EAAAzB,EAAA0B,EAAAjB,EAAA3I,EAAA,KAGAK,EAWA,SAAAyM,GAAAzM,EAAAL,EAAAkC,GACA,IAAA+F,EAAA/F,EAAA,GAAAgG,EAAAhG,EAAA,GAAAyG,EAAAzG,EAAA,GAkBA,OAhBA7B,EAAA,GAAAL,EAAA,GAAAiI,EACA5H,EAAA,GAAAL,EAAA,GAAAiI,EACA5H,EAAA,GAAAL,EAAA,GAAAiI,EACA5H,EAAA,GAAAL,EAAA,GAAAiI,EACA5H,EAAA,GAAAL,EAAA,GAAAkI,EACA7H,EAAA,GAAAL,EAAA,GAAAkI,EACA7H,EAAA,GAAAL,EAAA,GAAAkI,EACA7H,EAAA,GAAAL,EAAA,GAAAkI,EACA7H,EAAA,GAAAL,EAAA,GAAA2I,EACAtI,EAAA,GAAAL,EAAA,GAAA2I,EACAtI,EAAA,IAAAL,EAAA,IAAA2I,EACAtI,EAAA,IAAAL,EAAA,IAAA2I,EACAtI,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAYA,SAAA0M,GAAA1M,EAAAL,EAAA8B,EAAAkL,GACA,IAEA5R,EAAA1B,EAAAa,EACAuM,EAAAJ,EAAAC,EAAA+C,EACA3C,EAAAC,EAAAJ,EAAA+C,EACA1C,EAAAC,EAAAC,EAAAyC,EACAlC,EAAAN,EAAAO,EACAC,EAAAP,EAAAQ,EACAC,EAAAR,EAAAS,EARAE,EAAA+E,EAAA,GAAA9E,EAAA8E,EAAA,GAAArE,EAAAqE,EAAA,GACAC,EAAAxN,KAAAgD,KAAAwF,IAAAC,IAAAS,KASA,OAAAsE,EAAA7N,EAA+B,MAG/B6I,GADAgF,EAAA,EAAAA,EAEA/E,GAAA+E,EACAtE,GAAAsE,EAEA7R,EAAAqE,KAAAsC,IAAAD,GAEAvH,EAAA,GADAb,EAAA+F,KAAAuC,IAAAF,IAGAgF,EAAA9G,EAAA,GAAa0G,EAAA1G,EAAA,GAAY2G,EAAA3G,EAAA,GAAY0J,EAAA1J,EAAA,GACrC+G,EAAA/G,EAAA,GAAagH,EAAAhH,EAAA,GAAY4G,EAAA5G,EAAA,GAAY2J,EAAA3J,EAAA,GACrCiH,EAAAjH,EAAA,GAAakH,EAAAlH,EAAA,GAAYmH,EAAAnH,EAAA,IAAa4J,EAAA5J,EAAA,IAGtC0H,EAAAO,IAAA1N,EAAAb,EAAsB0N,EAAAc,EAAAD,EAAA1N,EAAAoO,EAAAvN,EAAyBuM,EAAAgB,EAAAV,EAAA1N,EAAA2N,EAAA9M,EAC/CwM,EAAAK,EAAAC,EAAA3N,EAAAoO,EAAAvN,EAA0BiM,EAAAa,IAAA3N,EAAAb,EAAqBmO,EAAAc,EAAAT,EAAA3N,EAAA0N,EAAA7M,EAC/C0M,EAAAG,EAAAU,EAAApO,EAAA2N,EAAA9M,EAA0BkM,EAAAY,EAAAS,EAAApO,EAAA0N,EAAA7M,EAAyB2M,EAAAY,IAAApO,EAAAb,EAGnD2G,EAAA,GAAAyG,EAAAY,EAAAX,EAAAK,EAAAH,EAAAU,EACAtH,EAAA,GAAAqG,EAAAgB,EAAAV,EAAAI,EAAAF,EAAAS,EACAtH,EAAA,GAAAsG,EAAAe,EAAAd,EAAAQ,EAAAD,EAAAQ,EACAtH,EAAA,GAAAqJ,EAAAhC,EAAAiC,EAAAvC,EAAAwC,EAAAjC,EACAtH,EAAA,GAAAyG,EAAAc,EAAAb,EAAAM,EAAAJ,EAAAY,EACAxH,EAAA,GAAAqG,EAAAkB,EAAAZ,EAAAK,EAAAH,EAAAW,EACAxH,EAAA,GAAAsG,EAAAiB,EAAAhB,EAAAS,EAAAF,EAAAU,EACAxH,EAAA,GAAAqJ,EAAA9B,EAAA+B,EAAAtC,EAAAuC,EAAA/B,EACAxH,EAAA,GAAAyG,EAAAgB,EAAAf,EAAAO,EAAAL,EAAAc,EACA1H,EAAA,GAAAqG,EAAAoB,EAAAd,EAAAM,EAAAJ,EAAAa,EACA1H,EAAA,IAAAsG,EAAAmB,EAAAlB,EAAAU,EAAAH,EAAAY,EACA1H,EAAA,IAAAqJ,EAAA5B,EAAA6B,EAAArC,EAAAsC,EAAA7B,EAEA/H,IAAAK,IACAA,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,KAEAK,GAWA,SAAA6M,GAAA7M,EAAAL,EAAA8B,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GACAiF,EAAA/G,EAAA,GACAgH,EAAAhH,EAAA,GACA4G,EAAA5G,EAAA,GACA2J,EAAA3J,EAAA,GACAiH,EAAAjH,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,IACA4J,EAAA5J,EAAA,IAsBA,OApBAA,IAAAK,IACAA,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,KAIAK,EAAA,GAAA0G,EAAArN,EAAAuN,EAAA7L,EACAiF,EAAA,GAAA2G,EAAAtN,EAAAwN,EAAA9L,EACAiF,EAAA,GAAAuG,EAAAlN,EAAAyN,EAAA/L,EACAiF,EAAA,GAAAsJ,EAAAjQ,EAAAkQ,EAAAxO,EACAiF,EAAA,GAAA4G,EAAAvN,EAAAqN,EAAA3L,EACAiF,EAAA,GAAA6G,EAAAxN,EAAAsN,EAAA5L,EACAiF,EAAA,IAAA8G,EAAAzN,EAAAkN,EAAAxL,EACAiF,EAAA,IAAAuJ,EAAAlQ,EAAAiQ,EAAAvO,EACAiF,EAWA,SAAA8M,GAAA9M,EAAAL,EAAA8B,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GACAgF,EAAA9G,EAAA,GACA0G,EAAA1G,EAAA,GACA2G,EAAA3G,EAAA,GACA0J,EAAA1J,EAAA,GACAiH,EAAAjH,EAAA,GACAkH,EAAAlH,EAAA,GACAmH,EAAAnH,EAAA,IACA4J,EAAA5J,EAAA,IAsBA,OApBAA,IAAAK,IACAA,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,KAIAK,EAAA,GAAAyG,EAAApN,EAAAuN,EAAA7L,EACAiF,EAAA,GAAAqG,EAAAhN,EAAAwN,EAAA9L,EACAiF,EAAA,GAAAsG,EAAAjN,EAAAyN,EAAA/L,EACAiF,EAAA,GAAAqJ,EAAAhQ,EAAAkQ,EAAAxO,EACAiF,EAAA,GAAAyG,EAAA1L,EAAA6L,EAAAvN,EACA2G,EAAA,GAAAqG,EAAAtL,EAAA8L,EAAAxN,EACA2G,EAAA,IAAAsG,EAAAvL,EAAA+L,EAAAzN,EACA2G,EAAA,IAAAqJ,EAAAtO,EAAAwO,EAAAlQ,EACA2G,EAWA,SAAA+M,GAAA/M,EAAAL,EAAA8B,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GACAgF,EAAA9G,EAAA,GACA0G,EAAA1G,EAAA,GACA2G,EAAA3G,EAAA,GACA0J,EAAA1J,EAAA,GACA+G,EAAA/G,EAAA,GACAgH,EAAAhH,EAAA,GACA4G,EAAA5G,EAAA,GACA2J,EAAA3J,EAAA,GAsBA,OApBAA,IAAAK,IACAA,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,IACAK,EAAA,IAAAL,EAAA,KAIAK,EAAA,GAAAyG,EAAApN,EAAAqN,EAAA3L,EACAiF,EAAA,GAAAqG,EAAAhN,EAAAsN,EAAA5L,EACAiF,EAAA,GAAAsG,EAAAjN,EAAAkN,EAAAxL,EACAiF,EAAA,GAAAqJ,EAAAhQ,EAAAiQ,EAAAvO,EACAiF,EAAA,GAAA0G,EAAArN,EAAAoN,EAAA1L,EACAiF,EAAA,GAAA2G,EAAAtN,EAAAgN,EAAAtL,EACAiF,EAAA,GAAAuG,EAAAlN,EAAAiN,EAAAvL,EACAiF,EAAA,GAAAsJ,EAAAjQ,EAAAgQ,EAAAtO,EACAiF,EAcA,SAAAgN,GAAAhN,EAAA6B,GAiBA,OAhBA7B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA6B,EAAA,GACA7B,EAAA,IAAA6B,EAAA,GACA7B,EAAA,IAAA6B,EAAA,GACA7B,EAAA,MACAA,EAcA,SAAAiN,GAAAjN,EAAA6B,GAiBA,OAhBA7B,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA6B,EAAA,GACA7B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA6B,EAAA,GACA7B,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAeA,SAAAkN,GAAAlN,EAAAyB,EAAAkL,GACA,IAEA5R,EAAA1B,EAAAa,EAFA0N,EAAA+E,EAAA,GAAA9E,EAAA8E,EAAA,GAAArE,EAAAqE,EAAA,GACAC,EAAAxN,KAAAgD,KAAAwF,IAAAC,IAAAS,KAGA,OAAAsE,EAAA7N,EAA+B,MAG/B6I,GADAgF,EAAA,EAAAA,EAEA/E,GAAA+E,EACAtE,GAAAsE,EAEA7R,EAAAqE,KAAAsC,IAAAD,GAEAvH,EAAA,GADAb,EAAA+F,KAAAuC,IAAAF,IAIAzB,EAAA,GAAA4H,IAAA1N,EAAAb,EACA2G,EAAA,GAAA6H,EAAAD,EAAA1N,EAAAoO,EAAAvN,EACAiF,EAAA,GAAAsI,EAAAV,EAAA1N,EAAA2N,EAAA9M,EACAiF,EAAA,KACAA,EAAA,GAAA4H,EAAAC,EAAA3N,EAAAoO,EAAAvN,EACAiF,EAAA,GAAA6H,IAAA3N,EAAAb,EACA2G,EAAA,GAAAsI,EAAAT,EAAA3N,EAAA0N,EAAA7M,EACAiF,EAAA,KACAA,EAAA,GAAA4H,EAAAU,EAAApO,EAAA2N,EAAA9M,EACAiF,EAAA,GAAA6H,EAAAS,EAAApO,EAAA0N,EAAA7M,EACAiF,EAAA,IAAAsI,IAAApO,EAAAb,EACA2G,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcA,SAAAmN,GAAAnN,EAAAyB,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAmBA,OAhBAzB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA3G,EACA2G,EAAA,GAAAjF,EACAiF,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAjF,EACAiF,EAAA,IAAA3G,EACA2G,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcA,SAAAoN,GAAApN,EAAAyB,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAmBA,OAhBAzB,EAAA,GAAA3G,EACA2G,EAAA,KACAA,EAAA,IAAAjF,EACAiF,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAjF,EACAiF,EAAA,KACAA,EAAA,IAAA3G,EACA2G,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcA,SAAAqN,GAAArN,EAAAyB,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACApI,EAAA+F,KAAAuC,IAAAF,GAmBA,OAhBAzB,EAAA,GAAA3G,EACA2G,EAAA,GAAAjF,EACAiF,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAjF,EACAiF,EAAA,GAAA3G,EACA2G,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAkBA,SAAAsN,GAAAtN,EAAAqI,EAAAxG,GAEA,IAAA+F,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IAEAK,EAAAf,EAAAY,EACA+E,EAAA3F,EAAAa,EACA+E,EAAA5F,EAAAc,EACAG,EAAAhB,EAAAY,EACAgF,EAAA5F,EAAAa,EACAM,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAmBA,OAjBA1I,EAAA,MAAA6I,EAAAG,GACAhJ,EAAA,GAAAuN,EAAApE,EACAnJ,EAAA,GAAAwN,EAAAtE,EACAlJ,EAAA,KACAA,EAAA,GAAAuN,EAAApE,EACAnJ,EAAA,MAAA2I,EAAAK,GACAhJ,EAAA,GAAAyN,EAAAxE,EACAjJ,EAAA,KACAA,EAAA,GAAAwN,EAAAtE,EACAlJ,EAAA,GAAAyN,EAAAxE,EACAjJ,EAAA,OAAA2I,EAAAE,GACA7I,EAAA,MACAA,EAAA,IAAA6B,EAAA,GACA7B,EAAA,IAAA6B,EAAA,GACA7B,EAAA,IAAA6B,EAAA,GACA7B,EAAA,MAEAA,EAUA,SAAA0N,GAAA1N,EAAAL,GACA,IAAAgO,EAAA,IAAA3O,EAAA,GACA4O,GAAAjO,EAAA,GAAAkO,GAAAlO,EAAA,GAAAmO,GAAAnO,EAAA,GAAAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GAAAwO,EAAAxO,EAAA,GAEAyO,EAAAR,IAAAC,IAAAC,IAAAC,IAYA,OAVAK,EAAA,GACAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GAAAO,EACAT,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GAAAM,EACAT,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GAAAQ,IAEAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACAF,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACAH,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,IAEAN,GAAAtN,EAAAL,EAAAgO,GACA3N,EAYA,SAAAqO,GAAArO,EAAAsO,GAKA,OAJAtO,EAAA,GAAAsO,EAAA,IACAtO,EAAA,GAAAsO,EAAA,IACAtO,EAAA,GAAAsO,EAAA,IAEAtO,EAaA,SAAAuO,GAAAvO,EAAAsO,GACA,IAAA9N,EAAA8N,EAAA,GACAxI,EAAAwI,EAAA,GACA3C,EAAA2C,EAAA,GACAtI,EAAAsI,EAAA,GACArI,EAAAqI,EAAA,GACA1C,EAAA0C,EAAA,GACAxC,EAAAwC,EAAA,GACAvC,EAAAuC,EAAA,GACAtC,EAAAsC,EAAA,IAMA,OAJAtO,EAAA,GAAAZ,KAAAgD,KAAA5B,IAAAsF,IAAA6F,KACA3L,EAAA,GAAAZ,KAAAgD,KAAA4D,IAAAC,IAAA2F,KACA5L,EAAA,GAAAZ,KAAAgD,KAAA0J,IAAAC,IAAAC,KAEAhM,EAYA,SAAAwO,GAAAxO,EAAAsO,GAEA,IAAAG,EAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAI,EAAA,EA4BA,OA1BAD,EAAA,GACAC,EAAA,EAAAtP,KAAAgD,KAAAqM,EAAA,GACAzO,EAAA,OAAA0O,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAAtP,KAAAgD,KAAA,EAAAkM,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAtO,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,OAAA0O,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAAtP,KAAAgD,KAAA,EAAAkM,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAtO,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,OAAA0O,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,IAEAA,EAAA,EAAAtP,KAAAgD,KAAA,EAAAkM,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAtO,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,IAAAsO,EAAA,GAAAA,EAAA,IAAAI,EACA1O,EAAA,OAAA0O,GAGA1O,EAoBA,SAAA2O,GAAA3O,EAAAqI,EAAAxG,EAAA9G,GAEA,IAAA6M,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IAEAK,EAAAf,EAAAY,EACA+E,EAAA3F,EAAAa,EACA+E,EAAA5F,EAAAc,EACAG,EAAAhB,EAAAY,EACAgF,EAAA5F,EAAAa,EACAM,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EACAkG,EAAA7T,EAAA,GACA8T,EAAA9T,EAAA,GACA+T,EAAA/T,EAAA,GAmBA,OAjBAiF,EAAA,OAAA6I,EAAAG,IAAA4F,EACA5O,EAAA,IAAAuN,EAAApE,GAAAyF,EACA5O,EAAA,IAAAwN,EAAAtE,GAAA0F,EACA5O,EAAA,KACAA,EAAA,IAAAuN,EAAApE,GAAA0F,EACA7O,EAAA,OAAA2I,EAAAK,IAAA6F,EACA7O,EAAA,IAAAyN,EAAAxE,GAAA4F,EACA7O,EAAA,KACAA,EAAA,IAAAwN,EAAAtE,GAAA4F,EACA9O,EAAA,IAAAyN,EAAAxE,GAAA6F,EACA9O,EAAA,QAAA2I,EAAAE,IAAAiG,EACA9O,EAAA,MACAA,EAAA,IAAA6B,EAAA,GACA7B,EAAA,IAAA6B,EAAA,GACA7B,EAAA,IAAA6B,EAAA,GACA7B,EAAA,MAEAA,EAuBA,SAAA+O,GAAA/O,EAAAqI,EAAAxG,EAAA9G,EAAAtB,GAEA,IAAAmO,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IAEAK,EAAAf,EAAAY,EACA+E,EAAA3F,EAAAa,EACA+E,EAAA5F,EAAAc,EACAG,EAAAhB,EAAAY,EACAgF,EAAA5F,EAAAa,EACAM,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAEAkG,EAAA7T,EAAA,GACA8T,EAAA9T,EAAA,GACA+T,EAAA/T,EAAA,GAEAiU,EAAAvV,EAAA,GACAwV,EAAAxV,EAAA,GACAyV,EAAAzV,EAAA,GAEA0V,GAAA,GAAAtG,EAAAG,IAAA4F,EACAQ,GAAA7B,EAAApE,GAAAyF,EACAS,GAAA7B,EAAAtE,GAAA0F,EACAU,GAAA/B,EAAApE,GAAA0F,EACAU,GAAA,GAAA5G,EAAAK,IAAA6F,EACAW,GAAA/B,EAAAxE,GAAA4F,EACAY,GAAAjC,EAAAtE,GAAA4F,EACAY,GAAAjC,EAAAxE,GAAA6F,EACAa,GAAA,GAAAhH,EAAAE,IAAAiG,EAmBA,OAjBA9O,EAAA,GAAAmP,EACAnP,EAAA,GAAAoP,EACApP,EAAA,GAAAqP,EACArP,EAAA,KACAA,EAAA,GAAAsP,EACAtP,EAAA,GAAAuP,EACAvP,EAAA,GAAAwP,EACAxP,EAAA,KACAA,EAAA,GAAAyP,EACAzP,EAAA,GAAA0P,EACA1P,EAAA,IAAA2P,EACA3P,EAAA,MACAA,EAAA,IAAA6B,EAAA,GAAAmN,GAAAG,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAP,GACAlP,EAAA,IAAA6B,EAAA,GAAAoN,GAAAG,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAR,GACAlP,EAAA,IAAA6B,EAAA,GAAAqN,GAAAG,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAT,GACAlP,EAAA,MAEAA,EAWA,SAAA4P,GAAA5P,EAAAqI,GACA,IAAAT,EAAAS,EAAA,GAAAR,EAAAQ,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GACAG,EAAAZ,IACAa,EAAAZ,IACAa,EAAAJ,IAEAK,EAAAf,EAAAY,EACAI,EAAAf,EAAAW,EACAK,EAAAhB,EAAAY,EACAK,EAAAR,EAAAE,EACAO,EAAAT,EAAAG,EACAO,EAAAV,EAAAI,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAsBA,OApBA1I,EAAA,KAAA6I,EAAAG,EACAhJ,EAAA,GAAA4I,EAAAO,EACAnJ,EAAA,GAAA8I,EAAAI,EACAlJ,EAAA,KAEAA,EAAA,GAAA4I,EAAAO,EACAnJ,EAAA,KAAA2I,EAAAK,EACAhJ,EAAA,GAAA+I,EAAAE,EACAjJ,EAAA,KAEAA,EAAA,GAAA8I,EAAAI,EACAlJ,EAAA,GAAA+I,EAAAE,EACAjJ,EAAA,MAAA2I,EAAAE,EACA7I,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAeA,SAAA6P,GAAA7P,EAAA8P,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,GAAAL,EAAAD,GACAO,EAAA,GAAAJ,EAAAD,GACAM,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAnQ,EAAA,KAAAkQ,EAAAE,EACApQ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAkQ,EAAAG,EACArQ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA+P,EAAAD,GAAAM,EACApQ,EAAA,IAAAiQ,EAAAD,GAAAK,EACArQ,EAAA,KAAAmQ,EAAAD,GAAAI,EACAtQ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAmQ,EAAAD,EAAA,EAAAI,EACAtQ,EAAA,MACAA,EAaA,SAAAuQ,GAAAvQ,EAAAwQ,EAAAC,EAAAP,EAAAC,GACA,IAAAO,EAAA,EAAAtR,KAAAuR,IAAAH,EAAA,GACAF,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAnQ,EAAA,GAAA0Q,EAAAD,EACAzQ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA0Q,EACA1Q,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAmQ,EAAAD,GAAAI,EACAtQ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAAAmQ,EAAAD,EAAAI,EACAtQ,EAAA,MACAA,EAcA,SAAA4Q,GAAA5Q,EAAA6Q,EAAAX,EAAAC,GACA,IAAAW,EAAA1R,KAAAuR,IAAAE,EAAAE,UAAA3R,KAAAK,GAAA,KACAuR,EAAA5R,KAAAuR,IAAAE,EAAAI,YAAA7R,KAAAK,GAAA,KACAyR,EAAA9R,KAAAuR,IAAAE,EAAAM,YAAA/R,KAAAK,GAAA,KACA2R,EAAAhS,KAAAuR,IAAAE,EAAAQ,aAAAjS,KAAAK,GAAA,KACA6R,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,GAkBA,OAhBAhR,EAAA,GAAAsR,EACAtR,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAuR,EACAvR,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAkR,EAAAE,GAAAE,EAAA,GACAtR,EAAA,IAAA8Q,EAAAE,GAAAO,EAAA,GACAvR,EAAA,IAAAmQ,GAAAD,EAAAC,GACAnQ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAmQ,EAAAD,KAAAC,GACAnQ,EAAA,MACAA,EAeA,SAAAwR,GAAAxR,EAAA8P,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAsB,EAAA,GAAA3B,EAAAC,GACA2B,EAAA,GAAA1B,EAAAC,GACAK,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAnQ,EAAA,MAAAyR,EACAzR,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA0R,EACA1R,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAsQ,EACAtQ,EAAA,MACAA,EAAA,KAAA8P,EAAAC,GAAA0B,EACAzR,EAAA,KAAAiQ,EAAAD,GAAA0B,EACA1R,EAAA,KAAAmQ,EAAAD,GAAAI,EACAtQ,EAAA,MACAA,EAaA,SAAA2R,GAAA3R,EAAA4R,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAxJ,EAAAyJ,EAAAC,EAAAzJ,EAAA0J,EAAAC,EAAA1J,EAAAkE,EACAyF,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAEA,OAAAzS,KAAAU,IAAAuS,EAAAM,GAAA5T,GACAK,KAAAU,IAAAwS,EAAAM,GAAA7T,GACAK,KAAAU,IAAAyS,EAAAM,GAAA9T,EACAmN,GAAAlM,IAGAmS,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACAlK,EAAA6J,EAAAM,EAOAd,EAAAU,GAFA/J,GAHAkE,EAAA,EAAAxN,KAAAgD,KAAA+P,IAAAC,IAAA1J,MAKAgK,GAHAN,GAAAxF,GAIAoF,EAAAU,GALAP,GAAAvF,GAKA4F,EAAA9J,EACAF,EAAAgK,EAAAJ,EAAAK,EAAAN,GACAvF,EAAAxN,KAAAgD,KAAA2P,IAAAC,IAAAxJ,OAOAuJ,GADAnF,EAAA,EAAAA,EAEAoF,GAAApF,EACApE,GAAAoE,IAPAmF,EAAA,EACAC,EAAA,EACAxJ,EAAA,GAQAyJ,EAAAG,EAAA5J,EAAAE,EAAAsJ,EACAE,EAAAxJ,EAAAqJ,EAAAI,EAAA3J,EACAC,EAAA0J,EAAAH,EAAAI,EAAAL,GAEAnF,EAAAxN,KAAAgD,KAAA6P,IAAAC,IAAAzJ,OAOAwJ,GADArF,EAAA,EAAAA,EAEAsF,GAAAtF,EACAnE,GAAAmE,IAPAqF,EAAA,EACAC,EAAA,EACAzJ,EAAA,GAQAzI,EAAA,GAAA+R,EACA/R,EAAA,GAAAiS,EACAjS,EAAA,GAAAmS,EACAnS,EAAA,KACAA,EAAA,GAAAgS,EACAhS,EAAA,GAAAkS,EACAlS,EAAA,GAAAoS,EACApS,EAAA,KACAA,EAAA,GAAAwI,EACAxI,EAAA,GAAAyI,EACAzI,EAAA,IAAA0I,EACA1I,EAAA,MACAA,EAAA,MAAA+R,EAAAM,EAAAL,EAAAM,EAAA9J,EAAA+J,GACAvS,EAAA,MAAAiS,EAAAI,EAAAH,EAAAI,EAAA7J,EAAA8J,GACAvS,EAAA,MAAAmS,EAAAE,EAAAD,EAAAE,EAAA5J,EAAA6J,GACAvS,EAAA,MAEAA,GAYA,SAAA8S,GAAA9S,EAAA4R,EAAAmB,EAAAjB,GACA,IAAAO,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GAEAK,EAAAE,EAAAU,EAAA,GACAX,EAAAE,EAAAS,EAAA,GACArK,EAAA6J,EAAAQ,EAAA,GAEAnG,EAAAuF,IAAAC,IAAA1J,IACAkE,EAAA,IAEAuF,GADAvF,EAAA,EAAAxN,KAAAgD,KAAAwK,GAEAwF,GAAAxF,EACAlE,GAAAkE,GAGA,IAAAmF,EAAAU,EAAA/J,EAAAgK,EAAAN,EACAJ,EAAAU,EAAAP,EAAAK,EAAA9J,EACAF,EAAAgK,EAAAJ,EAAAK,EAAAN,EA0BA,OAxBAvF,EAAAmF,IAAAC,IAAAxJ,KACA,IAEAuJ,GADAnF,EAAA,EAAAxN,KAAAgD,KAAAwK,GAEAoF,GAAApF,EACApE,GAAAoE,GAGA5M,EAAA,GAAA+R,EACA/R,EAAA,GAAAgS,EACAhS,EAAA,GAAAwI,EACAxI,EAAA,KACAA,EAAA,GAAAoS,EAAA5J,EAAAE,EAAAsJ,EACAhS,EAAA,GAAA0I,EAAAqJ,EAAAI,EAAA3J,EACAxI,EAAA,GAAAmS,EAAAH,EAAAI,EAAAL,EACA/R,EAAA,KACAA,EAAA,GAAAmS,EACAnS,EAAA,GAAAoS,EACApS,EAAA,IAAA0I,EACA1I,EAAA,MACAA,EAAA,IAAAqS,EACArS,EAAA,IAAAsS,EACAtS,EAAA,IAAAuS,EACAvS,EAAA,MACAA,EASA,SAAAgT,GAAArT,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SACAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QASA,SAAAsT,GAAAtT,GACA,OAAAP,KAAAgD,KAAAhD,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,MAAAP,KAAAiD,IAAA1C,EAAA,OAAAP,KAAAiD,IAAA1C,EAAA,OAAAP,KAAAiD,IAAA1C,EAAA,OAAAP,KAAAiD,IAAA1C,EAAA,OAAAP,KAAAiD,IAAA1C,EAAA,OAAAP,KAAAiD,IAAA1C,EAAA,QAWA,SAAAuT,GAAAlT,EAAAL,EAAAE,GAiBA,OAhBAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAWA,SAAAmT,GAAAnT,EAAAL,EAAAE,GAiBA,OAhBAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAAA,IAAAL,EAAA,IAAAE,EAAA,IACAG,EAWA,SAAAoT,GAAApT,EAAAL,EAAAE,GAiBA,OAhBAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,IAAAL,EAAA,IAAAE,EACAG,EAAA,IAAAL,EAAA,IAAAE,EACAG,EAAA,IAAAL,EAAA,IAAAE,EACAG,EAAA,IAAAL,EAAA,IAAAE,EACAG,EAAA,IAAAL,EAAA,IAAAE,EACAG,EAAA,IAAAL,EAAA,IAAAE,EACAG,EAYA,SAAAqT,GAAArT,EAAAL,EAAAE,EAAAmD,GAiBA,OAhBAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,IAAAL,EAAA,IAAAE,EAAA,IAAAmD,EACAhD,EAAA,IAAAL,EAAA,IAAAE,EAAA,IAAAmD,EACAhD,EAAA,IAAAL,EAAA,IAAAE,EAAA,IAAAmD,EACAhD,EAAA,IAAAL,EAAA,IAAAE,EAAA,IAAAmD,EACAhD,EAAA,IAAAL,EAAA,IAAAE,EAAA,IAAAmD,EACAhD,EAAA,IAAAL,EAAA,IAAAE,EAAA,IAAAmD,EACAhD,EAUA,SAAAsT,GAAA3T,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KACAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,IAUA,SAAA0T,GAAA5T,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GAAAmL,EAAAnL,EAAA,GAAAoL,EAAApL,EAAA,GACAqL,EAAArL,EAAA,GAAA6T,EAAA7T,EAAA,GAAA+G,EAAA/G,EAAA,IAAAgH,EAAAhH,EAAA,IACA4G,EAAA5G,EAAA,IAAA2J,EAAA3J,EAAA,IAAA8T,EAAA9T,EAAA,IAAA+T,EAAA/T,EAAA,IAEAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GACAyE,EAAAzE,EAAA,GAAA0E,EAAA1E,EAAA,GAAAoL,EAAApL,EAAA,GAAAqL,EAAArL,EAAA,GACAsL,EAAAtL,EAAA,GAAA8T,EAAA9T,EAAA,GAAA0H,EAAA1H,EAAA,IAAAmH,EAAAnH,EAAA,IACA2H,EAAA3H,EAAA,IAAA+T,EAAA/T,EAAA,IAAAgU,EAAAhU,EAAA,IAAAiU,EAAAjU,EAAA,IAEA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,KACAlC,KAAAU,IAAAiB,EAAAQ,IAAAxC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KACAnC,KAAAU,IAAAsE,EAAAE,IAAAvF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAsE,GAAAhF,KAAAU,IAAAwE,KACAlF,KAAAU,IAAAuE,EAAAE,IAAAxF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAuE,GAAAjF,KAAAU,IAAAyE,KACAnF,KAAAU,IAAAgL,EAAAG,IAAAlM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgL,GAAA1L,KAAAU,IAAAmL,KACA7L,KAAAU,IAAAiL,EAAAG,IAAAnM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiL,GAAA3L,KAAAU,IAAAoL,KACA9L,KAAAU,IAAAkL,EAAAG,IAAApM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAkL,GAAA5L,KAAAU,IAAAqL,KACA/L,KAAAU,IAAA0T,EAAAG,IAAA5U,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAA0T,GAAApU,KAAAU,IAAA6T,KACAvU,KAAAU,IAAA4G,EAAAa,IAAAxI,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAA4G,GAAAtH,KAAAU,IAAAyH,KACAnI,KAAAU,IAAA6G,EAAAK,IAAAjI,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAA6G,GAAAvH,KAAAU,IAAAkH,KACA5H,KAAAU,IAAAyG,EAAAiB,IAAAzI,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAyG,GAAAnH,KAAAU,IAAA0H,KACApI,KAAAU,IAAAwJ,EAAAsK,IAAA7U,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAwJ,GAAAlK,KAAAU,IAAA8T,KACAxU,KAAAU,IAAA2T,EAAAI,IAAA9U,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAA2T,GAAArU,KAAAU,IAAA+T,KACAzU,KAAAU,IAAA4T,EAAAI,IAAA/U,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAA4T,GAAAtU,KAAAU,IAAAgU,IAOA,MAAAC,GAAAxH,GAMAyH,GAAAb,GC9pDA,SAAAc,KACA,IAAAjU,EAAA,IAAAhB,EAAA,GAIA,OAHAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAAkU,GAAAvU,GACA,IAAAK,EAAA,IAAAhB,EAAA,GAIA,OAHAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EASA,SAAAmU,GAAAxU,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA2I,EAAA3I,EAAA,GACA,OAAAP,KAAAgD,KAAAwF,IAAAC,IAAAS,KAWA,SAAA8L,GAAAxM,EAAAC,EAAAS,GACA,IAAAtI,EAAA,IAAAhB,EAAA,GAIA,OAHAgB,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAAA,GAAAsI,EACAtI,EAUA,SAAAqU,GAAArU,EAAAL,GAIA,OAHAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAYA,SAAAsU,GAAAtU,EAAA4H,EAAAC,EAAAS,GAIA,OAHAtI,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAAA,GAAAsI,EACAtI,EAWA,SAAAuU,GAAAvU,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAwU,GAAAxU,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAyU,GAAAzU,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAA0U,GAAA1U,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAUA,SAAA2U,GAAA3U,EAAAL,GAIA,OAHAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAUA,SAAA4U,GAAA5U,EAAAL,GAIA,OAHAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAWA,SAAA6U,GAAA7U,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAWA,SAAAD,GAAAC,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAUA,SAAA8U,GAAA9U,EAAAL,GAIA,OAHAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAWA,SAAA+U,GAAA/U,EAAAL,EAAAE,GAIA,OAHAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAYA,SAAAgV,GAAAhV,EAAAL,EAAAE,EAAAmD,GAIA,OAHAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAUA,SAAAiV,GAAAtV,EAAAE,GACA,IAAA+H,EAAA/H,EAAA,GAAAF,EAAA,GACAkI,EAAAhI,EAAA,GAAAF,EAAA,GACA2I,EAAAzI,EAAA,GAAAF,EAAA,GACA,OAAAP,KAAAgD,KAAAwF,IAAAC,IAAAS,KAUA,SAAA4M,GAAAvV,EAAAE,GACA,IAAA+H,EAAA/H,EAAA,GAAAF,EAAA,GACAkI,EAAAhI,EAAA,GAAAF,EAAA,GACA2I,EAAAzI,EAAA,GAAAF,EAAA,GACA,OAAAiI,IAAAC,IAAAS,IASA,SAAA6M,GAAAxV,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA2I,EAAA3I,EAAA,GACA,OAAAiI,IAAAC,IAAAS,IAUA,SAAA8M,GAAApV,EAAAL,GAIA,OAHAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAUA,SAAAqV,GAAArV,EAAAL,GAIA,OAHAK,EAAA,KAAAL,EAAA,GACAK,EAAA,KAAAL,EAAA,GACAK,EAAA,KAAAL,EAAA,GACAK,EAUA,SAAAsV,GAAAtV,EAAAL,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA2I,EAAA3I,EAAA,GACAiN,EAAAhF,IAAAC,IAAAS,IAQA,OAPAsE,EAAA,IAEAA,EAAA,EAAAxN,KAAAgD,KAAAwK,GACA5M,EAAA,GAAAL,EAAA,GAAAiN,EACA5M,EAAA,GAAAL,EAAA,GAAAiN,EACA5M,EAAA,GAAAL,EAAA,GAAAiN,GAEA5M,EAUA,SAAAuV,GAAA5V,EAAAE,GACA,OAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAWA,SAAA2V,GAAAxV,EAAAL,EAAAE,GACA,IAAAmO,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GACAiO,EAAA/N,EAAA,GAAAgO,EAAAhO,EAAA,GAAAiO,EAAAjO,EAAA,GAKA,OAHAG,EAAA,GAAAiO,EAAAH,EAAAI,EAAAL,EACA7N,EAAA,GAAAkO,EAAAN,EAAAI,EAAAF,EACA9N,EAAA,GAAAgO,EAAAH,EAAAI,EAAAL,EACA5N,EAYA,SAAAyV,GAAAzV,EAAAL,EAAAE,EAAA3F,GACA,IAAA8T,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GAIA,OAHAK,EAAA,GAAAgO,EAAA9T,GAAA2F,EAAA,GAAAmO,GACAhO,EAAA,GAAAiO,EAAA/T,GAAA2F,EAAA,GAAAoO,GACAjO,EAAA,GAAAkO,EAAAhU,GAAA2F,EAAA,GAAAqO,GACAlO,EAcA,SAAA0V,GAAA1V,EAAAL,EAAAE,EAAAxG,EAAAC,EAAAY,GACA,IAAAyb,EAAAzb,IACA0b,EAAAD,GAAA,EAAAzb,EAAA,KACA2b,EAAAF,GAAAzb,EAAA,GAAAA,EACA4b,EAAAH,GAAAzb,EAAA,GACA6b,EAAAJ,GAAA,IAAAzb,GAMA,OAJA8F,EAAA,GAAAL,EAAA,GAAAiW,EAAA/V,EAAA,GAAAgW,EAAAxc,EAAA,GAAAyc,EAAAxc,EAAA,GAAAyc,EACA/V,EAAA,GAAAL,EAAA,GAAAiW,EAAA/V,EAAA,GAAAgW,EAAAxc,EAAA,GAAAyc,EAAAxc,EAAA,GAAAyc,EACA/V,EAAA,GAAAL,EAAA,GAAAiW,EAAA/V,EAAA,GAAAgW,EAAAxc,EAAA,GAAAyc,EAAAxc,EAAA,GAAAyc,EAEA/V,EAcA,SAAAgW,GAAAhW,EAAAL,EAAAE,EAAAxG,EAAAC,EAAAY,GACA,IAAA+b,EAAA,EAAA/b,EACAgc,EAAAD,IACAN,EAAAzb,IACA0b,EAAAM,EAAAD,EACAJ,EAAA,EAAA3b,EAAAgc,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAAzb,EAMA,OAJA8F,EAAA,GAAAL,EAAA,GAAAiW,EAAA/V,EAAA,GAAAgW,EAAAxc,EAAA,GAAAyc,EAAAxc,EAAA,GAAAyc,EACA/V,EAAA,GAAAL,EAAA,GAAAiW,EAAA/V,EAAA,GAAAgW,EAAAxc,EAAA,GAAAyc,EAAAxc,EAAA,GAAAyc,EACA/V,EAAA,GAAAL,EAAA,GAAAiW,EAAA/V,EAAA,GAAAgW,EAAAxc,EAAA,GAAAyc,EAAAxc,EAAA,GAAAyc,EAEA/V,EAUA,SAAAX,GAAAW,EAAAgD,GACAA,KAAA,EAEA,IAAAlJ,EAAA,EAAAqF,IAAAC,KAAAK,GACA6I,EAAA,EAAAnJ,IAAA,EACAgX,EAAA/W,KAAAgD,KAAA,EAAAkG,KAAAtF,EAKA,OAHAhD,EAAA,GAAAZ,KAAAuC,IAAA7H,GAAAqc,EACAnW,EAAA,GAAAZ,KAAAsC,IAAA5H,GAAAqc,EACAnW,EAAA,GAAAsI,EAAAtF,EACAhD,EAYA,SAAAoW,GAAApW,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,GACA4I,EAAAnP,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,IAAAkP,EAAAlP,EAAA,IAKA,OAJAmP,KAAA,EACAvI,EAAA,IAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,KAAAmP,EACAvI,EAAA,IAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,KAAAmP,EACAvI,EAAA,IAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,IAAAkP,EAAAlP,EAAA,KAAAmP,EACAvI,EAWA,SAAAqW,GAAArW,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,GAIA,OAHAK,EAAA,GAAA4H,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,GACA4G,EAAA,GAAA4H,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,GACA4G,EAAA,GAAA4H,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,GACA4G,EAYA,SAAAsW,GAAAtW,EAAAL,EAAA0I,GAEA,IAAAkO,EAAAlO,EAAA,GAAAmO,EAAAnO,EAAA,GAAAoO,EAAApO,EAAA,GAAAqO,EAAArO,EAAA,GACAT,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,GAGAgX,EAAAH,EAAAlO,EAAAmO,EAAA5O,EACA+O,EAAAH,EAAA7O,EAAA2O,EAAAjO,EACAuO,EAAAN,EAAA1O,EAAA2O,EAAA5O,EAEAkP,EAAAN,EAAAK,EAAAJ,EAAAG,EACAG,EAAAN,EAAAE,EAAAJ,EAAAM,EACAG,EAAAT,EAAAK,EAAAJ,EAAAG,EAEAM,EAAA,EAAAP,EAYA,OAXAC,GAAAM,EACAL,GAAAK,EACAJ,GAAAI,EAEAH,GAAA,EACAC,GAAA,EACAC,GAAA,EAEAhX,EAAA,GAAA4H,EAAA+O,EAAAG,EACA9W,EAAA,GAAA6H,EAAA+O,EAAAG,EACA/W,EAAA,GAAAsI,EAAAuO,EAAAG,EACAhX,EAWA,SAAAkX,GAAAlX,EAAAL,EAAAE,EAAAxG,GACA,IAAAyB,KAAAhB,KAgBA,OAdAgB,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GACA/E,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GACA/E,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GAGA/F,EAAA,GAAAgB,EAAA,GACAhB,EAAA,GAAAgB,EAAA,GAAAsE,KAAAuC,IAAAtI,GAAAyB,EAAA,GAAAsE,KAAAsC,IAAArI,GACAS,EAAA,GAAAgB,EAAA,GAAAsE,KAAAsC,IAAArI,GAAAyB,EAAA,GAAAsE,KAAAuC,IAAAtI,GAGA2G,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GACAG,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GACAG,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GAEAG,EAWA,SAAAmX,GAAAnX,EAAAL,EAAAE,EAAAxG,GACA,IAAAyB,KAAAhB,KAgBA,OAdAgB,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GACA/E,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GACA/E,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GAGA/F,EAAA,GAAAgB,EAAA,GAAAsE,KAAAsC,IAAArI,GAAAyB,EAAA,GAAAsE,KAAAuC,IAAAtI,GACAS,EAAA,GAAAgB,EAAA,GACAhB,EAAA,GAAAgB,EAAA,GAAAsE,KAAAuC,IAAAtI,GAAAyB,EAAA,GAAAsE,KAAAsC,IAAArI,GAGA2G,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GACAG,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GACAG,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GAEAG,EAWA,SAAAoX,GAAApX,EAAAL,EAAAE,EAAAxG,GACA,IAAAyB,KAAAhB,KAgBA,OAdAgB,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GACA/E,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GACA/E,EAAA,GAAA6E,EAAA,GAAAE,EAAA,GAGA/F,EAAA,GAAAgB,EAAA,GAAAsE,KAAAuC,IAAAtI,GAAAyB,EAAA,GAAAsE,KAAAsC,IAAArI,GACAS,EAAA,GAAAgB,EAAA,GAAAsE,KAAAsC,IAAArI,GAAAyB,EAAA,GAAAsE,KAAAuC,IAAAtI,GACAS,EAAA,GAAAgB,EAAA,GAGAkF,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GACAG,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GACAG,EAAA,GAAAlG,EAAA,GAAA+F,EAAA,GAEAG,EASA,SAAAqX,GAAA1X,EAAAE,GACA,IAAAyX,EAAAlD,GAAAzU,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA4X,EAAAnD,GAAAvU,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAyV,GAAAgC,KACAhC,GAAAiC,KAEA,IAAAC,EAAAjC,GAAA+B,EAAAC,GAEA,OAAAC,EAAA,EACA,EAEAA,GAAA,EACApY,KAAAK,GAEAL,KAAAqY,KAAAD,GAUA,SAAAE,GAAA/X,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUA,SAAAgY,GAAAhY,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAA+X,GAAAjY,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,IAOA,MAAAuW,GAAArD,GAMAsD,GAAArD,GAMAsD,GAAArD,GAMAsD,GAAA/C,GAMAgD,GAAA/C,GAMAgD,GAAA/D,GAMAgE,GAAAhD,GAcAiD,GAAA,WACA,IAAAC,EAAApE,KAEA,gBAAAtU,EAAA2Y,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA1f,EAAAC,EAeA,IAdAqf,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAtf,EADAuf,EACApZ,KAAAyV,IAAA2D,EAAAF,EAAAC,EAAA5Y,EAAAgZ,QAEAhZ,EAAAgZ,OAGA3f,EAAAuf,EAAmBvf,EAAAC,EAAOD,GAAAsf,EAC1BD,EAAA,GAAA1Y,EAAA3G,GAAoBqf,EAAA,GAAA1Y,EAAA3G,EAAA,GAAiBqf,EAAA,GAAA1Y,EAAA3G,EAAA,GACrCyf,EAAAJ,IAAAK,GACA/Y,EAAA3G,GAAAqf,EAAA,GAAoB1Y,EAAA3G,EAAA,GAAAqf,EAAA,GAAiB1Y,EAAA3G,EAAA,GAAAqf,EAAA,GAGrC,OAAA1Y,GAzBA,GCvtBA,SAAAiZ,KACA,IAAA5Y,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAA6Y,GAAAlZ,GACA,IAAAK,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAYA,SAAA8Y,GAAAlR,EAAAC,EAAAS,EAAAC,GACA,IAAAvI,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAAA,GAAAsI,EACAtI,EAAA,GAAAuI,EACAvI,EAUA,SAAA+Y,GAAA/Y,EAAAL,GAKA,OAJAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAaA,SAAAgZ,GAAAhZ,EAAA4H,EAAAC,EAAAS,EAAAC,GAKA,OAJAvI,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAAA,GAAAsI,EACAtI,EAAA,GAAAuI,EACAvI,EAWA,SAAAiZ,GAAAjZ,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAkZ,GAAAlZ,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAmZ,GAAAnZ,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAAoZ,GAAApZ,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAUA,SAAAqZ,GAAArZ,EAAAL,GAKA,OAJAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAUA,SAAAsZ,GAAAtZ,EAAAL,GAKA,OAJAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAWA,SAAAuZ,GAAAvZ,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAWA,SAAAwZ,GAAAxZ,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAUA,SAAAyZ,GAAAzZ,EAAAL,GAKA,OAJAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAWA,SAAA0Z,GAAA1Z,EAAAL,EAAAE,GAKA,OAJAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAYA,SAAA2Z,GAAA3Z,EAAAL,EAAAE,EAAAmD,GAKA,OAJAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAUA,SAAA4Z,GAAAja,EAAAE,GACA,IAAA+H,EAAA/H,EAAA,GAAAF,EAAA,GACAkI,EAAAhI,EAAA,GAAAF,EAAA,GACA2I,EAAAzI,EAAA,GAAAF,EAAA,GACA4I,EAAA1I,EAAA,GAAAF,EAAA,GACA,OAAAP,KAAAgD,KAAAwF,IAAAC,IAAAS,IAAAC,KAUA,SAAAsR,GAAAla,EAAAE,GACA,IAAA+H,EAAA/H,EAAA,GAAAF,EAAA,GACAkI,EAAAhI,EAAA,GAAAF,EAAA,GACA2I,EAAAzI,EAAA,GAAAF,EAAA,GACA4I,EAAA1I,EAAA,GAAAF,EAAA,GACA,OAAAiI,IAAAC,IAAAS,IAAAC,IASA,SAAAuR,GAAAna,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA2I,EAAA3I,EAAA,GACA4I,EAAA5I,EAAA,GACA,OAAAP,KAAAgD,KAAAwF,IAAAC,IAAAS,IAAAC,KASA,SAAAwR,GAAApa,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA2I,EAAA3I,EAAA,GACA4I,EAAA5I,EAAA,GACA,OAAAiI,IAAAC,IAAAS,IAAAC,IAUA,SAAAyR,GAAAha,EAAAL,GAKA,OAJAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAUA,SAAAia,GAAAja,EAAAL,GAKA,OAJAK,EAAA,KAAAL,EAAA,GACAK,EAAA,KAAAL,EAAA,GACAK,EAAA,KAAAL,EAAA,GACAK,EAAA,KAAAL,EAAA,GACAK,EAUA,SAAAka,GAAAla,EAAAL,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA2I,EAAA3I,EAAA,GACA4I,EAAA5I,EAAA,GACAiN,EAAAhF,IAAAC,IAAAS,IAAAC,IAQA,OAPAqE,EAAA,IACAA,EAAA,EAAAxN,KAAAgD,KAAAwK,GACA5M,EAAA,GAAA4H,EAAAgF,EACA5M,EAAA,GAAA6H,EAAA+E,EACA5M,EAAA,GAAAsI,EAAAsE,EACA5M,EAAA,GAAAuI,EAAAqE,GAEA5M,EAUA,SAAAma,GAAAxa,EAAAE,GACA,OAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAYA,SAAAua,GAAApa,EAAAL,EAAAE,EAAA3F,GACA,IAAA8T,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GAKA,OAJAK,EAAA,GAAAgO,EAAA9T,GAAA2F,EAAA,GAAAmO,GACAhO,EAAA,GAAAiO,EAAA/T,GAAA2F,EAAA,GAAAoO,GACAjO,EAAA,GAAAkO,EAAAhU,GAAA2F,EAAA,GAAAqO,GACAlO,EAAA,GAAAmO,EAAAjU,GAAA2F,EAAA,GAAAsO,GACAnO,EAUA,SAAAqa,GAAAra,EAAAsa,GAMA,IAAAvY,EAAAwY,EAAAC,EAAAC,EACAC,EAAAC,EANAL,KAAA,EAOA,GAGAI,GAFA3Y,EAAA,EAAA5C,IAAA,GAEA4C,GADAwY,EAAA,EAAApb,IAAA,GACAob,QACGG,GAAA,GACH,GAGAC,GAFAH,EAAA,EAAArb,IAAA,GAEAqb,GADAC,EAAA,EAAAtb,IAAA,GACAsb,QACGE,GAAA,GAEH,IAAArhB,EAAA8F,KAAAgD,MAAA,EAAAsY,GAAAC,GAKA,OAJA3a,EAAA,GAAA0Z,GAAA3X,EACA/B,EAAA,GAAA0Z,GAAAa,EACAva,EAAA,GAAA0Z,GAAAc,EAAAlhB,EACA0G,EAAA,GAAA0Z,GAAAe,EAAAnhB,EACA0G,EAWA,SAAA4a,GAAA5a,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,GAAA4I,EAAA5I,EAAA,GAKA,OAJAK,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,IAAAmP,EACAvI,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GAAAkP,EAAAlP,EAAA,IAAAmP,EACAvI,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,IAAAkP,EAAAlP,EAAA,IAAAmP,EACAvI,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,IAAAkP,EAAAlP,EAAA,IAAAmP,EACAvI,EAWA,SAAA6a,GAAA7a,EAAAL,EAAA0I,GACA,IAAAT,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,GACA4W,EAAAlO,EAAA,GAAAmO,EAAAnO,EAAA,GAAAoO,EAAApO,EAAA,GAAAqO,EAAArO,EAAA,GAGAyS,EAAApE,EAAA9O,EAAA4O,EAAAlO,EAAAmO,EAAA5O,EACAkT,EAAArE,EAAA7O,EAAA4O,EAAA7O,EAAA2O,EAAAjO,EACA0S,EAAAtE,EAAApO,EAAAiO,EAAA1O,EAAA2O,EAAA5O,EACAqT,GAAA1E,EAAA3O,EAAA4O,EAAA3O,EAAA4O,EAAAnO,EAOA,OAJAtI,EAAA,GAAA8a,EAAApE,EAAAuE,GAAA1E,EAAAwE,GAAAtE,EAAAuE,GAAAxE,EACAxW,EAAA,GAAA+a,EAAArE,EAAAuE,GAAAzE,EAAAwE,GAAAzE,EAAAuE,GAAArE,EACAzW,EAAA,GAAAgb,EAAAtE,EAAAuE,GAAAxE,EAAAqE,GAAAtE,EAAAuE,GAAAxE,EACAvW,EAAA,GAAAL,EAAA,GACAK,EASA,SAAAkb,GAAAvb,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUA,SAAAwb,GAAAxb,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAAub,GAAAzb,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,KACAlC,KAAAU,IAAAiB,EAAAQ,IAAAxC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,IAOA,MAAA8Z,GAAAnC,GAMAoC,GAAAnC,GAMAoC,GAAAnC,GAMAoC,GAAA5B,GAMA6B,GAAA5B,GAMA6B,GAAA5B,GAMA6B,GAAA5B,GAcA6B,GAAA,WACA,IAAAvD,EAAAO,KAEA,gBAAAjZ,EAAA2Y,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA1f,EAAAC,EAeA,IAdAqf,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAtf,EADAuf,EACApZ,KAAAyV,IAAA2D,EAAAF,EAAAC,EAAA5Y,EAAAgZ,QAEAhZ,EAAAgZ,OAGA3f,EAAAuf,EAAmBvf,EAAAC,EAAOD,GAAAsf,EAC1BD,EAAA,GAAA1Y,EAAA3G,GAAoBqf,EAAA,GAAA1Y,EAAA3G,EAAA,GAAiBqf,EAAA,GAAA1Y,EAAA3G,EAAA,GAAiBqf,EAAA,GAAA1Y,EAAA3G,EAAA,GACtDyf,EAAAJ,IAAAK,GACA/Y,EAAA3G,GAAAqf,EAAA,GAAoB1Y,EAAA3G,EAAA,GAAAqf,EAAA,GAAiB1Y,EAAA3G,EAAA,GAAAqf,EAAA,GAAiB1Y,EAAA3G,EAAA,GAAAqf,EAAA,GAGtD,OAAA1Y,GAzBA,GC7iBA,SAAAkc,KACA,IAAA7b,EAAA,IAAAhB,EAAA,GAKA,OAJAgB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAA8b,GAAA9b,GAKA,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAYA,SAAA+b,GAAA/b,EAAA2M,EAAAlL,GACAA,GAAA,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GAKA,OAJAzB,EAAA,GAAAjF,EAAA4R,EAAA,GACA3M,EAAA,GAAAjF,EAAA4R,EAAA,GACA3M,EAAA,GAAAjF,EAAA4R,EAAA,GACA3M,EAAA,GAAAZ,KAAAuC,IAAAF,GACAzB,EAgBA,SAAAgc,GAAAC,EAAA5T,GACA,IAAA5G,EAAA,EAAArC,KAAAqY,KAAApP,EAAA,IACAtN,EAAAqE,KAAAsC,IAAAD,EAAA,GAWA,OAVA,GAAA1G,GACAkhB,EAAA,GAAA5T,EAAA,GAAAtN,EACAkhB,EAAA,GAAA5T,EAAA,GAAAtN,EACAkhB,EAAA,GAAA5T,EAAA,GAAAtN,IAGAkhB,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAxa,EAWA,SAAAya,GAAAlc,EAAAL,EAAAE,GACA,IAAAmO,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GAAAwO,EAAAxO,EAAA,GACAiO,EAAA/N,EAAA,GAAAgO,EAAAhO,EAAA,GAAAiO,EAAAjO,EAAA,GAAAkO,EAAAlO,EAAA,GAMA,OAJAG,EAAA,GAAAgO,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACA7N,EAAA,GAAAiO,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA9N,EAAA,GAAAkO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACA5N,EAAA,GAAAmO,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACA9N,EAWA,SAAAmc,GAAAnc,EAAAL,EAAA8B,GACAA,GAAA,GAEA,IAAAuM,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GAAAwO,EAAAxO,EAAA,GACAiO,EAAAxO,KAAAsC,IAAAD,GAAAsM,EAAA3O,KAAAuC,IAAAF,GAMA,OAJAzB,EAAA,GAAAgO,EAAAD,EAAAI,EAAAP,EACA5N,EAAA,GAAAiO,EAAAF,EAAAG,EAAAN,EACA5N,EAAA,GAAAkO,EAAAH,EAAAE,EAAAL,EACA5N,EAAA,GAAAmO,EAAAJ,EAAAC,EAAAJ,EACA5N,EAWA,SAAAoc,GAAApc,EAAAL,EAAA8B,GACAA,GAAA,GAEA,IAAAuM,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GAAAwO,EAAAxO,EAAA,GACAkO,EAAAzO,KAAAsC,IAAAD,GAAAsM,EAAA3O,KAAAuC,IAAAF,GAMA,OAJAzB,EAAA,GAAAgO,EAAAD,EAAAG,EAAAL,EACA7N,EAAA,GAAAiO,EAAAF,EAAAI,EAAAN,EACA7N,EAAA,GAAAkO,EAAAH,EAAAC,EAAAH,EACA7N,EAAA,GAAAmO,EAAAJ,EAAAE,EAAAJ,EACA7N,EAWA,SAAAqc,GAAArc,EAAAL,EAAA8B,GACAA,GAAA,GAEA,IAAAuM,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GAAAwO,EAAAxO,EAAA,GACAmO,EAAA1O,KAAAsC,IAAAD,GAAAsM,EAAA3O,KAAAuC,IAAAF,GAMA,OAJAzB,EAAA,GAAAgO,EAAAD,EAAAE,EAAAH,EACA9N,EAAA,GAAAiO,EAAAF,EAAAC,EAAAF,EACA9N,EAAA,GAAAkO,EAAAH,EAAAI,EAAAL,EACA9N,EAAA,GAAAmO,EAAAJ,EAAAG,EAAAJ,EACA9N,EAYA,SAAAsc,GAAAtc,EAAAL,GACA,IAAAiI,EAAAjI,EAAA,GAAAkI,EAAAlI,EAAA,GAAA2I,EAAA3I,EAAA,GAMA,OAJAK,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAAA,GAAAsI,EACAtI,EAAA,GAAAZ,KAAAgD,KAAAhD,KAAAU,IAAA,EAAA8H,IAAAC,IAAAS,MACAtI,EAYA,SAAAuc,GAAAvc,EAAAL,EAAAE,EAAA3F,GAGA,IAGAsiB,EAAAC,EAAAC,EAAAC,EAAAC,EAHA5O,EAAArO,EAAA,GAAAsO,EAAAtO,EAAA,GAAAuO,EAAAvO,EAAA,GAAAwO,EAAAxO,EAAA,GACAiO,EAAA/N,EAAA,GAAAgO,EAAAhO,EAAA,GAAAiO,EAAAjO,EAAA,GAAAkO,EAAAlO,EAAA,GAiCA,OA5BA4c,EAAAzO,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,GAEA,IACA0O,KACA7O,KACAC,KACAC,KACAC,MAGA,EAAA0O,EAAA,MAEAD,EAAApd,KAAAqY,KAAAgF,GACAC,EAAAtd,KAAAsC,IAAA8a,GACAG,EAAAvd,KAAAsC,KAAA,EAAAxH,GAAAsiB,GAAAE,EACAE,EAAAxd,KAAAsC,IAAAxH,EAAAsiB,GAAAE,IAIAC,EAAA,EAAAziB,EACA0iB,EAAA1iB,GAGA8F,EAAA,GAAA2c,EAAA3O,EAAA4O,EAAAhP,EACA5N,EAAA,GAAA2c,EAAA1O,EAAA2O,EAAA/O,EACA7N,EAAA,GAAA2c,EAAAzO,EAAA0O,EAAA9O,EACA9N,EAAA,GAAA2c,EAAAxO,EAAAyO,EAAA7O,EAEA/N,EAUA,SAAA6c,GAAA7c,EAAAL,GACA,IAAAkB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GAAAmB,EAAAnB,EAAA,GAAAoB,EAAApB,EAAA,GACAmd,EAAAjc,IAAAF,IAAAG,IAAAC,IACAgc,EAAAD,EAAA,EAAAA,EAAA,EAQA,OAJA9c,EAAA,IAAAa,EAAAkc,EACA/c,EAAA,IAAAW,EAAAoc,EACA/c,EAAA,IAAAc,EAAAic,EACA/c,EAAA,GAAAe,EAAAgc,EACA/c,EAWA,SAAAgd,GAAAhd,EAAAL,GAKA,OAJAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAcA,SAAAid,GAAAjd,EAAA5G,GAGA,IACA8jB,EADAC,EAAA/jB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAGA,GAAA+jB,EAAA,EAEAD,EAAA9d,KAAAgD,KAAA+a,EAAA,GACAnd,EAAA,MAAAkd,EACAA,EAAA,GAAAA,EACAld,EAAA,IAAA5G,EAAA,GAAAA,EAAA,IAAA8jB,EACAld,EAAA,IAAA5G,EAAA,GAAAA,EAAA,IAAA8jB,EACAld,EAAA,IAAA5G,EAAA,GAAAA,EAAA,IAAA8jB,MACG,CAEH,IAAAlkB,EAAA,EACAI,EAAA,GAAAA,EAAA,KACAJ,EAAA,GACAI,EAAA,GAAAA,EAAA,EAAAJ,OACAA,EAAA,GACA,IAAAokB,GAAApkB,EAAA,KACAqkB,GAAArkB,EAAA,KAEAkkB,EAAA9d,KAAAgD,KAAAhJ,EAAA,EAAAJ,KAAAI,EAAA,EAAAgkB,KAAAhkB,EAAA,EAAAikB,KAAA,GACArd,EAAAhH,GAAA,GAAAkkB,EACAA,EAAA,GAAAA,EACAld,EAAA,IAAA5G,EAAA,EAAAgkB,EAAAC,GAAAjkB,EAAA,EAAAikB,EAAAD,IAAAF,EACAld,EAAAod,IAAAhkB,EAAA,EAAAgkB,EAAApkB,GAAAI,EAAA,EAAAJ,EAAAokB,IAAAF,EACAld,EAAAqd,IAAAjkB,EAAA,EAAAikB,EAAArkB,GAAAI,EAAA,EAAAJ,EAAAqkB,IAAAH,EAGA,OAAAld,EAaA,SAAAsd,GAAAtd,EAAA4H,EAAAC,EAAAS,GACA,IAAAiV,EAAA,GAAAne,KAAAK,GAAA,IACAmI,GAAA2V,EACA1V,GAAA0V,EACAjV,GAAAiV,EAEA,IAAA3O,EAAAxP,KAAAsC,IAAAkG,GACA4V,EAAApe,KAAAuC,IAAAiG,GACAiH,EAAAzP,KAAAsC,IAAAmG,GACA4V,EAAAre,KAAAuC,IAAAkG,GACAiH,EAAA1P,KAAAsC,IAAA4G,GACAoV,EAAAte,KAAAuC,IAAA2G,GAOA,OALAtI,EAAA,GAAA4O,EAAA6O,EAAAC,EAAAF,EAAA3O,EAAAC,EACA9O,EAAA,GAAAwd,EAAA3O,EAAA6O,EAAA9O,EAAA6O,EAAA3O,EACA9O,EAAA,GAAAwd,EAAAC,EAAA3O,EAAAF,EAAAC,EAAA6O,EACA1d,EAAA,GAAAwd,EAAAC,EAAAC,EAAA9O,EAAAC,EAAAC,EAEA9O,EASA,SAAA2d,GAAAhe,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUA,MAAAie,GAAA/E,GAYAgF,GAAA/E,GAUAgF,GAAA/E,GAaAgF,GAAA/E,GAWAgF,GAAA/E,GAMAgF,GAAA/B,GAWAgC,GAAAxE,GAUAyE,GAAAhE,GAYAiE,GAAAhE,GAQAiE,GAAAvE,GAMAwE,GAAAD,GASAE,GAAAxE,GAMAyE,GAAAD,GAUAE,GAAAvE,GASAwE,GAAAvD,GASAwD,GAAAvD,GAaAwD,GAAA,WACA,IAAAC,EAAA5K,KACA6K,EAAA1K,GAAA,OACA2K,EAAA3K,GAAA,OAEA,gBAAApU,EAAAL,EAAAE,GACA,IAAAid,EAAAvH,GAAA5V,EAAAE,GACA,OAAAid,GAAA,SACAtH,GAAAqJ,EAAAC,EAAAnf,GACAuY,GAAA2G,GAAA,MACArJ,GAAAqJ,EAAAE,EAAApf,GACA2V,GAAAuJ,KACA9C,GAAA/b,EAAA6e,EAAAzf,KAAAK,IACAO,GACK8c,EAAA,SACL9c,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,IAEAwV,GAAAqJ,EAAAlf,EAAAE,GACAG,EAAA,GAAA6e,EAAA,GACA7e,EAAA,GAAA6e,EAAA,GACA7e,EAAA,GAAA6e,EAAA,GACA7e,EAAA,KAAA8c,EACA2B,GAAAze,OA1BA,GA0CAgf,GAAA,WACA,IAAAC,EAAApD,KACAqD,EAAArD,KAEA,gBAAA7b,EAAAL,EAAAE,EAAAxG,EAAAC,EAAAY,GAKA,OAJAqiB,GAAA0C,EAAAtf,EAAArG,EAAAY,GACAqiB,GAAA2C,EAAArf,EAAAxG,EAAAa,GACAqiB,GAAAvc,EAAAif,EAAAC,EAAA,EAAAhlB,GAAA,EAAAA,IAEA8F,GATA,GAuBAmf,GAAA,WACA,IAAAC,EAAA5Z,KAEA,gBAAAxF,EAAAqf,EAAAtP,EAAA+B,GAaA,OAZAsN,EAAA,GAAArP,EAAA,GACAqP,EAAA,GAAArP,EAAA,GACAqP,EAAA,GAAArP,EAAA,GAEAqP,EAAA,GAAAtN,EAAA,GACAsN,EAAA,GAAAtN,EAAA,GACAsN,EAAA,GAAAtN,EAAA,GAEAsN,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GAEAZ,GAAAze,EAAAid,GAAAjd,EAAAof,KAhBA,GCzjBA,SAAAE,KACA,IAAAC,EAAA,IAAAvgB,EAAA,GASA,OARAugB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAUA,SAAAC,GAAA7f,GACA,IAAA4f,EAAA,IAAAvgB,EAAA,GASA,OARAugB,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAAA,GAAA5f,EAAA,GACA4f,EAiBA,SAAAE,GAAAzN,EAAAE,EAAAE,EAAAsN,EAAAlX,EAAAC,EAAAC,EAAAuO,GACA,IAAAsI,EAAA,IAAAvgB,EAAA,GASA,OARAugB,EAAA,GAAAvN,EACAuN,EAAA,GAAArN,EACAqN,EAAA,GAAAnN,EACAmN,EAAA,GAAAG,EACAH,EAAA,GAAA/W,EACA+W,EAAA,GAAA9W,EACA8W,EAAA,GAAA7W,EACA6W,EAAA,GAAAtI,EACAsI,EAgBA,SAAAI,GAAA3N,EAAAE,EAAAE,EAAAsN,EAAAlX,EAAAC,EAAAC,GACA,IAAA6W,EAAA,IAAAvgB,EAAA,GACAugB,EAAA,GAAAvN,EACAuN,EAAA,GAAArN,EACAqN,EAAA,GAAAnN,EACAmN,EAAA,GAAAG,EACA,IAAA1R,EAAA,GAAAxF,EACAyF,EAAA,GAAAxF,EACAyF,EAAA,GAAAxF,EAKA,OAJA6W,EAAA,GAAAvR,EAAA0R,EAAAzR,EAAAmE,EAAAlE,EAAAgE,EACAqN,EAAA,GAAAtR,EAAAyR,EAAAxR,EAAA8D,EAAAhE,EAAAoE,EACAmN,EAAA,GAAArR,EAAAwR,EAAA1R,EAAAkE,EAAAjE,EAAA+D,EACAuN,EAAA,IAAAvR,EAAAgE,EAAA/D,EAAAiE,EAAAhE,EAAAkE,EACAmN,EAYA,SAAAK,GAAA5f,EAAAqI,EAAAnO,GACA,IAAA8T,EAAA,GAAA9T,EAAA,GACA+T,EAAA,GAAA/T,EAAA,GACAgU,EAAA,GAAAhU,EAAA,GACA0T,EAAAvF,EAAA,GACAwF,EAAAxF,EAAA,GACAyF,EAAAzF,EAAA,GACA0F,EAAA1F,EAAA,GASA,OARArI,EAAA,GAAA4N,EACA5N,EAAA,GAAA6N,EACA7N,EAAA,GAAA8N,EACA9N,EAAA,GAAA+N,EACA/N,EAAA,GAAAgO,EAAAD,EAAAE,EAAAH,EAAAI,EAAAL,EACA7N,EAAA,GAAAiO,EAAAF,EAAAG,EAAAN,EAAAI,EAAAF,EACA9N,EAAA,GAAAkO,EAAAH,EAAAC,EAAAH,EAAAI,EAAAL,EACA5N,EAAA,IAAAgO,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACA9N,EAWA,SAAA6f,GAAA7f,EAAA9F,GASA,OARA8F,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA9F,EAAA,GACA8F,EAAA,MAAA9F,EAAA,GACA8F,EAAA,MAAA9F,EAAA,GACA8F,EAAA,KACAA,EAWA,SAAA8f,GAAA9f,EAAAqI,GASA,OARArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAWA,SAAA+f,GAAA/f,EAAAL,GAEA,IAAAqgB,EAAAnE,KACArN,GAAAwR,EAAArgB,GACA,IAAAzF,EAAA,IAAA8E,EAAA,GAGA,OAFAqP,GAAAnU,EAAAyF,GACAigB,GAAA5f,EAAAggB,EAAA9lB,GACA8F,EAWA,SAAAigB,GAAAjgB,EAAAL,GASA,OARAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EASA,SAAAkgB,GAAAlgB,GASA,OARAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAkBA,SAAAmgB,GAAAngB,EAAAgS,EAAAE,EAAAE,EAAAsN,EAAAlX,EAAAC,EAAAC,EAAAuO,GAUA,OATAjX,EAAA,GAAAgS,EACAhS,EAAA,GAAAkS,EACAlS,EAAA,GAAAoS,EACApS,EAAA,GAAA0f,EAEA1f,EAAA,GAAAwI,EACAxI,EAAA,GAAAyI,EACAzI,EAAA,GAAA0I,EACA1I,EAAA,GAAAiX,EACAjX,EASA,MAAAogB,GAAAtC,GAQA,SAAAuC,GAAArgB,EAAAL,GAKA,OAJAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAWA,MAAAsgB,GAAAxC,GAUA,SAAAyC,GAAAvgB,EAAAqI,GAKA,OAJArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,GAAAqI,EAAA,GACArI,EAAA,GAAAqI,EAAA,GACArI,EASA,SAAAwgB,GAAAxgB,EAAAL,GACA,IAAAqO,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAiO,GAAAjO,EAAA,GACAkO,GAAAlO,EAAA,GACAmO,GAAAnO,EAAA,GACAoO,EAAApO,EAAA,GAIA,OAHAK,EAAA,MAAAgO,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACA7N,EAAA,MAAAiO,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACA9N,EAAA,MAAAkO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GACA5N,EAWA,SAAAygB,GAAAzgB,EAAAL,EAAAkC,GACA,IAAA6e,EAAA/gB,EAAA,GACAghB,EAAAhhB,EAAA,GACAihB,EAAAjhB,EAAA,GACAkhB,EAAAlhB,EAAA,GACAmhB,EAAA,GAAAjf,EAAA,GACAkf,EAAA,GAAAlf,EAAA,GACAmf,EAAA,GAAAnf,EAAA,GACAof,EAAAthB,EAAA,GACAuhB,EAAAvhB,EAAA,GACAwhB,EAAAxhB,EAAA,GACAyhB,EAAAzhB,EAAA,GASA,OARAK,EAAA,GAAA0gB,EACA1gB,EAAA,GAAA2gB,EACA3gB,EAAA,GAAA4gB,EACA5gB,EAAA,GAAA6gB,EACA7gB,EAAA,GAAA6gB,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EAAAE,EACAjhB,EAAA,GAAA6gB,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EAAAE,EACAlhB,EAAA,GAAA6gB,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAK,EACAnhB,EAAA,IAAA0gB,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAAAI,EACAphB,EAWA,SAAAqhB,GAAArhB,EAAAL,EAAA8B,GACA,IAAAmM,GAAAjO,EAAA,GACAkO,GAAAlO,EAAA,GACAmO,GAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACA+gB,EAAA1S,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACA8S,EAAA1S,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA8S,EAAA1S,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAiT,EAAA1S,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAUA,OATAqO,GAAAnc,EAAAL,EAAA8B,GACAmM,EAAA5N,EAAA,GACA6N,EAAA7N,EAAA,GACA8N,EAAA9N,EAAA,GACA+N,EAAA/N,EAAA,GACAA,EAAA,GAAA0gB,EAAA3S,EAAA8S,EAAAjT,EAAA+S,EAAA7S,EAAA8S,EAAA/S,EACA7N,EAAA,GAAA2gB,EAAA5S,EAAA8S,EAAAhT,EAAA+S,EAAAhT,EAAA8S,EAAA5S,EACA9N,EAAA,GAAA4gB,EAAA7S,EAAA8S,EAAA/S,EAAA4S,EAAA7S,EAAA8S,EAAA/S,EACA5N,EAAA,GAAA6gB,EAAA9S,EAAA2S,EAAA9S,EAAA+S,EAAA9S,EAAA+S,EAAA9S,EACA9N,EAWA,SAAAshB,GAAAthB,EAAAL,EAAA8B,GACA,IAAAmM,GAAAjO,EAAA,GACAkO,GAAAlO,EAAA,GACAmO,GAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACA+gB,EAAA1S,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACA8S,EAAA1S,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA8S,EAAA1S,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAiT,EAAA1S,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAUA,OATAsO,GAAApc,EAAAL,EAAA8B,GACAmM,EAAA5N,EAAA,GACA6N,EAAA7N,EAAA,GACA8N,EAAA9N,EAAA,GACA+N,EAAA/N,EAAA,GACAA,EAAA,GAAA0gB,EAAA3S,EAAA8S,EAAAjT,EAAA+S,EAAA7S,EAAA8S,EAAA/S,EACA7N,EAAA,GAAA2gB,EAAA5S,EAAA8S,EAAAhT,EAAA+S,EAAAhT,EAAA8S,EAAA5S,EACA9N,EAAA,GAAA4gB,EAAA7S,EAAA8S,EAAA/S,EAAA4S,EAAA7S,EAAA8S,EAAA/S,EACA5N,EAAA,GAAA6gB,EAAA9S,EAAA2S,EAAA9S,EAAA+S,EAAA9S,EAAA+S,EAAA9S,EACA9N,EAWA,SAAAuhB,GAAAvhB,EAAAL,EAAA8B,GACA,IAAAmM,GAAAjO,EAAA,GACAkO,GAAAlO,EAAA,GACAmO,GAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACA+gB,EAAA1S,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACA8S,EAAA1S,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA8S,EAAA1S,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAiT,EAAA1S,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAUA,OATAuO,GAAArc,EAAAL,EAAA8B,GACAmM,EAAA5N,EAAA,GACA6N,EAAA7N,EAAA,GACA8N,EAAA9N,EAAA,GACA+N,EAAA/N,EAAA,GACAA,EAAA,GAAA0gB,EAAA3S,EAAA8S,EAAAjT,EAAA+S,EAAA7S,EAAA8S,EAAA/S,EACA7N,EAAA,GAAA2gB,EAAA5S,EAAA8S,EAAAhT,EAAA+S,EAAAhT,EAAA8S,EAAA5S,EACA9N,EAAA,GAAA4gB,EAAA7S,EAAA8S,EAAA/S,EAAA4S,EAAA7S,EAAA8S,EAAA/S,EACA5N,EAAA,GAAA6gB,EAAA9S,EAAA2S,EAAA9S,EAAA+S,EAAA9S,EAAA+S,EAAA9S,EACA9N,EAWA,SAAAwhB,GAAAxhB,EAAAL,EAAA0I,GACA,IAAAkO,EAAAlO,EAAA,GACAmO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACA2F,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GAcA,OAZAK,EAAA,GAAAgO,EAAA0I,EAAAvI,EAAAoI,EAAAtI,EAAAwI,EAAAvI,EAAAsI,EACAxW,EAAA,GAAAiO,EAAAyI,EAAAvI,EAAAqI,EAAAtI,EAAAqI,EAAAvI,EAAAyI,EACAzW,EAAA,GAAAkO,EAAAwI,EAAAvI,EAAAsI,EAAAzI,EAAAwI,EAAAvI,EAAAsI,EACAvW,EAAA,GAAAmO,EAAAuI,EAAA1I,EAAAuI,EAAAtI,EAAAuI,EAAAtI,EAAAuI,EACAzI,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GACAK,EAAA,GAAAgO,EAAA0I,EAAAvI,EAAAoI,EAAAtI,EAAAwI,EAAAvI,EAAAsI,EACAxW,EAAA,GAAAiO,EAAAyI,EAAAvI,EAAAqI,EAAAtI,EAAAqI,EAAAvI,EAAAyI,EACAzW,EAAA,GAAAkO,EAAAwI,EAAAvI,EAAAsI,EAAAzI,EAAAwI,EAAAvI,EAAAsI,EACAvW,EAAA,GAAAmO,EAAAuI,EAAA1I,EAAAuI,EAAAtI,EAAAuI,EAAAtI,EAAAuI,EACAzW,EAWA,SAAAyhB,GAAAzhB,EAAAqI,EAAA1I,GACA,IAAA4W,EAAAlO,EAAA,GACAmO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAuF,EAAAjO,EAAA,GACAkO,EAAAlO,EAAA,GACAmO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GAcA,OAZAK,EAAA,GAAAuW,EAAAxI,EAAA2I,EAAA9I,EAAA4I,EAAA1I,EAAA2I,EAAA5I,EACA7N,EAAA,GAAAwW,EAAAzI,EAAA2I,EAAA7I,EAAA4I,EAAA7I,EAAA2I,EAAAzI,EACA9N,EAAA,GAAAyW,EAAA1I,EAAA2I,EAAA5I,EAAAyI,EAAA1I,EAAA2I,EAAA5I,EACA5N,EAAA,GAAA0W,EAAA3I,EAAAwI,EAAA3I,EAAA4I,EAAA3I,EAAA4I,EAAA3I,EACAF,EAAAjO,EAAA,GACAkO,EAAAlO,EAAA,GACAmO,EAAAnO,EAAA,GACAoO,EAAApO,EAAA,GACAK,EAAA,GAAAuW,EAAAxI,EAAA2I,EAAA9I,EAAA4I,EAAA1I,EAAA2I,EAAA5I,EACA7N,EAAA,GAAAwW,EAAAzI,EAAA2I,EAAA7I,EAAA4I,EAAA7I,EAAA2I,EAAAzI,EACA9N,EAAA,GAAAyW,EAAA1I,EAAA2I,EAAA5I,EAAAyI,EAAA1I,EAAA2I,EAAA5I,EACA5N,EAAA,GAAA0W,EAAA3I,EAAAwI,EAAA3I,EAAA4I,EAAA3I,EAAA4I,EAAA3I,EACA9N,EAYA,SAAA0hB,GAAA1hB,EAAAL,EAAAgN,EAAAlL,GAEA,GAAArC,KAAAU,IAAA2B,GAAA1C,EACA,OAAAkhB,GAAAjgB,EAAAL,GAEA,IAAAgiB,EAAAviB,KAAAgD,KAAAuK,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAlL,GAAA,GACA,IAAA1G,EAAAqE,KAAAsC,IAAAD,GACAmM,EAAA7S,EAAA4R,EAAA,GAAAgV,EACA9T,EAAA9S,EAAA4R,EAAA,GAAAgV,EACA7T,EAAA/S,EAAA4R,EAAA,GAAAgV,EACA5T,EAAA3O,KAAAuC,IAAAF,GAEAif,EAAA/gB,EAAA,GACAghB,EAAAhhB,EAAA,GACAihB,EAAAjhB,EAAA,GACAkhB,EAAAlhB,EAAA,GACAK,EAAA,GAAA0gB,EAAA3S,EAAA8S,EAAAjT,EAAA+S,EAAA7S,EAAA8S,EAAA/S,EACA7N,EAAA,GAAA2gB,EAAA5S,EAAA8S,EAAAhT,EAAA+S,EAAAhT,EAAA8S,EAAA5S,EACA9N,EAAA,GAAA4gB,EAAA7S,EAAA8S,EAAA/S,EAAA4S,EAAA7S,EAAA8S,EAAA/S,EACA5N,EAAA,GAAA6gB,EAAA9S,EAAA2S,EAAA9S,EAAA+S,EAAA9S,EAAA+S,EAAA9S,EAEA,IAAAE,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GAMA,OALAK,EAAA,GAAAgO,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACA7N,EAAA,GAAAiO,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA9N,EAAA,GAAAkO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACA5N,EAAA,GAAAmO,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAEA9N,EAYA,SAAA4hB,GAAA5hB,EAAAL,EAAAE,GASA,OARAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAA6hB,GAAA7hB,EAAAL,EAAAE,GACA,IAAAiiB,EAAAniB,EAAA,GACAoiB,EAAApiB,EAAA,GACAqiB,EAAAriB,EAAA,GACAsiB,EAAAtiB,EAAA,GACAmhB,EAAAjhB,EAAA,GACAkhB,EAAAlhB,EAAA,GACAmhB,EAAAnhB,EAAA,GACAqiB,EAAAriB,EAAA,GACA6gB,EAAA/gB,EAAA,GACAghB,EAAAhhB,EAAA,GACAihB,EAAAjhB,EAAA,GACAkhB,EAAAlhB,EAAA,GACAwiB,EAAAtiB,EAAA,GACAuiB,EAAAviB,EAAA,GACAwiB,EAAAxiB,EAAA,GACAyiB,EAAAziB,EAAA,GASA,OARAG,EAAA,GAAA8hB,EAAAQ,EAAAL,EAAAE,EAAAJ,EAAAM,EAAAL,EAAAI,EACApiB,EAAA,GAAA+hB,EAAAO,EAAAL,EAAAG,EAAAJ,EAAAG,EAAAL,EAAAO,EACAriB,EAAA,GAAAgiB,EAAAM,EAAAL,EAAAI,EAAAP,EAAAM,EAAAL,EAAAI,EACAniB,EAAA,GAAAiiB,EAAAK,EAAAR,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EACAriB,EAAA,GAAA8hB,EAAAI,EAAAD,EAAAnB,EAAAiB,EAAAf,EAAAgB,EAAAjB,EAAAL,EAAA4B,EAAAzB,EAAAsB,EAAAxB,EAAA0B,EAAAzB,EAAAwB,EACApiB,EAAA,GAAA+hB,EAAAG,EAAAD,EAAAlB,EAAAiB,EAAAlB,EAAAgB,EAAAd,EAAAL,EAAA2B,EAAAzB,EAAAuB,EAAAxB,EAAAuB,EAAAzB,EAAA2B,EACAriB,EAAA,GAAAgiB,EAAAE,EAAAD,EAAAjB,EAAAc,EAAAf,EAAAgB,EAAAjB,EAAAF,EAAA0B,EAAAzB,EAAAwB,EAAA3B,EAAA0B,EAAAzB,EAAAwB,EACAniB,EAAA,GAAAiiB,EAAAC,EAAAJ,EAAAhB,EAAAiB,EAAAhB,EAAAiB,EAAAhB,EAAAH,EAAAyB,EAAA5B,EAAAyB,EAAAxB,EAAAyB,EAAAxB,EAAAyB,EACAriB,EAOA,MAAAuiB,GAAAV,GAWA,SAAAW,GAAAxiB,EAAAL,EAAAE,GASA,OARAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAWA,MAAAyiB,GAAAtE,GAYA,SAAAuE,GAAA1iB,EAAAL,EAAAE,EAAA3F,GACA,IAAAyoB,EAAA,EAAAzoB,EAYA,OAXAuoB,GAAA9iB,EAAAE,GAAA,IAAA3F,MAEA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EACA8F,EAAA,GAAAL,EAAA,GAAAgjB,EAAA9iB,EAAA,GAAA3F,EAEA8F,EAUA,SAAA4iB,GAAA5iB,EAAAL,GACA,IAAAkjB,EAAAC,GAAAnjB,GASA,OARAK,EAAA,IAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,IAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,IAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,GAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,IAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,IAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,IAAAL,EAAA,GAAAkjB,EACA7iB,EAAA,GAAAL,EAAA,GAAAkjB,EACA7iB,EAWA,SAAA+iB,GAAA/iB,EAAAL,GASA,OARAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAUA,MAAAgjB,GAAA3E,GAMA4E,GAAAD,GASAF,GAAAvE,GAMA2E,GAAAJ,GAUA,SAAAK,GAAAnjB,EAAAL,GACA,IAAAyO,EAAA0U,GAAAnjB,GAYA,OAXAyO,EAAA,IACAA,EAAAhP,KAAAgD,KAAAgM,GACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,EACApO,EAAA,GAAAL,EAAA,GAAAyO,GAEApO,EASA,SAAAojB,GAAAzjB,GACA,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUA,SAAA0jB,GAAA1jB,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAAyjB,GAAA3jB,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GACAgB,EAAAhB,EAAA,GACAmB,EAAAnB,EAAA,GACAoB,EAAApB,EAAA,GACAyE,EAAAzE,EAAA,GACA0E,EAAA1E,EAAA,GACAmL,EAAAnL,EAAA,GACAoL,EAAApL,EAAA,GACAyB,EAAAvB,EAAA,GACAwB,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACAyE,EAAAzE,EAAA,GACA0E,EAAA1E,EAAA,GACAoL,EAAApL,EAAA,GACAqL,EAAArL,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,KACAjC,KAAAU,IAAAgB,EAAAQ,IAAAvC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgB,GAAA1B,KAAAU,IAAAwB,KACAlC,KAAAU,IAAAiB,EAAAQ,IAAAxC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiB,GAAA3B,KAAAU,IAAAyB,KACAnC,KAAAU,IAAAsE,EAAAE,IAAAvF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAsE,GAAAhF,KAAAU,IAAAwE,KACAlF,KAAAU,IAAAuE,EAAAE,IAAAxF,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAuE,GAAAjF,KAAAU,IAAAyE,KACAnF,KAAAU,IAAAgL,EAAAG,IAAAlM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAgL,GAAA1L,KAAAU,IAAAmL,KACA7L,KAAAU,IAAAiL,EAAAG,IAAAnM,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAiL,GAAA3L,KAAAU,IAAAoL,ICxzBA,SAAAqY,KACA,IAAAvjB,EAAA,IAAAhB,EAAA,GAGA,OAFAgB,EAAA,KACAA,EAAA,KACAA,EASA,SAAAwjB,GAAA7jB,GACA,IAAAK,EAAA,IAAAhB,EAAA,GAGA,OAFAgB,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAUA,SAAAyjB,GAAA7b,EAAAC,GACA,IAAA7H,EAAA,IAAAhB,EAAA,GAGA,OAFAgB,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAUA,SAAA0jB,GAAA1jB,EAAAL,GAGA,OAFAK,EAAA,GAAAL,EAAA,GACAK,EAAA,GAAAL,EAAA,GACAK,EAWA,SAAA2jB,GAAA3jB,EAAA4H,EAAAC,GAGA,OAFA7H,EAAA,GAAA4H,EACA5H,EAAA,GAAA6H,EACA7H,EAWA,SAAA4jB,GAAA5jB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAA6jB,GAAA7jB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAA8jB,GAAA9jB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAWA,SAAA+jB,GAAA/jB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAAA,GAAAL,EAAA,GAAAE,EAAA,GACAG,EAUA,SAAAgkB,GAAAhkB,EAAAL,GAGA,OAFAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAAA,GAAAZ,KAAAuV,KAAAhV,EAAA,IACAK,EAUA,SAAAikB,GAAAjkB,EAAAL,GAGA,OAFAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAAA,GAAAZ,KAAAwV,MAAAjV,EAAA,IACAK,EAWA,SAAAkkB,GAAAlkB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAyV,IAAAlV,EAAA,GAAAE,EAAA,IACAG,EAWA,SAAAmkB,GAAAnkB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAAA,GAAAZ,KAAAW,IAAAJ,EAAA,GAAAE,EAAA,IACAG,EAUA,SAAAokB,GAAApkB,EAAAL,GAGA,OAFAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAAA,GAAAZ,KAAA0V,MAAAnV,EAAA,IACAK,EAWA,SAAAqkB,GAAArkB,EAAAL,EAAAE,GAGA,OAFAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAAA,GAAAL,EAAA,GAAAE,EACAG,EAYA,SAAAskB,GAAAtkB,EAAAL,EAAAE,EAAAmD,GAGA,OAFAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAAA,GAAAL,EAAA,GAAAE,EAAA,GAAAmD,EACAhD,EAUA,SAAAukB,GAAA5kB,EAAAE,GACA,IAAA+H,EAAA/H,EAAA,GAAAF,EAAA,GACAkI,EAAAhI,EAAA,GAAAF,EAAA,GACA,OAAAP,KAAAgD,KAAAwF,IAAAC,KAUA,SAAA2c,GAAA7kB,EAAAE,GACA,IAAA+H,EAAA/H,EAAA,GAAAF,EAAA,GACAkI,EAAAhI,EAAA,GAAAF,EAAA,GACA,OAAAiI,IAAAC,IASA,SAAA4c,GAAA9kB,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA,OAAAP,KAAAgD,KAAAwF,IAAAC,KASA,SAAA6c,GAAA/kB,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACA,OAAAiI,IAAAC,IAUA,SAAA8c,GAAA3kB,EAAAL,GAGA,OAFAK,EAAA,IAAAL,EAAA,GACAK,EAAA,IAAAL,EAAA,GACAK,EAUA,SAAA4kB,GAAA5kB,EAAAL,GAGA,OAFAK,EAAA,KAAAL,EAAA,GACAK,EAAA,KAAAL,EAAA,GACAK,EAUA,SAAA6kB,GAAA7kB,EAAAL,GACA,IAAAiI,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GACAiN,EAAAhF,IAAAC,IAOA,OANA+E,EAAA,IAEAA,EAAA,EAAAxN,KAAAgD,KAAAwK,GACA5M,EAAA,GAAAL,EAAA,GAAAiN,EACA5M,EAAA,GAAAL,EAAA,GAAAiN,GAEA5M,EAUA,SAAA8kB,GAAAnlB,EAAAE,GACA,OAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAYA,SAAAklB,GAAA/kB,EAAAL,EAAAE,GACA,IAAAyI,EAAA3I,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAGA,OAFAG,EAAA,GAAAA,EAAA,KACAA,EAAA,GAAAsI,EACAtI,EAYA,SAAAglB,GAAAhlB,EAAAL,EAAAE,EAAA3F,GACA,IAAA8T,EAAArO,EAAA,GACAsO,EAAAtO,EAAA,GAGA,OAFAK,EAAA,GAAAgO,EAAA9T,GAAA2F,EAAA,GAAAmO,GACAhO,EAAA,GAAAiO,EAAA/T,GAAA2F,EAAA,GAAAoO,GACAjO,EAUA,SAAAilB,GAAAjlB,EAAAgD,GACAA,KAAA,EACA,IAAAlJ,EAAA,EAAAqF,IAAAC,KAAAK,GAGA,OAFAO,EAAA,GAAAZ,KAAAuC,IAAA7H,GAAAkJ,EACAhD,EAAA,GAAAZ,KAAAsC,IAAA5H,GAAAkJ,EACAhD,EAWA,SAAAklB,GAAAllB,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAGA,OAFAK,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EACA7H,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EACA7H,EAWA,SAAAmlB,GAAAnlB,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAGA,OAFAK,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GACA4G,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GACA4G,EAYA,SAAAolB,GAAAplB,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAGA,OAFAK,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GACA4G,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,GACA4G,EAaA,SAAAqlB,GAAArlB,EAAAL,EAAAvG,GACA,IAAAwO,EAAAjI,EAAA,GACAkI,EAAAlI,EAAA,GAGA,OAFAK,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,IACA4G,EAAA,GAAA5G,EAAA,GAAAwO,EAAAxO,EAAA,GAAAyO,EAAAzO,EAAA,IACA4G,EAWA,SAAAslB,GAAAtlB,EAAAL,EAAAE,EAAAxG,GAEA,IAAAksB,EAAA5lB,EAAA,GAAAE,EAAA,GACA2lB,EAAA7lB,EAAA,GAAAE,EAAA,GACA4lB,EAAArmB,KAAAsC,IAAArI,GACAqsB,EAAAtmB,KAAAuC,IAAAtI,GAMA,OAHA2G,EAAA,GAAAulB,EAAAG,EAAAF,EAAAC,EAAA5lB,EAAA,GACAG,EAAA,GAAAulB,EAAAE,EAAAD,EAAAE,EAAA7lB,EAAA,GAEAG,EASA,SAAA2lB,GAAAhmB,EAAAE,GACA,IAAAmS,EAAArS,EAAA,GACAuS,EAAAvS,EAAA,GACA6I,EAAA3I,EAAA,GACA4I,EAAA5I,EAAA,GAEA+lB,EAAA5T,IAAAE,IACA0T,EAAA,IAEAA,EAAA,EAAAxmB,KAAAgD,KAAAwjB,IAGA,IAAAC,EAAArd,IAAAC,IACAod,EAAA,IAEAA,EAAA,EAAAzmB,KAAAgD,KAAAyjB,IAGA,IAAArO,GAAAxF,EAAAxJ,EAAA0J,EAAAzJ,GAAAmd,EAAAC,EAGA,OAAArO,EAAA,EACA,EAEAA,GAAA,EACApY,KAAAK,GAEAL,KAAAqY,KAAAD,GAUA,SAAAsO,GAAAnmB,GACA,cAAAA,EAAA,QAAAA,EAAA,OAUA,SAAAomB,GAAApmB,EAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,GAUA,SAAAmmB,GAAArmB,EAAAE,GACA,IAAAgB,EAAAlB,EAAA,GAAAgB,EAAAhB,EAAA,GACAyB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GACA,OAAAT,KAAAU,IAAAe,EAAAO,IAAArC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAe,GAAAzB,KAAAU,IAAAsB,KACAhC,KAAAU,IAAAa,EAAAU,IAAAtC,EAAAK,KAAAW,IAAA,EAAAX,KAAAU,IAAAa,GAAAvB,KAAAU,IAAAuB,IAOA,MAAA4kB,GAAAxB,GAMAyB,GAAArC,GAMAsC,GAAArC,GAMAsC,GAAArC,GAMAsC,GAAA9B,GAMA+B,GAAA9B,GAMA+B,GAAA7B,GAcA8B,GAAA,WACA,IAAAnO,EAAAkL,KAEA,gBAAA5jB,EAAA2Y,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA1f,EAAAC,EAeA,IAdAqf,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAtf,EADAuf,EACApZ,KAAAyV,IAAA2D,EAAAF,EAAAC,EAAA5Y,EAAAgZ,QAEAhZ,EAAAgZ,OAGA3f,EAAAuf,EAAmBvf,EAAAC,EAAOD,GAAAsf,EAC1BD,EAAA,GAAA1Y,EAAA3G,GAAoBqf,EAAA,GAAA1Y,EAAA3G,EAAA,GACpByf,EAAAJ,IAAAK,GACA/Y,EAAA3G,GAAAqf,EAAA,GAAoB1Y,EAAA3G,EAAA,GAAAqf,EAAA,GAGpB,OAAA1Y,GAzBA,+vBClkBI8mB,EACAC,wDAEE,SAAAC,EAAqBC,GAE1B,OAkGK,SAAgBA,GACjBA,IAAWH,IACdA,EAAgBG,EAEhBF,EAAU,IAAIG,EAAA,EAAQntB,OAAAotB,EAAA,EAAAptB,CAAWktB,IAEjCG,EAAMC,OAAOJ,OAASA,EAEtBK,GAAgBA,IAChBC,GAAeA,IACfC,GAAcA,IAEdF,EAAevtB,OAAA0tB,EAAA,EAAA1tB,CAAW,WAAM,OAAAA,OAAA2tB,EAAA,EAAA3tB,CAAK,WACpCgtB,EAAQY,SACRC,EAASC,EAAWC,SAClB,YAEHP,EAAcxtB,OAAAguB,EAAA,EAAAhuB,EACXiuB,QAASf,EAAQgB,mBAAmB,GACtC,SAAAxuB,GAAK,OAAA2tB,EAAMC,OAAOa,MAAQzuB,IAG3B+tB,EAAaztB,OAAAouB,EAAA,EAAApuB,CAAS,SAAA2jB,GAAK,OAAA0J,EAAMC,OAAOe,KAAO1K,KAzHhD2K,CAAKpB,GACEF,EAGR,IAAMuB,KACA,SAAAC,EAAkBxB,EAAkByB,GACzC,OAAOF,EAAME,KAAQF,EAAME,GAAMzB,EAAQ0B,cAG1C,IAAMC,KACA,SAAAC,EAAmB5B,EAAkByB,GAC1C,OAAOE,EAAOF,KAAQE,EAAOF,GAAMzB,EAAQ6B,eAG5C,IAAMC,KACA,SAAAC,EAAoB/B,EAAkByB,GAC3C,OAAOK,EAASL,KAAQK,EAASL,GAAMzB,EAAQgC,gBAGhD,IAAMC,KACA,SAAAC,EAA0BlC,EAAkByB,GACjD,OAAOQ,EAAcR,GAAOQ,EAAcR,GAAMzB,EAAQmC,qBAGzD,IAAMC,KACA,SAAAC,EAAyBrC,EAAkByB,GAChD,OAAOW,EAAaX,GAAOW,EAAaX,GAAMzB,EAAQsC,oBAGvD,IAAMC,KACA,SAAAC,EAAyBxC,EAAkByB,GAChD,OAAOc,EAAad,GAAOc,EAAad,GAAMzB,EAAQyC,oBAehD,IAAMpC,GACZC,QACCoC,IAAK,IAKD,SAAAvvB,EAA4EwvB,GACjF,OAAQtC,EAAYsC,GAGf,SAAA5oB,EAA4ElG,EAAQ+uB,EAAWC,GACpG,IAAMxuB,EAAIgsB,EACV,GAAIhsB,EAAER,GAAM,CACX,IAAMivB,EAAQD,GAAQA,EAAKC,OACb,IAAVA,IACHF,EAAM5vB,OAAA+vB,EAAA,EAAA/vB,CAAa4vB,EAAKvuB,EAAER,IAAQmvB,OAAQF,KAG5CzuB,EAAER,GAAO+uB,EAGJ,SAAAK,IACL,OAAO5C,EAlBR6C,OAAc,MAAI7C,EAyBlB,IAAM8C,KAEA,SAAAC,EAAqD3B,EAAYptB,GACtE8uB,EAAQ1B,GAAMptB,EAGT,SAAAwsB,EAAmBwC,GACxB,IAAK,IAAM1M,KAAKwM,EACfA,EAAQxM,GAAG0M,EAAOhD,GAIb,IAOHE,EACAC,EACAC,EATSK,GACZwC,MAAO,QACPvC,OAAQ,mTC9GT,SAAAwC,EAAAC,GACA,OAAAA,EAAAxwB,OAAAywB,EAAA,EAAAzwB,CAAAwwB,EAAAvR,SAEA,SAAAyR,EAAA3R,EAAAD,GACA,QAAAxf,EAAA,EAAmBA,EAAAwf,EAAWxf,IAC9Byf,EAAAzf,GAGA,SAAAqxB,EAAA5R,EAAAD,EAAA8R,QACA,IAAAA,IAAyBA,MACzB,QAAAtxB,EAAA,EAAmBA,EAAAwf,EAAWxf,IAC9BsxB,EAAAtxB,GAAAyf,EAAAzf,GAEA,OAAAsxB,EAEA,SAAAC,EAAA9R,EAAA+R,EAAAC,EAAAH,QACA,IAAAA,IAAyBA,MAEzB,IADA,IAAA3R,EAAAvZ,KAAAyV,IAAA2V,EAAA7R,OAAA8R,EAAA9R,QACA3f,EAAA,EAAmBA,EAAA2f,EAAY3f,IAC/BsxB,EAAAtxB,GAAAyf,EAAA+R,EAAAxxB,GAAAyxB,EAAAzxB,IAEA,OAAAsxB,EAEA,SAAAI,EAAAC,EAAAL,QACA,IAAAA,IAAyBA,MACzB,QAAAM,EAAA,EAAAC,EAAAF,EAAqCC,EAAAC,EAAAlS,OAAqBiS,IAG1D,IAFA,IAAAE,EAAAD,EAAAD,GACAG,EAAAT,EAAA3R,OACA3f,EAAA,EAAuBA,EAAA8xB,EAAAnS,OAAqB3f,IAC5CsxB,EAAAtxB,EAAA+xB,GAAAD,EAAA9xB,GAGA,OAAAsxB,EAEA,SAAAU,EAAAvS,EAAAkS,EAAAL,GAEA,YADA,IAAAA,IAAyBA,MACzBI,EAAAC,EAAAM,IAAAxS,GAAA6R,GAYA,SAAAW,EAAAxS,EAAAyS,GACA,GAAAhsB,MAAAisB,QAAAD,GACA,OAAAA,EAAAD,IAAAxS,GAGA,IAAA2S,KACA,QAAA7wB,KAAA2wB,EACAE,EAAA7wB,GAAAke,EAAAyS,EAAA3wB,MAEA,OAAA6wB,EAGA,SAAAC,EAAA5S,EAAAyS,GACA,QAAA3wB,KAAA2wB,EACAzS,EAAAyS,EAAA3wB,qCC/DA,IAAA+wB,EAsHA,SAAAC,EAAAhC,EAAAiC,GACA,IAAAC,EAAAD,GAAAjC,EACAmC,EAAAnC,EAAA5B,eAAA,IAAA+D,EAAA9B,OAAA8B,EACAC,KACA,SAAAC,EAAA7B,GACA4B,EAAA5B,EAAA8B,SAAAC,KAAAC,MACAN,EAAAE,GAEA,SAAAK,EAAAjC,UACA4B,EAAA5B,EAAA8B,SACAJ,EAAAE,GAKA,OAHAhE,EAAAsE,iBAAA,QAAAD,GAAA,GACArE,EAAAsE,iBAAA,UAAAL,GAAA,GACAH,EAAAE,GACA,WACAhE,EAAAuE,oBAAA,QAAAF,GACArE,EAAAuE,oBAAA,UAAAN,oEAtIA,SAAAN,GACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,2BACAA,IAAA,aACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,gCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,eACAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,uBACAA,IAAA,qBACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,mBACAA,IAAA,iBAnHA,CAoHCA,yCC9GD,SAAA5oB,EAAAypB,EAAAC,EAAA9B,QACA,IAAAA,IAAyBA,MACzB,QAAAtxB,EAAA,EAAmBA,EAAAmzB,EAAAxT,OAAiB3f,IACpCsxB,EAAAtxB,GAAAmzB,EAAAnzB,GAAAozB,EAAApzB,GAEA,OAAAsxB,EAEA,SAAApnB,EAAAipB,EAAAC,EAAA9B,QACA,IAAAA,IAAyBA,MACzB,QAAAtxB,EAAA,EAAmBA,EAAAmzB,EAAAxT,OAAiB3f,IACpCsxB,EAAAtxB,GAAAmzB,EAAAnzB,GAAAozB,EAAApzB,GAEA,OAAAsxB,EAEA,SAAArnB,EAAAopB,EAAAhU,EAAAiS,QACA,IAAAA,IAAyBA,MACzB,QAAAtxB,EAAA,EAAmBA,EAAAqf,EAAAM,OAAgB3f,IACnCsxB,EAAAtxB,GAAAqf,EAAArf,GAAAqzB,EAEA,OAAA/B,EAEA,SAAAvS,EAAAsU,EAAAhU,EAAAiS,QACA,IAAAA,IAAyBA,MACzB,QAAAtxB,EAAA,EAAmBA,EAAAqf,EAAAM,OAAgB3f,IACnCsxB,EAAAtxB,GAAAqf,EAAArf,GAAAqzB,EAEA,OAAA/B,EAEA,SAAA3R,EAAAN,GAEA,IADA,IAAAiU,EAAA,EACAtzB,EAAA,EAAmBA,EAAAqf,EAAAM,OAAgB3f,IAAA,CACnC,IAAAswB,EAAAjR,EAAArf,GACAszB,GAAAhD,IAEA,OAAAlqB,KAAAgD,KAAAkqB,GAEA,SAAAhX,EAAA+C,EAAAiS,GAEA,YADA,IAAAA,IAAyBA,MACzBvS,EAAAY,EAAAN,KAAAiS,GAWA,SAAAxN,EAAA/a,EAAAwY,GAEA,IADA,IAAAjhB,EAAA,EACAN,EAAA,EAAmBA,EAAA+I,EAAA4W,OAAe3f,IAClCM,GAAAyI,EAAA/I,GAAAuhB,EAAAvhB,GAEA,OAAAM,EAEA,SAAAkc,EAAAzT,EAAAwY,EAAA+P,GAKA,YAJA,IAAAA,IAAyBA,MACzBA,EAAA,GAAAvoB,EAAA,GAAAwY,EAAA,GAAAxY,EAAA,GAAAwY,EAAA,GACA+P,EAAA,GAAAvoB,EAAA,GAAAwY,EAAA,GAAAxY,EAAA,GAAAwY,EAAA,GACA+P,EAAA,GAAAvoB,EAAA,GAAAwY,EAAA,GAAAxY,EAAA,GAAAwY,EAAA,GACA+P,EAEA,SAAAiC,EAAAxqB,EAAAwY,GACA,OAAAxY,EAAA,GAAAwY,EAAA,GAAAxY,EAAA,GAAAwY,EAAA,ySAEA,iCCzEA,SAAAiS,EAAA5F,GACA,IAAA6F,EAAA7F,EAAA4F,WAAA,UAAA5F,EAAA4F,WAAA,sBACA,SAAAC,EACA,MAAAC,MAAA,uCAEA,OAAAD,EAEA,SAAAE,EAAAF,GAEA,IADA,IAAAG,KACAhC,EAAA,EAAoBA,EAAAiC,UAAAlU,OAAuBiS,IAC3CgC,EAAAhC,EAAA,GAAAiC,UAAAjC,GAEA,OAAAgC,EAAAE,OAAA,SAAAxC,EAAAyC,GAAmD,OAAAzC,EAAAmC,EAAAM,EAAAC,cAAA,gBAAuD,GAU1G,SAAAC,EAAArG,EAAAsG,QACA,IAAAA,IAAgCA,EAAA,GAChCA,EAAA9tB,KAAAW,IAAA,EAAAmtB,GACA,IAAA9iB,EAAAwc,EAAAuG,YAAAD,EAAA,EACA7iB,EAAAuc,EAAAwG,aAAAF,EAAA,EACA,OAAAtG,EAAAxc,WACAwc,EAAAvc,cACAuc,EAAAxc,QACAwc,EAAAvc,UACA,iIC/BA,SAAAgjB,EAAAC,GACA,OAAAluB,KAAAwV,MAAAxV,KAAAC,SAAAiuB,GAEA,SAAAC,EAAAC,EAAAC,GACA,OAAAJ,EAAAI,EAAAD,KAEA,SAAAE,IACA,OAAAtuB,KAAAC,SAAAD,KAAAC,SAAAD,KAAAC,UAAA,gMCPA,IAQAsuB,EAAA,SAAAhuB,EAAAE,GAAsC,OAAAF,IAAAE,GAEtC,SAAA+tB,EAAAC,EAAAC,GACA,GAAAD,IAAAC,EACA,SAEA,IAAAA,EACA,SAEA,GAAAD,EAAAlV,SAAAmV,EAAAnV,OACA,SAEA,QAAA3f,EAAA,EAAmBA,EAAA60B,EAAAlV,OAAiB3f,IACpC,GAAA60B,EAAA70B,KAAA80B,EAAA90B,GACA,SAGA,8CCzBA+0B,EAAAC,EAAAC,SAGA,SAAAC,EAAA3uB,GACA,OAAA4uB,EAAA5uB,GAAA6uB,UA2BA,SAAAC,EAAA5B,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA8B,UAAAD,EAAAzsB,IAGA,SAAA2sB,EAAA/B,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAgC,WAAAH,EAAAzsB,IAGA,SAAA6sB,EAAAjC,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAkC,WAAAL,EAAAzsB,IAGA,SAAA+sB,EAAAnC,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAoC,WAAAP,EAAAzsB,IAGA,SAAAitB,EAAArC,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAsC,WAAAT,EAAAzsB,IAyEA,SAAAmtB,EAAAvC,EAAAltB,EAAA0vB,EAAAX,GACA,IAAAF,EAAAF,EAAA3uB,GACA,gBAAA2vB,GACAzC,EAAA8B,UAAAD,EAAAW,GACAxC,EAAA0C,cAAA1C,EAAA2C,SAAAH,GACAxC,EAAA4C,YAAAjB,EAAAc,IAGA,SAAAI,EAAA7C,EAAAltB,EAAA0vB,EAAAX,EAAAiB,GAGA,IAFA,IAAAnB,EAAAF,EAAA3uB,GACAiwB,EAAA,IAAAC,WAAAF,GACAv2B,EAAA,EAAmBA,EAAAu2B,IAAUv2B,EAC7Bw2B,EAAAx2B,GAAAi2B,EAAAj2B,EAEA,gBAAA02B,GAEA,QAAAC,KADAlD,EAAAgC,WAAAH,EAAAkB,GACAE,EACAjD,EAAA0C,cAAA1C,EAAA2C,SAAAI,EAAAG,IACAlD,EAAA4C,YAAAjB,EAAAsB,EAAAC,KAOA,IAAAxB,IAAAJ,MACA6B,EAAA,EAAAt0B,QAAyBu0B,KAAA5wB,aAAAswB,KAAA,EAAAO,OAlJzB,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAsD,UAAAzB,EAAAzsB,KAgJyBmuB,YA7IzB,SAAAvD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAwD,WAAA3B,EAAAzsB,MA4IAksB,EAAA6B,EAAA,EAAAr0B,aAA8Bs0B,KAAA5wB,aAAAswB,KAAA,EAAAO,OAzI9B,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAyD,WAAA5B,EAAAzsB,MAwIAksB,EAAA6B,EAAA,EAAAp0B,aAA8Bq0B,KAAA5wB,aAAAswB,KAAA,GAAAO,OArI9B,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA0D,WAAA7B,EAAAzsB,MAoIAksB,EAAA6B,EAAA,EAAAn0B,aAA8Bo0B,KAAA5wB,aAAAswB,KAAA,GAAAO,OAjI9B,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA2D,WAAA9B,EAAAzsB,MAgIAksB,EAAA6B,EAAA,EAAAl0B,MAAuBm0B,KAAAJ,WAAAF,KAAA,EAAAO,OAAAzB,EAAA2B,YAAAxB,GACvBT,EAAA6B,EAAA,EAAAj0B,WAA4Bk0B,KAAAJ,WAAAF,KAAA,EAAAO,OAAApB,GAC5BX,EAAA6B,EAAA,EAAAh0B,WAA4Bi0B,KAAAJ,WAAAF,KAAA,GAAAO,OAAAlB,GAC5Bb,EAAA6B,EAAA,EAAA/zB,WAA4Bg0B,KAAAJ,WAAAF,KAAA,GAAAO,OAAAhB,GAC5Bf,EAAA6B,EAAA,EAAA1yB,eAAgC2yB,KAAAQ,YAAAd,KAAA,EAAAO,OAxGhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA6D,WAAAhC,EAAAzsB,KAsGgCmuB,YAnGhC,SAAAvD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA8D,YAAAjC,EAAAzsB,MAkGAksB,EAAA6B,EAAA,EAAAzyB,oBAAqC0yB,KAAAQ,YAAAd,KAAA,EAAAO,OA/FrC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA+D,YAAAlC,EAAAzsB,MA8FAksB,EAAA6B,EAAA,EAAAxyB,oBAAqCyyB,KAAAQ,YAAAd,KAAA,GAAAO,OA3FrC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAgE,YAAAnC,EAAAzsB,MA0FAksB,EAAA6B,EAAA,EAAAvyB,oBAAqCwyB,KAAAQ,YAAAd,KAAA,GAAAO,OAvFrC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAiE,YAAApC,EAAAzsB,MAsFAksB,EAAA6B,EAAA,EAAA9zB,OAAwB+zB,KAAAQ,YAAAd,KAAA,EAAAO,OAAAzB,EAAA2B,YAAAxB,GACxBT,EAAA6B,EAAA,EAAA7zB,YAA6B8zB,KAAAQ,YAAAd,KAAA,EAAAO,OAAApB,GAC7BX,EAAA6B,EAAA,EAAA5zB,YAA6B6zB,KAAAQ,YAAAd,KAAA,GAAAO,OAAAlB,GAC7Bb,EAAA6B,EAAA,EAAA3zB,YAA6B4zB,KAAAQ,YAAAd,KAAA,GAAAO,OAAAhB,GAC7Bf,EAAA6B,EAAA,EAAA1zB,aAA8B2zB,KAAA5wB,aAAAswB,KAAA,GAAAO,OAvF9B,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAkE,iBAAArC,GAAA,EAAAzsB,MAsFAksB,EAAA6B,EAAA,EAAAzzB,aAA8B0zB,KAAA5wB,aAAAswB,KAAA,GAAAO,OAnF9B,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAmE,iBAAAtC,GAAA,EAAAzsB,MAkFAksB,EAAA6B,EAAA,EAAAxzB,aAA8ByzB,KAAA5wB,aAAAswB,KAAA,GAAAO,OA/E9B,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAoE,iBAAAvC,GAAA,EAAAzsB,MA8EAksB,EAAA6B,EAAA,EAAAnzB,eAAgCozB,KAAA5wB,aAAAswB,KAAA,GAAAO,OA3EhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAqE,mBAAAxC,GAAA,EAAAzsB,MA0EAksB,EAAA6B,EAAA,EAAAlzB,eAAgCmzB,KAAA5wB,aAAAswB,KAAA,GAAAO,OAlEhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAsE,mBAAAzC,GAAA,EAAAzsB,MAiEAksB,EAAA6B,EAAA,EAAAjzB,eAAgCkzB,KAAA5wB,aAAAswB,KAAA,GAAAO,OAxEhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAuE,mBAAA1C,GAAA,EAAAzsB,MAuEAksB,EAAA6B,EAAA,EAAAhzB,eAAgCizB,KAAA5wB,aAAAswB,KAAA,GAAAO,OA1DhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAwE,mBAAA3C,GAAA,EAAAzsB,MAyDAksB,EAAA6B,EAAA,EAAA/yB,eAAgCgzB,KAAA5wB,aAAAswB,KAAA,GAAAO,OAhEhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAAyE,mBAAA5C,GAAA,EAAAzsB,MA+DAksB,EAAA6B,EAAA,EAAA9yB,eAAgC+yB,KAAA5wB,aAAAswB,KAAA,GAAAO,OAvDhC,SAAArD,EAAA6B,GACA,gBAAAzsB,GACA4qB,EAAA0E,mBAAA7C,GAAA,EAAAzsB,MAsDAksB,EAAA6B,EAAA,EAAAvzB,aAA8BwzB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA9xB,YAC9BiwB,EAAA6B,EAAA,EAAAtzB,eAAgCuzB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA7xB,kBAChCgwB,EAAA6B,EAAA,EAAArzB,aAA8BszB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA5xB,YAC9B+vB,EAAA6B,EAAA,EAAApzB,oBAAqCqzB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA9xB,YACrCiwB,EAAA6B,EAAA,EAAA7yB,mBAAoC8yB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA3xB,kBACpC8vB,EAAA6B,EAAA,EAAA5yB,0BAA2C6yB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA3xB,kBAC3C8vB,EAAA6B,EAAA,EAAA3yB,sBAAuC4yB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA7xB,kBACvCgwB,EAAA6B,EAAA,EAAAtyB,iBAAkCuyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA9xB,YAClCiwB,EAAA6B,EAAA,EAAAryB,iBAAkCsyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA5xB,YAClC+vB,EAAA6B,EAAA,EAAApyB,mBAAoCqyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA7xB,kBACpCgwB,EAAA6B,EAAA,EAAAnyB,uBAAwCoyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA3xB,kBACxC8vB,EAAA6B,EAAA,EAAAlyB,0BAA2CmyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA9xB,YAC3CiwB,EAAA6B,EAAA,EAAAjyB,0BAA2CkyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA5xB,YAC3C+vB,EAAA6B,EAAA,EAAAhyB,4BAA6CiyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA7xB,kBAC7CgwB,EAAA6B,EAAA,EAAA/xB,gCAAiDgyB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAAwB,EAAA,EAAA3xB,kBACjD8vB,GACA,SAAAqD,EAAA3E,EAAA6B,EAAA+C,GACA,gBAAAxxB,GACA4sB,EAAA6E,WAAA7E,EAAA8E,aAAA1xB,EAAA2xB,QACA/E,EAAAgF,wBAAAnD,GACA7B,EAAAiF,oBAAApD,EAAA+C,EAAAM,SAAA/B,EAAA,EAAAt0B,MAAAuE,EAAAyV,YAAA,EAAAzV,EAAAyY,QAAA,EAAAzY,EAAA0Y,QAAA,IAGA,SAAAqZ,EAAAnF,EAAA6B,EAAA+C,GACA,gBAAAxxB,GACA4sB,EAAA6E,WAAA7E,EAAA8E,aAAA1xB,EAAA2xB,QACA/E,EAAAgF,wBAAAnD,GACA7B,EAAAoF,qBAAAvD,EAAA+C,EAAAM,SAAA/B,EAAA,EAAAl0B,IAAAmE,EAAAyY,QAAA,EAAAzY,EAAA0Y,QAAA,IAGA,SAAAuZ,EAAArF,EAAA6B,EAAA+C,GACA,IAAAU,EAAAV,EAAA9B,KACA/W,EAAA6Y,EAAA7Y,MACA,gBAAA3Y,GACA4sB,EAAA6E,WAAA7E,EAAA8E,aAAA1xB,EAAA2xB,QAQA,IAPA,IAAAQ,EAAAD,EACAxC,EAAAyC,EAAAxZ,EAEAF,EADA6V,EAAAyB,EAAA,EAAAt0B,OACAi0B,KAAAyC,EACA1c,EAAAzV,EAAAyV,YAAA,EACAiD,EAAA1Y,EAAA0Y,QAAA,EACA0Z,EAAA3Z,EAAAE,EACAxf,EAAA,EAAuBA,EAAAwf,IAAWxf,EAClCyzB,EAAAgF,wBAAAnD,EAAAt1B,GACAyzB,EAAAiF,oBAAApD,EAAAt1B,EAAAu2B,EAAAK,EAAA,EAAAt0B,MAAAga,EAAAgD,EAAAC,EAAA0Z,EAAAj5B,IAIA,IAAAk5B,IAAAlE,MACA4B,EAAA,EAAAt0B,QAAyBi0B,KAAA,EAAAO,OAAAsB,EAAAO,SAAA,GACzB3D,EAAA4B,EAAA,EAAAr0B,aAA8Bg0B,KAAA,EAAAO,OAAAsB,EAAAO,SAAA,GAC9B3D,EAAA4B,EAAA,EAAAp0B,aAA8B+zB,KAAA,GAAAO,OAAAsB,EAAAO,SAAA,GAC9B3D,EAAA4B,EAAA,EAAAn0B,aAA8B8zB,KAAA,GAAAO,OAAAsB,EAAAO,SAAA,GAC9B3D,EAAA4B,EAAA,EAAAl0B,MAAuB6zB,KAAA,EAAAO,OAAA8B,EAAAD,SAAA,GACvB3D,EAAA4B,EAAA,EAAAj0B,WAA4B4zB,KAAA,EAAAO,OAAA8B,EAAAD,SAAA,GAC5B3D,EAAA4B,EAAA,EAAAh0B,WAA4B2zB,KAAA,GAAAO,OAAA8B,EAAAD,SAAA,GAC5B3D,EAAA4B,EAAA,EAAA/zB,WAA4B0zB,KAAA,GAAAO,OAAA8B,EAAAD,SAAA,GAC5B3D,EAAA4B,EAAA,EAAA1yB,eAAgCqyB,KAAA,EAAAO,OAAA8B,EAAAD,SAAA,GAChC3D,EAAA4B,EAAA,EAAAzyB,oBAAqCoyB,KAAA,EAAAO,OAAA8B,EAAAD,SAAA,GACrC3D,EAAA4B,EAAA,EAAAxyB,oBAAqCmyB,KAAA,GAAAO,OAAA8B,EAAAD,SAAA,GACrC3D,EAAA4B,EAAA,EAAAvyB,oBAAqCkyB,KAAA,GAAAO,OAAA8B,EAAAD,SAAA,GACrC3D,EAAA4B,EAAA,EAAA9zB,OAAwByzB,KAAA,EAAAO,OAAA8B,EAAAD,SAAA,GACxB3D,EAAA4B,EAAA,EAAA7zB,YAA6BwzB,KAAA,EAAAO,OAAA8B,EAAAD,SAAA,GAC7B3D,EAAA4B,EAAA,EAAA5zB,YAA6BuzB,KAAA,GAAAO,OAAA8B,EAAAD,SAAA,GAC7B3D,EAAA4B,EAAA,EAAA3zB,YAA6BszB,KAAA,GAAAO,OAAA8B,EAAAD,SAAA,GAC7B3D,EAAA4B,EAAA,EAAA1zB,aAA8BqzB,KAAA,EAAAO,OAAAgC,EAAAtZ,MAAA,GAC9BwV,EAAA4B,EAAA,EAAAzzB,aAA8BozB,KAAA,EAAAO,OAAAgC,EAAAtZ,MAAA,GAC9BwV,EAAA4B,EAAA,EAAAxzB,aAA8BmzB,KAAA,GAAAO,OAAAgC,EAAAtZ,MAAA,GAC9BwV,IAyEAC,MACA2B,EAAA,EAAA1xB,MAAAi0B,UACAlE,EAAA2B,EAAA,EAAAzxB,eAAAi0B,WACAnE,EAAA2B,EAAA,EAAAxxB,OAAAi0B,WACApE,EAAA2B,EAAA,EAAAvxB,gBAAAi0B,YACArE,EAAA2B,EAAA,EAAAl0B,KAAA+zB,WACAxB,EAAA2B,EAAA,EAAA1yB,cAAAmzB,YACApC,EAAA2B,EAAA,EAAAt0B,OAAA2D,aACAgvB,EAAA2B,EAAA,EAAAtxB,wBAAAg0B,YACArE,EAAA2B,EAAA,EAAArxB,wBAAA+zB,YACArE,EAAA2B,EAAA,EAAApxB,sBAAA8zB,YACArE,EAAA2B,EAAA,EAAAnxB,YAAA6zB,YACArE,EAAA2B,EAAA,EAAAlxB,6BAAA2xB,YACApC,EAAA2B,EAAA,EAAAjxB,8BAAA0xB,YACApC,EAAA2B,EAAA,EAAAhxB,0BAAAyxB,YACApC,EAAA2B,EAAA,EAAA/wB,gCAAAwxB,YACApC,EAAA2B,EAAA,EAAA9wB,mBAAAuxB,YAyDA,SAAAkC,EAAA9F,EAAA+F,EAAAC,GAMA,QALA,IAAAD,IAA0BA,WAC1B,IAAAC,IAA6BA,MAC7B,MAAAD,EAAAE,OAAAF,EAAAE,QAAAD,EAAAC,OACAjG,EAAAkG,YAAAlG,EAAAmG,oBAAAJ,EAAAE,OAEAF,EAAAK,MAAAL,EAAAK,OAAAJ,EAAAI,MACAL,EAAAM,OAAAN,EAAAM,QAAAL,EAAAK,OACAN,EAAAO,OAAAP,EAAAO,QAAAN,EAAAM,MAAA,CACA,IAAAD,OAAA,EAAAC,OAAA,EACAP,EAAAK,KACAC,EAAAC,EAAAP,EAAAK,MAGAE,EAAAP,EAAAO,OAAA,gBACAD,EAAAN,EAAAM,OAAA,iBAEArG,EAAAuG,cAAAvG,EAAA3uB,WAAA2uB,EAAAwG,eAAAxG,EAAAqG,IACArG,EAAAuG,cAAAvG,EAAA3uB,WAAA2uB,EAAAyG,eAAAzG,EAAAsG,IAEAP,EAAAW,WAAAX,EAAAW,YAAAV,EAAAU,WACA1G,EAAAuG,cAAAvG,EAAA3uB,WAAA2uB,EAAA2G,mBAAA3G,EAAA+F,EAAAW,YAEAX,EAAAa,WAAAb,EAAAa,YAAAZ,EAAAY,WACA5G,EAAAuG,cAAAvG,EAAA3uB,WAAA2uB,EAAA6G,mBAAA7G,EAAA+F,EAAAa,YAIA,SAAAE,EAAA9G,EAAA1Z,EAAAyf,EAAAC,GACA,SAAA1f,EAAA3I,OAAA,MAAA2I,EAAA1I,OAAA,CAGA,MAAA0I,EAAAygB,cACAzgB,EAAAygB,YAAA/G,EAAAgH,qBAEA1gB,EAAA2c,WACA3c,EAAA2c,aAEAjD,EAAAiH,gBAAAjH,EAAAkH,YAAA5gB,EAAAygB,aACAzgB,EAAA6gB,cAAAr0B,OAAAktB,EAAAnxB,OACAmxB,EAAAoH,aAAA,qBAEA,IAAAC,EAAA/gB,EAAA6gB,cAAApb,MACA,GAAAsb,EAAA,GAGA,IAFA,IAAAC,EAAAtH,EAAAoH,aAAA,wBAA6DG,iBAAA,cAC7DC,KACAj7B,EAAA,EAAuBA,EAAA86B,EAAc96B,IACrCi7B,EAAAC,KAAAH,EAAA,mBAAA/6B,EAAA,WAEA+6B,EAAAC,iBAAAC,GACA,IAAAj7B,EAAA,EAAuBA,EAAA86B,EAAc96B,IAAA,CACrC,MAAA+Z,EAAA2c,SAAA12B,KACA+Z,EAAA2c,SAAA12B,GAAAyzB,EAAA0H,iBAEA,IAAAjF,EAAAnc,EAAA2c,SAAA12B,GACAyzB,EAAA4C,YAAA5C,EAAA3uB,WAAAoxB,GACAzC,EAAA2H,WAAA3H,EAAA3uB,WAAA,EAAA2uB,EAAA4H,KAAAthB,EAAA3I,MAAA2I,EAAA1I,OAAA,EAAAoiB,EAAA4H,KAAAthB,EAAA6gB,cAAAr0B,KAAA,MACAgzB,EAAA9F,EAAA+F,EAAAC,GACAhG,EAAA6H,qBAAA7H,EAAAkH,YAAAM,EAAAj7B,GAAAyzB,EAAA3uB,WAAAoxB,EAAA,QAGA,CACA,MAAAnc,EAAA2c,SAAA,KACA3c,EAAA2c,SAAA,GAAAjD,EAAA0H,iBAEAjF,EAAAnc,EAAA2c,SAAA,GACAjD,EAAA4C,YAAA5C,EAAA3uB,WAAAoxB,GACAzC,EAAA2H,WAAA3H,EAAA3uB,WAAA,EAAA2uB,EAAA4H,KAAAthB,EAAA3I,MAAA2I,EAAA1I,OAAA,EAAAoiB,EAAA4H,KAAAthB,EAAA6gB,cAAAr0B,KAAA,MACAgzB,EAAA9F,EAAA+F,EAAAC,GACAhG,EAAA6H,qBAAA7H,EAAAkH,YAAAlH,EAAA8H,kBAAA9H,EAAA3uB,WAAAoxB,EAAA,GAEA,MAAAnc,EAAAyhB,cACAzhB,EAAAyhB,YAAA/H,EAAAgI,sBAEAhI,EAAAiI,iBAAAjI,EAAAkI,aAAA5hB,EAAAyhB,aACA/H,EAAAmI,oBAAAnI,EAAAkI,aAAAlI,EAAAoI,kBAAA9hB,EAAA3I,MAAA2I,EAAA1I,QACAoiB,EAAAqI,wBAAArI,EAAAkH,YAAAlH,EAAAsI,iBAAAtI,EAAAkI,aAAA5hB,EAAAyhB,aACA,IAAAQ,EAAAvI,EAAAwI,uBAAAxI,EAAAkH,aACAqB,IAAAvI,EAAAyI,sBACAC,QAAAC,MAAA,oBAAAJ,EAAAxC,GAEA/F,EAAAiH,gBAAAjH,EAAAkH,YAAA,MACAlH,EAAA4C,YAAA5C,EAAA3uB,WAAA,MACA2uB,EAAAiI,iBAAAjI,EAAAkI,aAAA,OAEA,SAAAU,EAAA5I,EAAA1Z,GACA0Z,EAAA6I,kBAAAviB,EAAAygB,aACA/G,EAAA8I,mBAAAxiB,EAAAyhB,aACA,QAAA5J,EAAA,EAAAc,EAAA3Y,EAAA2c,SAA0C9E,EAAAc,EAAA/S,OAAgBiS,IAAA,CAC1D,IAAAsE,EAAAxD,EAAAd,GACA6B,EAAA+I,cAAAtG,IAIA,SAAAuG,EAAAhJ,EAAAiJ,GACA,GAAAA,EAAAC,OACA,QAAA/K,EAAA,EAAAc,EAAAgK,EAAAC,OAA8C/K,EAAAc,EAAA/S,OAAgBiS,IAAA,CAC9D,IAAAgL,EAAAlK,EAAAd,GACA6B,EAAAkJ,OAAAC,GAGA,GAAAF,EAAAG,QACA,QAAAC,EAAA,EAAAC,EAAAL,EAAAG,QAA+CC,EAAAC,EAAApd,OAAgBmd,IAAA,CAC/DF,EAAAG,EAAAD,GACArJ,EAAAoJ,QAAAD,GAGAF,EAAAM,WACAvJ,EAAAuJ,UAAAC,MAAAxJ,EAAAiJ,EAAAM,WAEA,MAAAN,EAAAQ,WACAzJ,EAAAyJ,UAAAR,EAAAQ,WAEA,MAAAR,EAAAS,UACA1J,EAAA0J,SAAAT,EAAAS,UAEA,MAAAT,EAAAU,WACA3J,EAAA2J,UAAAV,EAAAU,WAEA,MAAAV,EAAAW,WACA5J,EAAA4J,UAAAX,EAAAW,WAEAX,EAAAY,WACA7J,EAAA6J,UAAAL,MAAAxJ,EAAAiJ,EAAAY,WAEA,MAAAZ,EAAAa,WACA9J,EAAA8J,UAAAb,EAAAa,WAEAb,EAAAc,YACA/J,EAAA+J,WAAAP,MAAAxJ,EAAAiJ,EAAAc,YAEA,MAAAd,EAAAe,YACAhK,EAAAgK,WAAAf,EAAAe,YAEA,MAAAf,EAAAgB,WACAjK,EAAAkK,MAAAjB,EAAAgB,WAGA,SAAAE,EAAAnK,EAAAiJ,GACA,GAAAA,EAAAC,OACA,QAAA/K,EAAA,EAAAc,EAAAgK,EAAAC,OAA8C/K,EAAAc,EAAA/S,OAAgBiS,IAAA,CAC9D,IAAAgL,EAAAlK,EAAAd,GACA6B,EAAAoJ,QAAAD,GAGA,GAAAF,EAAAG,QACA,QAAAC,EAAA,EAAAC,EAAAL,EAAAG,QAA+CC,EAAAC,EAAApd,OAAgBmd,IAAA,CAC/DF,EAAAG,EAAAD,GACArJ,EAAAkJ,OAAAC,QC3hBAiB,SAEAC,GACAjE,KAAA,gBACAQ,UAAA,SACAF,UAAA,WASA,IAAA4D,GACAC,YACAC,SAAAJ,KACAA,EAAAjH,EAAA,IACA4B,OAAA,IAAAvyB,eACA,KACA,KACA,IACA,OAEAi4B,UAAA,UAEAL,EAAAjH,EAAA,IACA4B,OAAA,IAAAvyB,cACA,IACA,IACA,IACA,MAEAi4B,UAAA,UAEAL,GACAM,SAAA,iBACAC,UAAA,IAGAC,GACAC,aACAC,KAAA,0BAAA3H,EAAA,6BAA+EA,EAAA,2BAA0DA,EAAA,qCAA8EA,EAAA,QAAAA,EAAA,mCAAmFA,EAAA,0BAC1S4H,KAAA,qDAAuC5H,EAAA,2BAAmEA,EAAA,8DAA8EA,EAAA,OAAAA,EAAA,kBC1CxL6H,EAAA,WACA,SAAAC,EAAAjL,GACAkL,KAAAlL,KA2CA,OAzCAiL,EAAA98B,UAAAg9B,OAAA,SAAApF,GACA,IAAA/F,EAAAkL,KAAAlL,GAQA,QAAAtE,KAPAqK,EAAA2E,WACAQ,KAAAR,SAAA1K,EAAA+F,EAAA2E,WAEA3E,EAAA4E,YACAO,KAAAP,UAAA5E,EAAA4E,WAEAO,KAAAV,QAAAU,KAAAV,YACAzE,EAAAyE,QAAA,CACA,IAAAY,EAAArF,EAAAyE,QAAA9O,GACA,MAAAwP,KAAAV,QAAA9O,KACAwP,KAAAV,QAAA9O,IACAqJ,OAAA/E,EAAAqL,iBAGArL,EAAA6E,WAAA7E,EAAA8E,aAAAoG,KAAAV,QAAA9O,GAAAqJ,QACA/E,EAAAsL,WAAAtL,EAAA8E,aAAAsG,EAAArG,OAAA/E,GAAAoL,EAAAX,WAAA,oBAEA,GAAA1E,EAAAwF,SAAA,CACA,IAAAxG,EAAAgB,EAAAwF,SAAAxG,OACA,MAAAmG,KAAAK,WACAL,KAAAK,UACAxG,OAAA/E,EAAAqL,eACAG,OAAA,OAGAN,KAAAK,SAAAC,OFgTA,SAAAC,GACA,GAAAA,aAAA/F,UACA,OAAAvC,EAAA,EAAA1xB,KAEA,GAAAg6B,aAAA9F,WACA,OAAAxC,EAAA,EAAAzxB,cAEA,GAAA+5B,aAAAC,kBACA,OAAAvI,EAAA,EAAAzxB,cAEA,GAAA+5B,aAAA7F,WACA,OAAAzC,EAAA,EAAAxxB,MAEA,GAAA85B,aAAA5F,YACA,OAAA1C,EAAA,EAAAvxB,eAEA,GAAA65B,aAAAzI,WACA,OAAAG,EAAA,EAAAl0B,IAEA,GAAAw8B,aAAA7H,YACA,OAAAT,EAAA,EAAA1yB,aAEA,GAAAg7B,aAAAj5B,aACA,OAAA2wB,EAAA,EAAAt0B,MAEA,oCEzUA88B,CAAA5G,GACA/E,EAAA6E,WAAA7E,EAAA4L,qBAAAV,KAAAK,SAAAxG,QACA/E,EAAAsL,WAAAtL,EAAA4L,qBAAA7G,EAAA/E,GAAA+F,EAAAwF,SAAAd,WAAA,oBAEA,OAAAS,MAEAD,EAAA98B,UAAA09B,QAAA,WACA,QAAAnQ,KAAAwP,KAAAV,QACAU,KAAAlL,GAAA8L,aAAAZ,KAAAV,QAAA9O,GAAAqJ,QAEAmG,KAAAK,UACAL,KAAAlL,GAAA8L,aAAAZ,KAAAK,SAAAxG,SAGAkG,EA7CA,GCAAc,EAAA,WACA,SAAAC,EAAAhM,GACAkL,KAAAlL,KACAkL,KAAAe,QAAAjM,EAAAkM,gBACAhB,KAAAH,KAAA/K,EAAAmM,aAAAnM,EAAAoM,iBACAlB,KAAAJ,KAAA9K,EAAAmM,aAAAnM,EAAAqM,eACArM,EAAAsM,aAAApB,KAAAe,QAAAf,KAAAJ,MACA9K,EAAAsM,aAAApB,KAAAe,QAAAf,KAAAH,MAuCA,OArCAiB,EAAA79B,UAAAg9B,OAAA,SAAApF,GACA,IAAA/F,EAAAkL,KAAAlL,GACA+K,EAAAhF,EAAAgF,MAAAhF,EAAAgF,KAAAwB,QAAArB,KAAAsB,WACA1B,EAAA/E,EAAA+E,MAAA/E,EAAA+E,KAAAyB,QAAArB,KAAAuB,WACA,IAAA1B,IAAAD,EACA,OAAAI,KAiBA,GAfAH,EAAA2B,QAAA,2BACA1M,EAAAoH,aAAA,sBAEApH,EAAA2M,aAAAzB,KAAAJ,QACA9K,EAAA2M,aAAAzB,KAAAH,QACA/K,EAAA4M,cAAA1B,KAAAJ,MACA9K,EAAA4M,cAAA1B,KAAAH,MACA/K,EAAA6M,mBAAA3B,KAAAJ,KAAA9K,EAAA8M,iBACApE,QAAAC,MAAA,mCAAA3I,EAAA+M,iBAAA7B,KAAAJ,MAAAkC,EAAAlC,IAEA9K,EAAA6M,mBAAA3B,KAAAH,KAAA/K,EAAA8M,iBACApE,QAAAC,MAAA,qCAAA3I,EAAA+M,iBAAA7B,KAAAH,MAAAiC,EAAAjC,IAEA/K,EAAAiN,YAAA/B,KAAAe,UACAjM,EAAAkN,oBAAAhC,KAAAe,QAAAjM,EAAAmN,aACA,CACA,IAAAC,EAAApN,EAAAqN,kBAAAnC,KAAAe,SACAvD,QAAAC,MAAA,4BAAAyE,GAMA,OAJAlC,KAAAoC,eHkNA,SAAAtN,EAAAiM,GACA,IAAAsB,EAAA,EACA,SAAAC,EAAAvB,EAAAwB,GACA,IAAA5L,EAAA7B,EAAA0N,mBAAAzB,EAAAwB,EAAA3gC,MACA4xB,EAAA+O,EAAA3K,KAAA,WAAA2K,EAAA3gC,KAAA6gC,QAAA,GACA76B,EAAA26B,EAAA36B,KACA8xB,EAAAlD,EAAA5uB,GACA,IAAA8xB,EACA,wBAAA9xB,EAAA86B,SAAA,IAEA,SAAA/L,EAAA,CAGA,IAAAwB,EACA,GA/GA,OA+GAuB,EA/GAxB,KA+GA,CAEA,IAAAZ,EAAA+K,EACAA,GAAAE,EAAA3K,KAEAO,EADA3E,EACAkG,EAAArB,YAAAvD,EAAAltB,EAAA0vB,EAAAX,EAAA4L,EAAA3K,MAGA8B,EAAAvB,OAAArD,EAAAltB,EAAA0vB,EAAAX,QAKAwB,EADAuB,EAAArB,aAAA7E,EACAkG,EAAArB,YAAAvD,EAAA6B,GAGA+C,EAAAvB,OAAArD,EAAA6B,GAGA,OAAgBwB,SAAAxB,aAIhB,IAFA,IAAAyL,KACAO,EAAA7N,EAAAkN,oBAAAjB,EAAAjM,EAAA8N,iBACAvhC,EAAA,EAAmBA,EAAAshC,IAAiBthC,EAAA,CACpC,IAAAkhC,EAAAzN,EAAA+N,iBAAA9B,EAAA1/B,GACA,IAAAkhC,EACA,MAEA,IAAAO,EAAAP,EAAA3gC,KAKA,GAHA,QAAAkhC,EAAAL,QAAA,KACAK,IAAAL,OAAA,EAAAK,EAAA9hB,OAAA,IAEA+f,EAAA,CACA,IAAA5I,EAAAmK,EAAAvB,EAAAwB,GACApK,IACAiK,EAAAU,GAAA3K,IAIA,OAAAiK,EGxQAW,CAAAjO,EAAAkL,KAAAe,SACAf,KAAAgD,iBHyQA,SAAAlO,EAAAiM,GAGA,IAFA,IAAAkC,KACAC,EAAApO,EAAAkN,oBAAAjB,EAAAjM,EAAAqO,mBACA9hC,EAAA,EAAmBA,EAAA6hC,EAAgB7hC,IAAA,CACnC,IAAA+hC,EAAAtO,EAAAuO,gBAAAtC,EAAA1/B,GACA,IAAA+hC,EACA,MAEA,IAAAE,EAAAxO,EAAAyO,kBAAAxC,EAAAqC,EAAAxhC,MACA83B,EAAAa,EAAA6I,EAAAx7B,MACAuwB,EAAAuB,EAAAvB,OAAArD,EAAAwO,EAAA5J,GACAuJ,EAAAG,EAAAxhC,OAA0Cu2B,SAAAxB,SAAA2M,GAE1C,OAAAL,EGtRAO,CAAA1O,EAAAkL,KAAAe,SACAf,KAAAsB,WAAAzB,EACAG,KAAAuB,WAAA3B,EACAI,MAEAc,EAAA79B,UAAA09B,QAAA,WACAX,KAAAlL,GAAA2O,cAAAzD,KAAAe,SACAf,KAAAlL,GAAA4O,aAAA1D,KAAAH,MACAG,KAAAlL,GAAA4O,aAAA1D,KAAAJ,OAEAkB,EA9CA,GAiDA,SAAAgB,EAAA6B,GACA,OAAAA,EAAAtC,OAAAuC,MAAA,MACAtQ,IAAA,SAAAuQ,EAAAxiC,GAAiC,OAAAA,EAAA,OAAAwiC,IACjCC,KAAA,MCrDA,IAAAC,EAAA,WACA,SAAAA,KAqBA,OAnBAA,EAAA9gC,UAAAg9B,OAAA,SAAApF,GAaA,OAZAA,EAAAmJ,eACAhE,KAAAgE,aAAAnJ,EAAAmJ,cAEAnJ,EAAAoJ,OACAjE,KAAAiE,KAAApJ,EAAAoJ,MAEApJ,EAAAqJ,QACAlE,KAAAkE,MAAArJ,EAAAqJ,OAEArJ,EAAAsJ,WACAnE,KAAAmE,SAAAtJ,EAAAsJ,UAEAnE,MAEA+D,EAAA9gC,UAAA09B,QAAA,WACAX,KAAAiE,MAAAjE,KAAAiE,KAAAtD,UACAX,KAAAkE,OAAAlE,KAAAkE,MAAAvD,WAEAoD,EAtBA,GCCAK,EAAA,WACA,SAAAC,EAAAvP,GACAkL,KAAAnF,QACAmF,KAAAlL,KACAkL,KAAAjI,UAAAjD,EAAA0H,iBAqBA,OAnBA6H,EAAAphC,UAAAs0B,QAAA,WACA,OAAAyI,KAAAjI,SAAA,IAEAsM,EAAAphC,UAAAg9B,OAAA,SAAApF,GAWA,OAVAmF,KAAAlL,GAAA4C,YAAAsI,KAAAlL,GAAA3uB,WAAA65B,KAAAzI,WACAqD,EAAAoF,KAAAlL,GAAA+F,EAAAmF,KAAAnF,MACAA,EAAAyJ,OACAtE,KAAAlL,GAAA2H,WAAAuD,KAAAlL,GAAA3uB,WAAA,EAAA65B,KAAAlL,GAAA4H,KAAAsD,KAAAlL,GAAA4H,KAAAsD,KAAAlL,GAAAtuB,cAAAq0B,EAAAyJ,OAEAzJ,EAAAa,WAAAb,EAAAa,UAAA8F,QAAA,aACAxB,KAAAlL,GAAAyP,eAAAvE,KAAAlL,GAAA3uB,YAEA65B,KAAAlL,GAAA4C,YAAAsI,KAAAlL,GAAA3uB,WAAA,MACApE,OAAAyiC,OAAAxE,KAAAnF,QACAmF,MAEAqE,EAAAphC,UAAA09B,QAAA,WACAX,KAAAlL,GAAA+I,cAAAmC,KAAAzI,YAEA8M,EAzBA,GA4BAI,EAAA,WACA,SAAAC,EAAA5P,GACAkL,KAAAlL,KACAkL,KAAAjI,YACAiI,KAAAnF,QAyDA,OAvDA6J,EAAAzhC,UAAAs0B,QAAA,SAAAl2B,GAEA,YADA,IAAAA,IAA2BA,EAAA,GAC3B2+B,KAAAjI,SAAA12B,IAEAqjC,EAAAzhC,UAAAg9B,OAAA,SAAApF,GAsBA,GArBAA,EAAA8J,WAAA3E,KAAA5kB,QACA4kB,KAAA5kB,QACA3I,MAAAooB,EAAApoB,OAAAutB,KAAAlL,GAAA7F,OAAAxc,MACAC,OAAAmoB,EAAAnoB,QAAAstB,KAAAlL,GAAA7F,OAAAvc,OACAmpB,YAAA,KAAA9D,YAAA8E,YAAA,KACAZ,eACAr0B,KAAAizB,EAAAoB,eAAApB,EAAAoB,cAAAr0B,MAAAo4B,KAAAlL,GAAAtuB,cACAqa,MAAAga,EAAAoB,eAAApB,EAAAoB,cAAApb,OAAA,IAGA+a,EAAAoE,KAAAlL,GAAAkL,KAAA5kB,OAAAyf,EAAAmF,KAAAnF,MACAmF,KAAAjI,SAAAiI,KAAA5kB,OAAA2c,UAEAiI,KAAA5kB,QAAAyf,EAAApoB,OAAAooB,EAAAnoB,SACAstB,KAAA5kB,OAAA3I,MAAAooB,EAAApoB,MACAutB,KAAA5kB,OAAA1I,OAAAmoB,EAAAnoB,OACAkpB,EAAAoE,KAAAlL,GAAAkL,KAAA5kB,OAAAyf,EAAAmF,KAAAnF,OAEAA,EAAAhK,WACAmP,KAAAnP,SAAAgK,EAAAhK,UAEAgK,EAAAgF,KAAA,CACA,IAAA+E,EAAA5E,KAAAnP,UAAAmP,KAAAnP,SAAA,GACA+T,GACAA,EAAAV,MAAAjE,QAAqCJ,KAAAhF,EAAAgF,OAOrC,OAJAhF,EAAAsJ,WACAnE,KAAAmE,SAAAtJ,EAAAsJ,UAEApiC,OAAAyiC,OAAAxE,KAAAnF,QACAmF,MAEA0E,EAAAzhC,UAAA09B,QAAA,WACA,GAAAX,KAAAnP,SACA,QAAAoC,EAAA,EAAAc,EAAAiM,KAAAnP,SAAgDoC,EAAAc,EAAA/S,OAAgBiS,IAAA,CAChEc,EAAAd,GACA0N,UAGA,GAAAX,KAAA5kB,OACAsiB,EAAAsC,KAAAlL,GAAAkL,KAAA5kB,aAGA,QAAA+iB,EAAA,EAAAC,EAAA4B,KAAAjI,SAAgDoG,EAAAC,EAAApd,OAAgBmd,IAAA,CAChE,IAAA5G,EAAA6G,EAAAD,GACA6B,KAAAlL,GAAA+I,cAAAtG,KAIAmN,EA7DA,GC7BAzjC,EAAAU,EAAAkjC,EAAA,sBAAAC,IAAA,IAAAC,EAAAhjC,OAAAyiC,QAAA,SAAAjiC,GACA,QAAAa,EAAA/B,EAAA,EAAAyB,EAAAoyB,UAAAlU,OAA4C3f,EAAAyB,EAAOzB,IAEnD,QAAA8B,KADAC,EAAA8xB,UAAA7zB,GACAU,OAAAkB,UAAAC,eAAA1B,KAAA4B,EAAAD,KACAZ,EAAAY,GAAAC,EAAAD,IAEA,OAAAZ,GASAuiC,EAAA,WACA,SAAAE,EAAAlQ,GACAkL,KAAAlL,KACAkL,KAAAiF,gBAIAjF,KAAArQ,OAAA,MACAqQ,KAAAX,WAAAW,KAAAvP,aAAAwP,OAAAb,EAAAC,YACAW,KAAAkF,OAAAlF,KAAAmF,mBA4DA,OA1DAH,EAAA/hC,UAAA0sB,OAAA,SAAA4F,EAAA6P,GACA,IAAAC,EAAArF,UACA,IAAAzK,IAAoCA,EAAA,QACpC,IAAA6P,IAA4CA,GAAA,GAC5C,IAAAnW,EAAA+Q,KAAAlL,GAAA7F,OAaA,OAZAltB,OAAAujC,EAAA,EAAAvjC,CAAAktB,EAAAsG,IACA6P,IACApF,KAAAiF,QAAAxkB,QAAA,SAAAle,GACAA,EAAAkQ,MAAAwc,EAAAxc,MACAlQ,EAAAmQ,OAAAuc,EAAAvc,OACAnQ,EAAA05B,eACApb,MAAA,EACAjZ,KAAAy9B,EAAAvQ,GAAAtuB,eAEAo1B,EAAAyJ,EAAAvQ,GAAAvyB,EAAA48B,KAGAa,MAEAgF,EAAA/hC,UAAA09B,QAAA,WACAX,KAAAkF,OAAAvE,UACA,QAAA1N,EAAA,EAAAc,EAAAiM,KAAAiF,QAA2ChS,EAAAc,EAAA/S,OAAgBiS,IAAA,CAC3D,IAAA7X,EAAA2Y,EAAAd,GACAyK,EAAAsC,KAAAlL,GAAA1Z,KAGA4pB,EAAA/hC,UAAAsiC,mBAAA,SAAAvB,GL7CA,IAAAlP,EK+CA,OADAgJ,EAAAkC,KAAAlL,GAAAiQ,ML5CAlG,YAAA,SACAb,SAHAlJ,EK8C8CkL,KAAAlL,IL3C9C0Q,YACAnH,WAAAvJ,EAAA2Q,UAAA3Q,EAAA4Q,sBK0C8C1B,IAC9ChE,MAEAgF,EAAA/hC,UAAAwtB,WAAA,WAAgD,WAAAqP,EAAAE,KAAAlL,KAChDkQ,EAAA/hC,UAAA2tB,YAAA,WAAiD,WAAAiQ,EAAAb,KAAAlL,KACjDkQ,EAAA/hC,UAAA8tB,aAAA,WAAkD,WAAAgT,GAClDiB,EAAA/hC,UAAAkiC,iBAAA,WACA,OAAAnF,KAAAjP,eAAAkP,QACAgE,KAAAjE,KAAAX,WACA6E,MAAAlE,KAAApP,cAAAqP,OAAAP,EAAAC,gBAGAqF,EAAA/hC,UAAAouB,kBAAA,WAAuD,WAAA+S,EAAApE,KAAAlL,KACvDkQ,EAAA/hC,UAAAiuB,mBAAA,WAAwD,WAAAuT,EAAAzE,KAAAlL,KACxDkQ,EAAA/hC,UAAAuuB,kBAAA,WACA,OAAAwO,KAAA9O,qBAAA+O,QACApP,UAAAmP,KAAAmF,uBAGAH,EAAA/hC,UAAA0iC,KAAA,SAAAf,EAAAgB,GAEA,OADAD,EAAA3F,KAAAlL,GAAA8P,EAAA,KAAAgB,GACA5F,MAEAgF,EAAA/hC,UAAA4iC,QAAA,WAEA,IADA,IAAAC,KACA7S,EAAA,EAAwBA,EAAAiC,UAAAlU,OAAuBiS,IAC/C6S,EAAA7S,GAAAiC,UAAAjC,GAGA,OA0GA,SAAA6B,EAAAgR,EAAAb,EAAAC,GAEA,IADA,IAAAa,EAAAD,EAAA9kB,OAAA,EACA3f,EAAA,EAAmBA,EAAAykC,EAAA9kB,OAAmB3f,IAAA,CACtC,IAAA2kC,EAAAF,EAAAzkC,GACA,GAAAkG,MAAAisB,QAAAwS,EAAA7B,UAEA,IADA,IAAA8B,EAAAF,EAAAC,EAAA7B,SAAAnjB,OAAA,EACAyE,EAAA,EAA2BA,EAAAugB,EAAA7B,SAAAnjB,OAA2ByE,IAAA,CACtD,IAAAygB,EAAA7kC,EAAAokB,IAAAwgB,EACAE,EAAArR,EAAAkR,EAAAf,EAAAe,EAAA7B,SAAA1e,GAAAyf,EAAAgB,OAGA,CACA,IAAAA,EAAA7kC,IAAA0kC,EACAI,EAAArR,EAAAkR,EAAAf,EAAAe,EAAA7B,SAAAe,EAAAgB,KAxHAE,CAAApG,KAAAlL,GAAAgR,EAAA9F,KAAAiF,QAAAjF,KAAAkF,QACAlF,MAEAgF,EArEA,GAwEA,SAAAW,EAAA7Q,EAAA8P,EAAAyB,EAAAT,GACA,IAAA1B,EAAAU,EAAAV,MAAAD,EAAAW,EAAAX,KAAAD,EAAAY,EAAAZ,aACAG,EAAAS,EAAAT,SACA,IAAAD,IAAAD,EACA,MAAAlP,MAAA,+CAUA,GARAD,EAAAwR,WAAApC,EAAAnD,SAiCA,SAAAmD,EAAAD,GACA,QAAAnB,KAAAmB,EAAA3E,QAAA,CACA,IAAAnH,EAAA+L,EAAAlB,iBAAAF,GACA3K,GACAA,SAAA8L,EAAA3E,QAAAwD,KApCAyD,CAAArC,EAAAD,GACA2B,GACAY,EAAAtC,EAAA0B,EAAAS,GAEArC,GACAlG,EAAAhJ,EAAAkP,GAEAz8B,MAAAisB,QAAA2Q,GACA,QAAAlR,EAAA,EAAAwT,EAAAtC,EAA+ClR,EAAAwT,EAAAzlB,OAAwBiS,IAAA,CAEvEyT,EAAA5R,EAAA8P,EAAAyB,EADAI,EAAAxT,SAKAyT,EAAA5R,EAAA8P,EAAAyB,EAAAlC,GAEAH,GACA/E,EAAAnK,EAAAkP,GAGA,SAAA0C,EAAA5R,EAAA8P,EAAAyB,EAAAlC,GACAA,GACAqC,EAAA5B,EAAAV,MAAAC,EAAAkC,GAEAzB,EAAAX,KAAA5D,UAAA,MAAAuE,EAAAX,KAAA5D,SAAAC,QACAxL,EAAA6E,WAAA7E,EAAA4L,qBAAAkE,EAAAX,KAAA5D,SAAAxG,QACA/E,EAAA6R,aAAA/B,EAAAX,KAAAzE,SAAAoF,EAAAX,KAAAxE,UAAAmF,EAAAX,KAAA5D,SAAAC,OAAA,IAGAxL,EAAA8R,WAAAhC,EAAAX,KAAAzE,SAAA,EAAAoF,EAAAX,KAAAxE,WAWA,SAAA+G,EAAAtC,EAAAC,EAAAkC,GACA,QAAAQ,KAAA1C,EAAA,CACA,IAAAhM,EAAA+L,EAAA9B,eAAAyE,GACA,GAAA1O,EAAA,CACA,IAAA71B,EAAA6hC,EAAA0C,GACA,mBAAAvkC,IACAA,OAEA,OAAAA,GAAA,iBAAAA,EACA61B,SAAAkO,GAGAlO,SAAA71B,KAKA,SAAA6jC,EAAArR,EAAAkR,EAAAf,EAAAd,EAAA2C,EAAAZ,GACA,IAAAa,EAAA9B,EAAA,GACA7pB,EAAA6pB,EAAA,GACA+B,GAAAd,GAAA,MAAAF,EAAA5qB,OAgBA,GAfA8qB,GACApR,EAAAiH,gBAAAjH,EAAAkH,YAAA,MACAlH,EAAAmS,SAAA,IAAAnS,EAAAoS,mBAAApS,EAAAqS,sBAEAnB,EAAA5qB,QACA0Z,EAAAiH,gBAAAjH,EAAAkH,YAAAgK,EAAA5qB,OAAAygB,aACA/G,EAAAmS,SAAA,IAAAjB,EAAA5qB,OAAA3I,MAAAuzB,EAAA5qB,OAAA1I,UAGAoiB,EAAAiH,gBAAAjH,EAAAkH,YAAA5gB,EAAAygB,aACA/G,EAAAmS,SAAA,IAAAnS,EAAAoS,mBAAApS,EAAAqS,sBAEAnB,EAAAnL,KAAAmJ,cACAlG,EAAAhJ,EAAAkR,EAAAnL,KAAAmJ,cAEAgC,EAAAnV,SACA,QAAAoC,EAAA,EAAAc,EAAAiS,EAAAnV,SAA6CoC,EAAAc,EAAA/S,OAAgBiS,IAAA,CAE7D0S,EAAA7Q,EADAf,EAAAd,GACA8T,EAAAhP,SAAA,GAAAoM,QAKAwB,EAAA7Q,EAAAgS,EAAA,MAAsCC,OAAAf,EAAAzO,YAEtCyO,EAAAnL,KAAAmJ,cACA/E,EAAAnK,EAAAkR,EAAAnL,KAAAmJ,cAEAgD,IACA/B,EAAA,GAAA7pB,EACA6pB,EAAA,GAAA8B,kGCtLA,IAAIK,EAA8C,KAC5CC,KAEFC,GAAa,EAEbC,EAAa,EAEbC,EAAU,EAGd,SAAAC,EAAyBC,GACxB,IAAMjW,EAAM+V,EAAUE,EAAOF,EAAUA,EAGvC,GAFAA,EAAUE,EAENN,EAAY,CACf,IAAK,IAAM5W,KAAM4W,EAChBA,EAAW5W,GAAIiB,GAEhB2V,EAAa,KAGd,IAAIO,EAAU,EACd,IAAK,IAAMnX,KAAM6W,EAChBM,IACAN,EAAa7W,GAAIiB,GAGbkW,EAIJC,sBAAsBH,IAHtBH,GAAa,EACbE,EAAU,GAON,SAAAK,EAAe/mB,EAAc0P,GAClCA,EAAKA,GAAM1P,EAAGlf,MAAQ2lC,KACtBH,EAAaA,OACF5W,GAAM1P,EAEZwmB,IACJM,sBAAsBH,GACtBH,GAAa,GAKT,SAAAQ,EAAiBhnB,EAAc0P,GASpC,OARAA,EAAKA,GAAM1P,EAAGlf,MAAQ2lC,IACtBF,EAAa7W,GAAM1P,EAEdwmB,IACJM,sBAAsBH,GACtBH,GAAa,GAGP9W,iCC5DR,SAAAuX,EAAAlU,GACA,SAAAlE,IACAkE,GACAphB,MAAAwf,OAAA+V,WACAt1B,OAAAuf,OAAAgW,cAKA,OAFAhW,OAAAqC,iBAAA,SAAA3E,GACAA,IACA,WACAsC,OAAAsC,oBAAA,SAAA5E,kGCVA1uB,EAAAU,EAAAkjC,EAAA,sBAAAqD,IAAA,IAAAnD,EAAAhjC,OAAAyiC,QAAA,SAAAjiC,GACA,QAAAa,EAAA/B,EAAA,EAAAyB,EAAAoyB,UAAAlU,OAA4C3f,EAAAyB,EAAOzB,IAEnD,QAAA8B,KADAC,EAAA8xB,UAAA7zB,GACAU,OAAAkB,UAAAC,eAAA1B,KAAA4B,EAAAD,KACAZ,EAAAY,GAAAC,EAAAD,IAEA,OAAAZ,GAEA,SAAA4lC,EAAAC,EAAAC,GACA,oBAAAD,GACA,iBAAAC,IACA9gC,MAAAisB,QAAA4U,KACA7gC,MAAAisB,QAAA6U,IACAD,IAAAC,EAAA,CACA,IAAAnD,EAAAH,KAAgCqD,GAChC,QAAAxlC,KAAAylC,EAAA,CACA,IAAAC,EAAAF,EAAAxlC,GACA2lC,EAAAF,EAAAzlC,QACA,IAAA2lC,EACArD,EAAAtiC,GAAAulC,EAAAG,EAAAC,UAGArD,EAAAtiC,GAGA,OAAAsiC,EAEA,OAAAmD,EAEA,SAAAH,EAAAE,EAAAC,EAAAG,GACA,IAAAzW,EAAAyW,KAAAzW,OACA,oBAAAqW,GACA,iBAAAC,IACA9gC,MAAAisB,QAAA4U,KACA7gC,MAAAisB,QAAA6U,IACAD,IAAAC,EAAA,CACA,QAAAzlC,KAAAwlC,EACA,GAAAA,EAAAllC,eAAAN,MAAAmvB,GAAAnvB,KAAAmvB,IAAA,IAAAA,EAAAnvB,IAAA,CACA,IAAA0lC,EAAAF,EAAAxlC,GACA2lC,EAAAF,EAAAzlC,QACA6lC,IAAAF,IACAH,EAAAxlC,GAAAslC,EAAAI,EAAAC,GAA0DxW,YAAAnvB,MAI1D,OAAAwlC,EAEA,OAAAC,qEC/CA,IAAAK,GACAC,KAAA,EACAC,OAAA,EACAC,MAAA,GAEA,SAAA3Y,EAAA0B,EAAAiC,GACA,IAAAC,EAAAD,GAAAjC,EACAmC,EAAAnC,EAAAuM,EAAApK,EAAA/D,eAAA,IAAAmO,EAAA2K,SAAA3K,EAAAlO,EAAA8D,EAAA9D,kBACAb,GACA4E,WACA+U,MAAe94B,EAAA,EAAAC,EAAA,EAAA84B,GAAA,EAAAC,GAAA,GACfC,UAAA,GAEAj5B,EAAA,EAAAC,EAAA,EAAAi5B,EAAA,EAAAC,EAAA,EACA,SAAAC,EAAAC,GACAla,EAAA4E,QAAAsV,EAAAC,QAAAD,EACAA,EAAAC,SAAAb,EAAAC,OACA14B,EAAAk5B,EAAAG,EAAAE,QACAt5B,EAAAk5B,EAAAE,EAAAG,QACAra,EAAA8Z,UAAA,GAEApV,EAAA1E,GAEA,SAAAsa,EAAAJ,UACAla,EAAA4E,QAAAsV,EAAAC,eACAna,EAAA2Z,KAAA3W,MACAhD,EAAA2Z,KAAA94B,EAAA,EACAmf,EAAA2Z,KAAA74B,EAAA,EACAkf,EAAA2Z,KAAAC,GAAA,EACA5Z,EAAA2Z,KAAAE,GAAA,EACA7Z,EAAA8Z,UAAA,EACApV,EAAA1E,GAEA,SAAAua,EAAAL,GACAla,EAAA8Z,WACA9Z,EAAA2Z,KAAA3W,MAAAkX,EACAla,EAAA2Z,KAAA94B,IAAAq5B,EAAAE,QACApa,EAAA2Z,KAAA74B,IAAAo5B,EAAAG,QACAra,EAAA2Z,KAAAC,GAAAG,EAAAG,EAAAE,QACApa,EAAA2Z,KAAAE,GAAAG,EAAAE,EAAAG,QACAN,EAAAG,EAAAE,QACAJ,EAAAE,EAAAG,QACA3V,EAAA1E,IAGA,SAAAwa,EAAAN,GACAA,EAAAM,iBASA,OAPA5Z,EAAAsE,iBAAA,YAAA+U,GACAP,SAAAxU,iBAAA,UAAAoV,GACAZ,SAAAxU,iBAAA,YAAAqV,GACA1Z,GACAD,EAAAsE,iBAAA,cAAAsV,GAEA9V,EAAA1E,GACA,WACAY,EAAAuE,oBAAA,YAAA8U,GACAP,SAAAvU,oBAAA,YAAAoV,GACAb,SAAAvU,oBAAA,UAAAmV,GACAzZ,GACAD,EAAAuE,oBAAA,cAAAqV,gbCEAC,EAAA,SAAAC,GAOC,SAAAD,EAAYE,GAAZ,IAAA1E,EACCyE,EAAAtoC,KAAAw+B,OAAOA,YAPRqF,EAAAxsB,KAAiB,GAAVpR,KAAKK,GACZu9B,EAAAvsB,OAAS,EACTusB,EAAA9sB,KAAO,GACP8sB,EAAA7sB,IAAM,IACN6sB,EAAA2E,uBAAwB,EAIvBjoC,OAAOyiC,OAAOa,EAAM0E,KAiBtB,OA1BuCE,EAAAJ,EAAAC,GAYtCD,EAAA5mC,UAAAg9B,OAAA,WACC6J,EAAA7mC,UAAMg9B,OAAMz+B,KAAAw+B,MAERA,KAAKgK,wBACRE,EAAA,EAAKtxB,YACJonB,KAAKmK,cACLnK,KAAKnnB,KACLmnB,KAAKlnB,OACLknB,KAAKznB,KACLynB,KAAKxnB,KAENwnB,KAAKgK,uBAAwB,IAGhCH,EA1BA,CAxDA,WAUC,SAAAO,EAAYL,GATZ/J,KAAAqK,UAAY,EAAG,EAAG,GAClBrK,KAAAsK,UAAY,EACZtK,KAAAuK,UAAY,EACZvK,KAAAwK,aAAeN,EAAA,EAAKvnC,SACpBq9B,KAAAyK,aAAeP,EAAA,EAAKvnC,SACpBq9B,KAAAmK,cAAgBD,EAAA,EAAKvnC,SACrBq9B,KAAA0K,QAAUR,EAAA,EAAKvnC,SACfq9B,KAAA2K,iBAAkB,EAGjB5oC,OAAOyiC,OAAOxE,KAAM+J,GA0CtB,OAvCCK,EAAAnnC,UAAA2nC,gBAAA,SAAiBC,QAAA,IAAAA,MAAA,GAChB7K,KAAKsK,WAAaO,EAClBX,EAAA,EAAK10B,cAAcwqB,KAAKwK,aAAcxK,KAAKsK,WAC3CtK,KAAK2K,iBAAkB,GAGxBP,EAAAnnC,UAAA6nC,gBAAA,SAAiBD,QAAA,IAAAA,MAAA,GAChB7K,KAAKuK,WAAaM,EAClBX,EAAA,EAAKz0B,cAAcuqB,KAAKyK,aAAczK,KAAKuK,WAC3CvK,KAAK2K,iBAAkB,GAGxBP,EAAAnnC,UAAA8nC,YAAA,SAAa1qB,GACZ,IAAMnW,EAAIggC,EAAA,EAAKzhC,WAAWu3B,KAAKyK,aAAa,GAAIzK,KAAKyK,aAAa,GAAIzK,KAAKyK,aAAa,KACxFP,EAAA,EAAKn/B,IAAIi1B,KAAKqK,SAAiBrK,KAAKqK,SAAUH,EAAA,EAAK7+B,MAAMnB,EAAGA,GAAImW,IAChE2f,KAAK2K,iBAAkB,GAGxBP,EAAAnnC,UAAA+nC,SAAA,SAAU3qB,GACT,IAAMnW,EAAIggC,EAAA,EAAKzhC,WAAWu3B,KAAKyK,aAAa,GAAIzK,KAAKyK,aAAa,GAAIzK,KAAKyK,aAAa,IACxFP,EAAA,EAAKn/B,IAAIi1B,KAAKqK,SAAiBrK,KAAKqK,SAAUH,EAAA,EAAK7+B,MAAMnB,EAAGA,GAAImW,IAChE2f,KAAK2K,iBAAkB,GAGxBP,EAAAnnC,UAAAgoC,OAAA,SAAQ5qB,GACP,IAAMnW,EAAIggC,EAAA,EAAKzhC,WAAWu3B,KAAKyK,aAAa,GAAIzK,KAAKyK,aAAa,GAAIzK,KAAKyK,aAAa,IACxFP,EAAA,EAAKn/B,IAAIi1B,KAAKqK,SAAiBrK,KAAKqK,SAAUH,EAAA,EAAK7+B,MAAMnB,EAAGA,EAAGmW,IAC/D2f,KAAK2K,iBAAkB,GAGxBP,EAAAnnC,UAAAg9B,OAAA,WACKD,KAAK2K,kBACRT,EAAA,EAAKh9B,gBAAgB8yB,KAAK0K,QAAS1K,KAAKqK,UACxCH,EAAA,EAAK1gC,SAASw2B,KAAK0K,QAAS1K,KAAK0K,QAAS1K,KAAKyK,cAC/CP,EAAA,EAAK1gC,SAASw2B,KAAK0K,QAAS1K,KAAK0K,QAAS1K,KAAKwK,cAC/CN,EAAA,EAAKjhC,OAAO+2B,KAAK0K,QAAS1K,KAAK0K,SAC/B1K,KAAK2K,iBAAkB,IAG1BP,EArDA,IAqFM,SAAAc,EAA4DC,GACjE,gBAAArB,GAAO,SAAAsB,mDAgBP,OAhBqBnB,EAAAmB,EAAAtB,GACpBsB,EAAAnoC,UAAAooC,kBAAA,SAAmBC,EAAelb,GAC5BA,KACDA,EAAKmb,EAAA,EAAKC,KAAOpb,EAAKmb,EAAA,EAAKE,KAC9BzL,KAAK+K,YAAYO,IAEdlb,EAAKmb,EAAA,EAAKG,OAAStb,EAAKmb,EAAA,EAAKx0B,KAChCipB,KAAK+K,aAAaO,IAEflb,EAAKmb,EAAA,EAAK5C,OAASvY,EAAKmb,EAAA,EAAKI,KAChC3L,KAAKgL,SAASM,IAEXlb,EAAKmb,EAAA,EAAK1C,QAAUzY,EAAKmb,EAAA,EAAK1gC,KACjCm1B,KAAKgL,UAAUM,KAGlBF,EAhBA,CAAqBD,GAoBhB,SAAAS,EAA4DT,GACjE,gBAAArB,GAAO,SAAA+B,IAAA,IAAAxG,EAAA,OAAAyE,KAAAxL,MAAA0B,KAAA9K,YAAA8K,YACNqF,EAAAyG,WAAc77B,EAAG,EAAGC,EAAG,KAexB,OAhBqB+5B,EAAA4B,EAAA/B,GAGpB+B,EAAA5oC,UAAA8oC,mBAAA,SAAoBT,EAAe7pC,GAClC,GAAIA,EAAEynC,SAAU,CACf,IAAM8C,EAAShM,KAAK8L,UAAU77B,EAAIxO,EAAEsnC,KAAK94B,EACnCg8B,EAASjM,KAAK8L,UAAU57B,EAAIzO,EAAEsnC,KAAK74B,EACzC8vB,KAAK8L,UAAU77B,EAAIxO,EAAEsnC,KAAK94B,EAC1B+vB,KAAK8L,UAAU57B,EAAIzO,EAAEsnC,KAAK74B,EAC1B+7B,GAAUjM,KAAK4K,gBAAgBqB,EAASX,GACxCU,GAAUhM,KAAK8K,gBAAgBkB,EAASV,QAExCtL,KAAK8L,UAAU77B,IAAM+vB,KAAK8L,UAAU77B,EAAI,GACxC+vB,KAAK8L,UAAU57B,IAAM8vB,KAAK8L,UAAU57B,EAAI,IAG3C27B,EAhBA,CAAqBV,qFC/GtBe,EAAA,YACAC,EAAA,UACAC,EAAA,MACAC,EAAA,QACA,SAAAC,EAAAC,GACA,IAAAC,GACAhN,SAAA,YACAF,WACAG,UAAA,GAEA,QAAA/N,KAAA6a,EAAA,CACA,IAAAha,EAAAga,EAAA7a,GACA,GAAAA,IAAA2a,EAAA,CACA,IAAAxS,EAAA,IAAAtH,EAAAvR,OAAA,MAAA0X,YAAAiC,aAAA54B,OAAA0qC,EAAA,EAAA1qC,CAAAwwB,IACAxwB,OAAAyiC,OAAAgI,GACAnM,UAA2BxG,UAC3B4F,UAAA5F,EAAA7Y,cAGA0Q,IAAAwa,EACAM,EAAAlN,QAAAoN,EAAA,IACA7S,OAAA,IAAAvyB,aAAAvF,OAAA0qC,EAAA,EAAA1qC,CAAAwwB,KAGAb,IAAAya,EACAK,EAAAlN,QAAAoN,EAAA,IACA7S,OAAA,IAAAvyB,aAAAvF,OAAA0qC,EAAA,EAAA1qC,CAAAwwB,KAGAb,IAAA0a,EACAI,EAAAlN,QAAAoN,EAAA,IACA7S,OAAA,IAAAvyB,aAAAvF,OAAA0qC,EAAA,EAAA1qC,CAAAwwB,KAIAia,EAAAlN,QAAA5N,IAAsCmI,OAAA,IAAAvyB,aAAAvF,OAAA0qC,EAAA,EAAA1qC,CAAAwwB,KAGtC,OAAAia,qCCxCA,SAAAG,EAAAl6B,EAAAC,EAAAk6B,EAAAC,GACA,IAWAzpB,EAAAD,EAXA2pB,EAAAr6B,EAAA,EACAs6B,EAAAr6B,EAAA,EACAs6B,EAAAJ,GAAA,EACAK,EAAAJ,GAAA,EACAK,EAAAF,EAAA,EACAG,EAAAF,EAAA,EACAG,EAAA36B,EAAAu6B,EACAK,EAAA36B,EAAAu6B,EACAK,EAAA,IAAAhmC,aAAA4lC,EAAAC,EAAA,GACAI,EAAA,IAAAjmC,aAAA4lC,EAAAC,EAAA,GACAK,EAAA,IAAAlmC,aAAA4lC,EAAAC,EAAA,GAEAvsB,EAAA,EACA6sB,EAAA,EACA,IAAArqB,EAAA,EAAgBA,EAAA+pB,EAAa/pB,IAAA,CAC7B,IAAAlT,EAAAkT,EAAAiqB,EAAAN,EACA,IAAA5pB,EAAA,EAAoBA,EAAA+pB,EAAa/pB,IAAA,CACjC,IAAAlT,EAAAkT,EAAAiqB,EAAAN,EACAQ,EAAA1sB,GAAA3Q,EACAq9B,EAAA1sB,EAAA,IAAA1Q,EACAq9B,EAAA3sB,EAAA,KACA4sB,EAAAC,GAAAtqB,EAAA6pB,EACAQ,EAAAC,EAAA,KAAArqB,EAAA6pB,EACArsB,GAAA,EACA6sB,GAAA,GAGA7sB,EAAA,EACA,IAAA8sB,EAAA,IAAAJ,EAAAtsB,OAAA,QAAA0X,YAAAiC,aAAAqS,EAAAC,EAAA,GACA,IAAA7pB,EAAA,EAAgBA,EAAA6pB,EAAY7pB,IAC5B,IAAAD,EAAA,EAAoBA,EAAA6pB,EAAY7pB,IAAA,CAChC,IAAAnb,EAAAmb,EAAA+pB,EAAA9pB,EACAlb,EAAAib,EAAA+pB,GAAA9pB,EAAA,GACA1hB,EAAAyhB,EAAA,EAAA+pB,GAAA9pB,EAAA,GACAzhB,EAAAwhB,EAAA,EAAA+pB,EAAA9pB,EACAsqB,EAAA9sB,GAAA5Y,EACA0lC,EAAA9sB,EAAA,GAAA1Y,EACAwlC,EAAA9sB,EAAA,GAAAjf,EACA+rC,EAAA9sB,EAAA,GAAA1Y,EACAwlC,EAAA9sB,EAAA,GAAAlf,EACAgsC,EAAA9sB,EAAA,GAAAjf,EACAif,GAAA,EAGA,OACA0e,SACA+K,UACAxQ,OAAAyT,GAEAK,QACA9T,OAAA0T,GAEAK,IACA/T,OAAA2T,IAGAnN,UACAxG,OAAA6T,GAEAlO,SAAA,YACAC,UAAAiO,EAAA1sB,kNC5DA,SAAA6sB,EAAA/qC,EAAAgrC,GACA,IAAAnsC,EAAAI,OAAAgsC,EAAA,EAAAhsC,CAAAe,EAAAgrC,GACA,OAAAhrC,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAnB,GAQA,SAAAqsC,EAAArB,GACA,IAAA5Y,EAAA4Y,EAAA3kC,EAAA+rB,EAAA,GAAA7rB,EAAA6rB,EAAA,GAAAryB,EAAAqyB,EAAA,GAAApyB,EAAAoyB,EAAA,GACA,OACA,IAAA/rB,KAAA,EAAAA,EAAAE,GAAA,EAAAF,EAAAtG,EAAA,GACA,EAAAsG,EAAAE,EAAA,IAAAA,KAAA,EAAAA,EAAAxG,EAAA,GACA,EAAAsG,EAAAtG,GAAA,EAAAwG,EAAAxG,EAAA,IAAAA,IAAA,GACA,EAAAsG,EAAArG,GAAA,EAAAuG,EAAAvG,GAAA,EAAAD,EAAAC,EAAA,GAGA,SAAAssC,EAAAC,GAEA,OADAA,GAAA,IACA,EAAAzmC,KAAAsC,IAAAmkC,GAAA,EAAAzmC,KAAAuC,IAAAkkC,IAMA,SAAAC,EAAAC,GAEA,OADAA,GAAA,IACA,IAAA3mC,KAAAsC,IAAAqkC,GAAA3mC,KAAAuC,IAAAokC,8EC1BA,SAAAC,EAAAC,GACA,IAAAnsC,EAAAmsC,EAAA,GAAAC,EAAAD,EAAA,GACA,OAAAnsC,EAAAsF,KAAAuC,IAAAukC,GAAApsC,EAAAsF,KAAAsC,IAAAwkC,0CCNAntC,EAAAD,QAAA,gjCCAAC,EAAAD,QAAA,0YCAAC,EAAAD,QAAA,2YCAAC,EAAAD,QAAA,sYCAAC,EAAAD,QAAA,yYCAAC,EAAAD,QAAA,wRCAAC,EAAAD,QAAA,oiECyBA,SAAAqtC,EAAAxb,GAGA,IAFA,IAAAyb,KAEAptC,EAAA,EAAcA,EAAA2xB,EAAAhS,OAAkB3f,IAEhC,IADA,IAAA8xB,EAAAH,EAAA3xB,GACAokB,EAAA,EAAeA,EAAA0N,EAAAnS,OAAqByE,IACpCgpB,EAAAlS,KAAApJ,EAAA1N,IAGA,OAAAgpB,EAGA,SAAAC,EAAAC,GAEA,IAAAC,EAuBA,SAAAD,GAOA,IALA,IAAAE,EAAAF,EAAAp9B,GAAAo9B,EAAAz3B,GACA43B,EAAAH,EAAAp9B,GAAA,EACAyP,EAAA2tB,EAAAz3B,GAAA,EACA63B,EAAAxnC,MAAAyZ,GAEA3f,EAAA,EAAcA,EAAA2f,EAAY3f,IAC1B0tC,EAAA1tC,GAAA2tC,EAAAL,EAAAE,EAAAxtC,EAAAytC,GAGA,OAAAC,EAlCAE,CAAAN,GACAO,EAkDA,SAAAP,GAEA,SAAA3W,EAAA/nB,EAAAC,GACA,OAAAy+B,EAAA13B,GAAA,GAAA/G,EAAAD,EAKA,IAFA,IAAAi/B,KAEAj/B,EAAA,EAAcA,EAAA0+B,EAAA13B,GAAehH,IAE7B,QAAAC,EAAA,EAAeA,EAAAy+B,EAAAz3B,GAAehH,IAAA,CAE9B,IAAAlI,EAAAgwB,EAAA/nB,EAAA,EAAAC,EAAA,GACAhI,EAAA8vB,EAAA/nB,EAAA,EAAAC,EAAA,GACAxO,EAAAs2B,EAAA/nB,EAAA,EAAAC,EAAA,GACAvO,EAAAq2B,EAAA/nB,EAAA,EAAAC,EAAA,GAEAg/B,EAAA3S,MAAAv0B,EAAAE,EAAAxG,IACAwtC,EAAA3S,MAAA76B,EAAAC,EAAAqG,IAIA,OAAAknC,EAxEAC,CAAAR,GACAS,EAAAZ,EAAAI,GAGA,OACAQ,YACAF,QACA1B,IAKA,SAAAmB,EAAAS,GAEA,OAAAA,EAAA9b,IAAA,SAAAnwB,GACA,OACAA,EAAA,GAAAwrC,EAAAr9B,GAAA,GACAnO,EAAA,GAAAwrC,EAAAp9B,GAAA,MAfA89B,CAAAV,EAAAS,GAMAE,aAAAX,EAAA13B,GAAA,IAAA03B,EAAAz3B,GAAA,IA4BA,SAAA83B,EAAAL,EAAAj8B,GAOA,IALA,IAAA68B,EAAAZ,EAAAr9B,GAAA,EACAu9B,EAAAF,EAAAr9B,GAAAq9B,EAAA13B,GACA+J,EAAA2tB,EAAA13B,GAAA,EACAu4B,EAAAjoC,MAAAyZ,GAEA3f,EAAA,EAAcA,EAAA2f,EAAY3f,IAC1BmuC,EAAAnuC,IAAAwtC,EAAAxtC,EAAAkuC,EAAA78B,GAGA,OAAA88B,EA4BA,SAAAC,EAAAC,GAEA,OACAN,UAAAM,EAAAN,UACAF,MAAAQ,EAAAR,MACA1B,IAAAkC,EAAAlC,IACA8B,YAAAI,EAAAJ,aAmDA,SAAAK,EAAAhC,EAAA9sB,GAIA,IAFA,IAAA0sB,EAAAhmC,MAAAsZ,GAEAxf,EAAA,EAAcA,EAAAwf,EAAWxf,IACzBksC,EAAAlsC,GAAAssC,EAAAiC,QAGA,OAAArC,EAGA,SAAAsC,EAAAlB,GAEA,IAAAmB,EA5DA,SAAAnB,GAEA,IAAA/W,EAAA+W,EAAA/W,KACAmY,EAAApB,EAAAqB,SAUAC,EAAAvB,GACAp9B,GAAAsmB,EAAA,GAAArmB,GAAAqmB,EAAA,GACA3gB,GAAA84B,EAAA,GAAA74B,GAAA64B,EAAA,KAEAG,EAAAxB,GACAp9B,GAAAsmB,EAAA,GAAArmB,GAAAqmB,EAAA,GACA3gB,GAAA84B,EAAA,GAAA74B,GAAA64B,EAAA,KAEAI,EAAAzB,GACAp9B,GAAAsmB,EAAA,GAAArmB,GAAAqmB,EAAA,GACA3gB,GAAA84B,EAAA,GAAA74B,GAAA64B,EAAA,KAGAK,EAAAX,EAAAQ,GACAI,EAAAZ,EAAAS,GACAI,EAAAb,EAAAU,GAgBA,OAdAF,EAAAb,UAAAa,EAAAb,UAAA9b,IAAA,SAAAnwB,GAA+C,OAAAA,EAAA,GAAAA,EAAA,GAAAy0B,EAAA,QAC/CwY,EAAAhB,UAAAgB,EAAAhB,UAAA9b,IAAA,SAAAnwB,GAA+C,OAAAA,EAAA,IAAAA,EAAA,IAAAy0B,EAAA,QAC/CsY,EAAAd,UAAAc,EAAAd,UAAA9b,IAAA,SAAAnwB,GAA+C,OAAAy0B,EAAA,MAAAz0B,EAAA,GAAAA,EAAA,MAC/CktC,EAAAjB,UAAAiB,EAAAjB,UAAA9b,IAAA,SAAAnwB,GAA+C,QAAAy0B,EAAA,KAAAz0B,EAAA,GAAAA,EAAA,MAC/CgtC,EAAAf,UAAAe,EAAAf,UAAA9b,IAAA,SAAAnwB,GAA+C,OAAAA,EAAA,GAAAy0B,EAAA,MAAAz0B,EAAA,MAC/CmtC,EAAAlB,UAAAkB,EAAAlB,UAAA9b,IAAA,SAAAnwB,GAA+C,OAAAA,EAAA,IAAAy0B,EAAA,KAAAz0B,EAAA,MAE/C8sC,EAAA1C,QAAAoC,GAAA,OAAAM,EAAAb,UAAApuB,QACAovB,EAAA7C,QAAAoC,GAAA,QAAAS,EAAAhB,UAAApuB,QACAkvB,EAAA3C,QAAAoC,GAAA,OAAAO,EAAAd,UAAApuB,QACAqvB,EAAA9C,QAAAoC,IAAA,OAAAU,EAAAjB,UAAApuB,QACAmvB,EAAA5C,QAAAoC,GAAA,OAAAQ,EAAAf,UAAApuB,QACAsvB,EAAA/C,QAAAoC,GAAA,QAAAW,EAAAlB,UAAApuB,SAEAivB,EAAAG,EAAAF,EAAAG,EAAAF,EAAAG,GAgBAC,CAAA5B,GAEAS,EAAAU,EAAAxc,IAAA,SAAAoc,GAA6C,OAAAA,EAAAN,YAC7C5B,EAAAsC,EAAAxc,IAAA,SAAAoc,GAA6C,OAAAA,EAAAlC,MAC7CD,EAAAuC,EAAAxc,IAAA,SAAAoc,GAA6C,OAAAA,EAAAnC,UAC7C2B,EAUA,SAAAY,GAOA,IAAAlvB,EAAA,EAEA,OAAAkvB,EAAAxc,IAAA,SAAAoc,GAEA,IAAAc,EAAAd,EAAAR,MAAA5b,IAAA,SAAAmd,GACA,OAAAA,EAAAnd,IAAA,SAAAppB,GACA,OAAAA,EAAA0W,MAMA,OAFAA,GAAA8uB,EAAAJ,YAEAkB,IA7BAE,CAAAZ,GAEA,OACAV,UAAAZ,EAAAY,GACA5B,IAAAgB,EAAAhB,GACA0B,MAAAV,EAAAU,GACA3B,QAAAiB,EAAAjB,IA2BAnsC,EAAAD,QAAA,SAAAwvC,GAIA,OAAAd,EAnOA,SAAAc,GAEA,IAAAhC,GACA/W,MAAA,OACAoY,UAAA,QAkBA,OAfAW,IAEAppC,MAAAisB,QAAAmd,EAAA/Y,MACA+W,EAAA/W,KAAA+Y,EAAA/Y,KACG,iBAAA+Y,EAAA/Y,OACH+W,EAAA/W,MAAA+Y,EAAA/Y,KAAA+Y,EAAA/Y,KAAA+Y,EAAA/Y,OAGArwB,MAAAisB,QAAAmd,EAAAX,UACArB,EAAAqB,SAAAW,EAAAX,SACG,iBAAAW,EAAAX,WACHrB,EAAAqB,UAAAW,EAAAX,SAAAW,EAAAX,SAAAW,EAAAX,YAIArB,EA2MAiC,CAAAD,yOCnNa1hB,EAAS6Z,SAAS+H,eAAe,UAEjC9hB,EAAUhtB,OAAA+uC,EAAA,EAAA/uC,CAAWktB,GAErB6F,EAAK/F,EAAQ+F,GAEb1F,EAAQrtB,OAAA+uC,EAAA,EAAA/uC,GAERgvC,EAAgB,WAAM,OAAC9hB,EAAOxc,MAAOwc,EAAOvc,SAE5Cs+B,EAAMjM,KACf+L,EAAA,GACHG,KAAM,OACNC,MAAO,UCtBR,IAAAC,EAAA,WAMA,OANA,WACCnR,KAAAoR,UAAY,GACZpR,KAAAqR,UAAY,KACZrR,KAAAsR,OAAS,IAAKvvC,OAAAuvC,EAAA,EAAD,CAAmBvvC,OAAAuvC,EAAA,EAAAvvC,CAAkBuvC,EAAA,IAAzC,EACRz4B,KAAgB,GAAVpR,KAAKK,MAJb,GASA/F,OAAA+uC,EAAA,EAAA/uC,CAAiB,WAAY,SAACunC,EAAGlmC,GAChC,IAAM8G,EAAI9G,EAAEmuC,SACZ,OAAQjI,GAEP,KAAK0H,EAAO3e,MACX,IAAMZ,EAAMruB,EAAEisB,OAAOoC,IAAM,GAI3B,OAHAvnB,EAAEonC,OAAOjG,kBAAkBnhC,EAAEknC,UAAY3f,EAAKruB,EAAEisB,OAAOe,MACvDlmB,EAAEonC,OAAOvF,mBAAmB7hC,EAAEmnC,UAAY5f,EAAKruB,EAAEisB,OAAOa,YACxDhmB,EAAEonC,OAAOrR,SAGV,KAAK+Q,EAAOlhB,OACX5lB,EAAEonC,OAAOx4B,OAAS1V,EAAEisB,OAAOJ,OAAOxc,MAAQrP,EAAEisB,OAAOJ,OAAOvc,OAC1DxI,EAAEonC,OAAOtH,uBAAwB,KAKpCjoC,OAAA+uC,EAAA,EAAA/uC,CAAW,WAAY,IAAIovC,GAAatf,OAAQuf,WAAW,EAAMC,WAAW,wBC1B5EG,EAAA,WASC,SAAAC,IARAzR,KAAAqK,UAAY,GAAI,IAAK,GACrBrK,KAAA2N,QAAU,EAAG,EAAG,GAChB3N,KAAA30B,MAAQ,GACR20B,KAAA0R,UAAYC,EAAA,EAAKhvC,SAGjBq9B,KAAA4R,iBAAmBD,EAAA,EAAKhvC,SAGvBq9B,KAAKC,SAWP,OARCwR,EAAAxuC,UAAAg9B,OAAA,WACC0R,EAAA,EAAKzkC,gBAAgB8yB,KAAK0R,UAAW1R,KAAKqK,UAC1CsH,EAAA,EAAKz8B,QAAQ8qB,KAAK0R,UAAW1R,KAAK0R,UAAWjqC,KAAKK,GAAK,GACvD6pC,EAAA,EAAKtmC,MAAM20B,KAAK0R,UAAW1R,KAAK0R,WAAY1R,KAAK30B,MAAO20B,KAAK30B,MAAO20B,KAAK30B,QAEzE20B,KAAK6R,cAAgBrF,EAAA,EAAoCxM,KAAK2N,OAAQ3N,KAAKqK,UAC3ErK,KAAK8R,aAAetF,EAAA,EAA0BxM,KAAK6R,gBAErDJ,EArBA,GAwBA1vC,OAAA+uC,EAAA,EAAA/uC,CAAiB,cAAe,SAACunC,EAAGlmC,GACnC,GAAIkmC,IAAM0H,EAAO3e,MAAO,CACvB,IAAMnoB,EAAI9G,EAAEmuC,SACNQ,EAAI3uC,EAAE4uC,OACZL,EAAA,EAAKnoC,SAASuoC,EAAEH,iBAAkB1nC,EAAEonC,OAAO5G,QAASqH,EAAED,iBAKxD/vC,OAAA+uC,EAAA,EAAA/uC,CAAW,SAAU,IAAIyvC,GAAW3f,OAAQ6f,WAAW,EAAMI,cAAc,iBCvC9DG,GACZ,WACA,cACA,WACA,UACA,gBA+BM,IAAMC,EAASC,QAAQC,IAC7BH,EACE3e,IAAI,SAAA1xB,GAAQ,OArBf,SAAsB+hC,GACrB,IAAM0O,EAAQvJ,SAASwJ,cAAc,SACrCD,EAAME,YAAc,YACpBF,EAAMG,MAAO,EAEb,IAAMC,EAAU3J,SAASwJ,cAAc,UACvCG,EAAQ9O,IAAMA,EAAM,QACpB8O,EAAQ7qC,KAAO,aAEf,IAAM8qC,EAAU5J,SAASwJ,cAAc,UAMvC,OALAI,EAAQ/O,IAAMA,EAAM,OACpB+O,EAAQ9qC,KAAO,YAEfyqC,EAAMM,YAAYF,GAClBJ,EAAMM,YAAYD,GACXL,EAMOO,CA5BZ,yDA4BoChxC,KACpC0xB,IAAI,SAAAppB,GAAK,WAAIioC,QAA0B,SAACxf,EAAKkgB,GAC7C,IAAMtwC,EAAIuwC,WAAW,WACpBtV,QAAQuV,IAAI,UAAW7oC,GACvB2oC,EAAI,iBAAmB3oC,IA5BP,KA+BjBA,EAAEoqB,iBAAiB,UAAW,WAC7B3B,EAAIzoB,GACJA,EAAE8oC,OACFC,aAAa1wC,GACbi7B,QAAQuV,IAAI,SAAU7oC,6DC1CbgpC,EACL,GADKA,EAEJ,GAGIC,EAAYpxC,OAAA+uC,EAAA,EAAA/uC,CAAQgtB,EAAS,SACxCkR,OAAOl+B,OAAA4qC,EAAA,EAAA5qC,CAAMmxC,EAAiBA,EAAkB,EAAG,IAMxCE,EAAUrxC,OAAA+uC,EAAA,EAAA/uC,CAAQgtB,EAAS,OACtCkR,OAAOl+B,OAAAsxC,EAAA,EAAAtxC,CAAuBuxC,KAAM1b,MAJxB,GAAI,GAAI,GAIsBoY,UAH1B,EAAG,EAAG,OCPxB,IAAAuD,EAAA,WAWC,SAAAC,IAVAxT,KAAAyT,OAAS,GACTzT,KAAAttB,OAAS,EACTstB,KAAA30B,OAAS,IAAK,EAAG,GACjB20B,KAAA0T,UAAYzB,EAAa3e,IAAI,SAACqgB,EAAGtyC,GAAM,OAAU,EAAVoG,KAAKK,GAASzG,EAAI4wC,EAAajxB,SAQrEgf,KAAKC,SA+BP,OA5BCuT,EAAAvwC,UAAAg9B,OAAA,eAAAoF,EAAArF,KACCA,KAAKoP,UAAYpP,KAAK0T,UAAUpgB,IAAI,SAAAsgB,GACnC,IAAMrF,GAAOqF,EAAMnsC,KAAKK,GAAK,EACvBisB,EAAAua,EAAA,GAAAjJ,EAAAoO,OAAAlF,IAACt+B,EAAA8jB,EAAA,GAAGpjB,EAAAojB,EAAA,GACV,OAAQ9jB,EAAGo1B,EAAK3yB,OAAQ/B,KAGzBqvB,KAAK6T,iBAAmB9xC,OAAA+xC,EAAA,EAAA/xC,CAAI,SAAC6xC,EAAKG,GACjC,IAAMxxC,EAAIovC,EAAA,EAAKzkC,gBAAgBykC,EAAA,EAAKhvC,SAAUoxC,GAG9C,OAFApC,EAAA,EAAKx8B,QAAQ5S,EAAGA,EAAGqxC,GACnBjC,EAAA,EAAKtmC,MAAM9I,EAAGA,EAAG8iC,EAAKh6B,OACf9I,GACLy9B,KAAK0T,UAAW1T,KAAKoP,WAExBpP,KAAKgU,mBAAqBjyC,OAAA+xC,EAAA,EAAA/xC,CAAI,SAAC6xC,EAAKG,GACnC,IAAM5wC,EAAIpB,OAAAkyC,EAAA,EAAAlyC,CAAI,MAAOgyC,GACrB5wC,EAAE,IAAM,EAER,IAAMZ,EAAIovC,EAAA,EAAKzkC,gBAAgBykC,EAAA,EAAKhvC,SAAUQ,GAG9C,OAFAwuC,EAAA,EAAKx8B,QAAQ5S,EAAGA,EAAGqxC,GACnBjC,EAAA,EAAKtmC,MAAM9I,EAAGA,EAAG8iC,EAAKh6B,MAAMioB,IAAI,SAAAppB,GAAK,OAAI,KAAJA,KAC9B3H,GACLy9B,KAAK0T,UAAW1T,KAAKoP,WAExBpP,KAAKkU,OAASnyC,OAAA+xC,EAAA,EAAA/xC,CAAQA,OAAA+xC,EAAA,EAAA/xC,CAAI,SAACoB,EAAGhB,GAAM,OAAIgB,EAACgxC,QAAEhyC,KAAI69B,KAAKoP,UAAWpP,KAAK0T,YAEpE1T,KAAKoU,WAAalB,EAAkBlT,KAAK30B,MAAM,GAAI6nC,EAAmBlT,KAAK30B,MAAM,KAEnFmoC,EA3CA,GA8CAzxC,OAAA+uC,EAAA,EAAA/uC,CAAW,UAAW,IAAIwxC,4HC9Cbc,EAActyC,OAAA+uC,EAAA,EAAA/uC,CAASgtB,EAAS,UAC3CkR,QAASL,KAAM0U,EAAAtsC,EAAY63B,KAAM0U,EAAAvsC,IAEtBwsC,EAAczyC,OAAA+uC,EAAA,EAAA/uC,CAASgtB,EAAS,UAC3CkR,QAASL,KAAM6U,EAAAzsC,EAAY63B,KAAM6U,EAAA1sC,IAEtB2sC,EAAc5yC,OAAA+uC,EAAA,EAAA/uC,CAASgtB,EAAS,UAC3CkR,QAASL,KAAMgV,EAAA5sC,EAAY63B,KAAMgV,EAAA7sC,ICPnC,4LALI8sC,EAAW,GAGFC,KAEND,GAAY,GAClBC,EAASxY,MACRyY,UAAW,EACXF,SAAqB,IAAXA,IAEXC,EAASxY,MACRyY,UAAW,EACXF,SAAqB,EAAXA,IAEXA,GAAY,EAIN,IAAMG,EAAclzC,OAAA+uC,EAAA,EAAA/uC,CAAegtB,EAAS,cACjDkR,QACAJ,KAAIqV,EAAAltC,EACJ+yB,OAAO,EACPiJ,cACC9F,SAAUpJ,EAAG0Q,aAEdrB,SAAU4Q,EAASzhB,IAAI,SAAAuH,GAAQ,OAAAsa,KAC3Bta,GACHkM,OAAQ,KACRnP,KAAMmZ,QCvBThiB,EAAQwW,oBACP1G,YAAa,EAAG,EAAG,EAAG,KAMhB,IAAMuW,EAAgBnD,EAAa3e,IACzC,SAAAxwB,GAAK,OAAAf,OAAA+uC,EAAA,EAAA/uC,CAAegtB,EAASjsB,GAAGm9B,QAC/BlF,OAAO,EACPW,UAAW,SACXR,KAAM,oBAOKma,GAAetzC,OAAA+uC,EAAA,EAAA/uC,CAAUgtB,EAAS,UAC7CkR,QACAgE,KAAMkP,EACNjP,MAAOmQ,EACPlQ,UACCmR,WAAY,KACZ5D,UAAW,WAAM,OAAAtiB,EAAM4iB,OAAON,WAC9BwC,OAAQ,WAAM,OAAA9kB,EAAMmmB,QAAQrB,QAC5BE,UAAW,WAAM,OAAAhlB,EAAMmmB,QAAQnB,WAC/BoB,SAAUJ,EAAc9hB,IAAI,SAAAppB,GAAK,OAAAA,EAAEqtB,YACnCK,KAAMmZ,KAKI0E,GAAe1zC,OAAA+uC,EAAA,EAAA/uC,CAAUgtB,EAAS,WAC7CkR,QACAgE,KAAMkP,EACNjP,MAAOyQ,EACPxQ,SAAUpiC,OAAA+xC,EAAA,EAAA/xC,CAAI,SAAC2vC,EAAWgE,GAAQ,OACjChE,UAASA,EACTW,MAAOqD,EAAIne,YACRnI,EAAMmmB,QAAQ1B,iBAAkBuB,KAIzBO,GAAiB5zC,OAAA+uC,EAAA,EAAA/uC,CAAUgtB,EAAS,aAC/CkR,QACAgE,KAAMmP,EACNlP,MAAOsQ,EACPrQ,SAAU/U,EAAMmmB,QAAQvB,mBAAmB1gB,IAAI,SAAAoe,GAAa,OAC3DA,UAASA,OAON1N,IACLjF,UAAWh9B,OAAAujC,EAAA,EAAAvjC,CAAU+yB,EAAI,QAAS,UAItB8gB,GAAa7zC,OAAA+uC,EAAA,EAAA/uC,CAAgBgtB,EAAS,SACjDkR,QACApP,UAAW4kB,GAAcE,GAAgBN,IACzCrR,aAAYA,GACZG,UACCzc,KAAM,WAAM,OAAA0H,EAAMmiB,SAASD,OAAO5G,SAClCl4B,WAAY,WAAM,OAAA4c,EAAMmiB,SAASD,OAAOnH,eACxC0L,aAAc,EACdC,aAAc,KAmBJC,IAdmBh0C,OAAA+uC,EAAA,EAAA/uC,CAAgBgtB,EAAS,eACvDkR,QACAlF,OAAO,EACPlK,UAAW4kB,GAAcE,IACzB3R,aAAYA,GACZG,UACCzc,KAAM,WAAM,OAAA0H,EAAM4iB,OAAOJ,kBACzBp/B,WAAY,WAAM,OAAA4c,EAAMmiB,SAASD,OAAOnH,eACxC0L,aAAc,EACdC,aAAc,WAAM,OAAA1mB,EAAM4iB,OAAO3H,SAAS,OAO5C4K,EACAW,IC3FD,IACII,GAAc,EAElB9D,EAAO+D,KAAK,SAAAC,GACXn0C,OAAAo0C,EAAA,EAAAp0C,CAAO,SAAA0vB,GACN1vB,OAAA+uC,EAAA,EAAA/uC,CAAI,UAAU0vB,IAAMA,EACpB1vB,OAAA+uC,EAAA,EAAA/uC,CAASivC,EAAO3e,OAEI,IAAhB2jB,IACHZ,EAAc30B,QAAQ,SAACle,EAAGlB,GAAM,OAAAkB,EAAE09B,QACjCqE,MAAO4R,EAAG70C,OAGZ20C,GAbe,IAaDA,GAA2B,EAAIA,GAAc,EAE3DjnB,EAAQ8W,QAAQvH,MAAMvP,EAASgnB,KAC7B","file":"homage/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 92);\n","export var GEOMETRY_PROP_POSITION = 'position';\nexport var GEOMETRY_PROP_NORMAL = 'normal';\nexport var GEOMETRY_PROP_UV = 'uv';\nexport var UNIFORM_SOURCE_TEXTURE = 'source';\nexport var VARYING_UV_COORDS = 'coords';\nexport var GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { once } from 'shared-utils/scheduler'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm())\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade())\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch())\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer())\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer())\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer())\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype System<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: System<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: System<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize()\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (var i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res) {\n    if (res === void 0) { res = []; }\n    var length = Math.min(as.length, bs.length);\n    for (var i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res) {\n    if (res === void 0) { res = []; }\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var subarray = array_1[_i];\n        var currentLength = res.length;\n        for (var i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res) {\n    if (res === void 0) { res = []; }\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    var shuffled = [];\n    for (var i = 0; i < arr.length; i++) {\n        var j = randIntInRange(i, arr.length);\n        var temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        var obj = {};\n        for (var key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (var key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    var cb = callback || opts;\n    var _a = opts.element, element = _a === void 0 ? window : _a;\n    var pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    var observer = {\n        Keys: Keys,\n        state: { pressed: {} },\n        destroy: function () { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    var sum = 0;\n    for (var i = 0; i < vec.length; i++) {\n        var val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res) {\n    if (res === void 0) { res = []; }\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    var l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    var d = 0;\n    for (var i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res) {\n    if (res === void 0) { res = []; }\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport var isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function getContext(canvas) {\n    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl) {\n    var clearArray = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        clearArray[_i - 1] = arguments[_i];\n    }\n    return clearArray.reduce(function (res, item) { return res | gl[item.toUpperCase() + '_BUFFER_BIT']; }, 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(function (opt) { return gl[opt.toUpperCase()]; }));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier) {\n    if (multiplier === void 0) { multiplier = 1; }\n    multiplier = Math.max(1, multiplier);\n    var width = canvas.clientWidth * multiplier | 0;\n    var height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","export var and = function (p1, p2) {\n    return function (a, b) { return p1(a, b) && p2(a, b); };\n};\nexport var not = function (p) {\n    return function (a, b) { return !p(a, b); };\n};\nexport var defined = function (a) { return a != null; };\nexport var notEmpty = function (a) { return a && a.length; };\nexport var unequal = function (a, b) { return a !== b; };\nexport var equal = function (a, b) { return a === b; };\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    var k1 = Object.keys(obj1);\n    var k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (var _i = 0, k1_1 = k1; _i < k1_1.length; _i++) {\n        var key = k1_1[_i];\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","var _a, _b, _c;\nimport { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    var bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    var bindPoint = getBindPointForSamplerType(type);\n    var units = new Int32Array(size);\n    for (var i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (var index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nvar typeMap = (_a = {},\n    _a[GL_TYPE.FLOAT] = { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    _a[GL_TYPE.FLOAT_VEC2] = { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    _a[GL_TYPE.FLOAT_VEC3] = { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    _a[GL_TYPE.FLOAT_VEC4] = { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    _a[GL_TYPE.INT] = { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    _a[GL_TYPE.INT_VEC2] = { Type: Int32Array, size: 8, setter: intVec2Setter },\n    _a[GL_TYPE.INT_VEC3] = { Type: Int32Array, size: 12, setter: intVec3Setter },\n    _a[GL_TYPE.INT_VEC4] = { Type: Int32Array, size: 16, setter: intVec4Setter },\n    _a[GL_TYPE.UNSIGNED_INT] = { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    _a[GL_TYPE.UNSIGNED_INT_VEC2] = { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    _a[GL_TYPE.UNSIGNED_INT_VEC3] = { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    _a[GL_TYPE.UNSIGNED_INT_VEC4] = { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    _a[GL_TYPE.BOOL] = { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    _a[GL_TYPE.BOOL_VEC2] = { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    _a[GL_TYPE.BOOL_VEC3] = { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    _a[GL_TYPE.BOOL_VEC4] = { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    _a[GL_TYPE.FLOAT_MAT2] = { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    _a[GL_TYPE.FLOAT_MAT3] = { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    _a[GL_TYPE.FLOAT_MAT4] = { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    _a[GL_TYPE.FLOAT_MAT2X3] = { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    _a[GL_TYPE.FLOAT_MAT2X4] = { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    _a[GL_TYPE.FLOAT_MAT3X2] = { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    _a[GL_TYPE.FLOAT_MAT3X4] = { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    _a[GL_TYPE.FLOAT_MAT4X2] = { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    _a[GL_TYPE.FLOAT_MAT4X3] = { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    _a[GL_TYPE.SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    _a[GL_TYPE.SAMPLER_2D_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a[GL_TYPE.SAMPLER_2D_ARRAY_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a[GL_TYPE.SAMPLER_CUBE_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    _a[GL_TYPE.INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a);\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    var defaultSize = typeInfo.size;\n    var count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        var numComponents = defaultSize;\n        var size = numComponents / count;\n        var typeInfo = typeMap[GL_TYPE.FLOAT];\n        var stride = typeInfo.size * numComponents;\n        var normalize = b.normalize || false;\n        var offset = b.offset || 0;\n        var rowOffset = stride / count;\n        for (var i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nvar attrTypeMap = (_b = {},\n    _b[GL_TYPE.FLOAT] = { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.FLOAT_VEC2] = { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.FLOAT_VEC3] = { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.FLOAT_VEC4] = { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.INT] = { size: 4, setter: intAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.INT_VEC2] = { size: 8, setter: intAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.INT_VEC3] = { size: 12, setter: intAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.INT_VEC4] = { size: 16, setter: intAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.UNSIGNED_INT] = { size: 4, setter: intAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.UNSIGNED_INT_VEC2] = { size: 8, setter: intAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.UNSIGNED_INT_VEC3] = { size: 12, setter: intAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.UNSIGNED_INT_VEC4] = { size: 16, setter: intAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.BOOL] = { size: 4, setter: intAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.BOOL_VEC2] = { size: 8, setter: intAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.BOOL_VEC3] = { size: 12, setter: intAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.BOOL_VEC4] = { size: 16, setter: intAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.FLOAT_MAT2] = { size: 4, setter: matAttribSetter, count: 2 },\n    _b[GL_TYPE.FLOAT_MAT3] = { size: 9, setter: matAttribSetter, count: 3 },\n    _b[GL_TYPE.FLOAT_MAT4] = { size: 16, setter: matAttribSetter, count: 4 },\n    _b);\nexport function createUniformSetters(gl, program) {\n    var textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        var location = gl.getUniformLocation(program, uniformInfo.name);\n        var isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        var type = uniformInfo.type;\n        var typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        var setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            var unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter: setter, location: location };\n    }\n    var uniformSetters = {};\n    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (var i = 0; i < numUniforms; ++i) {\n        var uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            break;\n        }\n        var name_1 = uniformInfo.name;\n        // remove the array suffix.\n        if (name_1.substr(-3) === '[0]') {\n            name_1 = name_1.substr(0, name_1.length - 3);\n        }\n        if (program) {\n            var setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name_1] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    var attribSetters = {};\n    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (var i = 0; i < numAttribs; i++) {\n        var attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        var location_1 = gl.getAttribLocation(program, attribInfo.name);\n        var typeInfo = attrTypeMap[attribInfo.type];\n        var setter = typeInfo.setter(gl, location_1, typeInfo);\n        attribSetters[attribInfo.name] = { setter: setter, location: location_1 };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport var glTypeToTypedArray = (_c = {},\n    _c[GL_TYPE.BYTE] = Int8Array,\n    _c[GL_TYPE.UNSIGNED_BYTE] = Uint8Array,\n    _c[GL_TYPE.SHORT] = Int16Array,\n    _c[GL_TYPE.UNSIGNED_SHORT] = Uint16Array,\n    _c[GL_TYPE.INT] = Int32Array,\n    _c[GL_TYPE.UNSIGNED_INT] = Uint32Array,\n    _c[GL_TYPE.FLOAT] = Float32Array,\n    _c[GL_TYPE.UNSIGNED_SHORT_4_4_4_4] = Uint16Array,\n    _c[GL_TYPE.UNSIGNED_SHORT_5_5_5_1] = Uint16Array,\n    _c[GL_TYPE.UNSIGNED_SHORT_5_6_5] = Uint16Array,\n    _c[GL_TYPE.HALF_FLOAT] = Uint16Array,\n    _c[GL_TYPE.UNSIGNED_INT_2_10_10_10_REV] = Uint32Array,\n    _c[GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array,\n    _c[GL_TYPE.UNSIGNED_INT_5_9_9_9_REV] = Uint32Array,\n    _c[GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array,\n    _c[GL_TYPE.UNSIGNED_INT_24_8] = Uint32Array,\n    _c);\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data, oldData) {\n    if (data === void 0) { data = {}; }\n    if (oldData === void 0) { oldData = {}; }\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        var wrapS = void 0, wrapT = void 0;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    var texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        var glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL: function () { } };\n        var bufferAttachments = [];\n        for (var i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[\"COLOR_ATTACHMENT\" + i + \"_WEBGL\"]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (var i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            var texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        var texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    var err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (var _i = 0, _a = target.textures; _i < _a.length; _i++) {\n        var texture = _a[_i];\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (var _i = 0, _a = settings.enable; _i < _a.length; _i++) {\n            var setting = _a[_i];\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (var _b = 0, _c = settings.disable; _b < _c.length; _b++) {\n            var setting = _c[_b];\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (var _i = 0, _a = settings.enable; _i < _a.length; _i++) {\n            var setting = _a[_i];\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (var _b = 0, _c = settings.disable; _b < _c.length; _b++) {\n            var setting = _c[_b];\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","var _a;\nimport * as constants from './contants';\nexport var defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport var defaultForms = {\n    renderQuad: {\n        attribs: (_a = {},\n            _a[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            _a[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            },\n            _a),\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport var defaultShaders = {\n    basicEffect: {\n        vert: \"\\n\\t\\t\\tattribute vec2 \" + constants.GEOMETRY_PROP_POSITION + \";\\n\\t\\t\\tattribute vec2 \" + constants.GEOMETRY_PROP_UV + \";\\n\\t\\t\\tvarying vec2 \" + constants.VARYING_UV_COORDS + \";\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\" + constants.VARYING_UV_COORDS + \" = \" + constants.GEOMETRY_PROP_UV + \";\\n\\t\\t\\t\\tgl_Position = vec4(\" + constants.GEOMETRY_PROP_POSITION + \", 0.0, 1.0);\\n\\t\\t\\t}\",\n        frag: \"precision mediump float;\\n\\t\\t\\tuniform sampler2D \" + constants.UNIFORM_SOURCE_TEXTURE + \";\\n\\t\\t\\tvarying vec2 \" + constants.VARYING_UV_COORDS + \";\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_FragColor = texture2D(\" + constants.UNIFORM_SOURCE_TEXTURE + \", \" + constants.VARYING_UV_COORDS + \");\\n\\t\\t\\t}\"\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { getGLTypeForTypedArray } from './render-utils';\nvar Form = /** @class */ (function () {\n    function Form(gl) {\n        this.gl = gl;\n    }\n    Form.prototype.update = function (data) {\n        var gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (var id in data.attribs) {\n            var attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            var buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    };\n    Form.prototype.destroy = function () {\n        for (var id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    };\n    return Form;\n}());\nexport { Form };\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nvar Shade = /** @class */ (function () {\n    function Shade(gl) {\n        this.gl = gl;\n        this.program = gl.createProgram(),\n            this.frag = gl.createShader(gl.FRAGMENT_SHADER),\n            this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    Shade.prototype.update = function (data) {\n        var gl = this.gl;\n        var frag = (data.frag && data.frag.trim()) || this.fragSource;\n        var vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        var linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            var lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    };\n    Shade.prototype.destroy = function () {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    };\n    return Shade;\n}());\nexport { Shade };\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map(function (line, i) { return (i + 1) + ': ' + line; })\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","var Sketch = /** @class */ (function () {\n    function Sketch() {\n    }\n    Sketch.prototype.update = function (data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    };\n    Sketch.prototype.destroy = function () {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    };\n    return Sketch;\n}());\nexport { Sketch };\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nvar StaticLayer = /** @class */ (function () {\n    function StaticLayer(gl) {\n        this.data = {};\n        this.gl = gl;\n        this.textures = [gl.createTexture()];\n    }\n    StaticLayer.prototype.texture = function () {\n        return this.textures[0];\n    };\n    StaticLayer.prototype.update = function (data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    };\n    StaticLayer.prototype.destroy = function () {\n        this.gl.deleteTexture(this.texture());\n    };\n    return StaticLayer;\n}());\nexport { StaticLayer };\nvar DrawingLayer = /** @class */ (function () {\n    function DrawingLayer(gl) {\n        this.gl = gl;\n        this.textures = [];\n        this.data = {};\n    }\n    DrawingLayer.prototype.texture = function (i) {\n        if (i === void 0) { i = 0; }\n        return this.textures[i];\n    };\n    DrawingLayer.prototype.update = function (data) {\n        if (data.buffered && !this.target) {\n            this.target = {\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            };\n            updateRenderTarget(this.gl, this.target, data, this.data);\n            this.textures = this.target.textures;\n        }\n        else if (this.target && data.width && data.height) {\n            this.target.width = data.width;\n            this.target.height = data.height;\n            updateRenderTarget(this.gl, this.target, data, this.data);\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            var sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    };\n    DrawingLayer.prototype.destroy = function () {\n        if (this.sketches) {\n            for (var _i = 0, _a = this.sketches; _i < _a.length; _i++) {\n                var sketch = _a[_i];\n                sketch.destroy();\n            }\n        }\n        if (this.target) {\n            destroyRenderTarget(this.gl, this.target);\n        }\n        else {\n            for (var _b = 0, _c = this.textures; _b < _c.length; _b++) {\n                var texture = _c[_b];\n                this.gl.deleteTexture(texture);\n            }\n        }\n    };\n    return DrawingLayer;\n}());\nexport { DrawingLayer };\n//# sourceMappingURL=layer.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nvar Painter = /** @class */ (function () {\n    function Painter(gl) {\n        this.gl = gl;\n        this.targets = [\n            {},\n            {}\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n    }\n    Painter.prototype.resize = function (multiplier, forceUpdateTargets) {\n        var _this = this;\n        if (multiplier === void 0) { multiplier = 1; }\n        if (forceUpdateTargets === void 0) { forceUpdateTargets = false; }\n        var canvas = this.gl.canvas;\n        var needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(function (t) {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: _this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(_this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    };\n    Painter.prototype.destroy = function () {\n        this.result.destroy();\n        for (var _i = 0, _a = this.targets; _i < _a.length; _i++) {\n            var target = _a[_i];\n            destroyRenderTarget(this.gl, target);\n        }\n    };\n    Painter.prototype.updateDrawSettings = function (drawSettings) {\n        applyDrawSettings(this.gl, __assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    };\n    Painter.prototype.createForm = function () { return new Form(this.gl); };\n    Painter.prototype.createShade = function () { return new Shade(this.gl); };\n    Painter.prototype.createSketch = function () { return new Sketch(); };\n    Painter.prototype.createFlatSketch = function () {\n        return this.createSketch().update({\n            form: this.renderQuad,\n            shade: this.createShade().update(defaultShaders.basicEffect)\n        });\n    };\n    Painter.prototype.createStaticLayer = function () { return new StaticLayer(this.gl); };\n    Painter.prototype.createDrawingLayer = function () { return new DrawingLayer(this.gl); };\n    Painter.prototype.createEffectLayer = function () {\n        return this.createDrawingLayer().update({\n            sketches: [this.createFlatSketch()]\n        });\n    };\n    Painter.prototype.draw = function (sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    };\n    Painter.prototype.compose = function () {\n        var layers = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            layers[_i] = arguments[_i];\n        }\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    };\n    return Painter;\n}());\nexport { Painter };\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    var shade = sketch.shade, form = sketch.form, drawSettings = sketch.drawSettings;\n    var uniforms = sketch.uniforms;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (var _i = 0, uniforms_1 = uniforms; _i < uniforms_1.length; _i++) {\n            var instanceUniforms = uniforms_1[_i];\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (var name_1 in form.attribs) {\n        var setter = shade.attributeSetters[name_1];\n        if (setter) {\n            setter.setter(form.attribs[name_1]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (var name_2 in uniforms) {\n        var setter = shade.uniformSetters[name_2];\n        if (setter) {\n            var value = uniforms[name_2];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    var source = targets[0];\n    var target = targets[1];\n    var renderToStack = !directRender && layer.target == null;\n    if (directRender) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.target) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.target.frameBuffer);\n        gl.viewport(0, 0, layer.target.width, layer.target.height);\n    }\n    else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (var _i = 0, _a = layer.sketches; _i < _a.length; _i++) {\n            var sketch = _a[_i];\n            draw(gl, sketch, source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (renderToStack) {\n        targets[0] = target;\n        targets[1] = source;\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    var last = layers.length - 1;\n    for (var i = 0; i < layers.length; i++) {\n        var layer = layers[i];\n        if (Array.isArray(layer.uniforms)) {\n            var newLast = last + layer.uniforms.length - 1;\n            for (var j = 0; j < layer.uniforms.length; j++) {\n                var directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            var directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    var state = {\n        size: { width: 0, height: 0 }\n    };\n    var destroy = windowSize(function (s) { return state.size = s; });\n    return { state: state, destroy: destroy };\n}\n//# sourceMappingURL=dom.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nexport function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        var result = __assign({}, obj1);\n        for (var key in obj2) {\n            var val1 = obj1[key];\n            var val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    var ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (var key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                var val1 = obj1[key];\n                var val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export var Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    var cb = callback || opts;\n    var _a = opts, _b = _a.element, element = _b === void 0 ? document : _b, enableRightButton = _a.enableRightButton;\n    var state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    var x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts) {\n    if (opts === void 0) { opts = {}; }\n    var observer = {\n        Buttons: Buttons,\n        state: {},\n        destroy: function () { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t}\n\n\tupdateRotationX (amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY (amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[8], this.rotationYMat[9], this.rotationYMat[10])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[0], this.rotationYMat[1], this.rotationYMat[2])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[4], this.rotationYMat[5], this.rotationYMat[6])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate () {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper()\n\t\tObject.assign(this, props)\n\t}\n\n\tupdate () {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\n\nexport function WithKeyNavigation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys (speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function WithMouseRotation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse (speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import * as constants from '../contants';\nimport { flatten } from 'tvs-libs/dist/lib/utils/sequence';\nexport var STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport var STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport var STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport var STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    var geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0\n    };\n    for (var prop in stackglGeometry) {\n        var arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            var buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer: buffer },\n                itemCount: buffer.length\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","export function plane(width, height, widthSegments, heightSegments) {\n    var widthHalf = width / 2;\n    var heightHalf = height / 2;\n    var gridX = widthSegments || 1;\n    var gridY = heightSegments || 1;\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n    var segmentWidth = width / gridX;\n    var segmentHeight = height / gridY;\n    var vertices = new Float32Array(gridX1 * gridY1 * 3);\n    var normals = new Float32Array(gridX1 * gridY1 * 3);\n    var uvs = new Float32Array(gridX1 * gridY1 * 2);\n    var iy, ix;\n    var offset = 0;\n    var offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        var y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            var x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - (iy / gridY);\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    var indices = new ((vertices.length / 3) > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            var a = ix + gridX1 * iy;\n            var b = ix + gridX1 * (iy + 1);\n            var c = (ix + 1) + gridX1 * (iy + 1);\n            var d = (ix + 1) + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            'position': {\n                buffer: vertices\n            },\n            'normal': {\n                buffer: normals\n            },\n            'uv': {\n                buffer: uvs\n            }\n        },\n        elements: {\n            buffer: indices\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length\n    };\n}\n//# sourceMappingURL=plane.js.map","import { dot, normalize, cross, sub } from './vectors';\nexport function planeFromNormalAndCoplanarPoint(n, point) {\n    var d = dot(n, point);\n    return [n[0], n[1], n[2], -d];\n}\nexport function planeFromThreeCoplanarPoints(p1, p2, p3) {\n    return planeFromNormalAndCoplanarPoint(normalFromThreeCoplanarPoints(p1, p2, p3), p1);\n}\nexport function normalFromThreeCoplanarPoints(p1, p2, p3) {\n    return normalize(cross(sub(p3, p2), sub(p1, p2)));\n}\nexport function mirrorMatrixFromPlane(plane) {\n    var _a = plane, a = _a[0], b = _a[1], c = _a[2], d = _a[3];\n    return [\n        1 - 2 * a * a, -2 * a * b, -2 * a * c, 0,\n        -2 * a * b, 1 - 2 * b * b, -2 * b * c, 0,\n        -2 * a * c, -2 * b * c, 1 - 2 * c * c, 0,\n        -2 * a * d, -2 * b * d, -2 * c * d, 1\n    ];\n}\nexport function getYawQuat(rotYAngle) {\n    rotYAngle *= 0.5;\n    return [0, Math.sin(rotYAngle), 0, Math.cos(rotYAngle)];\n}\nexport function getPitchQuat(rotXAngle) {\n    rotXAngle *= 0.5;\n    return [Math.sin(rotXAngle), 0, 0, Math.cos(rotXAngle)];\n}\nexport function getRollQuat(rotZAngle) {\n    rotZAngle *= 0.5;\n    return [0, 0, Math.sin(rotZAngle), Math.cos(rotZAngle)];\n}\n//# sourceMappingURL=geometry.js.map","import { length } from './vectors';\nexport function cartesianToPolar2D(v) {\n    return [length(v), Math.atan2(v[1], v[0])];\n}\nexport function polarToCartesian2D(coords) {\n    var r = coords[0], phi = coords[1];\n    return [r * Math.cos(phi), r * Math.sin(phi)];\n}\n//# sourceMappingURL=coords.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvec4 blur9_1_0(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\n\\n\\nuniform sampler2D source;\\nuniform vec2 size;\\nuniform float direction;\\nuniform float strength;\\n\\nvarying vec2 coords;\\n\\nvoid main() {\\n\\tvec2 uv = coords;\\n\\tvec4 refl = texture2D(source, uv);\\n\\tfloat dist = refl.a * strength + 0.2;\\n\\n\\tif (direction == 0.0) {\\n\\t\\tgl_FragColor = vec4(blur9_1_0(source, uv, size, vec2(dist, 0)).rgb, refl.a);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(blur9_1_0(source, uv, size, vec2(0, dist)).rgb, refl.a);\\n\\t}\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\nuniform float groundHeight;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec2 vUv;\\nvarying float height;\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\theight = (pos.y - groundHeight) / 10.0;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D video;\\nuniform int withDistance;\\n\\nvarying vec2 vUv;\\nvarying float height;\\n\\nvoid main() {\\n\\tvec4 tex = texture2D(video, vUv);\\n\\tif (withDistance == 0) {\\n\\t\\tgl_FragColor = vec4(tex.rgb, 1.0);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(tex.rgb, height);\\n\\t\\t// gl_FragColor = vec4(vec3(height), 1.0);\\n\\t}\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\nuniform float groundHeight;\\n\\nvarying float dist;\\nvarying float height;\\n\\nvoid main() {\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\tdist = length(pos.xyz);\\n\\theight = (pos.y - groundHeight) / 10.0;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform int withDistance;\\n\\nvarying float dist;\\nvarying float height;\\n\\nvoid main() {\\n\\tfloat scale = (50.0 - dist) / 50.0;\\n\\tif (withDistance == 0) {\\n\\t\\tgl_FragColor = vec4(vec3(scale * 0.6), 1.0);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(vec3(scale * 0.6), height);\\n\\t\\t// gl_FragColor = vec4(vec3(height), 1.0);\\n\\t}\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 V;\\n\\nvoid main() {\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\tV = pos.xyz;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D reflection;\\nuniform sampler2D lightTex[5];\\nuniform vec4 lights[5];\\nuniform vec2 size;\\nuniform vec2 lightSize;\\nvarying vec3 V;\\n\\nconst vec3 up = vec3(0.0, 1.0, 0.0);\\n\\n\\nvec3 diffuseAreaLight(sampler2D tex, vec3 normal, vec3 pos, vec3 V) {\\n\\tfloat width = lightSize.x / 2.0;\\n\\tfloat height = lightSize.y / 2.0;\\n\\n\\tvec3 right = cross(up, normal);\\n\\n\\t/*project onto plane and calculate direction from center to the projection*/\\n\\tfloat dis = dot(normal, V - pos);\\n\\tvec3 projection = V - dis * normal;\\n\\tvec3 dir = projection - pos;\\n\\n\\t/*calculate distance from area*/\\n\\tvec2 diagonal = vec2(dot(dir, right), dot(dir, up));\\n\\tvec2 nearest2D = vec2(clamp(diagonal.x, -width, width), clamp(diagonal.y, -height, height));\\n\\tvec3 nearestPointInside = pos + (right * nearest2D.x + up * nearest2D.y);\\n\\n\\tvec3 L = normalize(nearestPointInside - V);\\n\\n\\tfloat nDotL = dot(-normal, L);\\n\\n\\tfloat d = distance(V, nearestPointInside); //real distance to area rectangle\\n\\n\\tvec3 diff = vec3(0.0);\\n\\n\\n\\tvec2 co = ((diagonal.xy / (d + 1.0)) + vec2(width, height)) / lightSize;\\n\\tvec3 texColor = texture2D(tex, co).rgb;\\n\\n\\tif (nDotL > 0.0) {\\n\\t\\t//co.x = 1.0 - co.x;\\n\\t\\tdiff = texColor;\\n\\n\\t\\tfloat NDotL = clamp(dot(-up, L), 0.0, 1.0);\\n\\t\\tnDotL *= NDotL * 0.5 + 0.5; //distribute over hemisphere, looks better. Should be dependant of area size.\\n\\n\\t\\tfloat attenuation = 1.0 / (1.0 + d);\\n\\n\\t\\tdiff *= nDotL * attenuation;\\n\\t}\\n\\n\\treturn diff;\\n}\\n\\n\\nvoid main() {\\n\\tfloat scale = (50.0 - length(V)) / 50.0;\\n\\tvec4 refl = texture2D(reflection, gl_FragCoord.xy / size);\\n\\tvec3 ground = vec3(0.0);\\n\\n\\tfor (int i = 0; i < 5; i++) {\\n\\t\\tvec4 light = lights[i];\\n\\t\\tvec3 lightNormal = vec3(sin(light.a), 0, cos(light.a));\\n\\t\\tvec3 diffuse = diffuseAreaLight(lightTex[i], lightNormal, light.xyz, V);\\n\\t\\tground += pow(diffuse, vec3(0.57));\\n\\t}\\n\\n\\tgl_FragColor = mix(vec4(ground, 1.0), vec4(refl.rgb, 1.0), refl / 2.0 + 0.25);\\n\\t// gl_FragColor = vec4(ground, 1.0);\\n}\\n\"","function _createConfig( properties ) {\n\t\n\tvar config = {\n\t\tsize : [1,1,1],\n\t\tsegments : [1,1,1]\n\t}\n\t\n\tif( properties ) {\n\t\n\t\tif( Array.isArray( properties.size ) ) {\n\t\t\tconfig.size = properties.size\n\t\t} else if( typeof properties.size === \"number\" ) {\n\t\t\tconfig.size = [properties.size, properties.size, properties.size]\n\t\t}\n\t\n\t\tif( Array.isArray( properties.segments ) ) {\n\t\t\tconfig.segments = properties.segments\n\t\t} else if( typeof properties.segments === \"number\" ) {\n\t\t\tconfig.segments = [properties.segments, properties.segments, properties.segments]\n\t\t}\n\t}\n\t\n\treturn config\n}\n\nfunction _flatten( array ) {\n\tvar results = []\n\t\n\tfor( var i=0; i < array.length; i++ ) {\n\t\tvar subarray = array[i]\n\t\tfor( var j=0; j < subarray.length; j++ ) {\n\t\t\tresults.push(subarray[j])\n\t\t}\n\t}\n\treturn results\n}\n\nfunction _generatePanel( config ) {\n\t\t\t\n\tvar rows      = _generateGrid( config )\n\tvar cells     = _generateCells( config, rows )\n\tvar positions = _flatten( rows )\n\tvar uvs       = _generateUvs( config, positions )\n\t\n\treturn {\n\t\tpositions   : positions,\n\t\tcells       : cells,\n\t\tuvs         : uvs,\n\t\tvertexCount : (config.sx + 1) * (config.sy + 1)\n\t}\n}\n\nfunction _generateUvs( config, positions ) {\n\t\n\treturn positions.map(function(p) {\n\t\treturn [\n\t\t\tp[0] / config.wx + 0.5,\n\t\t\tp[1] / config.wy + 0.5\n\t\t]\n\t})\n}\n\nfunction _generateGrid( config ) {\n\t\n\tvar step   = config.wy / config.sy\n\tvar halfY  = config.wy / 2\n\tvar length = config.sy + 1\n\tvar grid   = Array(length)\n\t\n\tfor( var i=0; i < length; i++ ) {\n\t\tgrid[i] = _generateRow( config, step * i - halfY)\n\t}\n\t\n\treturn grid\n}\n\nfunction _generateRow( config, height ) {\n\t\n\tvar halfX  = config.wx / 2\n\tvar step   = config.wx / config.sx\n\tvar length = config.sx + 1\n\tvar row    = Array(length)\n\t\n\tfor( var i=0; i < length; i++ ) {\n\t\trow[i] = [ step * i - halfX, height ]\n\t}\n\t\n\treturn row\n}\n\nfunction _generateCells( config ) {\n\t\n\tfunction index( x, y ) {\n\t\treturn (config.sx + 1) * y + x\n\t}\n\t\n\tvar cells = []\n\t\n\tfor( var x=0; x < config.sx; x++ ) {\n\t\t\n\t\tfor( var y=0; y < config.sy; y++ ) {\n\n\t\t\tvar a = index( x + 0, y + 0 )  //   d __ c\n\t\t\tvar b = index( x + 1, y + 0 )  //    |  |\n\t\t\tvar c = index( x + 1, y + 1 )  //    |__|\n\t\t\tvar d = index( x + 0, y + 1 )  //   a    b\n\t\t\t\n\t\t\tcells.push( [ a, b, c ] )\n\t\t\tcells.push( [ c, d, a ] )\n\t\t}\n\t}\n\t\n\treturn cells\n}\n\nfunction _clonePanel( panel ) {\n\t\n\treturn {\n\t\tpositions   : panel.positions,\n\t\tcells       : panel.cells,\n\t\tuvs         : panel.uvs,\n\t\tvertexCount : panel.vertexCount\n\t}\n}\n\nfunction _generateBoxPanels( config ) {\n\t\n\tvar size = config.size\n\tvar segs = config.segments\n\t\n\t//       yp  zm\n\t//        | /\n\t//        |/\n\t// xm ----+----- xp\n\t//       /|\n\t//      / |\n\t//    zp  ym\n\t\n\tvar zp = _generatePanel({\n\t\twx: size[0], wy: size[1],\n\t\tsx: segs[0], sy: segs[1]\n\t})\n\tvar xp = _generatePanel({\n\t\twx: size[2], wy: size[1],\n\t\tsx: segs[2], sy: segs[1]\n\t})\n\tvar yp = _generatePanel({\n\t\twx: size[0], wy: size[2],\n\t\tsx: segs[0], sy: segs[2]\n\t})\n\t\n\tvar zm = _clonePanel(zp)\n\tvar xm = _clonePanel(xp)\n\tvar ym = _clonePanel(yp)\n\t\n\tzp.positions = zp.positions.map( function(p) { return [       p[0],       p[1],  size[2]/2 ] } )\n\tzm.positions = zm.positions.map( function(p) { return [       p[0],      -p[1], -size[2]/2 ] } )\n\txp.positions = xp.positions.map( function(p) { return [  size[0]/2,      -p[1],       p[0] ] } )\n\txm.positions = xm.positions.map( function(p) { return [ -size[0]/2,       p[1],       p[0] ] } )\n\typ.positions = yp.positions.map( function(p) { return [       p[0],  size[1]/2,      -p[1] ] } )\n\tym.positions = ym.positions.map( function(p) { return [       p[0], -size[1]/2,       p[1] ] } )\n\t\n\tzp.normals = _makeNormals( [ 0, 0, 1], zp.positions.length )\n\tzm.normals = _makeNormals( [ 0, 0,-1], zm.positions.length )\n\txp.normals = _makeNormals( [ 1, 0, 0], xp.positions.length )\n\txm.normals = _makeNormals( [-1, 0, 0], xm.positions.length )\n\typ.normals = _makeNormals( [ 0, 1, 0], yp.positions.length )\n\tym.normals = _makeNormals( [ 0,-1, 0], ym.positions.length )\n\t\n\treturn [ zp, zm, xp, xm, yp, ym ]\n}\n\nfunction _makeNormals( normal, count ) {\n\t\n\tvar normals = Array(count)\n\t\n\tfor( var i=0; i < count; i++ ) {\n\t\tnormals[i] = normal.slice()\n\t}\n\t\n\treturn normals\n}\n\t\nfunction _generateBox( config ) {\n\t\n\tvar panels = _generateBoxPanels( config )\n\t\n\tvar positions = panels.map(function(panel) { return panel.positions })\n\tvar uvs       = panels.map(function(panel) { return panel.uvs       })\n\tvar normals   = panels.map(function(panel) { return panel.normals   })\n\tvar cells     = _offsetCellIndices( panels )\n\t\n\treturn {\n\t\tpositions: _flatten( positions ),\n\t\tuvs:       _flatten( uvs ),\n\t\tcells:     _flatten( cells ),\n\t\tnormals:   _flatten( normals ),\n\t}\n}\n\nfunction _offsetCellIndices( panels ) {\n\t\n\t/*\n\t\tFrom: [[[0,1,2],[2,3,0]],[[0,1,2],[2,3,0]]]\n\t\tTo:   [[[0,1,2],[2,3,0]],[[6,7,8],[8,9,6]]]\n\t*/\n\t\n\tvar offset = 0\n\t\n\treturn panels.map(function(panel) {\n\t\t\n\t\tvar offsetCells = panel.cells.map( function(cell) {\n\t\t\treturn cell.map(function(v) {\n\t\t\t\treturn v + offset\n\t\t\t})\n\t\t})\n\t\n\t\toffset += panel.vertexCount\n\t\n\t\treturn offsetCells\n\t})\n}\n\nmodule.exports = function( properties ) {\n\t\n\tvar config = _createConfig( properties )\n\n\treturn _generateBox( config )\n}","import { getPainter, getState, baseEvents } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './viewport'\nimport { Ground } from './state/ground'\nimport { Screens } from './state/screens'\n\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort,\n\tground: Ground,\n\tscreens: Screens\n}\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const getCanvasSize = () => [canvas.width, canvas.height]\n\nexport const events = {\n\t...baseEvents,\n\tINIT: 'init',\n\tSTART: 'start'\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { WithKeyNavigation, WithMouseRotation, PerspectiveCamera } from 'shared-utils/vr/camera'\nimport { addSystem, set } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class ViewPort {\n\tmoveSpeed = 0.2\n\tlookSpeed = 0.002\n\tcamera = new (WithKeyNavigation(WithMouseRotation(PerspectiveCamera)))({\n\t\tfovy: Math.PI * 0.4\n\t})\n}\n\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf / 60\n\t\t\tv.camera.updatePosFromKeys(v.moveSpeed * tpf, s.device.keys)\n\t\t\tv.camera.updateRotFromMouse(v.lookSpeed * tpf, s.device.mouse)\n\t\t\tv.camera.update()\n\t\t\treturn\n\n\t\tcase events.RESIZE:\n\t\t\tv.camera.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tv.camera.needsUpdateProjection = true\n\t}\n})\n\n\nset<State>('viewPort', new ViewPort(), {reset: {moveSpeed: true, lookSpeed: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport * as geo from 'tvs-libs/dist/lib/math/geometry'\nimport { addSystem, set } from 'shared-utils/painterState'\nimport { State, events } from '../context'\n\n\nexport class Ground {\n\tposition = [0, -3.6, 0]\n\tnormal = [0, 1, 0]\n\tscale = 10\n\ttransform = mat4.create()\n\tplaneEquation!: number[]\n\tmirrorMatrix!: number[]\n\tgroundMirrorView = mat4.create()\n\n\tconstructor () {\n\t\tthis.update()\n\t}\n\n\tupdate() {\n\t\tmat4.fromTranslation(this.transform, this.position)\n\t\tmat4.rotateX(this.transform, this.transform, Math.PI / 2)\n\t\tmat4.scale(this.transform, this.transform, [this.scale, this.scale, this.scale])\n\n\t\tthis.planeEquation = geo.planeFromNormalAndCoplanarPoint(this.normal, this.position)\n\t\tthis.mirrorMatrix = geo.mirrorMatrixFromPlane(this.planeEquation)\n\t}\n}\n\n\naddSystem<State>('groundState', (e, s) => {\n\tif (e === events.FRAME) {\n\t\tconst v = s.viewPort\n\t\tconst g = s.ground\n\t\tmat4.multiply(g.groundMirrorView, v.camera.viewMat, g.mirrorMatrix as any)\n\t}\n})\n\n\nset<State>('ground', new Ground(), {reset: {transform: true, mirrorMatrix: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const names = [\n\t'tworooms',\n\t'behindglass',\n\t'nanofuzz',\n\t'balloon',\n\t'threescreens'\n]\n\n\nconst videosUrl = process.env.NODE_ENV === 'production'\n\t? '//s3.eu-central-1.amazonaws.com/trivialspace.net/tvs1/'\n\t: 'videos/'\n\n\nconst loadTimeout = 60000\n\n\nfunction createVideo (src: string) {\n\tconst video = document.createElement('video')\n\tvideo.crossOrigin = 'anonymous'\n\tvideo.loop = true\n\n\tconst source1 = document.createElement('source')\n\tsource1.src = src + '.webm'\n\tsource1.type = 'video/webm'\n\n\tconst source2 = document.createElement('source')\n\tsource2.src = src + '.mp4'\n\tsource2.type = 'video/mp4'\n\n\tvideo.appendChild(source1)\n\tvideo.appendChild(source2)\n\treturn video\n}\n\n\nexport const videos = Promise.all(\n\tnames\n\t\t.map(name => createVideo(videosUrl + name))\n\t\t.map(v => new Promise<HTMLVideoElement>((res, rej) => {\n\t\t\tconst t = setTimeout(() => {\n\t\t\t\tconsole.log('timeout', v)\n\t\t\t\trej('Video timeout ' + v)\n\t\t\t}, loadTimeout)\n\n\t\t\tv.addEventListener('canplay', () => {\n\t\t\t\tres(v)\n\t\t\t\tv.play()\n\t\t\t\tclearTimeout(t)\n\t\t\t\tconsole.log('loaded', v)\n\t\t\t})\n\t\t}))\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import box from 'geo-3d-box'\nimport { convertStackGLGeometry } from 'tvs-painter/dist/lib/utils/stackgl'\nimport { plane } from 'tvs-painter/dist/lib/utils/geometry/plane'\nimport { getForm } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const planeSize = {\n\twidth: 10,\n\theight: 10\n}\n\nexport const planeForm = getForm(painter, 'plane')\n\t.update(plane(planeSize.width, planeSize.height, 5, 5))\n\n\nconst size = [10, 14, 2]\nconst segments = [5, 7, 1]\n\nexport const boxForm = getForm(painter, 'box')\n\t.update(convertStackGLGeometry(box({ size, segments })))\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport * as coords from 'tvs-libs/dist/lib/math/coords'\nimport * as videos from './videos'\nimport { zip, flatten } from 'tvs-libs/dist/lib/utils/sequence'\nimport { mul } from 'tvs-libs/dist/lib/math/vectors'\nimport { set } from 'shared-utils/painterState'\nimport { State } from '../context'\nimport { planeSize } from '../geometries'\n\n\nexport class Screens {\n\tradius = 25\n\theight = 2\n\tscale = [1.6, 1, 1]\n\trotations = videos.names.map((_, i) => Math.PI * 2 * i / videos.names.length)\n\tpositions!: number[][]\n\tscreenTransforms!: mat4[]\n\tpedestalTransforms!: mat4[]\n\tlights!: number[]\n\tlightSize!: [number, number]\n\n\tconstructor () {\n\t\tthis.update()\n\t}\n\n\tupdate() {\n\t\tthis.positions = this.rotations.map(rot => {\n\t\t\tconst phi = -rot - Math.PI / 2\n\t\t\tconst [x, z] = coords.polarToCartesian2D([this.radius, phi])\n\t\t\treturn [x, this.height, z]\n\t\t})\n\n\t\tthis.screenTransforms = zip((rot, pos) => {\n\t\t\tconst t = mat4.fromTranslation(mat4.create(), pos)\n\t\t\tmat4.rotateY(t, t, rot)\n\t\t\tmat4.scale(t, t, this.scale)\n\t\t\treturn t\n\t\t}, this.rotations, this.positions)\n\n\t\tthis.pedestalTransforms = zip((rot, pos) => {\n\t\t\tconst p = mul(1.045, pos)\n\t\t\tp[1] -= 2\n\n\t\t\tconst t = mat4.fromTranslation(mat4.create(), p)\n\t\t\tmat4.rotateY(t, t, rot)\n\t\t\tmat4.scale(t, t, this.scale.map(v => v * 1.03))\n\t\t\treturn t\n\t\t}, this.rotations, this.positions)\n\n\t\tthis.lights = flatten(zip((p, r) => [...p, r], this.positions, this.rotations))\n\n\t\tthis.lightSize = [planeSize.width * this.scale[0], planeSize.height * this.scale[1]]\n\t}\n}\n\n\nset<State>('screens', new Screens())\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import groundFrag from './glsl/ground-frag.glsl'\nimport groundVert from './glsl/ground-vert.glsl'\nimport objectFrag from './glsl/object-frag.glsl'\nimport objectVert from './glsl/object-vert.glsl'\nimport screenFrag from './glsl/screen-frag.glsl'\nimport screenVert from './glsl/screen-vert.glsl'\nimport { getShade } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const groundShade = getShade(painter, 'ground')\n\t.update({ vert: groundVert, frag: groundFrag })\n\nexport const objectShade = getShade(painter, 'object')\n\t.update({ vert: objectVert, frag: objectFrag })\n\nexport const screenShade = getShade(painter, 'screen')\n\t.update({ vert: screenVert, frag: screenFrag })\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import frag from './glsl/ground-reflection-frag.glsl'\nimport { getEffectLayer } from 'shared-utils/painterState'\nimport { painter, gl, getCanvasSize } from './context'\n\n\nlet strength = 10\n\n\nexport const passData: any[] = []\n\nwhile (strength >= 1) {\n\tpassData.push({\n\t\tdirection: 0,\n\t\tstrength: strength * 1.5\n\t})\n\tpassData.push({\n\t\tdirection: 1,\n\t\tstrength: strength * 6\n\t})\n\tstrength /= 2\n}\n\n\nexport const effectLayer = getEffectLayer(painter, 'reflection')\n\t.update({\n\t\tfrag,\n\t\tflipY: true,\n\t\tdrawSettings: {\n\t\t\tdisable: [gl.DEPTH_TEST]\n\t\t},\n\t\tuniforms: passData.map(data => ({\n\t\t\t...data,\n\t\t\tsource: null,\n\t\t\tsize: getCanvasSize\n\t\t}))\n\t})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import * as videos from './state/videos'\nimport { zip } from 'tvs-libs/dist/lib/utils/sequence'\nimport { makeClear } from 'tvs-painter/dist/lib/utils/context'\nimport { painter, gl, state, getCanvasSize } from './context'\nimport { getStaticLayer, getSketch, getDrawingLayer } from 'shared-utils/painterState'\nimport { groundShade, screenShade, objectShade } from './shaders'\nimport { planeForm, boxForm } from './geometries'\nimport { effectLayer } from './effects'\n\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1]\n})\n\n\n// Textures\n\nexport const videoTextures = videos.names.map(\n\tn => getStaticLayer(painter, n).update({\n\t\tflipY: true,\n\t\tminFilter: 'LINEAR',\n\t\twrap: 'CLAMP_TO_EDGE'\n\t})\n)\n\n\n// Sketches\n\nexport const groundSketch = getSketch(painter, 'ground')\n\t.update({\n\t\tform: planeForm,\n\t\tshade: groundShade,\n\t\tuniforms: {\n\t\t\treflection: null,\n\t\t\ttransform: () => state.ground.transform,\n\t\t\tlights: () => state.screens.lights,\n\t\t\tlightSize: () => state.screens.lightSize,\n\t\t\tlightTex: videoTextures.map(v => v.texture()),\n\t\t\tsize: getCanvasSize\n\t\t}\n\t})\n\n\nexport const screenSketch = getSketch(painter, 'screens')\n\t.update({\n\t\tform: planeForm,\n\t\tshade: screenShade,\n\t\tuniforms: zip((transform, tex) => ({\n\t\t\ttransform,\n\t\t\tvideo: tex.texture()\n\t\t}), state.screens.screenTransforms, videoTextures)\n\t})\n\n\nexport const pedestalSketch = getSketch(painter, 'pedestals')\n\t.update({\n\t\tform: boxForm,\n\t\tshade: objectShade,\n\t\tuniforms: state.screens.pedestalTransforms.map(transform => ({\n\t\t\ttransform\n\t\t}))\n\t})\n\n\n// Layers\n\nconst drawSettings = {\n\tclearBits: makeClear(gl, 'color', 'depth')\n}\n\n\nexport const sceneLayer = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [screenSketch, pedestalSketch, groundSketch],\n\t\tdrawSettings,\n\t\tuniforms: {\n\t\t\tview: () => state.viewPort.camera.viewMat,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat,\n\t\t\twithDistance: 0,\n\t\t\tgroundHeight: 0\n\t\t}\n\t})\n\n\nexport const mirrorSceneLayer = getDrawingLayer(painter, 'mirrorScene')\n\t.update({\n\t\tflipY: true,\n\t\tsketches: [screenSketch, pedestalSketch],\n\t\tdrawSettings,\n\t\tuniforms: {\n\t\t\tview: () => state.ground.groundMirrorView,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat,\n\t\t\twithDistance: 1,\n\t\t\tgroundHeight: () => state.ground.position[1]\n\t\t}\n\t})\n\n\nexport const layers = [\n\tmirrorSceneLayer,\n\teffectLayer,\n\tsceneLayer\n]\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import './viewport'\nimport './state/ground'\nimport './state/screens'\nimport { repeat } from 'shared-utils/scheduler'\nimport { painter, events } from './context'\nimport { layers, videoTextures } from './renderer'\nimport { videos } from './state/videos'\nimport { get, dispatch } from 'shared-utils/painterState'\n\n\nconst tickStep = 2\nlet tickCounter = 0\n\nvideos.then(vs => {\n\trepeat(tpf => {\n\t\tget('device').tpf = tpf\n\t\tdispatch(events.FRAME)\n\n\t\tif (tickCounter === 0) {\n\t\t\tvideoTextures.forEach((t, i) => t.update({\n\t\t\t\tasset: vs[i]\n\t\t\t}))\n\t\t}\n\t\ttickCounter = tickCounter === tickStep ? 0 : tickCounter + 1\n\n\t\tpainter.compose.apply(painter, layers)\n\t}, 'render')\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}