{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/libs/dist/lib/math/random.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/painter/dist/lib/utils/stackgl.js","webpack:///../libs/painter/dist/lib/utils/geometry/plane.js","webpack:///../libs/libs/dist/lib/math/geometry.js","webpack:///../libs/libs/dist/lib/math/coords.js","webpack:///../node_modules/geo-3d-box/box.js","webpack:///./homage/glsl/ground-frag.glsl","webpack:///./homage/glsl/ground-vert.glsl","webpack:///./homage/glsl/object-frag.glsl","webpack:///./homage/glsl/object-vert.glsl","webpack:///./homage/glsl/screen-frag.glsl","webpack:///./homage/glsl/screen-vert.glsl","webpack:///./homage/glsl/video-light-source.glsl","webpack:///./homage/context.ts","webpack:///./homage/viewport.ts","webpack:///./homage/state/ground.ts","webpack:///./homage/state/videos.ts","webpack:///./homage/geometries.ts","webpack:///./homage/state/screens.ts","webpack:///./homage/shaders.ts","webpack:///./homage/renderer.ts","webpack:///./homage/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","out","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","fn","arg","length","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","pickRandom","doTimes","times","zip","flatten","mapcat","map","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","isArray","obj","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","getState","addSystem","dispatch","baseEvents","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_0__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_4__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_5__","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","painter","canvas","state","device","cancelWindow","cancelMouse","cancelKeys","resize","RESIZE","element","enableRightButton","mouse","keys","init","forms","id","createForm","shades","createShade","sketches","createSketch","drawingLayers","createDrawingLayer","staticLayers","createStaticLayer","effectLayers","createEffectLayer","tpf","prop","val","opts","reset","ignore","window","systems","event","FRAME","Keys","keyboard","callback","cb","pressed","onKeydown","keyCode","Date","now","onKeyup","addEventListener","removeEventListener","vec1","vec2","scalar","sum","v1","v2","cross2D","randInt","int","randIntInRange","from","to","normalRand","getContext","gl","Error","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","multiplier","width","clientWidth","height","clientHeight","unequal","equalArray","arr1","arr2","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","[object Object]","contants","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","defaultTextureSettings","defaultForms","renderQuad","attribs","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","form_Form","this","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","line","join","Sketch","drawSettings","form","shade","uniforms","destroy","layer_StaticLayer","_texture","asset","generateMipmap","assign","layer_DrawingLayer","targets","buffered","sequence","sketch","update","undefined","painter_Painter","result","createFlatSketch","forceUpdateTargets","context","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","globalUniforms","draw","layers","last","layer","newLast","looping","directRender","renderLayer","composeLayers","defaultTexture","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","once","repeat","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","updates","requestAnimationFrame","windowSize","innerWidth","innerHeight","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","Buttons","LEFT","MIDDLE","RIGHT","document","drag","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","onMouseMove","preventDefault","PerspectiveCamera","WithKeyNavigation","WithMouseRotation","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","Camera","props","position","rotationX","rotationY","rotationXMat","rotationYMat","projectionMat","viewMat","needsUpdateView","amount","super","needsUpdateProjection","Cam","speed","UP","W","moveForward","DOWN","A","moveLeft","D","_oldMouse","deltaX","deltaY","updateRotationX","updateRotationY","convertStackGLGeometry","_contants__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","stackglGeometry","geometry","plane","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","iy","ix","offset2","indices","normal","uv","planeFromNormalAndCoplanarPoint","mirrorMatrixFromPlane","getYawQuat","getRollQuat","_vectors__WEBPACK_IMPORTED_MODULE_0__","point","rotYAngle","rotZAngle","polarToCartesian2D","coords","phi","_flatten","results","_generatePanel","config","rows","step","halfY","grid","_generateRow","_generateGrid","cells","_generateCells","positions","_generateUvs","vertexCount","halfX","row","_clonePanel","panel","_makeNormals","slice","_generateBox","panels","segs","segments","zp","xp","yp","zm","xm","ym","_generateBoxPanels","offsetCells","cell","_offsetCellIndices","properties","_createConfig","getElementById","painterState","events","INIT","START","viewPort","camera","updatePosFromKeys","moveSpeed","updateRotFromMouse","lookSpeed","g","ground","gl_matrix","groundMirrorView","mirrorMatrix","transform","planeEquation","names","videos","Promise","all","video","createElement","crossOrigin","loop","source1","source2","appendChild","createVideo","rej","setTimeout","log","play","clearTimeout","planeSize","planeForm","boxForm","stackgl","box_default","radius","rotations","_","rot","screenTransforms","pos","pedestalTransforms","vectors","lights","lightSize","groundShade","ground_vert_default","ground_frag_default","objectShade","object_vert_default","object_frag_default","screenShade","screen_vert_default","screen_frag_default","updateDrawSettings","videoTextures","reflSize","videoReflections","video_light_source_default","direction","strength","groundSketch","reflection","screens","lightTex","screenSketch","tex","pedestalSketch","renderer_layers","projection","withDistance","groundHeight","tickCounter","then","vs","scheduler","compose"],"mappings":"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","file":"homage/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 80);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","import { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { once } from 'shared-utils/scheduler'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm())\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade())\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch())\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer())\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer())\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer())\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype System<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: System<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: System<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize()\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","export function getContext(canvas) {\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    multiplier = Math.max(1, multiplier);\n    const width = canvas.clientWidth * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            break;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\n\t\t\tattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\n\t\t\tattribute vec2 ${constants.GEOMETRY_PROP_UV};\n\t\t\tvarying vec2 ${constants.VARYING_UV_COORDS};\n\t\t\tvoid main() {\n\t\t\t\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\t\t\t\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n\t\t\t}`,\n        frag: `precision mediump float;\n\t\t\tuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\n\t\t\tvarying vec2 ${constants.VARYING_UV_COORDS};\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n\t\t\t}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { getGLTypeForTypedArray } from './render-utils';\nexport class Form {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nexport class Shade {\n    constructor(gl) {\n        this.gl = gl;\n        this.program = gl.createProgram(),\n            this.frag = gl.createShader(gl.FRAGMENT_SHADER),\n            this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","export class Sketch {\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nexport class StaticLayer {\n    constructor(gl) {\n        this.data = {};\n        this.gl = gl;\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nexport class DrawingLayer {\n    constructor(gl) {\n        this.gl = gl;\n        this.data = {};\n    }\n    texture(i = 0) { return (this.targets && this.targets[0].textures[i]) || null; }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(() => ({\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), 2);\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            {},\n            {}\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm() { return new Form(this.gl); }\n    createShade() { return new Shade(this.gl); }\n    createSketch() { return new Sketch(); }\n    createFlatSketch() {\n        return this.createSketch().update({\n            form: this.renderQuad,\n            shade: this.createShade().update(defaultShaders.basicEffect)\n        });\n    }\n    createStaticLayer() { return new StaticLayer(this.gl); }\n    createDrawingLayer() { return new DrawingLayer(this.gl); }\n    createEffectLayer() {\n        return this.createDrawingLayer().update({\n            sketches: [this.createFlatSketch()]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings } = sketch;\n    const { uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[1].frameBuffer);\n        gl.viewport(0, 0, layer.targets[1].width, layer.targets[1].height);\n    }\n    else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t}\n\n\tupdateRotationX (amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY (amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[8], this.rotationYMat[9], this.rotationYMat[10])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[0], this.rotationYMat[1], this.rotationYMat[2])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[4], this.rotationYMat[5], this.rotationYMat[6])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate () {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper()\n\t\tObject.assign(this, props)\n\t}\n\n\tupdate () {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\n\nexport function WithKeyNavigation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys (speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function WithMouseRotation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse (speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import * as constants from '../contants';\nimport { flatten } from 'tvs-libs/dist/lib/utils/sequence';\nexport const STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport const STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport const STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport const STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    const geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0\n    };\n    for (const prop in stackglGeometry) {\n        const arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            const buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer },\n                itemCount: buffer.length\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - (iy / gridY);\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new ((vertices.length / 3) > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = (ix + 1) + gridX1 * (iy + 1);\n            const d = (ix + 1) + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            'position': {\n                buffer: vertices\n            },\n            'normal': {\n                buffer: normals\n            },\n            'uv': {\n                buffer: uvs\n            }\n        },\n        elements: {\n            buffer: indices\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length\n    };\n}\n//# sourceMappingURL=plane.js.map","import { dot, normalize, cross, sub } from './vectors';\nexport function planeFromNormalAndCoplanarPoint(n, point) {\n    const d = dot(n, point);\n    return [n[0], n[1], n[2], -d];\n}\nexport function planeFromThreeCoplanarPoints(p1, p2, p3) {\n    return planeFromNormalAndCoplanarPoint(normalFromThreeCoplanarPoints(p1, p2, p3), p1);\n}\nexport function normalFromThreeCoplanarPoints(p1, p2, p3) {\n    return normalize(cross(sub(p3, p2), sub(p1, p2)));\n}\nexport function mirrorMatrixFromPlane(plane) {\n    const [a, b, c, d] = plane;\n    return [\n        1 - 2 * a * a, -2 * a * b, -2 * a * c, 0,\n        -2 * a * b, 1 - 2 * b * b, -2 * b * c, 0,\n        -2 * a * c, -2 * b * c, 1 - 2 * c * c, 0,\n        -2 * a * d, -2 * b * d, -2 * c * d, 1\n    ];\n}\nexport function getYawQuat(rotYAngle) {\n    rotYAngle *= 0.5;\n    return [0, Math.sin(rotYAngle), 0, Math.cos(rotYAngle)];\n}\nexport function getPitchQuat(rotXAngle) {\n    rotXAngle *= 0.5;\n    return [Math.sin(rotXAngle), 0, 0, Math.cos(rotXAngle)];\n}\nexport function getRollQuat(rotZAngle) {\n    rotZAngle *= 0.5;\n    return [0, 0, Math.sin(rotZAngle), Math.cos(rotZAngle)];\n}\n//# sourceMappingURL=geometry.js.map","import { length } from './vectors';\nexport function cartesianToPolar2D(v) {\n    return [length(v), Math.atan2(v[1], v[0])];\n}\nexport function polarToCartesian2D(coords) {\n    const r = coords[0], phi = coords[1];\n    return [r * Math.cos(phi), r * Math.sin(phi)];\n}\n//# sourceMappingURL=coords.js.map","function _createConfig( properties ) {\n\t\n\tvar config = {\n\t\tsize : [1,1,1],\n\t\tsegments : [1,1,1]\n\t}\n\t\n\tif( properties ) {\n\t\n\t\tif( Array.isArray( properties.size ) ) {\n\t\t\tconfig.size = properties.size\n\t\t} else if( typeof properties.size === \"number\" ) {\n\t\t\tconfig.size = [properties.size, properties.size, properties.size]\n\t\t}\n\t\n\t\tif( Array.isArray( properties.segments ) ) {\n\t\t\tconfig.segments = properties.segments\n\t\t} else if( typeof properties.segments === \"number\" ) {\n\t\t\tconfig.segments = [properties.segments, properties.segments, properties.segments]\n\t\t}\n\t}\n\t\n\treturn config\n}\n\nfunction _flatten( array ) {\n\tvar results = []\n\t\n\tfor( var i=0; i < array.length; i++ ) {\n\t\tvar subarray = array[i]\n\t\tfor( var j=0; j < subarray.length; j++ ) {\n\t\t\tresults.push(subarray[j])\n\t\t}\n\t}\n\treturn results\n}\n\nfunction _generatePanel( config ) {\n\t\t\t\n\tvar rows      = _generateGrid( config )\n\tvar cells     = _generateCells( config, rows )\n\tvar positions = _flatten( rows )\n\tvar uvs       = _generateUvs( config, positions )\n\t\n\treturn {\n\t\tpositions   : positions,\n\t\tcells       : cells,\n\t\tuvs         : uvs,\n\t\tvertexCount : (config.sx + 1) * (config.sy + 1)\n\t}\n}\n\nfunction _generateUvs( config, positions ) {\n\t\n\treturn positions.map(function(p) {\n\t\treturn [\n\t\t\tp[0] / config.wx + 0.5,\n\t\t\tp[1] / config.wy + 0.5\n\t\t]\n\t})\n}\n\nfunction _generateGrid( config ) {\n\t\n\tvar step   = config.wy / config.sy\n\tvar halfY  = config.wy / 2\n\tvar length = config.sy + 1\n\tvar grid   = Array(length)\n\t\n\tfor( var i=0; i < length; i++ ) {\n\t\tgrid[i] = _generateRow( config, step * i - halfY)\n\t}\n\t\n\treturn grid\n}\n\nfunction _generateRow( config, height ) {\n\t\n\tvar halfX  = config.wx / 2\n\tvar step   = config.wx / config.sx\n\tvar length = config.sx + 1\n\tvar row    = Array(length)\n\t\n\tfor( var i=0; i < length; i++ ) {\n\t\trow[i] = [ step * i - halfX, height ]\n\t}\n\t\n\treturn row\n}\n\nfunction _generateCells( config ) {\n\t\n\tfunction index( x, y ) {\n\t\treturn (config.sx + 1) * y + x\n\t}\n\t\n\tvar cells = []\n\t\n\tfor( var x=0; x < config.sx; x++ ) {\n\t\t\n\t\tfor( var y=0; y < config.sy; y++ ) {\n\n\t\t\tvar a = index( x + 0, y + 0 )  //   d __ c\n\t\t\tvar b = index( x + 1, y + 0 )  //    |  |\n\t\t\tvar c = index( x + 1, y + 1 )  //    |__|\n\t\t\tvar d = index( x + 0, y + 1 )  //   a    b\n\t\t\t\n\t\t\tcells.push( [ a, b, c ] )\n\t\t\tcells.push( [ c, d, a ] )\n\t\t}\n\t}\n\t\n\treturn cells\n}\n\nfunction _clonePanel( panel ) {\n\t\n\treturn {\n\t\tpositions   : panel.positions,\n\t\tcells       : panel.cells,\n\t\tuvs         : panel.uvs,\n\t\tvertexCount : panel.vertexCount\n\t}\n}\n\nfunction _generateBoxPanels( config ) {\n\t\n\tvar size = config.size\n\tvar segs = config.segments\n\t\n\t//       yp  zm\n\t//        | /\n\t//        |/\n\t// xm ----+----- xp\n\t//       /|\n\t//      / |\n\t//    zp  ym\n\t\n\tvar zp = _generatePanel({\n\t\twx: size[0], wy: size[1],\n\t\tsx: segs[0], sy: segs[1]\n\t})\n\tvar xp = _generatePanel({\n\t\twx: size[2], wy: size[1],\n\t\tsx: segs[2], sy: segs[1]\n\t})\n\tvar yp = _generatePanel({\n\t\twx: size[0], wy: size[2],\n\t\tsx: segs[0], sy: segs[2]\n\t})\n\t\n\tvar zm = _clonePanel(zp)\n\tvar xm = _clonePanel(xp)\n\tvar ym = _clonePanel(yp)\n\t\n\tzp.positions = zp.positions.map( function(p) { return [       p[0],       p[1],  size[2]/2 ] } )\n\tzm.positions = zm.positions.map( function(p) { return [       p[0],      -p[1], -size[2]/2 ] } )\n\txp.positions = xp.positions.map( function(p) { return [  size[0]/2,      -p[1],       p[0] ] } )\n\txm.positions = xm.positions.map( function(p) { return [ -size[0]/2,       p[1],       p[0] ] } )\n\typ.positions = yp.positions.map( function(p) { return [       p[0],  size[1]/2,      -p[1] ] } )\n\tym.positions = ym.positions.map( function(p) { return [       p[0], -size[1]/2,       p[1] ] } )\n\t\n\tzp.normals = _makeNormals( [ 0, 0, 1], zp.positions.length )\n\tzm.normals = _makeNormals( [ 0, 0,-1], zm.positions.length )\n\txp.normals = _makeNormals( [ 1, 0, 0], xp.positions.length )\n\txm.normals = _makeNormals( [-1, 0, 0], xm.positions.length )\n\typ.normals = _makeNormals( [ 0, 1, 0], yp.positions.length )\n\tym.normals = _makeNormals( [ 0,-1, 0], ym.positions.length )\n\t\n\treturn [ zp, zm, xp, xm, yp, ym ]\n}\n\nfunction _makeNormals( normal, count ) {\n\t\n\tvar normals = Array(count)\n\t\n\tfor( var i=0; i < count; i++ ) {\n\t\tnormals[i] = normal.slice()\n\t}\n\t\n\treturn normals\n}\n\t\nfunction _generateBox( config ) {\n\t\n\tvar panels = _generateBoxPanels( config )\n\t\n\tvar positions = panels.map(function(panel) { return panel.positions })\n\tvar uvs       = panels.map(function(panel) { return panel.uvs       })\n\tvar normals   = panels.map(function(panel) { return panel.normals   })\n\tvar cells     = _offsetCellIndices( panels )\n\t\n\treturn {\n\t\tpositions: _flatten( positions ),\n\t\tuvs:       _flatten( uvs ),\n\t\tcells:     _flatten( cells ),\n\t\tnormals:   _flatten( normals ),\n\t}\n}\n\nfunction _offsetCellIndices( panels ) {\n\t\n\t/*\n\t\tFrom: [[[0,1,2],[2,3,0]],[[0,1,2],[2,3,0]]]\n\t\tTo:   [[[0,1,2],[2,3,0]],[[6,7,8],[8,9,6]]]\n\t*/\n\t\n\tvar offset = 0\n\t\n\treturn panels.map(function(panel) {\n\t\t\n\t\tvar offsetCells = panel.cells.map( function(cell) {\n\t\t\treturn cell.map(function(v) {\n\t\t\t\treturn v + offset\n\t\t\t})\n\t\t})\n\t\n\t\toffset += panel.vertexCount\n\t\n\t\treturn offsetCells\n\t})\n}\n\nmodule.exports = function( properties ) {\n\t\n\tvar config = _createConfig( properties )\n\n\treturn _generateBox( config )\n}","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D reflection;\\nuniform sampler2D lightTex[5];\\nuniform vec4 lights[5];\\nuniform vec2 size;\\nuniform vec2 lightSize;\\nvarying vec3 V;\\n\\nconst vec3 up = vec3(0.0, 1.0, 0.0);\\n\\n\\nvec3 diffuseAreaLight(sampler2D tex, vec3 normal, vec3 pos, vec3 V) {\\n\\tfloat width = lightSize.x / 2.0;\\n\\tfloat height = lightSize.y / 2.0;\\n\\n\\tvec3 right = cross(up, normal);\\n\\n\\t/*project onto plane and calculate direction from center to the projection*/\\n\\tfloat dis = dot(normal, V - pos);\\n\\tvec3 projection = V - dis * normal;\\n\\tvec3 dir = projection - pos;\\n\\n\\t/*calculate distance from area*/\\n\\tvec2 diagonal = vec2(dot(dir, right), dot(dir, up));\\n\\tvec2 nearest2D = vec2(clamp(diagonal.x, -width, width), clamp(diagonal.y, -height, height));\\n\\tvec3 nearestPointInside = pos + (right * nearest2D.x + up * nearest2D.y);\\n\\n\\tvec3 L = normalize(nearestPointInside - V);\\n\\n\\tfloat nDotL = dot(-normal, L);\\n\\n\\tfloat d = distance(V, nearestPointInside); //real distance to area rectangle\\n\\n\\tvec3 diff = vec3(0.0);\\n\\n\\n\\tvec2 co = ((diagonal.xy / (d + 1.0)) + vec2(width, height)) / lightSize;\\n\\tvec3 texColor = texture2D(tex, co).rgb;\\n\\n\\tif (nDotL > 0.0) {\\n\\t\\t//co.x = 1.0 - co.x;\\n\\t\\tdiff = texColor;\\n\\n\\t\\tfloat NDotL = clamp(dot(-up, L), 0.0, 1.0);\\n\\t\\tnDotL *= NDotL * 0.5 + 0.5; //distribute over hemisphere, looks better. Should be dependant of area size.\\n\\n\\t\\tfloat attenuation = 1.0 / (1.0 + d);\\n\\n\\t\\tdiff *= nDotL * attenuation;\\n\\t}\\n\\n\\treturn diff;\\n}\\n\\n\\nvoid main() {\\n\\tfloat scale = (50.0 - length(V)) / 50.0;\\n\\tvec4 refl = texture2D(reflection, gl_FragCoord.xy / size);\\n\\tvec3 ground = vec3(0.0);\\n\\n\\tfor (int i = 0; i < 5; i++) {\\n\\t\\tvec4 light = lights[i];\\n\\t\\tvec3 lightNormal = vec3(sin(light.a), 0, cos(light.a));\\n\\t\\tvec3 diffuse = diffuseAreaLight(lightTex[i], lightNormal, light.xyz, V);\\n\\t\\tground += pow(diffuse, vec3(0.57));\\n\\t}\\n\\n\\tgl_FragColor = mix(vec4(ground, 1.0), vec4(refl.rgb, 1.0), refl / 2.0 + 0.25);\\n\\t// gl_FragColor = vec4(ground, 1.0);\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 V;\\n\\nvoid main() {\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\tV = pos.xyz;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform int withDistance;\\n\\nvarying float dist;\\nvarying float height;\\n\\nvoid main() {\\n\\tfloat scale = (50.0 - dist) / 50.0;\\n\\tif (withDistance == 0) {\\n\\t\\tgl_FragColor = vec4(vec3(scale * 0.6), 1.0);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(vec3(scale * 0.6), height);\\n\\t\\t// gl_FragColor = vec4(vec3(height), 1.0);\\n\\t}\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\nuniform float groundHeight;\\n\\nvarying float dist;\\nvarying float height;\\n\\nvoid main() {\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\tdist = length(pos.xyz);\\n\\theight = (pos.y - groundHeight) / 10.0;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D video;\\nuniform int withDistance;\\n\\nvarying vec2 vUv;\\nvarying float height;\\n\\nvoid main() {\\n\\tvec4 tex = texture2D(video, vUv);\\n\\tif (withDistance == 0) {\\n\\t\\tgl_FragColor = vec4(tex.rgb, 1.0);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(tex.rgb, height);\\n\\t\\t// gl_FragColor = vec4(vec3(height), 1.0);\\n\\t}\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\nuniform float groundHeight;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec2 vUv;\\nvarying float height;\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\theight = (pos.y - groundHeight) / 10.0;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvec4 blur9_1_0(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\n\\n\\nuniform sampler2D source;\\nuniform vec2 size;\\nuniform float direction;\\nuniform float strength;\\n\\nvarying vec2 coords;\\n\\nvoid main() {\\n\\tvec2 uv = coords;\\n\\tvec4 refl = texture2D(source, uv);\\n\\tfloat dist = strength;\\n\\n\\tif (direction == 0.0) {\\n\\t\\tgl_FragColor = vec4(blur9_1_0(source, uv, size, vec2(strength, 0)).rgb, refl.a);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(blur9_1_0(source, uv, size, vec2(0, strength)).rgb, refl.a);\\n\\t}\\n}\\n\"","import { getPainter, getState, baseEvents } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './viewport'\nimport { Ground } from './state/ground'\nimport { Screens } from './state/screens'\n\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort,\n\tground: Ground,\n\tscreens: Screens\n}\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const getCanvasSize = () => [canvas.width, canvas.height]\n\nexport const events = {\n\t...baseEvents,\n\tINIT: 'init',\n\tSTART: 'start'\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { WithKeyNavigation, WithMouseRotation, PerspectiveCamera } from 'shared-utils/vr/camera'\nimport { addSystem, set } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class ViewPort {\n\tmoveSpeed = 0.2\n\tlookSpeed = 0.002\n\tcamera = new (WithKeyNavigation(WithMouseRotation(PerspectiveCamera)))({\n\t\tfovy: Math.PI * 0.4\n\t})\n}\n\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf / 60\n\t\t\tv.camera.updatePosFromKeys(v.moveSpeed * tpf, s.device.keys)\n\t\t\tv.camera.updateRotFromMouse(v.lookSpeed * tpf, s.device.mouse)\n\t\t\tv.camera.update()\n\t\t\treturn\n\n\t\tcase events.RESIZE:\n\t\t\tv.camera.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tv.camera.needsUpdateProjection = true\n\t}\n})\n\n\nset<State>('viewPort', new ViewPort(), {reset: {moveSpeed: true, lookSpeed: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport * as geo from 'tvs-libs/dist/lib/math/geometry'\nimport { addSystem, set } from 'shared-utils/painterState'\nimport { State, events } from '../context'\n\n\nexport class Ground {\n\tposition = [0, -3.6, 0]\n\tnormal = [0, 1, 0]\n\tscale = 10\n\ttransform = mat4.create()\n\tplaneEquation!: number[]\n\tmirrorMatrix!: number[]\n\tgroundMirrorView = mat4.create()\n\n\tconstructor () {\n\t\tthis.update()\n\t}\n\n\tupdate() {\n\t\tmat4.fromTranslation(this.transform, this.position)\n\t\tmat4.rotateX(this.transform, this.transform, Math.PI / 2)\n\t\tmat4.scale(this.transform, this.transform, [this.scale, this.scale, this.scale])\n\n\t\tthis.planeEquation = geo.planeFromNormalAndCoplanarPoint(this.normal, this.position)\n\t\tthis.mirrorMatrix = geo.mirrorMatrixFromPlane(this.planeEquation)\n\t}\n}\n\n\naddSystem<State>('groundState', (e, s) => {\n\tif (e === events.FRAME) {\n\t\tconst v = s.viewPort\n\t\tconst g = s.ground\n\t\tmat4.multiply(g.groundMirrorView, v.camera.viewMat, g.mirrorMatrix as any)\n\t}\n})\n\n\nset<State>('ground', new Ground(), {reset: {transform: true, mirrorMatrix: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const names = [\n\t'tworooms',\n\t'behindglass',\n\t'nanofuzz',\n\t'balloon',\n\t'threescreens'\n]\n\n\nconst videosUrl = process.env.NODE_ENV === 'production'\n\t? '//s3.eu-central-1.amazonaws.com/trivialspace.net/tvs1/'\n\t: 'videos/'\n\n\nconst loadTimeout = 60000\n\n\nfunction createVideo (src: string) {\n\tconst video = document.createElement('video')\n\tvideo.crossOrigin = 'anonymous'\n\tvideo.loop = true\n\n\tconst source1 = document.createElement('source')\n\tsource1.src = src + '.webm'\n\tsource1.type = 'video/webm'\n\n\tconst source2 = document.createElement('source')\n\tsource2.src = src + '.mp4'\n\tsource2.type = 'video/mp4'\n\n\tvideo.appendChild(source1)\n\tvideo.appendChild(source2)\n\treturn video\n}\n\n\nexport const videos = Promise.all(\n\tnames\n\t\t.map(name => createVideo(videosUrl + name))\n\t\t.map(v => new Promise<HTMLVideoElement>((res, rej) => {\n\t\t\tconst t = setTimeout(() => {\n\t\t\t\tconsole.log('timeout', v)\n\t\t\t\trej('Video timeout ' + v)\n\t\t\t}, loadTimeout)\n\n\t\t\tv.addEventListener('canplay', () => {\n\t\t\t\tres(v)\n\t\t\t\tv.play()\n\t\t\t\tclearTimeout(t)\n\t\t\t\tconsole.log('loaded', v)\n\t\t\t})\n\t\t}))\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import box from 'geo-3d-box'\nimport { convertStackGLGeometry } from 'tvs-painter/dist/lib/utils/stackgl'\nimport { plane } from 'tvs-painter/dist/lib/utils/geometry/plane'\nimport { getForm } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const planeSize = {\n\twidth: 10,\n\theight: 10\n}\n\nexport const planeForm = getForm(painter, 'plane')\n\t.update(plane(planeSize.width, planeSize.height, 5, 5))\n\n\nconst size = [10, 14, 2]\nconst segments = [5, 7, 1]\n\nexport const boxForm = getForm(painter, 'box')\n\t.update(convertStackGLGeometry(box({ size, segments })))\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport * as coords from 'tvs-libs/dist/lib/math/coords'\nimport * as videos from './videos'\nimport { zip, flatten } from 'tvs-libs/dist/lib/utils/sequence'\nimport { mul } from 'tvs-libs/dist/lib/math/vectors'\nimport { set } from 'shared-utils/painterState'\nimport { State } from '../context'\nimport { planeSize } from '../geometries'\n\n\nexport class Screens {\n\tradius = 25\n\theight = 2\n\tscale = [1.6, 1, 1]\n\trotations = videos.names.map((_, i) => Math.PI * 2 * i / videos.names.length)\n\tpositions!: number[][]\n\tscreenTransforms!: mat4[]\n\tpedestalTransforms!: mat4[]\n\tlights!: number[]\n\tlightSize!: [number, number]\n\n\tconstructor () {\n\t\tthis.update()\n\t}\n\n\tupdate() {\n\t\tthis.positions = this.rotations.map(rot => {\n\t\t\tconst phi = -rot - Math.PI / 2\n\t\t\tconst [x, z] = coords.polarToCartesian2D([this.radius, phi])\n\t\t\treturn [x, this.height, z]\n\t\t})\n\n\t\tthis.screenTransforms = zip((rot, pos) => {\n\t\t\tconst t = mat4.fromTranslation(mat4.create(), pos)\n\t\t\tmat4.rotateY(t, t, rot)\n\t\t\tmat4.scale(t, t, this.scale)\n\t\t\treturn t\n\t\t}, this.rotations, this.positions)\n\n\t\tthis.pedestalTransforms = zip((rot, pos) => {\n\t\t\tconst p = mul(1.045, pos)\n\t\t\tp[1] -= 2\n\n\t\t\tconst t = mat4.fromTranslation(mat4.create(), p)\n\t\t\tmat4.rotateY(t, t, rot)\n\t\t\tmat4.scale(t, t, this.scale.map(v => v * 1.03))\n\t\t\treturn t\n\t\t}, this.rotations, this.positions)\n\n\t\tthis.lights = flatten(zip((p, r) => [...p, r], this.positions, this.rotations))\n\n\t\tthis.lightSize = [planeSize.width * this.scale[0], planeSize.height * this.scale[1]]\n\t}\n}\n\n\nset<State>('screens', new Screens())\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import groundFrag from './glsl/ground-frag.glsl'\nimport groundVert from './glsl/ground-vert.glsl'\nimport objectFrag from './glsl/object-frag.glsl'\nimport objectVert from './glsl/object-vert.glsl'\nimport screenFrag from './glsl/screen-frag.glsl'\nimport screenVert from './glsl/screen-vert.glsl'\nimport { getShade } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const groundShade = getShade(painter, 'ground')\n\t.update({ vert: groundVert, frag: groundFrag })\n\nexport const objectShade = getShade(painter, 'object')\n\t.update({ vert: objectVert, frag: objectFrag })\n\nexport const screenShade = getShade(painter, 'screen')\n\t.update({ vert: screenVert, frag: screenFrag })\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import * as videos from './state/videos'\nimport { zip } from 'tvs-libs/dist/lib/utils/sequence'\nimport { makeClear } from 'tvs-painter/dist/lib/utils/context'\nimport { painter, gl, state, getCanvasSize } from './context'\nimport { getStaticLayer, getSketch, getDrawingLayer, getEffectLayer } from 'shared-utils/painterState'\nimport { groundShade, screenShade, objectShade } from './shaders'\nimport { planeForm, boxForm } from './geometries'\n// import { effectLayer } from './effects'\nimport refFrag from './glsl/video-light-source.glsl'\n\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1]\n})\n\n\n// Textures\n\nexport const videoTextures = videos.names.map(\n\tn => getStaticLayer(painter, n).update({\n\t\tflipY: true,\n\t\tminFilter: 'LINEAR',\n\t\twrap: 'CLAMP_TO_EDGE'\n\t})\n)\n\n\nconst reflSize = [256, 256]\nexport const videoReflections = videoTextures.map(\n\t(t, i) => getEffectLayer(painter, 'vref' + i).update({\n\t\tbuffered: true,\n\t\twidth: 256,\n\t\theight: 256,\n\t\tminFilter: 'LINEAR',\n\t\tmagFilter: 'LINEAR',\n\t\tfrag: refFrag,\n\t\tuniforms: [{\n\t\t\tsource: () => t.texture(),\n\t\t\tdirection: 0,\n\t\t\tstrength: 2.5,\n\t\t\tsize: reflSize\n\t\t}, {\n\t\t\tsource: null,\n\t\t\tdirection: 0,\n\t\t\tstrength: 1.25,\n\t\t\tsize: reflSize\n\t\t}, {\n\t\t\tsource: null,\n\t\t\tdirection: 1,\n\t\t\tstrength: 3,\n\t\t\tsize: reflSize\n\t\t}, {\n\t\t\tsource: null,\n\t\t\tdirection: 1,\n\t\t\tstrength: 2,\n\t\t\tsize: reflSize\n\t\t}]\n\t})\n)\n\n// Sketches\n\nexport const groundSketch = getSketch(painter, 'ground')\n\t.update({\n\t\tform: planeForm,\n\t\tshade: groundShade,\n\t\tuniforms: {\n\t\t\treflection: null,\n\t\t\ttransform: () => state.ground.transform,\n\t\t\tlights: () => state.screens.lights,\n\t\t\tlightSize: () => state.screens.lightSize,\n\t\t\tlightTex: () => videoTextures.map(v => v.texture()),\n\t\t\tsize: getCanvasSize\n\t\t}\n\t})\n\n\nexport const screenSketch = getSketch(painter, 'screens')\n\t.update({\n\t\tform: planeForm,\n\t\tshade: screenShade,\n\t\tuniforms: zip((transform, tex) => ({\n\t\t\ttransform,\n\t\t\tvideo: () => tex.texture()\n\t\t}), state.screens.screenTransforms, videoReflections)\n\t})\n\n\nexport const pedestalSketch = getSketch(painter, 'pedestals')\n\t.update({\n\t\tform: boxForm,\n\t\tshade: objectShade,\n\t\tuniforms: state.screens.pedestalTransforms.map(transform => ({\n\t\t\ttransform\n\t\t}))\n\t})\n\n\n// Layers\n\nconst drawSettings = {\n\tclearBits: makeClear(gl, 'color', 'depth')\n}\n\n\nexport const sceneLayer = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [screenSketch, pedestalSketch, groundSketch],\n\t\tdrawSettings,\n\t\tuniforms: {\n\t\t\tview: () => state.viewPort.camera.viewMat,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat,\n\t\t\twithDistance: 0,\n\t\t\tgroundHeight: 0\n\t\t}\n\t})\n\n\nexport const mirrorSceneLayer = getDrawingLayer(painter, 'mirrorScene')\n\t.update({\n\t\tflipY: true,\n\t\tsketches: [screenSketch, pedestalSketch],\n\t\tdrawSettings,\n\t\tuniforms: {\n\t\t\tview: () => state.ground.groundMirrorView,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat,\n\t\t\twithDistance: 1,\n\t\t\tgroundHeight: () => state.ground.position[1]\n\t\t}\n\t})\n\n\nexport const layers = [\n\t...videoReflections\n\t// mirrorSceneLayer\n\t// effectLayer,\n\t// sceneLayer\n]\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import './viewport'\nimport './state/ground'\nimport './state/screens'\nimport { repeat } from 'shared-utils/scheduler'\nimport { painter, events } from './context'\nimport { layers, videoTextures } from './renderer'\nimport { videos } from './state/videos'\nimport { get, dispatch } from 'shared-utils/painterState'\n\n\nconst tickStep = 2\nlet tickCounter = 0\n\nvideos.then(vs => {\n\trepeat(tpf => {\n\t\tget('device').tpf = tpf\n\t\tdispatch(events.FRAME)\n\n\t\tif (tickCounter === 0) {\n\t\t\tvideoTextures.forEach((t, i) => t.update({ asset: vs[i] }))\n\t\t}\n\t\ttickCounter = tickCounter === tickStep ? 0 : tickCounter + 1\n\n\t\tpainter.compose.apply(painter, layers)\n\t}, 'render')\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}