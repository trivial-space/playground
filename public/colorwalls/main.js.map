{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/math/random.js","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/libs/dist/lib/geometry/primitives.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/geometry/quad.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/utils/dist/lib/vr/camera.js","webpack:///../libs/libs/dist/lib/math/core.js","webpack:///../libs/libs/dist/lib/fp/core.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///../libs/painter/dist/lib/utils/stackgl.js","webpack:///./colorwalls/glsl/base.frag","webpack:///./colorwalls/glsl/base.vert","webpack:///./colorwalls/context.ts","webpack:///./colorwalls/camera.ts","webpack:///./colorwalls/state.ts","webpack:///./colorwalls/geometries.ts","webpack:///./colorwalls/shaders.ts","webpack:///./colorwalls/renderer.ts","webpack:///./colorwalls/events.ts","webpack:///./colorwalls/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","u","a","f","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","h","M","b","E","_","A","v","g","S","y","R","F","O","N","I","D","U","L","x","w","P","C","B","G","j","z","q","X","V","Y","H","W","k","K","Q","Z","J","$","tt","nt","rt","et","ut","at","ot","it","ft","ct","dt","st","lt","ht","Mt","mt","bt","Tt","Et","_t","At","pt","vt","gt","St","yt","Rt","Ft","Ot","Nt","It","Dt","Ut","Lt","xt","wt","Pt","Ct","Bt","Gt","jt","zt","qt","Xt","Vt","Yt","Ht","Wt","kt","Kt","Qt","Zt","Jt","$t","tn","nn","rn","en","un","an","on","fn","cn","dn","sn","ln","hn","Mn","mn","bn","Tn","En","_n","An","pn","vn","gn","Sn","yn","Rn","Fn","On","Nn","In","Dn","Un","Ln","xn","wn","Pn","Cn","Bn","Gn","jn","zn","qn","Xn","Vn","Yn","Hn","Wn","kn","Kn","Qn","Zn","Jn","$n","tr","nr","rr","er","ur","ar","or","ir","fr","cr","dr","sr","lr","hr","Mr","mr","br","Tr","Er","_r","Ar","pr","vr","gr","Sr","yr","Rr","Fr","Or","Nr","Ir","Dr","Ur","Lr","xr","wr","Pr","Cr","Br","Gr","jr","zr","qr","Xr","Vr","Yr","Hr","Wr","kr","Kr","Qr","Zr","Jr","$r","te","ne","re","ee","ue","ae","oe","ie","fe","ce","de","se","le","he","Me","me","be","Te","Ee","_e","Ae","pe","ve","ge","Se","ye","Re","Fe","Oe","Ne","Ie","De","Ue","Le","xe","we","Pe","Ce","Be","Ge","je","ze","qe","Xe","Ve","Ye","He","We","ke","Ke","Qe","Ze","Je","$e","tu","nu","ru","eu","uu","au","ou","iu","fu","cu","du","su","lu","hu","Mu","mu","bu","Tu","Eu","_u","Au","pu","vu","gu","Su","yu","Ru","Fu","Ou","Nu","Iu","Du","Uu","Lu","xu","wu","Pu","Cu","Bu","Gu","ju","zu","qu","Xu","Vu","Yu","Hu","Wu","ku","Ku","Qu","Zu","Ju","$u","ta","na","ra","ea","ua","aa","oa","ia","fa","ca","da","sa","la","ha","Ma","ma","ba","Ta","Ea","_a","Aa","pa","va","ga","Sa","ya","Ra","Fa","Oa","Na","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","equals","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","vectorScale","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","times","res","zip","as","bs","flatten","array","_i","array_1","subarray","currentLength","mapcat","map","vec1","vec2","scalar","sum","val","cross2D","Keys","keyboard","opts","callback","cb","element","window","pressed","onKeydown","event","keyCode","Date","now","onKeyup","addEventListener","removeEventListener","keyboardObserver","observer","state","destroy","CANCEL","HELP","BACK_SPACE","TAB","CLEAR","RETURN","ENTER","SHIFT","CONTROL","ALT","PAUSE","CAPS_LOCK","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","UP","RIGHT","DOWN","PRINTSCREEN","INSERT","DELETE","DIGIT_0","DIGIT_1","DIGIT_2","DIGIT_3","DIGIT_4","DIGIT_5","DIGIT_6","DIGIT_7","DIGIT_8","DIGIT_9","SEMICOLON","EQUALS","T","CONTEXT_MENU","NUMPAD0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","MULTIPLY","ADD","SEPARATOR","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","NUM_LOCK","SCROLL_LOCK","COMMA","PERIOD","SLASH","BACK_QUOTE","OPEN_BRACKET","BACK_SLASH","CLOSE_BRACKET","QUOTE","META","getContext","canvas","gl","Error","makeClear","clearArray","arguments","reduce","item","toUpperCase","resizeCanvas","multiplier","clientWidth","clientHeight","randInt","int","randIntInRange","from","to","normalRand","unequal","equalArray","arr1","arr2","lerpVecs","_fp_core__WEBPACK_IMPORTED_MODULE_1__","step","start","end","_utils_sequence__WEBPACK_IMPORTED_MODULE_0__","_math_core__WEBPACK_IMPORTED_MODULE_2__","_math_vectors__WEBPACK_IMPORTED_MODULE_3__","rotateLeft","unshift","pop","concat","normal","forms","getForm","painter","id","createForm","shades","getShade","createShade","sketches","getSketch","createSketch","drawingLayers","getDrawingLayer","createDrawingLayer","combineEdges","e1","e2","_primitives__WEBPACK_IMPORTED_MODULE_0__","extrudeRight","direction","edge","extrudeBottom","divideHorizontal","leftRatio","rightRatio","v11","v22","divideVertical","topRatio","bottomRatio","v44","quadTriangles","triangulate","quadCount","_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","render_utils_a","render_utils_b","render_utils_c","getBindPointForSamplerType","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","contants","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","numComponents","rowOffset","attrTypeMap","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","drawBuffersWEBGL","bufferAttachments","push","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","_b","_c","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","form","drawType","itemCount","attribs","attribData","createBuffer","bufferData","storeType","elements","glType","typedArray","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","ELEMENT_ARRAY_BUFFER","deleteBuffer","shade_create","shade","program","createProgram","frag","createShader","FRAGMENT_SHADER","vert","VERTEX_SHADER","attachShader","update","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","name_1","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","location_1","getAttribLocation","deleteProgram","deleteShader","src","split","line","join","sketch_create","sketch","drawSettings","uniforms","createDrawing","layer","buffered","assign","asset_lib_a","defaultTextureSettings","defaultForms","renderQuad","defaultShaders","basicEffect","__webpack_exports__","painter_create","__assign","targets","defaultSettings","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","createFlatSketch","result","resize","forceUpdateTargets","context","updateDrawSettings","createStaticLayer","asset","generateMipmap","createEffectLayer","draw","globalUniforms","compose","layers","last","_loop_1","layer_1","render","directRender","source","renderToStack","viewport","drawingBufferWidth","drawingBufferHeight","sketch_1","newLast","targets_1","defaultTexture","useProgram","shadeUniforms","uniforms_1","drawInstance","drawElements","drawArrays","name_2","windowSize","innerWidth","innerHeight","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","tpf","updates","requestAnimationFrame","once","repeat","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","defaultProps","needsUpdatePerspective","moveForward","moveLeft","moveUp","needsUpdateView","cam","props","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","rotationX","rotationY","position","updatePosFromKeys","camera","speed","keys","updateRotFromMouse","mouse","deltaX","drag","deltaY","partial","args","Buttons","MIDDLE","document","enableRightButton","dragging","onMouseDown","button","clientX","clientY","onMouseUp","onMouseMove","preventDefault","mouseObserver","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","convertStackGLGeometry","stackglGeometry","geometry","prop","arr","tvs_libs_dist_lib_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","_contants__WEBPACK_IMPORTED_MODULE_0__","getElementById","context_painter","camera_camera","scheduler","wallsTransform","gl_matrix","rotation","floorTransform","vertDiv","core","quad","horzDiv","subdivide","quads","sequence","colors","makeSideSegments","sliceCount","rest","upRatio","downRatio","right_1","bk","lf","box","faceNormals","primitives","wallsForm","painterState","stackgl","color","side","slice","cells","floorQuads","groundForm","baseShade","base_default","glsl_base_default","groundShade","wallsSketch","transform","groundSketch","scene","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","dom","oX","oY"],"mappings":"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A,SAAAa,KACA,IAAA5K,EAAA,IAAAd,EAAA,IAiBA,OAhBAc,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EASA,SAAA6K,GAAA9kB,GACA,IAAAia,EAAA,IAAAd,EAAA,IAiBA,OAhBAc,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAUA,SAAA8K,GAAA9K,EAAAja,GAiBA,OAhBAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,GAAAja,EAAA,GACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAAA,IAAAja,EAAA,IACAia,EAwBA,SAAA+K,GAAA1K,EAAAC,EAAAkF,EAAAwF,EAAAzK,EAAAC,EAAAiF,EAAAwF,EAAAvF,EAAAC,EAAAC,EAAAsF,EAAAC,EAAAC,E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","file":"colorwalls/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 74);\n","export var GEOMETRY_PROP_POSITION = 'position';\nexport var GEOMETRY_PROP_NORMAL = 'normal';\nexport var GEOMETRY_PROP_UV = 'uv';\nexport var UNIFORM_SOURCE_TEXTURE = 'source';\nexport var VARYING_UV_COORDS = 'coords';\nexport var GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (var i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res) {\n    if (res === void 0) { res = []; }\n    var length = Math.min(as.length, bs.length);\n    for (var i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res) {\n    if (res === void 0) { res = []; }\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var subarray = array_1[_i];\n        var currentLength = res.length;\n        for (var i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res) {\n    if (res === void 0) { res = []; }\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    var shuffled = [];\n    for (var i = 0; i < arr.length; i++) {\n        var j = randIntInRange(i, arr.length);\n        var temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        var obj = {};\n        for (var key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (var key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res) {\n    if (res === void 0) { res = []; }\n    for (var i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    var sum = 0;\n    for (var i = 0; i < vec.length; i++) {\n        var val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res) {\n    if (res === void 0) { res = []; }\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    var l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    var d = 0;\n    for (var i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res) {\n    if (res === void 0) { res = []; }\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport var isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    var cb = callback || opts;\n    var _a = opts.element, element = _a === void 0 ? window : _a;\n    var pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    var observer = {\n        Keys: Keys,\n        state: { pressed: {} },\n        destroy: function () { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","export function getContext(canvas) {\n    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl) {\n    var clearArray = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        clearArray[_i - 1] = arguments[_i];\n    }\n    return clearArray.reduce(function (res, item) { return res | gl[item.toUpperCase() + '_BUFFER_BIT']; }, 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(function (opt) { return gl[opt.toUpperCase()]; }));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier) {\n    if (multiplier === void 0) { multiplier = 1; }\n    multiplier = Math.max(1, multiplier);\n    var width = canvas.clientWidth * multiplier | 0;\n    var height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width ||\n        canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","export var and = function (p1, p2) {\n    return function (a, b) { return p1(a, b) && p2(a, b); };\n};\nexport var not = function (p) {\n    return function (a, b) { return !p(a, b); };\n};\nexport var defined = function (a) { return a != null; };\nexport var notEmpty = function (a) { return a && a.length; };\nexport var unequal = function (a, b) { return a !== b; };\nexport var equal = function (a, b) { return a === b; };\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    var k1 = Object.keys(obj1);\n    var k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (var _i = 0, k1_1 = k1; _i < k1_1.length; _i++) {\n        var key = k1_1[_i];\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { zip } from '../utils/sequence';\nimport { partial } from '../fp/core';\nimport { lerp } from '../math/core';\nimport { add, normalize, cross, sub, cross2D } from '../math/vectors';\nexport function interpolate(fn, step, start, end) {\n    return zip(partial(fn, step), start, end);\n}\nexport var lerpVecs = partial(interpolate, lerp);\nexport function split(part, _a) {\n    var v1 = _a[0], v2 = _a[1];\n    var p = lerpVecs(part, v1, v2);\n    return [[v1, p], [p, v2]];\n}\nexport function translate(vec, p) {\n    return p.map(function (v) { return add(vec, v); });\n}\nexport function rotateLeftInPlace(p) {\n    p.unshift(p.pop());\n    return p;\n}\nexport function rotateRightInPlace(p) {\n    p.push(p.shift());\n    return p;\n}\nexport function rotateLeft(p) {\n    return rotateLeftInPlace(p.concat());\n}\nexport function rotateRight(p) {\n    return rotateRightInPlace(p.concat());\n}\nexport function normal(p) {\n    return normalize(cross(sub(p[0], p[1]), sub(p[2], p[1])));\n}\nexport function side(e, v) {\n    return cross2D(sub(v, e[0]), sub(e[1], e[0]));\n}\n//# sourceMappingURL=primitives.js.map","import { Painter, Form, Shade, Sketch, Layer } from 'tvs-painter'\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\tif (forms[id]) {\n\t\treturn forms[id]\n\t}\n\treturn forms[id] = painter.createForm()\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\tif (shades[id]) {\n\t\treturn shades[id]\n\t}\n\treturn shades[id] = painter.createShade()\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\tif (sketches[id]) {\n\t\treturn sketches[id]\n\t}\n\treturn sketches[id] = painter.createSketch()\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\tif (drawingLayers[id]) {\n\t\treturn drawingLayers[id]\n\t}\n\treturn drawingLayers[id] = painter.createDrawingLayer()\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\tif (staticLayers[id]) {\n\t\treturn staticLayers[id]\n\t}\n\treturn staticLayers[id] = painter.createStaticLayer()\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\tif (effectLayers[id]) {\n\t\treturn effectLayers[id]\n\t}\n\treturn effectLayers[id] = painter.createEffectLayer()\n}\n","import { lerpVecs, translate, rotateLeft } from './primitives';\nimport { times, flatten } from '../utils/sequence';\nexport function top(q) {\n    return [q[0], q[1]];\n}\nexport function right(q) {\n    return [q[1], q[2]];\n}\nexport function bottom(q) {\n    return [q[2], q[3]];\n}\nexport function left(q) {\n    return [q[3], q[0]];\n}\nexport function combineEdges(e1, e2) {\n    return e1.concat(rotateLeft(e2));\n}\nexport function extrudeTop(direction, edge) {\n    return combineEdges(translate(direction, edge), edge);\n}\nexport function extrudeRight(direction, edge) {\n    return rotateLeft(extrudeTop(direction, edge));\n}\nexport function extrudeBottom(direction, edge) {\n    return combineEdges(edge, translate(direction, edge));\n}\nexport function extrudeLeft(direction, edge) {\n    return rotateLeft(extrudeBottom(direction, edge));\n}\nexport function divideHorizontal(leftRatio, rightRatio, _a) {\n    var v1 = _a[0], v2 = _a[1], v3 = _a[2], v4 = _a[3];\n    var v11 = lerpVecs(leftRatio, v1, v4);\n    var v22 = lerpVecs(rightRatio, v2, v3);\n    return [[v1, v2, v22, v11], [v11, v22, v3, v4]];\n}\nexport function divideVertical(topRatio, bottomRatio, _a) {\n    var v1 = _a[0], v2 = _a[1], v3 = _a[2], v4 = _a[3];\n    var v11 = lerpVecs(topRatio, v1, v2);\n    var v44 = lerpVecs(bottomRatio, v4, v3);\n    return [[v1, v11, v44, v4], [v11, v2, v3, v44]];\n}\nexport var quadTriangles = [[0, 2, 1], [0, 3, 2]];\nexport function triangulate(quadCount) {\n    return flatten(times(function (i) { return quadTriangles.map((function (t) { return t.map(function (j) { return 4 * i + j; }); })); }, quadCount));\n}\n//# sourceMappingURL=quad.js.map","var _a, _b, _c;\nimport { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    var bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    var bindPoint = getBindPointForSamplerType(type);\n    var units = new Int32Array(size);\n    for (var i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (var index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nvar typeMap = (_a = {},\n    _a[GL_TYPE.FLOAT] = { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    _a[GL_TYPE.FLOAT_VEC2] = { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    _a[GL_TYPE.FLOAT_VEC3] = { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    _a[GL_TYPE.FLOAT_VEC4] = { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    _a[GL_TYPE.INT] = { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    _a[GL_TYPE.INT_VEC2] = { Type: Int32Array, size: 8, setter: intVec2Setter },\n    _a[GL_TYPE.INT_VEC3] = { Type: Int32Array, size: 12, setter: intVec3Setter },\n    _a[GL_TYPE.INT_VEC4] = { Type: Int32Array, size: 16, setter: intVec4Setter },\n    _a[GL_TYPE.UNSIGNED_INT] = { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    _a[GL_TYPE.UNSIGNED_INT_VEC2] = { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    _a[GL_TYPE.UNSIGNED_INT_VEC3] = { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    _a[GL_TYPE.UNSIGNED_INT_VEC4] = { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    _a[GL_TYPE.BOOL] = { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    _a[GL_TYPE.BOOL_VEC2] = { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    _a[GL_TYPE.BOOL_VEC3] = { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    _a[GL_TYPE.BOOL_VEC4] = { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    _a[GL_TYPE.FLOAT_MAT2] = { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    _a[GL_TYPE.FLOAT_MAT3] = { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    _a[GL_TYPE.FLOAT_MAT4] = { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    _a[GL_TYPE.FLOAT_MAT2X3] = { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    _a[GL_TYPE.FLOAT_MAT2X4] = { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    _a[GL_TYPE.FLOAT_MAT3X2] = { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    _a[GL_TYPE.FLOAT_MAT3X4] = { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    _a[GL_TYPE.FLOAT_MAT4X2] = { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    _a[GL_TYPE.FLOAT_MAT4X3] = { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    _a[GL_TYPE.SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    _a[GL_TYPE.SAMPLER_2D_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a[GL_TYPE.SAMPLER_2D_ARRAY_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a[GL_TYPE.SAMPLER_CUBE_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    _a[GL_TYPE.INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    _a[GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    _a);\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    var defaultSize = typeInfo.size;\n    var count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        var numComponents = defaultSize;\n        var size = numComponents / count;\n        var typeInfo = typeMap[GL_TYPE.FLOAT];\n        var stride = typeInfo.size * numComponents;\n        var normalize = b.normalize || false;\n        var offset = b.offset || 0;\n        var rowOffset = stride / count;\n        for (var i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nvar attrTypeMap = (_b = {},\n    _b[GL_TYPE.FLOAT] = { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.FLOAT_VEC2] = { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.FLOAT_VEC3] = { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.FLOAT_VEC4] = { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.INT] = { size: 4, setter: intAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.INT_VEC2] = { size: 8, setter: intAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.INT_VEC3] = { size: 12, setter: intAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.INT_VEC4] = { size: 16, setter: intAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.UNSIGNED_INT] = { size: 4, setter: intAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.UNSIGNED_INT_VEC2] = { size: 8, setter: intAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.UNSIGNED_INT_VEC3] = { size: 12, setter: intAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.UNSIGNED_INT_VEC4] = { size: 16, setter: intAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.BOOL] = { size: 4, setter: intAttribSetter, itemSize: 1 },\n    _b[GL_TYPE.BOOL_VEC2] = { size: 8, setter: intAttribSetter, itemSize: 2 },\n    _b[GL_TYPE.BOOL_VEC3] = { size: 12, setter: intAttribSetter, itemSize: 3 },\n    _b[GL_TYPE.BOOL_VEC4] = { size: 16, setter: intAttribSetter, itemSize: 4 },\n    _b[GL_TYPE.FLOAT_MAT2] = { size: 4, setter: matAttribSetter, count: 2 },\n    _b[GL_TYPE.FLOAT_MAT3] = { size: 9, setter: matAttribSetter, count: 3 },\n    _b[GL_TYPE.FLOAT_MAT4] = { size: 16, setter: matAttribSetter, count: 4 },\n    _b);\nexport function createUniformSetters(gl, program) {\n    var textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        var location = gl.getUniformLocation(program, uniformInfo.name);\n        var isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        var type = uniformInfo.type;\n        var typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        var setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            var unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter: setter, location: location };\n    }\n    var uniformSetters = {};\n    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (var i = 0; i < numUniforms; ++i) {\n        var uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            break;\n        }\n        var name_1 = uniformInfo.name;\n        // remove the array suffix.\n        if (name_1.substr(-3) === '[0]') {\n            name_1 = name_1.substr(0, name_1.length - 3);\n        }\n        if (program) {\n            var setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name_1] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    var attribSetters = {};\n    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (var i = 0; i < numAttribs; i++) {\n        var attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        var location_1 = gl.getAttribLocation(program, attribInfo.name);\n        var typeInfo = attrTypeMap[attribInfo.type];\n        var setter = typeInfo.setter(gl, location_1, typeInfo);\n        attribSetters[attribInfo.name] = { setter: setter, location: location_1 };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport var glTypeToTypedArray = (_c = {},\n    _c[GL_TYPE.BYTE] = Int8Array,\n    _c[GL_TYPE.UNSIGNED_BYTE] = Uint8Array,\n    _c[GL_TYPE.SHORT] = Int16Array,\n    _c[GL_TYPE.UNSIGNED_SHORT] = Uint16Array,\n    _c[GL_TYPE.INT] = Int32Array,\n    _c[GL_TYPE.UNSIGNED_INT] = Uint32Array,\n    _c[GL_TYPE.FLOAT] = Float32Array,\n    _c[GL_TYPE.UNSIGNED_SHORT_4_4_4_4] = Uint16Array,\n    _c[GL_TYPE.UNSIGNED_SHORT_5_5_5_1] = Uint16Array,\n    _c[GL_TYPE.UNSIGNED_SHORT_5_6_5] = Uint16Array,\n    _c[GL_TYPE.HALF_FLOAT] = Uint16Array,\n    _c[GL_TYPE.UNSIGNED_INT_2_10_10_10_REV] = Uint32Array,\n    _c[GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array,\n    _c[GL_TYPE.UNSIGNED_INT_5_9_9_9_REV] = Uint32Array,\n    _c[GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array,\n    _c[GL_TYPE.UNSIGNED_INT_24_8] = Uint32Array,\n    _c);\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data, oldData) {\n    if (data === void 0) { data = {}; }\n    if (oldData === void 0) { oldData = {}; }\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        var wrapS = void 0, wrapT = void 0;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    var texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        var glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL: function () { } };\n        var bufferAttachments = [];\n        for (var i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[\"COLOR_ATTACHMENT\" + i + \"_WEBGL\"]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (var i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            var texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        var texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    var err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (var _i = 0, _a = target.textures; _i < _a.length; _i++) {\n        var texture = _a[_i];\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (var _i = 0, _a = settings.enable; _i < _a.length; _i++) {\n            var setting = _a[_i];\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (var _b = 0, _c = settings.disable; _b < _c.length; _b++) {\n            var setting = _c[_b];\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (var _i = 0, _a = settings.enable; _i < _a.length; _i++) {\n            var setting = _a[_i];\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (var _b = 0, _c = settings.disable; _b < _c.length; _b++) {\n            var setting = _c[_b];\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nexport function create(gl) {\n    var form = {};\n    form.update = function (data) {\n        if (data.drawType) {\n            form.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            form.itemCount = data.itemCount;\n        }\n        var attribs = form.attribs || {};\n        for (var id in data.attribs) {\n            var attribData = data.attribs[id];\n            if (attribs[id] == null) {\n                attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        form.attribs = attribs;\n        if (data.elements) {\n            var buffer = data.elements.buffer;\n            if (form.elements == null) {\n                form.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            form.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, form.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return form;\n    };\n    form.destroy = function () {\n        for (var id in form.attribs) {\n            gl.deleteBuffer(form.attribs[id].buffer);\n        }\n        if (form.elements) {\n            gl.deleteBuffer(form.elements.buffer);\n        }\n        return form;\n    };\n    return form;\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nexport function create(gl) {\n    var shade = {\n        program: gl.createProgram(),\n        frag: gl.createShader(gl.FRAGMENT_SHADER),\n        vert: gl.createShader(gl.VERTEX_SHADER)\n    };\n    gl.attachShader(shade.program, shade.vert);\n    gl.attachShader(shade.program, shade.frag);\n    shade.update = function (data) {\n        var frag = (data.frag && data.frag.trim()) || shade.fragSource;\n        var vert = (data.vert && data.vert.trim()) || shade.vertSource;\n        if (!(frag && vert)) {\n            return shade;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(shade.vert, vert);\n        gl.shaderSource(shade.frag, frag);\n        gl.compileShader(shade.vert);\n        gl.compileShader(shade.frag);\n        if (!gl.getShaderParameter(shade.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(shade.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(shade.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(shade.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(shade.program);\n        var linked = gl.getProgramParameter(shade.program, gl.LINK_STATUS);\n        if (!linked) {\n            var lastError = gl.getProgramInfoLog(shade.program);\n            console.error('Error in program linking:', lastError);\n        }\n        shade.uniformSetters = createUniformSetters(gl, shade.program);\n        shade.attributeSetters = createAttributeSetters(gl, shade.program);\n        shade.fragSource = frag;\n        shade.vertSource = vert;\n        return shade;\n    };\n    shade.destroy = function () {\n        gl.deleteProgram(shade.program);\n        gl.deleteShader(shade.frag);\n        gl.deleteShader(shade.vert);\n    };\n    return shade;\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map(function (line, i) { return (i + 1) + ': ' + line; })\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","export function create() {\n    var sketch = {};\n    sketch.update = function (data) {\n        if (data.drawSettings) {\n            sketch.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            sketch.form = data.form;\n        }\n        if (data.shade) {\n            sketch.shade = data.shade;\n        }\n        if (data.uniforms) {\n            sketch.uniforms = data.uniforms;\n        }\n        return sketch;\n    };\n    sketch.destroy = function () {\n        sketch.form && sketch.form.destroy();\n        sketch.shade && sketch.shade.destroy();\n    };\n    return sketch;\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nexport function createStatic(gl) {\n    var layer = {};\n    var texture = gl.createTexture();\n    layer.textures = [texture],\n        layer.data = {};\n    layer.texture = function () { return texture; };\n    layer.update = function (data) {\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        setTextureParams(gl, data, layer.data);\n        if (data.asset) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        Object.assign(layer.data, data);\n        return layer;\n    };\n    layer.destroy = function () {\n        gl.deleteTexture(texture);\n    };\n    return layer;\n}\nexport function createDrawing(gl) {\n    var layer = {};\n    layer.textures = [],\n        layer.data = {};\n    layer.texture = function (i) {\n        if (i === void 0) { i = 0; }\n        return layer.textures[i];\n    };\n    layer.update = function (data) {\n        if (data.buffered && !layer.target) {\n            layer.target = {\n                width: data.width || gl.canvas.width,\n                height: data.height || gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            };\n            updateRenderTarget(gl, layer.target, data, layer.data);\n            layer.textures = layer.target.textures;\n        }\n        else if (layer.target && data.width && data.height) {\n            layer.target.width = data.width;\n            layer.target.height = data.height;\n            updateRenderTarget(gl, layer.target, data, layer.data);\n        }\n        if (data.sketches) {\n            layer.sketches = data.sketches;\n        }\n        if (data.frag) {\n            var sketch = layer.sketches && layer.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            layer.uniforms = data.uniforms;\n        }\n        Object.assign(layer.data, data);\n        return layer;\n    };\n    layer.destroy = function () {\n        if (layer.sketches) {\n            for (var _i = 0, _a = layer.sketches; _i < _a.length; _i++) {\n                var sketch = _a[_i];\n                sketch.destroy();\n            }\n        }\n        if (layer.target) {\n            destroyRenderTarget(gl, layer.target);\n        }\n        else {\n            for (var _b = 0, _c = layer.textures; _b < _c.length; _b++) {\n                var texture = _c[_b];\n                gl.deleteTexture(texture);\n            }\n        }\n    };\n    return layer;\n}\n//# sourceMappingURL=layer.js.map","var _a;\nimport * as constants from './contants';\nexport var defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport var defaultForms = {\n    renderQuad: {\n        attribs: (_a = {},\n            _a[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            _a[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            },\n            _a),\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport var defaultShaders = {\n    basicEffect: {\n        vert: \"\\n\\t\\t\\tattribute vec2 \" + constants.GEOMETRY_PROP_POSITION + \";\\n\\t\\t\\tattribute vec2 \" + constants.GEOMETRY_PROP_UV + \";\\n\\t\\t\\tvarying vec2 \" + constants.VARYING_UV_COORDS + \";\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\" + constants.VARYING_UV_COORDS + \" = \" + constants.GEOMETRY_PROP_UV + \";\\n\\t\\t\\t\\tgl_Position = vec4(\" + constants.GEOMETRY_PROP_POSITION + \", 0.0, 1.0);\\n\\t\\t\\t}\",\n        frag: \"precision mediump float;\\n\\t\\t\\tuniform sampler2D \" + constants.UNIFORM_SOURCE_TEXTURE + \";\\n\\t\\t\\tvarying vec2 \" + constants.VARYING_UV_COORDS + \";\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tgl_FragColor = texture2D(\" + constants.UNIFORM_SOURCE_TEXTURE + \", \" + constants.VARYING_UV_COORDS + \");\\n\\t\\t\\t}\"\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport * as form from './form';\nimport * as shade from './shade';\nimport * as sketch from './sketch';\nimport * as layer from './layer';\nimport { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nexport function create(gl) {\n    var targets = [\n        {},\n        {}\n    ];\n    var defaultSettings = getDefaultLayerSettings(gl);\n    var renderQuad = form.create(gl).update(defaultForms.renderQuad);\n    var createFlatSketch = function () { return sketch.create().update({\n        form: renderQuad,\n        shade: shade.create(gl).update(defaultShaders.basicEffect)\n    }); };\n    var result = createFlatSketch();\n    var resize = function (multiplier, forceUpdateTargets) {\n        if (multiplier === void 0) { multiplier = 1; }\n        if (forceUpdateTargets === void 0) { forceUpdateTargets = false; }\n        var canvas = gl.canvas;\n        var needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            targets.forEach(function (t) {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(gl, t, defaultTextureSettings);\n            });\n        }\n        return painter;\n    };\n    resize(1, true);\n    var destroy = function () {\n        result.destroy();\n        for (var _i = 0, targets_1 = targets; _i < targets_1.length; _i++) {\n            var target = targets_1[_i];\n            destroyRenderTarget(gl, target);\n        }\n    };\n    var painter = {\n        gl: gl,\n        updateDrawSettings: function (drawSettings) {\n            applyDrawSettings(gl, __assign({}, defaultSettings, drawSettings));\n            return painter;\n        },\n        createForm: function () { return form.create(gl); },\n        createShade: function () { return shade.create(gl); },\n        createSketch: function () { return sketch.create(); },\n        createFlatSketch: createFlatSketch,\n        createStaticLayer: function () { return layer.createStatic(gl); },\n        createDrawingLayer: function () { return layer.createDrawing(gl); },\n        createEffectLayer: function () { return layer.createDrawing(gl).update({\n            sketches: [createFlatSketch()]\n        }); },\n        draw: function (sketch, globalUniforms) {\n            draw(gl, sketch, null, globalUniforms);\n            return painter;\n        },\n        compose: function () {\n            var layers = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                layers[_i] = arguments[_i];\n            }\n            composeLayers(gl, layers, targets, result);\n            return painter;\n        },\n        resize: resize, destroy: destroy\n    };\n    return painter;\n}\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    var shade = sketch.shade, uniforms = sketch.uniforms, form = sketch.form, drawSettings = sketch.drawSettings;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (var _i = 0, uniforms_1 = uniforms; _i < uniforms_1.length; _i++) {\n            var instanceUniforms = uniforms_1[_i];\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (var name_1 in form.attribs) {\n        var setter = shade.attributeSetters[name_1];\n        if (setter) {\n            setter.setter(form.attribs[name_1]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (var name_2 in uniforms) {\n        var setter = shade.uniformSetters[name_2];\n        if (setter) {\n            var value = uniforms[name_2];\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    var last = layers.length - 1;\n    var _loop_1 = function (i) {\n        var layer_1 = layers[i];\n        var render = function (uniforms, directRender) {\n            var source = targets[0];\n            var target = targets[1];\n            var renderToStack = !directRender && layer_1.target == null;\n            if (directRender) {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            }\n            else if (layer_1.target) {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, layer_1.target.frameBuffer);\n                gl.viewport(0, 0, layer_1.target.width, layer_1.target.height);\n            }\n            else {\n                gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            }\n            if (layer_1.data.drawSettings) {\n                applyDrawSettings(gl, layer_1.data.drawSettings);\n            }\n            if (layer_1.sketches) {\n                for (var _i = 0, _a = layer_1.sketches; _i < _a.length; _i++) {\n                    var sketch_1 = _a[_i];\n                    draw(gl, sketch_1, source.textures[0], uniforms);\n                }\n            }\n            else {\n                // Display static texture\n                draw(gl, result, null, { source: layer_1.texture() });\n            }\n            if (layer_1.data.drawSettings) {\n                revertDrawSettings(gl, layer_1.data.drawSettings);\n            }\n            if (renderToStack) {\n                targets[0] = target;\n                targets[1] = source;\n            }\n        };\n        if (Array.isArray(layer_1.uniforms)) {\n            var newLast = last + layer_1.uniforms.length - 1;\n            for (var j = 0; j < layer_1.uniforms.length; j++) {\n                var directRender = i + j === newLast;\n                render(layer_1.uniforms[j], directRender);\n            }\n        }\n        else {\n            var directRender = i === last;\n            render(layer_1.uniforms, directRender);\n        }\n    };\n    for (var i = 0; i < layers.length; i++) {\n        _loop_1(i);\n    }\n}\n//# sourceMappingURL=painter.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    var state = {\n        size: { width: 0, height: 0 }\n    };\n    var destroy = windowSize(function (s) { return state.size = s; });\n    return { state: state, destroy: destroy };\n}\n//# sourceMappingURL=dom.js.map","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { mat4, vec3 } from 'gl-matrix';\nimport { Keys } from 'tvs-libs/dist/lib/events/keyboard';\nvar defaultProps = {\n    fovy: Math.PI * 0.6,\n    aspect: window.innerWidth / window.innerHeight,\n    near: 0.1,\n    far: 1000,\n    needsUpdatePerspective: true,\n    rotateX: 0,\n    rotateY: 0,\n    moveForward: 0,\n    moveLeft: 0,\n    moveUp: 0,\n    needsUpdateView: false\n};\nexport function create(opts) {\n    if (opts === void 0) { opts = {}; }\n    var props = __assign({}, defaultProps, opts);\n    var state = {\n        view: mat4.create(),\n        perspective: mat4.create(),\n        rotationX: mat4.create(),\n        rotationY: mat4.create(),\n        position: [0, 0, 0]\n    };\n    var cam = { props: props, state: state };\n    update(cam);\n    return cam;\n}\nexport function update(_a) {\n    var props = _a.props, _b = _a.state, view = _b.view, perspective = _b.perspective, rotationX = _b.rotationX, rotationY = _b.rotationY, position = _b.position;\n    if (props.needsUpdatePerspective) {\n        props.needsUpdatePerspective = false;\n        mat4.perspective(perspective, props.fovy, props.aspect, props.near, props.far);\n    }\n    var needsUpdateView = props.needsUpdateView;\n    if (props.rotateX) {\n        mat4.rotateX(rotationX, rotationX, props.rotateX);\n        props.rotateX = 0;\n        needsUpdateView = true;\n    }\n    if (props.rotateY) {\n        mat4.rotateY(rotationY, rotationY, props.rotateY);\n        props.rotateY = 0;\n        needsUpdateView = true;\n    }\n    if (props.moveForward) {\n        var v = vec3.fromValues(rotationY[8], rotationY[9], rotationY[10]);\n        vec3.add(position, position, vec3.scale(v, v, -props.moveForward));\n        props.moveForward = 0;\n        needsUpdateView = true;\n    }\n    if (props.moveLeft) {\n        var v = vec3.fromValues(rotationY[0], rotationY[1], rotationY[2]);\n        vec3.add(position, position, vec3.scale(v, v, -props.moveLeft));\n        props.moveLeft = 0;\n        needsUpdateView = true;\n    }\n    if (props.moveUp) {\n        var v = vec3.fromValues(rotationY[4], rotationY[5], rotationY[6]);\n        vec3.add(position, position, vec3.scale(v, v, props.moveUp));\n        props.moveUp = 0;\n        needsUpdateView = true;\n    }\n    if (needsUpdateView) {\n        mat4.fromTranslation(view, position);\n        mat4.multiply(view, view, rotationY);\n        mat4.multiply(view, view, rotationX);\n        mat4.invert(view, view);\n        props.needsUpdateView = false;\n    }\n    return needsUpdateView;\n}\nexport function updatePosFromKeys(camera, speed, keys) {\n    if (!keys)\n        return;\n    if (keys[Keys.UP] || keys[Keys.W]) {\n        camera.props.moveForward = speed;\n    }\n    if (keys[Keys.DOWN] || keys[Keys.S]) {\n        camera.props.moveForward = -speed;\n    }\n    if (keys[Keys.LEFT] || keys[Keys.A]) {\n        camera.props.moveLeft = speed;\n    }\n    if (keys[Keys.RIGHT] || keys[Keys.D]) {\n        camera.props.moveLeft = -speed;\n    }\n}\nexport function updateRotFromMouse(camera, speed, m) {\n    camera.state.mouse = camera.state.mouse || { x: 0, y: 0 };\n    var deltaX = m.drag.x === 0 ? m.drag.x : camera.state.mouse.x - m.drag.x;\n    var deltaY = m.drag.y === 0 ? m.drag.y : camera.state.mouse.y - m.drag.y;\n    camera.state.mouse.x = m.drag.x;\n    camera.state.mouse.y = m.drag.y;\n    camera.props.rotateX = deltaY * speed;\n    camera.props.rotateY = deltaX * speed;\n}\n//# sourceMappingURL=camera.js.map","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport var DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","export function curry(fn) {\n    function curried(a, b) {\n        if (typeof b !== 'undefined')\n            return fn(a, b);\n        return function (b) { return fn(a, b); };\n    }\n    return curried;\n}\nexport function partial(fn) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    return fn.bind.apply(fn, [null].concat(args));\n}\n//# sourceMappingURL=core.js.map","export var Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    var cb = callback || opts;\n    var _a = opts, _b = _a.element, element = _b === void 0 ? document : _b, enableRightButton = _a.enableRightButton;\n    var state = {\n        pressed: {},\n        drag: { x: 0, y: 0 }\n    };\n    var x = 0, y = 0, dragging = false;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = e.clientX;\n            y = e.clientY;\n            dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts) {\n    if (opts === void 0) { opts = {}; }\n    var observer = {\n        Buttons: Buttons,\n        state: {},\n        destroy: function () { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import * as constants from '../contants';\nimport { flatten } from 'tvs-libs/dist/lib/utils/sequence';\nexport var STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport var STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport var STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport var STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    var geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0\n    };\n    for (var prop in stackglGeometry) {\n        var arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            var buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer: buffer },\n                itemCount: buffer.length\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvec3 color = (vNormal.rgb + 1.0) / 2.0;\\n\\tgl_FragColor = vec4(vColor, 1.0);\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvNormal = normal;\\n\\tvColor = color;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","import { getContext } from 'tvs-painter/dist/lib/utils/context'\nimport { create } from 'tvs-painter/dist/lib/painter'\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const gl = getContext(canvas)\n\nexport const painter = create(gl)\n","import { create } from 'tvs-utils/dist/lib/vr/camera'\nimport { canvas } from './context'\n\n\nexport const moveSpeed = 0.05\n\nexport const lookSpeed = 0.002\n\nexport const camera = create({\n\tfovy: Math.PI * 0.4,\n\taspect: canvas.width / canvas.height,\n\tmoveForward: -30\n})\n","import { mat4, quat } from 'gl-matrix'\nimport { repeat } from 'shared-utils/scheduler'\n\n\nlet time = 0\n\nrepeat(tpf => time += tpf, 'updateTime')\n\nexport const wallsTransform = mat4.create()\nconst rotation = quat.create()\n\nrepeat(() => {\n\tquat.fromEuler(\n\t\trotation,\n\t\tMath.sin(0.0007 * time) * 1.1,\n\t\ttime * 0.001,\n\t\tMath.sin(0.0008 * time) * 1.1\n\t)\n\tmat4.fromRotationTranslationScaleOrigin(\n\t\twallsTransform, rotation, [0, 0, 0], [1, 1, 1], [0, 100, 0]\n\t)\n}, 'updateRotation')\n\n\nexport const floorTransform = mat4.create()\n\n","import { convertStackGLGeometry } from 'tvs-painter/dist/lib/utils/stackgl'\nimport { triangulate, divideVertical, divideHorizontal, Quad, extrudeBottom, extrudeRight, right } from 'tvs-libs/dist/lib/geometry/quad'\nimport { flatten, times } from 'tvs-libs/dist/lib/utils/sequence'\nimport { partial } from 'tvs-libs/dist/lib/fp/core'\nimport { normalRand } from 'tvs-libs/dist/lib/math/random'\nimport { normal } from 'tvs-libs/dist/lib/geometry/primitives'\nimport { getForm } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nconst vertDiv = partial(divideVertical, 0.5, 0.5)\nconst horzDiv = partial(divideHorizontal, 0.5, 0.5)\n\nfunction subdivide (quads: Quad[], times = 1): Quad[] {\n\tfor (let i = 0; i < times; i++) {\n\t\tquads = flatten(quads.map(q => flatten(vertDiv(q).map(horzDiv))))\n\t}\n\treturn quads\n}\n\n\nfunction randomColor () {\n\treturn [normalRand(), normalRand(), normalRand()]\n}\n\nconst boxSliceCount = 10\n\nfunction randomDivide (q: Quad, sliceCount: number) {\n\tconst quads: Quad[] = []\n\tlet rest = q\n\tfor (let i = sliceCount; i > 1; i--) {\n\t\tconst upRatio = 1 / i + (Math.random() * 2 - 1) * 0.5 / i\n\t\tconst downRatio = 1 / i + (Math.random() * 2 - 1) * 0.5 / i\n\t\tconst [left, right] = divideVertical(upRatio, downRatio, rest)\n\t\tquads.push(left)\n\t\trest = right\n\t}\n\tquads.push(rest)\n\treturn quads\n}\n\n\nconst colors = times(randomColor , 4 * boxSliceCount)\n\nconst quad = extrudeBottom([0, -9, 0], [[-10, 10, -10], [10, 10, -10]])\n\nfunction makeSideSegments (q: Quad, count: number) {\n\treturn randomDivide(q, count).map(q => flatten(subdivide(horzDiv(q))))\n}\n\nconst box = (() => {\n\tconst count = boxSliceCount\n\tconst bk = quad\n\tconst rt = extrudeRight([0, 0, 20], right(bk))\n\tconst ft = extrudeRight([-20, 0, 0], right(rt))\n\tconst lf = extrudeRight([0, 0, -20], right(ft))\n\treturn [\n\t\tmakeSideSegments(bk, count),\n\t\tmakeSideSegments(rt, count),\n\t\tmakeSideSegments(ft, count),\n\t\tmakeSideSegments(lf, count)\n\t]\n})()\n\n\nexport const faceNormals = box.map(q => normal(q[1]))\n\nexport const wallsForm = getForm(painter, 'wallsForm')\n\t.update(\n\t\tconvertStackGLGeometry({\n\t\t\tposition: flatten(flatten(box)),\n\t\t\t// color: flatten(b.map((side) => flatten(side.map((slice) => flatten(slice.map((q) => (q as any[]).map(() => pickRandom(c)))))))),\n\t\t\tcolor: flatten(box.map((side, i) => flatten(side.map((slice, j) => slice.map(() => colors[i * boxSliceCount + j]))))),\n\t\t\tnormal: flatten(box.map((side, i) => flatten(side).map(() => faceNormals[i]))),\n\t\t\tcells: triangulate(4 * boxSliceCount * 4 * 2)\n\t\t})\n\t)\n\n\nexport const floorQuads = subdivide([extrudeBottom([0, 0, -200], [[-100, -5, 100], [100, -5, 100]])], 3)\n\nexport const groundForm = getForm(painter, 'groundForm')\n\t.update(\n\t\tconvertStackGLGeometry({\n\t\t\tposition: flatten(floorQuads),\n\t\t\tnormal: flatten(floorQuads).map(() => [0, 1, 0]),\n\t\t\t// color: flatten(floorQuads).map(randomColor),\n\t\t\tcolor: flatten(floorQuads).map(() => [1, 1, 1]),\n\t\t\tcells: triangulate(floorQuads.length)\n\t\t})\n\t)\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n","import vert from './glsl/base.vert'\nimport frag from './glsl/base.frag'\nimport { getShade } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const baseShade = getShade(painter, 'baseShade')\n\t.update({\n\t\tvert, frag\n\t})\n\n\nexport const groundShade = getShade(painter, 'groundShade')\n\t.update({\n\t\tvert, frag\n\t})\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n","import * as init from './state'\nimport { camera } from './camera'\nimport { gl, painter } from './context'\nimport { getSketch, getDrawingLayer } from 'shared-utils/painterState'\nimport { wallsForm, groundForm } from './geometries'\nimport { baseShade, groundShade } from './shaders'\n\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1],\n\tenable: [gl.DEPTH_TEST]\n})\n\n\n// ===== objects =====\n\nexport const wallsSketch = getSketch(painter, 'wallsSketch')\n\t.update({\n\t\tform: wallsForm,\n\t\tshade: baseShade,\n\t\tuniforms: {\n\t\t\ttransform: init.wallsTransform\n\t\t}\n\t})\n\n\nexport const groundSketch = getSketch(painter, 'groundSketch')\n\t.update({\n\t\tform: groundForm,\n\t\tshade: groundShade,\n\t\tuniforms: {\n\t\t\ttransform: init.floorTransform\n\t\t}\n\t})\n\n\n// ===== layers =====\n\nexport const scene = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [groundSketch, wallsSketch],\n\t\tuniforms: {\n\t\t\tview: camera.state.view,\n\t\t\tprojection: camera.state.perspective\n\t\t},\n\t\tdrawSettings: {\n\t\t\tclearBits: gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT\n\t\t}\n\t})\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n\n","import { keyboard, Keys } from 'tvs-libs/dist/lib/events/keyboard'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { painter, canvas } from './context'\nimport { once } from 'shared-utils/scheduler'\nimport { camera, lookSpeed, moveSpeed } from './camera'\n\n\n\nwindowSize(() => once(() => {\n\tpainter.resize()\n\tcamera.props.aspect = canvas.width / canvas.height\n\tcamera.props.needsUpdatePerspective = true\n}, 'resize'))\n\n\nlet oX = 0, oY = 0\nmouse({element: canvas, enableRightButton: true}, m => {\n\tconst deltaX = m.drag.x === 0 ? m.drag.x : oX - m.drag.x\n\tconst deltaY = m.drag.y === 0 ? m.drag.y : oY - m.drag.y\n\toX = m.drag.x\n\toY = m.drag.y\n\tcamera.props.rotateX = deltaY * lookSpeed\n\tcamera.props.rotateY = deltaX * lookSpeed\n})\n\n\nkeyboard(keys => {\n\tif (!keys) return\n\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\tcamera.props.moveForward = moveSpeed\n\t}\n\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\tcamera.props.moveForward = -moveSpeed\n\t}\n\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\tcamera.props.moveLeft = moveSpeed\n\t}\n\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\tcamera.props.moveLeft = -moveSpeed\n\t}\n})\n","import { repeat } from 'shared-utils/scheduler'\nimport { update } from 'tvs-utils/dist/lib/vr/camera'\nimport { camera } from './camera'\nimport { painter } from './context'\nimport { scene } from './renderer'\nimport './events'\n\n\nrepeat(() => {\n\tupdate(camera)\n\tpainter.compose(scene)\n}, 'render')\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n"],"sourceRoot":""}