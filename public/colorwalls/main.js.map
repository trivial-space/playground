{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../libs/utils/dist/lib/vr/camera.js","webpack:///./colorwalls/context.ts","webpack:///./colorwalls/camera.ts","webpack:///./colorwalls/state.ts","webpack:///./colorwalls/geometries.ts","webpack:///./colorwalls/shaders.ts","webpack:///./colorwalls/renderer.ts","webpack:///./colorwalls/events.ts","webpack:///./colorwalls/index.ts","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/geometry/primitives.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/math/core.js","webpack:///../libs/libs/dist/lib/geometry/quad.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/libs/dist/lib/fp/core.js","webpack:///../libs/painter/dist/lib/utils/stackgl.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///./colorwalls/glsl/base.vert","webpack:///./colorwalls/glsl/base.frag","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/math/random.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","__assign","assign","arguments","length","defaultProps","fovy","Math","PI","aspect","window","innerWidth","innerHeight","near","far","needsUpdatePerspective","rotateX","rotateY","moveForward","moveLeft","moveUp","needsUpdateView","update","_a","props","_b","state","view","perspective","rotationX","rotationY","position","gl_matrix","v","fromValues","add","scale","fromTranslation","multiply","invert","canvas","document","getElementById","gl","context","context_painter","painter","camera_camera","opts","cam","width","height","time","scheduler","tpf","wallsTransform","lib_gl_matrix","rotation","fromEuler","sin","fromRotationTranslationScaleOrigin","floorTransform","vertDiv","core","quad","horzDiv","subdivide","quads","times","sequence","map","q","colors","random","geometries_quad","makeSideSegments","count","sliceCount","rest","upRatio","downRatio","left","right","push","randomDivide","box","bk","rt","ft","lf","faceNormals","primitives","wallsForm","painterState","stackgl","color","side","slice","j","normal","cells","floorQuads","groundForm","baseShade","vert","base_default","a","frag","glsl_base_default","groundShade","updateDrawSettings","clearColor","enable","DEPTH_TEST","wallsSketch","form","shade","uniforms","transform","groundSketch","scene","sketches","projection","drawSettings","clearBits","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","dom","resize","oX","oY","mouse","element","enableRightButton","deltaX","drag","x","deltaY","y","keyboard","keys","UP","W","DOWN","S","LEFT","A","RIGHT","D","compose","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","mat4_create","out","mat4_clone","mat4_copy","mat4_fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","a01","a02","a03","a12","a13","a23","mat4_invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4_adjoint","mat4_determinant","mat4_multiply","b","b0","b1","b2","b3","mat4_translate","z","mat4_scale","mat4_rotate","rad","axis","b12","b20","b21","b22","len","sqrt","cos","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","fromRotationTranslationScale","sx","sy","sz","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","yx","zx","zy","frustum","bottom","top","rl","tb","nf","f","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","mat4_str","mat4_frob","pow","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","fn","arg","vec4_create","quat_create","slerp","omega","cosom","sinom","scale0","scale1","quat_normalize","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","mat3_create","vec2_create","mat4_namespaceObject","vec3_namespaceObject","once","repeat","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","id","updates","requestAnimationFrame","unequal","equalArray","arr1","arr2","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","[object Object]","contants","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearDepth","clear","revertDrawSettings","formCounter","form_Form","this","drawType","itemCount","attribs","attribData","createBuffer","bufferData","storeType","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shadeCounter","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","line","join","sketchCounter","Sketch","destroy","staticLayerCount","layer_StaticLayer","_texture","asset","asset_lib","generateMipmap","drawingLayerCount","layer_DrawingLayer","targets","buffered","doubleBuffered","sketch","basicEffect","undefined","painter_Painter","renderQuad","createForm","result","createFlatSketch","multiplier","forceUpdateTargets","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","newLast","looping","directRender","renderLayer","composeLayers","defaultTexture","Error","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","debug","windowSize","callback","addEventListener","removeEventListener","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","lerpVecs","translate","rotateLeft","_utils_sequence__WEBPACK_IMPORTED_MODULE_0__","_fp_core__WEBPACK_IMPORTED_MODULE_1__","_math_core__WEBPACK_IMPORTED_MODULE_2__","_math_vectors__WEBPACK_IMPORTED_MODULE_3__","step","start","end","unshift","pop","rotateLeftInPlace","concat","Buttons","MIDDLE","cb","pressed","dX","dY","dragging","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","set","getState","addSystem","dispatch","baseEvents","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_4__","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_5__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","device","cancelWindow","cancelMouse","cancelKeys","sizeMultiplier","RESIZE","k","init","forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","prop","val","reset","systems","FRAME","sign","num","clamp","extrudeRight","extrudeBottom","divideHorizontal","divideVertical","quadTriangles","triangulate","_primitives__WEBPACK_IMPORTED_MODULE_0__","_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","combineEdges","e1","e2","direction","edge","extrudeTop","leftRatio","rightRatio","v1","v2","v3","v4","v11","v22","topRatio","bottomRatio","v44","quadCount","clone","copy","identity","transpose","adjoint","determinant","rotate","fromScaling","fromRotation","fromQuat","Infinity","str","frob","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","mul","sub","vec4_length","vec4_squaredLength","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","quat_namespaceObject","partial","args","convertStackGLGeometry","_contants__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_utils_sequence__WEBPACK_IMPORTED_MODULE_1__","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","stackglGeometry","geometry","arr","defaultTextureSettings","getDefaultLayerSettings","defaultForms","defaultShaders","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","pickRandom","doTimes","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","res","as","bs","array","subarray","currentLength","coll","obj","Keys","onKeydown","keyCode","Date","now","onKeyup","vec1","vec2","scalar","sum","cross2D","getContext","contextAttributes","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","randInt","int","randIntInRange","from","to","normalRand"],"mappings":"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","file":"colorwalls/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 90);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { mat4, vec3 } from 'gl-matrix';\nimport { Keys } from 'tvs-libs/dist/lib/events/keyboard';\nvar defaultProps = {\n    fovy: Math.PI * 0.6,\n    aspect: window.innerWidth / window.innerHeight,\n    near: 0.1,\n    far: 1000,\n    needsUpdatePerspective: true,\n    rotateX: 0,\n    rotateY: 0,\n    moveForward: 0,\n    moveLeft: 0,\n    moveUp: 0,\n    needsUpdateView: false\n};\nexport function create(opts) {\n    if (opts === void 0) { opts = {}; }\n    var props = __assign({}, defaultProps, opts);\n    var state = {\n        view: mat4.create(),\n        perspective: mat4.create(),\n        rotationX: mat4.create(),\n        rotationY: mat4.create(),\n        position: [0, 0, 0]\n    };\n    var cam = { props: props, state: state };\n    update(cam);\n    return cam;\n}\nexport function update(_a) {\n    var props = _a.props, _b = _a.state, view = _b.view, perspective = _b.perspective, rotationX = _b.rotationX, rotationY = _b.rotationY, position = _b.position;\n    if (props.needsUpdatePerspective) {\n        props.needsUpdatePerspective = false;\n        mat4.perspective(perspective, props.fovy, props.aspect, props.near, props.far);\n    }\n    var needsUpdateView = props.needsUpdateView;\n    if (props.rotateX) {\n        mat4.rotateX(rotationX, rotationX, props.rotateX);\n        props.rotateX = 0;\n        needsUpdateView = true;\n    }\n    if (props.rotateY) {\n        mat4.rotateY(rotationY, rotationY, props.rotateY);\n        props.rotateY = 0;\n        needsUpdateView = true;\n    }\n    if (props.moveForward) {\n        var v = vec3.fromValues(rotationY[8], rotationY[9], rotationY[10]);\n        vec3.add(position, position, vec3.scale(v, v, -props.moveForward));\n        props.moveForward = 0;\n        needsUpdateView = true;\n    }\n    if (props.moveLeft) {\n        var v = vec3.fromValues(rotationY[0], rotationY[1], rotationY[2]);\n        vec3.add(position, position, vec3.scale(v, v, -props.moveLeft));\n        props.moveLeft = 0;\n        needsUpdateView = true;\n    }\n    if (props.moveUp) {\n        var v = vec3.fromValues(rotationY[4], rotationY[5], rotationY[6]);\n        vec3.add(position, position, vec3.scale(v, v, props.moveUp));\n        props.moveUp = 0;\n        needsUpdateView = true;\n    }\n    if (needsUpdateView) {\n        mat4.fromTranslation(view, position);\n        mat4.multiply(view, view, rotationY);\n        mat4.multiply(view, view, rotationX);\n        mat4.invert(view, view);\n        props.needsUpdateView = false;\n    }\n    return needsUpdateView;\n}\nexport function updatePosFromKeys(camera, speed, keys) {\n    if (!keys)\n        return;\n    if (keys[Keys.UP] || keys[Keys.W]) {\n        camera.props.moveForward = speed;\n    }\n    if (keys[Keys.DOWN] || keys[Keys.S]) {\n        camera.props.moveForward = -speed;\n    }\n    if (keys[Keys.LEFT] || keys[Keys.A]) {\n        camera.props.moveLeft = speed;\n    }\n    if (keys[Keys.RIGHT] || keys[Keys.D]) {\n        camera.props.moveLeft = -speed;\n    }\n}\nexport function updateRotFromMouse(camera, speed, m) {\n    camera.state.mouse = camera.state.mouse || { x: 0, y: 0 };\n    var deltaX = m.drag.x === 0 ? m.drag.x : camera.state.mouse.x - m.drag.x;\n    var deltaY = m.drag.y === 0 ? m.drag.y : camera.state.mouse.y - m.drag.y;\n    camera.state.mouse.x = m.drag.x;\n    camera.state.mouse.y = m.drag.y;\n    camera.props.rotateX = deltaY * speed;\n    camera.props.rotateY = deltaX * speed;\n}\n//# sourceMappingURL=camera.js.map","import { getContext } from 'tvs-painter/dist/lib/utils/context'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const gl = getContext(canvas)\n\nexport const painter = new Painter(gl)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { create } from 'tvs-utils/dist/lib/vr/camera'\nimport { canvas } from './context'\n\n\nexport const moveSpeed = 0.05\n\nexport const lookSpeed = 0.002\n\nexport const camera = create({\n\tfovy: Math.PI * 0.4,\n\taspect: canvas.width / canvas.height,\n\tmoveForward: -30\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4, quat } from 'gl-matrix'\nimport { repeat } from 'shared-utils/scheduler'\n\n\nlet time = 0\n\nrepeat(tpf => time += tpf, 'updateTime')\n\nexport const wallsTransform = mat4.create()\nconst rotation = quat.create()\n\nrepeat(() => {\n\tquat.fromEuler(\n\t\trotation,\n\t\tMath.sin(0.0007 * time) * 1.1,\n\t\ttime * 0.001,\n\t\tMath.sin(0.0008 * time) * 1.1\n\t)\n\tmat4.fromRotationTranslationScaleOrigin(\n\t\twallsTransform, rotation, [0, 0, 0], [1, 1, 1], [0, 100, 0]\n\t)\n}, 'updateRotation')\n\n\nexport const floorTransform = mat4.create()\n\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { convertStackGLGeometry } from 'tvs-painter/dist/lib/utils/stackgl'\nimport { triangulate, divideVertical, divideHorizontal, Quad, extrudeBottom, extrudeRight, right } from 'tvs-libs/dist/lib/geometry/quad'\nimport { flatten, times } from 'tvs-libs/dist/lib/utils/sequence'\nimport { partial } from 'tvs-libs/dist/lib/fp/core'\nimport { normalRand } from 'tvs-libs/dist/lib/math/random'\nimport { normal } from 'tvs-libs/dist/lib/geometry/primitives'\nimport { getForm } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nconst vertDiv = partial(divideVertical, 0.5, 0.5)\nconst horzDiv = partial(divideHorizontal, 0.5, 0.5)\n\nfunction subdivide (quads: Quad[], times = 1): Quad[] {\n\tfor (let i = 0; i < times; i++) {\n\t\tquads = flatten(quads.map(q => flatten(vertDiv(q).map(horzDiv))))\n\t}\n\treturn quads\n}\n\n\nfunction randomColor () {\n\treturn [normalRand(), normalRand(), normalRand()]\n}\n\nconst boxSliceCount = 10\n\nfunction randomDivide (q: Quad, sliceCount: number) {\n\tconst quads: Quad[] = []\n\tlet rest = q\n\tfor (let i = sliceCount; i > 1; i--) {\n\t\tconst upRatio = 1 / i + (Math.random() * 2 - 1) * 0.5 / i\n\t\tconst downRatio = 1 / i + (Math.random() * 2 - 1) * 0.5 / i\n\t\tconst [left, right] = divideVertical(upRatio, downRatio, rest)\n\t\tquads.push(left)\n\t\trest = right\n\t}\n\tquads.push(rest)\n\treturn quads\n}\n\n\nconst colors = times(randomColor , 4 * boxSliceCount)\n\nconst quad = extrudeBottom([0, -9, 0], [[-10, 10, -10], [10, 10, -10]])\n\nfunction makeSideSegments (q: Quad, count: number) {\n\treturn randomDivide(q, count).map(q => flatten(subdivide(horzDiv(q))))\n}\n\nconst box = (() => {\n\tconst count = boxSliceCount\n\tconst bk = quad\n\tconst rt = extrudeRight([0, 0, 20], right(bk))\n\tconst ft = extrudeRight([-20, 0, 0], right(rt))\n\tconst lf = extrudeRight([0, 0, -20], right(ft))\n\treturn [\n\t\tmakeSideSegments(bk, count),\n\t\tmakeSideSegments(rt, count),\n\t\tmakeSideSegments(ft, count),\n\t\tmakeSideSegments(lf, count)\n\t]\n})()\n\n\nexport const faceNormals = box.map(q => normal(q[1]))\n\nexport const wallsForm = getForm(painter, 'wallsForm')\n\t.update(\n\t\tconvertStackGLGeometry({\n\t\t\tposition: flatten(flatten(box)),\n\t\t\t// color: flatten(b.map((side) => flatten(side.map((slice) => flatten(slice.map((q) => (q as any[]).map(() => pickRandom(c)))))))),\n\t\t\tcolor: flatten(box.map((side, i) => flatten(side.map((slice, j) => slice.map(() => colors[i * boxSliceCount + j]))))),\n\t\t\tnormal: flatten(box.map((side, i) => flatten(side).map(() => faceNormals[i]))),\n\t\t\tcells: triangulate(4 * boxSliceCount * 4 * 2)\n\t\t})\n\t)\n\n\nexport const floorQuads = subdivide([extrudeBottom([0, 0, -200], [[-100, -5, 100], [100, -5, 100]])], 3)\n\nexport const groundForm = getForm(painter, 'groundForm')\n\t.update(\n\t\tconvertStackGLGeometry({\n\t\t\tposition: flatten(floorQuads),\n\t\t\tnormal: flatten(floorQuads).map(() => [0, 1, 0]),\n\t\t\t// color: flatten(floorQuads).map(randomColor),\n\t\t\tcolor: flatten(floorQuads).map(() => [1, 1, 1]),\n\t\t\tcells: triangulate(floorQuads.length)\n\t\t})\n\t)\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n","import vert from './glsl/base.vert'\nimport frag from './glsl/base.frag'\nimport { getShade } from 'shared-utils/painterState'\nimport { painter } from './context'\n\n\nexport const baseShade = getShade(painter, 'baseShade')\n\t.update({\n\t\tvert, frag\n\t})\n\n\nexport const groundShade = getShade(painter, 'groundShade')\n\t.update({\n\t\tvert, frag\n\t})\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n","import * as init from './state'\nimport { camera } from './camera'\nimport { gl, painter } from './context'\nimport { getSketch, getDrawingLayer } from 'shared-utils/painterState'\nimport { wallsForm, groundForm } from './geometries'\nimport { baseShade, groundShade } from './shaders'\n\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1],\n\tenable: [gl.DEPTH_TEST]\n})\n\n\n// ===== objects =====\n\nexport const wallsSketch = getSketch(painter, 'wallsSketch')\n\t.update({\n\t\tform: wallsForm,\n\t\tshade: baseShade,\n\t\tuniforms: {\n\t\t\ttransform: init.wallsTransform\n\t\t}\n\t})\n\n\nexport const groundSketch = getSketch(painter, 'groundSketch')\n\t.update({\n\t\tform: groundForm,\n\t\tshade: groundShade,\n\t\tuniforms: {\n\t\t\ttransform: init.floorTransform\n\t\t}\n\t})\n\n\n// ===== layers =====\n\nexport const scene = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [groundSketch, wallsSketch],\n\t\tuniforms: {\n\t\t\tview: camera.state.view,\n\t\t\tprojection: camera.state.perspective\n\t\t},\n\t\tdrawSettings: {\n\t\t\tclearBits: gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT\n\t\t}\n\t})\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n\n","import { keyboard, Keys } from 'tvs-libs/dist/lib/events/keyboard'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { painter, canvas } from './context'\nimport { once } from 'shared-utils/scheduler'\nimport { camera, lookSpeed, moveSpeed } from './camera'\n\n\n\nwindowSize(() => once(() => {\n\tpainter.resize()\n\tcamera.props.aspect = canvas.width / canvas.height\n\tcamera.props.needsUpdatePerspective = true\n}, 'resize'))\n\n\nlet oX = 0, oY = 0\nmouse({element: canvas, enableRightButton: true}, m => {\n\tconst deltaX = m.drag.x === 0 ? m.drag.x : oX - m.drag.x\n\tconst deltaY = m.drag.y === 0 ? m.drag.y : oY - m.drag.y\n\toX = m.drag.x\n\toY = m.drag.y\n\tcamera.props.rotateX = deltaY * lookSpeed\n\tcamera.props.rotateY = deltaX * lookSpeed\n})\n\n\nkeyboard(keys => {\n\tif (!keys) return\n\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\tcamera.props.moveForward = moveSpeed\n\t}\n\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\tcamera.props.moveForward = -moveSpeed\n\t}\n\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\tcamera.props.moveLeft = moveSpeed\n\t}\n\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\tcamera.props.moveLeft = -moveSpeed\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { repeat } from 'shared-utils/scheduler'\nimport { update } from 'tvs-utils/dist/lib/vr/camera'\nimport { camera } from './camera'\nimport { painter } from './context'\nimport { scene } from './renderer'\nimport './events'\n\n\nrepeat(() => {\n\tupdate(camera)\n\tpainter.compose(scene)\n}, 'render')\n\n\nif (module.hot) {\n\tmodule.hot.accept()\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n        this.program = gl.createProgram();\n        this.frag = gl.createShader(gl.FRAGMENT_SHADER);\n        this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nimport { Painter } from './painter';\nimport { defaultTextureSettings, defaultShaders } from './asset-lib';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        if (data.asset) {\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n        }\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), data.doubleBuffered ? 2 : 1);\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag, vert: defaultShaders.basicEffect.vert });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' }\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n        this.result.shade.update(defaultShaders.basicEffect);\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) { return new Form(this.gl, id); }\n    createShade(id) { return new Shade(this.gl, id); }\n    createSketch(id) { return new Sketch(id); }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade')\n        });\n    }\n    createStaticLayer(id) { return new StaticLayer(this.gl, id); }\n    createDrawingLayer(id) { return new DrawingLayer(this.gl, id); }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings, uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        const i = layer.targets.length - 1;\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else if (layer.targets.length === 2) {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","import { zip } from '../utils/sequence';\nimport { partial } from '../fp/core';\nimport { lerp } from '../math/core';\nimport { add, normalize, cross, sub, cross2D } from '../math/vectors';\nexport function interpolate(fn, step, start, end) {\n    return zip(partial(fn, step), start, end);\n}\nexport const lerpVecs = partial(interpolate, lerp);\nexport function split(part, [v1, v2]) {\n    const p = lerpVecs(part, v1, v2);\n    return [[v1, p], [p, v2]];\n}\nexport function translate(vec, p) {\n    return p.map(v => add(vec, v));\n}\nexport function rotateLeftInPlace(p) {\n    p.unshift(p.pop());\n    return p;\n}\nexport function rotateRightInPlace(p) {\n    p.push(p.shift());\n    return p;\n}\nexport function rotateLeft(p) {\n    return rotateLeftInPlace(p.concat());\n}\nexport function rotateRight(p) {\n    return rotateRightInPlace(p.concat());\n}\nexport function normal(p) {\n    return normalize(cross(sub(p[0], p[1]), sub(p[2], p[1])));\n}\nexport function side(e, v) {\n    return cross2D(sub(v, e[0]), sub(e[1], e[0]));\n}\n//# sourceMappingURL=primitives.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tsizeMultiplier: number\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: ActionHandler<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: ActionHandler<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize(state.device.sizeMultiplier)\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","import { lerpVecs, translate, rotateLeft } from './primitives';\nimport { times, flatten } from '../utils/sequence';\nexport function top(q) {\n    return [q[0], q[1]];\n}\nexport function right(q) {\n    return [q[1], q[2]];\n}\nexport function bottom(q) {\n    return [q[2], q[3]];\n}\nexport function left(q) {\n    return [q[3], q[0]];\n}\nexport function combineEdges(e1, e2) {\n    return e1.concat(rotateLeft(e2));\n}\nexport function extrudeTop(direction, edge) {\n    return combineEdges(translate(direction, edge), edge);\n}\nexport function extrudeRight(direction, edge) {\n    return rotateLeft(extrudeTop(direction, edge));\n}\nexport function extrudeBottom(direction, edge) {\n    return combineEdges(edge, translate(direction, edge));\n}\nexport function extrudeLeft(direction, edge) {\n    return rotateLeft(extrudeBottom(direction, edge));\n}\nexport function divideHorizontal(leftRatio, rightRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(leftRatio, v1, v4);\n    const v22 = lerpVecs(rightRatio, v2, v3);\n    return [[v1, v2, v22, v11], [v11, v22, v3, v4]];\n}\nexport function divideVertical(topRatio, bottomRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(topRatio, v1, v2);\n    const v44 = lerpVecs(bottomRatio, v4, v3);\n    return [[v1, v11, v44, v4], [v11, v2, v3, v44]];\n}\nexport const quadTriangles = [[0, 2, 1], [0, 3, 2]];\nexport function triangulate(quadCount) {\n    return flatten(times(i => quadTriangles.map((t => t.map(j => 4 * i + j))), quadCount));\n}\n//# sourceMappingURL=quad.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","export function curry(fn) {\n    function curried(a, b) {\n        if (typeof b !== 'undefined')\n            return fn(a, b);\n        return (b) => fn(a, b);\n    }\n    return curried;\n}\nexport function partial(fn, ...args) {\n    return fn.bind(null, ...args);\n}\n//# sourceMappingURL=core.js.map","import * as constants from '../contants';\nimport { flatten } from 'tvs-libs/dist/lib/utils/sequence';\nexport const STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport const STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport const STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport const STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    const geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0\n    };\n    for (const prop in stackglGeometry) {\n        const arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            const buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer },\n                itemCount: buffer.length\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr))\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvNormal = normal;\\n\\tvColor = color;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvec3 color = (vNormal.rgb + 1.0) / 2.0;\\n\\tgl_FragColor = vec4(vColor, 1.0);\\n}\\n\"","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function getContext(canvas, contextAttributes) {\n    const gl = canvas.getContext('webgl', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map"],"sourceRoot":""}