{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/contants.js","webpack:///../libs/libs/dist/events/dom.js","webpack:///../libs/libs/dist/events/mouse.js","webpack:///../libs/painter/dist/asset-lib.js","webpack:///../libs/painter/dist/render-utils.js","webpack:///../libs/painter/dist/form.js","webpack:///../libs/painter/dist/layer.js","webpack:///../libs/painter/dist/shade.js","webpack:///../libs/painter/dist/sketch.js","webpack:///../libs/painter/dist/painter.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/utils/object.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/libs/dist/utils/sequence.js","webpack:///../libs/libs/dist/events/keyboard.js","webpack:///../libs/libs/dist/math/vectors.js","webpack:///../libs/libs/dist/math/random.js","webpack:///../libs/painter/dist/utils/context.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/geometry/primitives.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/libs/dist/math/core.js","webpack:///../libs/libs/dist/geometry/quad.js","webpack:///../libs/libs/dist/math/geometry.js","webpack:///../libs/libs/dist/fp/core.js","webpack:///../libs/painter/dist/utils/stackgl.js","webpack:///./shared-utils/shaders/effects/blur.ts","webpack:///./shared-utils/shaders/effects/blur_with_alpha.glsl","webpack:///./colorwalls/glsl/ground.frag","webpack:///./colorwalls/glsl/ground.vert","webpack:///./colorwalls/glsl/walls.frag","webpack:///./colorwalls/glsl/walls.vert","webpack:///./colorwalls/context.ts","webpack:///./colorwalls/camera.ts","webpack:///./colorwalls/geometries.ts","webpack:///./colorwalls/state.ts","webpack:///./colorwalls/renderer.ts","webpack:///./colorwalls/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","windowSize","callback","resize","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","Buttons","LEFT","MIDDLE","RIGHT","mouse","opts","cb","element","document","enableRightButton","state","pressed","drag","x","y","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","defaultTextureSettings","wrap","minFilter","magFilter","defaultForms","renderQuad","attribs","[object Object]","contants","buffer","Float32Array","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","b","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","updateRenderTarget","target","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","formCounter","form_Form","id","this","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","Error","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","staticLayerCount","layer_StaticLayer","_texture","asset","indexOf","generateMipmap","assign","drawingLayerCount","layer_DrawingLayer","targets","canvas","buffered","sequence","doubleBuffered","forEach","sketches","sketch","shade","update","uniforms","destroy","undefined","shadeCounter","shade_Shade","fragSource","trim","vertSource","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","length","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","drawSettings","form","painter_Painter","forceUpdateTargets","keepCurrentSize","createForm","result","createFlatSketch","multiplier","context","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","currentCanvas","painter","getPainter","device","cancelWindow","cancelMouse","cancelKeys","scheduler","sizeMultiplier","keepCanvasSize","dispatch","baseEvents","RESIZE","keyboard","k","keys","init","debug","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","set","getState","addSystem","painterState_forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","tpf","prop","val","reset","deepOverride","obj1","obj2","opt","ignore","val1","val2","systems","FRAME","EPSILON","ARRAY_TYPE","RANDOM","Math","random","PI","out","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b1","b2","b3","translate","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","vec","fn","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","obj","Keys","onKeydown","keyCode","Date","now","onKeyup","vec1","vec2","scalar","vectors_length","sum","v1","v2","cross2D","randInt","int","randIntInRange","from","to","normalRand","getContext","contextAttributes","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","once","repeat","stop","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","updates","requestAnimationFrame","lerpVecs","rotateLeft","normal","_fp_core__WEBPACK_IMPORTED_MODULE_0__","_math_core__WEBPACK_IMPORTED_MODULE_1__","_math_vectors__WEBPACK_IMPORTED_MODULE_2__","_utils_sequence__WEBPACK_IMPORTED_MODULE_3__","step","start","end","unshift","pop","rotateLeftInPlace","concat","PerspectiveCamera","WithKeyNavigation","WithMouseRotation","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","Camera","props","position","rotationX","rotationY","rotationXMat","rotationYMat","projectionMat","viewMat","needsUpdateView","updateRotationX","updateRotationY","amount","super","needsUpdateProjection","Cam","speed","UP","W","moveForward","DOWN","A","moveLeft","D","_oldMouse","deltaX","deltaY","sign","num","clamp","extrudeRight","extrudeBottom","divideHorizontal","divideVertical","quadTriangles","triangulate","_utils_sequence__WEBPACK_IMPORTED_MODULE_0__","_primitives__WEBPACK_IMPORTED_MODULE_1__","combineEdges","e1","e2","direction","edge","extrudeTop","leftRatio","rightRatio","v3","v4","v11","v22","topRatio","bottomRatio","v44","quadCount","planeFromNormalAndCoplanarPoint","mirrorMatrixFromPlane","getYawQuat","getRollQuat","_vectors__WEBPACK_IMPORTED_MODULE_0__","point","plane","rotYAngle","rotZAngle","partial","args","convertStackGLGeometry","tvs_libs_dist_utils_sequence__WEBPACK_IMPORTED_MODULE_0__","_contants__WEBPACK_IMPORTED_MODULE_1__","STACK_GL_GEOMETRY_PROP_POSITION","STACK_GL_GEOMETRY_PROP_NORMAL","STACK_GL_GEOMETRY_PROP_UV","STACK_GL_GEOMETRY_PROP_ELEMENTS","stackglGeometry","geometry","getBlurByAlphaEffect","shared_utils_painterState__WEBPACK_IMPORTED_MODULE_0__","_blur_with_alpha_glsl__WEBPACK_IMPORTED_MODULE_1__","_blur_with_alpha_glsl__WEBPACK_IMPORTED_MODULE_1___default","strength","layerOpts","startLayer","strengthOffset","blurRatioVertical","scaleFactor","passData","getElementById","painterState","events","viewPort","camera","updatePosFromKeys","moveSpeed","updateRotFromMouse","lookSpeed","vertDiv","core","quad","horzDiv","subdivide","quads","colors","geometries_quad","makeSideSegments","sliceCount","rest","upRatio","downRatio","randomDivide","box","bk","rt","ft","lf","faceNormals","primitives","wallsForm","stackgl","color","side","slice","cells","floorQuads","groundForm","wallsTransform","gl_matrix","rotation","floorTransform","floorMirrorView","planeEquation","floorMirrorMatrix","updateDrawSettings","wallsShade","glsl_walls_default","walls_default","groundShade","glsl_ground_default","ground_default","wallsSketch","transform","groundSketch","reflection","mirrorScene","projection","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","scene","renderer_layers","effects_blur","compose"],"mappings":"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","file":"colorwalls/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8b50,\n    FLOAT_VEC3: 0x8b51,\n    FLOAT_VEC4: 0x8b52,\n    INT: 0x1404,\n    INT_VEC2: 0x8b53,\n    INT_VEC3: 0x8b54,\n    INT_VEC4: 0x8b55,\n    BOOL: 0x8b56,\n    BOOL_VEC2: 0x8b57,\n    BOOL_VEC3: 0x8b58,\n    BOOL_VEC4: 0x8b59,\n    FLOAT_MAT2: 0x8b5a,\n    FLOAT_MAT3: 0x8b5b,\n    FLOAT_MAT4: 0x8b5c,\n    SAMPLER_2D: 0x8b5e,\n    SAMPLER_CUBE: 0x8b60,\n    SAMPLER_3D: 0x8b5f,\n    SAMPLER_2D_SHADOW: 0x8b62,\n    FLOAT_MAT2X3: 0x8b65,\n    FLOAT_MAT2X4: 0x8b66,\n    FLOAT_MAT3X2: 0x8b67,\n    FLOAT_MAT3X4: 0x8b68,\n    FLOAT_MAT4X2: 0x8b69,\n    FLOAT_MAT4X3: 0x8b6a,\n    SAMPLER_2D_ARRAY: 0x8dc1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n    SAMPLER_CUBE_SHADOW: 0x8dc5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8dc6,\n    UNSIGNED_INT_VEC3: 0x8dc7,\n    UNSIGNED_INT_VEC4: 0x8dc8,\n    INT_SAMPLER_2D: 0x8dca,\n    INT_SAMPLER_3D: 0x8dcb,\n    INT_SAMPLER_CUBE: 0x8dcc,\n    INT_SAMPLER_2D_ARRAY: 0x8dcf,\n    UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n    TEXTURE_2D: 0x0de1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806f,\n    TEXTURE_2D_ARRAY: 0x8c1a,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140b,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n    UNSIGNED_INT_24_8: 0x84fa,\n};\n//# sourceMappingURL=contants.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 },\n    };\n    const destroy = windowSize(s => (state.size = s));\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2,\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false,\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { },\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST',\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]),\n                storeType: 'STATIC',\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]),\n                storeType: 'STATIC',\n            },\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4,\n    },\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`,\n    },\n};\n//# sourceMappingURL=asset-lib.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return (v) => {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return (v) => {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return (v) => {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return (texture) => {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return (textures) => {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: {\n        Type: Float32Array,\n        size: 4,\n        setter: floatSetter,\n        arraySetter: floatArraySetter,\n    },\n    [GL_TYPE.FLOAT_VEC2]: {\n        Type: Float32Array,\n        size: 8,\n        setter: floatVec2Setter,\n    },\n    [GL_TYPE.FLOAT_VEC3]: {\n        Type: Float32Array,\n        size: 12,\n        setter: floatVec3Setter,\n    },\n    [GL_TYPE.FLOAT_VEC4]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatVec4Setter,\n    },\n    [GL_TYPE.INT]: {\n        Type: Int32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: uintSetter,\n        arraySetter: uintArraySetter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        Type: Uint32Array,\n        size: 8,\n        setter: uintVec2Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        Type: Uint32Array,\n        size: 12,\n        setter: uintVec3Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        Type: Uint32Array,\n        size: 16,\n        setter: uintVec4Setter,\n    },\n    [GL_TYPE.BOOL]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatMat2Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3]: {\n        Type: Float32Array,\n        size: 36,\n        setter: floatMat3Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4]: {\n        Type: Float32Array,\n        size: 64,\n        setter: floatMat4Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X3]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat23Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X4]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat24Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X2]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat32Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X4]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat34Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X2]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat42Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X3]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat43Setter,\n    },\n    [GL_TYPE.SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        size: 8,\n        setter: intAttribSetter,\n        itemSize: 2,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        size: 12,\n        setter: intAttribSetter,\n        itemSize: 3,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        size: 16,\n        setter: intAttribSetter,\n        itemSize: 4,\n    },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 },\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw new Error('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array,\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap) ||\n        (data.wrapS && data.wrapS !== oldData.wrapS) ||\n        (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') ||\n            { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer(),\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null,\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { times } from 'tvs-libs/dist/utils/sequence';\nimport { defaultTextureSettings } from './asset-lib';\nimport { Painter } from './painter';\nimport { destroyRenderTarget, setTextureParams, updateRenderTarget, } from './render-utils';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        if (data.asset) {\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n        }\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data = {}) {\n        data.width = data.width || this.gl.canvas.width;\n        data.height = data.height || this.gl.canvas.height;\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width,\n                height: data.height,\n                frameBuffer: null,\n                textures: [],\n                depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) ||\n                        this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1,\n                },\n            }), data.doubleBuffered ? 2 : 1);\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets &&\n            (data.width !== this.data.width || data.height !== this.data.height)) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { createAttributeSetters, createUniformSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        const fragSource = (data.frag && data.frag.trim()) || this.fragSource;\n        const vertSource = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(fragSource &&\n            vertSource &&\n            (fragSource !== this.fragSource || vertSource !== this.vertSource))) {\n            return this;\n        }\n        this.destroy();\n        if (fragSource.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        const program = gl.createProgram();\n        const frag = gl.createShader(gl.FRAGMENT_SHADER);\n        const vert = gl.createShader(gl.VERTEX_SHADER);\n        // if (!(program && frag && vert)) {\n        // \tthrow TypeError('Could not initialize Shade')\n        // }\n        this.program = program;\n        this.frag = frag;\n        this.vert = vert;\n        if (!(program && vert && frag))\n            return;\n        gl.attachShader(program, vert);\n        gl.attachShader(program, frag);\n        gl.shaderSource(vert, vertSource);\n        gl.shaderSource(frag, fragSource);\n        gl.compileShader(vert);\n        gl.compileShader(frag);\n        if (!gl.getShaderParameter(vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(vert), addLineNumbers(vertSource));\n        }\n        if (!gl.getShaderParameter(frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(frag), addLineNumbers(fragSource));\n        }\n        gl.linkProgram(program);\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, program);\n        this.attributeSetters = createAttributeSetters(gl, program);\n        this.fragSource = fragSource;\n        this.vertSource = vertSource;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src\n        .trim()\n        .split('\\n')\n        .map((line, i) => i + 1 + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings, } from './asset-lib';\nimport { Form } from './form';\nimport { DrawingLayer, StaticLayer } from './layer';\nimport { applyDrawSettings, destroyRenderTarget, revertDrawSettings, updateRenderTarget, } from './render-utils';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { resizeCanvas } from './utils/context';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' },\n        ];\n        this.resize({\n            forceUpdateTargets: true,\n            keepCurrentSize: !!(gl.canvas.width && gl.canvas.height),\n        });\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n    }\n    resize({ multiplier = 1, forceUpdateTargets = false, keepCurrentSize = false, } = {}) {\n        const canvas = this.gl.canvas;\n        const needUpdate = keepCurrentSize || resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                if (t.width !== canvas.width || t.height !== canvas.height) {\n                    t.width = canvas.width;\n                    t.height = canvas.height;\n                    t.textureConfig = {\n                        count: 1,\n                        type: this.gl.UNSIGNED_BYTE,\n                    };\n                    updateRenderTarget(this.gl, t, defaultTextureSettings);\n                }\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) {\n        return new Form(this.gl, id);\n    }\n    createShade(id) {\n        return new Shade(this.gl, id);\n    }\n    createSketch(id) {\n        return new Sketch(id);\n    }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade').update(defaultShaders.basicEffect),\n        });\n    }\n    createStaticLayer(id) {\n        return new StaticLayer(this.gl, id);\n    }\n    createDrawingLayer(id) {\n        return new DrawingLayer(this.gl, id);\n    }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')],\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings, uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        const i = layer.targets.length - 1;\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else if (layer.targets.length === 2) {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/events/dom'\nimport { keyboard, KeyState } from 'tvs-libs/dist/events/keyboard'\nimport { mouse, MouseState } from 'tvs-libs/dist/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/utils/object'\nimport { Form } from 'tvs-painter/dist/form'\nimport { DrawingLayer, StaticLayer } from 'tvs-painter/dist/layer'\nimport { Painter } from 'tvs-painter/dist/painter'\nimport { Shade } from 'tvs-painter/dist/shade'\nimport { Sketch } from 'tvs-painter/dist/sketch'\nimport { getContext } from 'tvs-painter/dist/utils/context'\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: { [id: string]: Form } = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: { [id: string]: Shade } = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: { [id: string]: Sketch } = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst drawingLayers: { [id: string]: DrawingLayer } = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn (\n\t\tdrawingLayers[id] ||\n\t\t(drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\n\t)\n}\n\nconst staticLayers: { [id: string]: StaticLayer } = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn (\n\t\tstaticLayers[id] ||\n\t\t(staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\n\t)\n}\n\nconst effectLayers: { [id: string]: DrawingLayer } = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn (\n\t\teffectLayers[id] ||\n\t\t(effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\n\t)\n}\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\ttpf: number\n\t\tcanvas: HTMLCanvasElement\n\t\tmouse: MouseState\n\t\tkeys: KeyState\n\t\tsizeMultiplier: number\n\t\tkeepCanvasSize?: boolean\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1,\n\t},\n} as BaseState\n;(window as any).state = state\n\nexport function get<\n\tS extends BaseState = BaseState,\n\tK extends keyof S = keyof S\n>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<\n\tS extends BaseState = BaseState,\n\tK extends keyof S = keyof S\n>(key: K, val: S[K], opts?: { reset: any }) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (\n\tevent: string,\n\tstate: S,\n) => void\nconst systems: { [id: string]: ActionHandler<any> } = {}\n\nexport function addSystem<S extends BaseState = BaseState>(\n\tid: string,\n\ts: ActionHandler<S>,\n) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize',\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init(canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() =>\n\t\t\tonce(() => {\n\t\t\t\tpainter.resize({\n\t\t\t\t\tmultiplier: state.device.sizeMultiplier,\n\t\t\t\t\tkeepCurrentSize: state.device.keepCanvasSize,\n\t\t\t\t})\n\t\t\t\tdispatch(baseEvents.RESIZE)\n\t\t\t}, 'resize'),\n\t\t)\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => (state.device.mouse = m),\n\t\t)\n\n\t\tcancelKeys = keyboard(k => (state.device.keys = k))\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) &&\n                !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, {\n                        ignore: ignore && ignore[key],\n                    });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = shuffled[i] !== undefined ? shuffled[i] : arr[i];\n        shuffled[i] = shuffled[j] !== undefined ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { },\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","export function getContext(canvas, contextAttributes) {\n    const gl = canvas.getContext('webgl', contextAttributes) ||\n        canvas.getContext('experimental-webgl', contextAttributes);\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","// onNextTick\n// schedule actions on next animation frame\n\ntype Callback = (n: number) => void\n\nlet updateOnce: { [id: string]: Callback } | null = null\nconst updateRepeat: { [id: string]: Callback } = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\nfunction processUpdates(time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\nexport function once(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\nexport function repeat(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\nexport function stop(id: Callback | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { partial } from '../fp/core';\nimport { lerp } from '../math/core';\nimport { add, cross, cross2D, normalize, sub } from '../math/vectors';\nimport { zip } from '../utils/sequence';\nexport function interpolate(fn, step, start, end) {\n    return zip(partial(fn, step), start, end);\n}\nexport const lerpVecs = partial(interpolate, lerp);\nexport function split(part, [v1, v2]) {\n    const p = lerpVecs(part, v1, v2);\n    return [[v1, p], [p, v2]];\n}\nexport function translate(vec, p) {\n    return p.map(v => add(vec, v));\n}\nexport function rotateLeftInPlace(p) {\n    p.unshift(p.pop());\n    return p;\n}\nexport function rotateRightInPlace(p) {\n    p.push(p.shift());\n    return p;\n}\nexport function rotateLeft(p) {\n    return rotateLeftInPlace(p.concat());\n}\nexport function rotateRight(p) {\n    return rotateRightInPlace(p.concat());\n}\nexport function normal(p) {\n    return normalize(cross(sub(p[0], p[1]), sub(p[2], p[1])));\n}\nexport function side(e, v) {\n    return cross2D(sub(v, e[0]), sub(e[1], e[0]));\n}\n//# sourceMappingURL=primitives.js.map","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t\tthis.updateRotationX()\n\t\tthis.updateRotationY()\n\t}\n\n\tupdateRotationX(amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY(amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward(dist: number) {\n\t\tconst v = vec3.fromValues(\n\t\t\tthis.rotationYMat[8],\n\t\t\tthis.rotationYMat[9],\n\t\t\tthis.rotationYMat[10],\n\t\t)\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft(dist: number) {\n\t\tconst v = vec3.fromValues(\n\t\t\tthis.rotationYMat[0],\n\t\t\tthis.rotationYMat[1],\n\t\t\tthis.rotationYMat[2],\n\t\t)\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp(dist: number) {\n\t\tconst v = vec3.fromValues(\n\t\t\tthis.rotationYMat[4],\n\t\t\tthis.rotationYMat[5],\n\t\t\tthis.rotationYMat[6],\n\t\t)\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate() {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper(props)\n\t\tObject.assign(this, props)\n\t\tthis.update()\n\t}\n\n\tupdate() {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far,\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\nexport function WithKeyNavigation<T extends Constructor<Camera>>(Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys(speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function WithMouseRotation<T extends Constructor<Camera>>(Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse(speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","import { flatten, times } from '../utils/sequence';\nimport { lerpVecs, rotateLeft, translate } from './primitives';\nexport function top(q) {\n    return [q[0], q[1]];\n}\nexport function right(q) {\n    return [q[1], q[2]];\n}\nexport function bottom(q) {\n    return [q[2], q[3]];\n}\nexport function left(q) {\n    return [q[3], q[0]];\n}\nexport function combineEdges(e1, e2) {\n    return e1.concat(rotateLeft(e2));\n}\nexport function extrudeTop(direction, edge) {\n    return combineEdges(translate(direction, edge), edge);\n}\nexport function extrudeRight(direction, edge) {\n    return rotateLeft(extrudeTop(direction, edge));\n}\nexport function extrudeBottom(direction, edge) {\n    return combineEdges(edge, translate(direction, edge));\n}\nexport function extrudeLeft(direction, edge) {\n    return rotateLeft(extrudeBottom(direction, edge));\n}\nexport function divideHorizontal(leftRatio, rightRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(leftRatio, v1, v4);\n    const v22 = lerpVecs(rightRatio, v2, v3);\n    return [[v1, v2, v22, v11], [v11, v22, v3, v4]];\n}\nexport function divideVertical(topRatio, bottomRatio, [v1, v2, v3, v4]) {\n    const v11 = lerpVecs(topRatio, v1, v2);\n    const v44 = lerpVecs(bottomRatio, v4, v3);\n    return [[v1, v11, v44, v4], [v11, v2, v3, v44]];\n}\nexport const quadTriangles = [[0, 2, 1], [0, 3, 2]];\nexport function triangulate(quadCount) {\n    return flatten(times(i => quadTriangles.map(t => t.map(j => 4 * i + j)), quadCount));\n}\n//# sourceMappingURL=quad.js.map","import { cross, dot, normalize, sub } from './vectors';\nexport function planeFromNormalAndCoplanarPoint(n, point) {\n    const d = dot(n, point);\n    return [n[0], n[1], n[2], -d];\n}\nexport function planeFromThreeCoplanarPoints(p1, p2, p3) {\n    return planeFromNormalAndCoplanarPoint(normalFromThreeCoplanarPoints(p1, p2, p3), p1);\n}\nexport function normalFromThreeCoplanarPoints(p1, p2, p3) {\n    return normalize(cross(sub(p3, p2), sub(p1, p2)));\n}\nexport function mirrorMatrixFromPlane(plane) {\n    const [a, b, c, d] = plane;\n    return [\n        1 - 2 * a * a,\n        -2 * a * b,\n        -2 * a * c,\n        0,\n        -2 * a * b,\n        1 - 2 * b * b,\n        -2 * b * c,\n        0,\n        -2 * a * c,\n        -2 * b * c,\n        1 - 2 * c * c,\n        0,\n        -2 * a * d,\n        -2 * b * d,\n        -2 * c * d,\n        1,\n    ];\n}\nexport function getYawQuat(rotYAngle) {\n    rotYAngle *= 0.5;\n    return [0, Math.sin(rotYAngle), 0, Math.cos(rotYAngle)];\n}\nexport function getPitchQuat(rotXAngle) {\n    rotXAngle *= 0.5;\n    return [Math.sin(rotXAngle), 0, 0, Math.cos(rotXAngle)];\n}\nexport function getRollQuat(rotZAngle) {\n    rotZAngle *= 0.5;\n    return [0, 0, Math.sin(rotZAngle), Math.cos(rotZAngle)];\n}\n//# sourceMappingURL=geometry.js.map","export function curry(fn) {\n    function curried(a, b) {\n        if (typeof b !== 'undefined')\n            return fn(a, b);\n        return (b) => fn(a, b);\n    }\n    return curried;\n}\nexport function partial(fn, ...args) {\n    return fn.bind(null, ...args);\n}\n//# sourceMappingURL=core.js.map","import { flatten } from 'tvs-libs/dist/utils/sequence';\nimport * as constants from '../contants';\nexport const STACK_GL_GEOMETRY_PROP_POSITION = 'positions';\nexport const STACK_GL_GEOMETRY_PROP_NORMAL = 'normals';\nexport const STACK_GL_GEOMETRY_PROP_UV = 'uvs';\nexport const STACK_GL_GEOMETRY_PROP_ELEMENTS = 'cells';\nexport function convertStackGLGeometry(stackglGeometry) {\n    const geometry = {\n        drawType: 'TRIANGLES',\n        attribs: {},\n        itemCount: 0,\n    };\n    for (const prop in stackglGeometry) {\n        const arr = stackglGeometry[prop];\n        if (prop === STACK_GL_GEOMETRY_PROP_ELEMENTS) {\n            const buffer = new (arr.length > 65535 ? Uint32Array : Uint16Array)(flatten(arr));\n            Object.assign(geometry, {\n                elements: { buffer },\n                itemCount: buffer.length,\n            });\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_POSITION) {\n            geometry.attribs[constants.GEOMETRY_PROP_POSITION] = {\n                buffer: new Float32Array(flatten(arr)),\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_NORMAL) {\n            geometry.attribs[constants.GEOMETRY_PROP_NORMAL] = {\n                buffer: new Float32Array(flatten(arr)),\n            };\n        }\n        else if (prop === STACK_GL_GEOMETRY_PROP_UV) {\n            geometry.attribs[constants.GEOMETRY_PROP_UV] = {\n                buffer: new Float32Array(flatten(arr)),\n            };\n        }\n        else {\n            geometry.attribs[prop] = { buffer: new Float32Array(flatten(arr)) };\n        }\n    }\n    return geometry;\n}\n//# sourceMappingURL=stackgl.js.map","import { getEffectLayer } from 'shared-utils/painterState'\nimport { Layer, LayerData, Painter } from 'tvs-painter'\nimport frag from './blur_with_alpha.glsl'\n\ninterface BlurOpts {\n\tstrength: number\n\tsize?: number[] | (() => number[])\n\tstrengthOffset?: number | (() => number)\n\tblurRatioVertical?: number\n\tscaleFactor?: number\n\tlayerOpts?: LayerData\n\tstartLayer?: Layer\n}\n\nexport function getBlurByAlphaEffect(\n\tpainter: Painter,\n\tid: string,\n\t{\n\t\tstrength,\n\t\tsize,\n\t\tlayerOpts,\n\t\tstartLayer,\n\t\tstrengthOffset = 0,\n\t\tblurRatioVertical = 1,\n\t\tscaleFactor = 0.6\n\t}: BlurOpts\n) {\n\tconst passData: any[] = []\n\n\twhile (strength >= 1) {\n\t\tpassData.push({\n\t\t\tstrength,\n\t\t\tdirection: 0,\n\t\t\tsource: null\n\t\t})\n\t\tpassData.push({\n\t\t\tstrength: strength * blurRatioVertical,\n\t\t\tdirection: 1,\n\t\t\tsource: null\n\t\t})\n\t\tstrength *= scaleFactor\n\t}\n\n\tif (startLayer) {\n\t\tpassData[0].source = startLayer.texture()\n\t}\n\n\tconst opts =\n\t\tsize && typeof size !== 'function'\n\t\t\t? { width: size[0], height: size[1] }\n\t\t\t: {}\n\n\treturn getEffectLayer(painter, id).update({\n\t\t...opts,\n\t\t...layerOpts,\n\t\tfrag,\n\t\tflipY: true,\n\t\tdrawSettings: {\n\t\t\tdisable: [painter.gl.DEPTH_TEST]\n\t\t},\n\t\tuniforms: passData.map(data => ({\n\t\t\t...data,\n\t\t\tblurRatioVertical,\n\t\t\tstrengthOffset,\n\t\t\tsize: size || (() => [painter.gl.canvas.width, painter.gl.canvas.height])\n\t\t}))\n\t})\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvec4 blur9_1_0(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\n\\n\\nuniform sampler2D source;\\nuniform vec2 size;\\nuniform float direction;\\nuniform float strength;\\nuniform float strengthOffset;\\n\\nvarying vec2 coords;\\n\\nvoid main() {\\n\\tvec2 uv = coords;\\n\\tvec4 refl = texture2D(source, uv);\\n\\tfloat dist = refl.a * strength + strengthOffset;\\n\\n\\tif (direction == 0.0) {\\n\\t\\tgl_FragColor = vec4(blur9_1_0(source, uv, size, vec2(dist, 0)).rgb, refl.a);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(blur9_1_0(source, uv, size, vec2(0, dist)).rgb, refl.a);\\n\\t}\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D reflection;\\nuniform vec2 size;\\n\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvec4 color = texture2D(reflection, gl_FragCoord.xy / size);\\n\\tgl_FragColor = vec4(color.rgb / 2.0 + 0.2, 1.0);\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\tvNormal = normal;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float withDistance;\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\nvarying float vHeight;\\n\\nvoid main() {\\n\\tif (withDistance > 0.0) {\\n\\t\\tgl_FragColor = vec4(vColor, vHeight);\\n\\t} else {\\n\\t\\tgl_FragColor = vec4(vColor, 1.0);\\n\\t}\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nuniform float groundHeight;\\n\\nvarying vec3 vColor;\\nvarying vec3 vNormal;\\nvarying float vHeight;\\n\\nvoid main() {\\n\\tvNormal = normal;\\n\\tvec4 pos = transform * vec4(position, 1.0);\\n\\tvColor = color;\\n\\tvHeight = (pos.y - groundHeight) / 100.0;\\n\\tgl_Position = projection * view * pos;\\n}\\n\"","import { baseEvents, getPainter, getState } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './camera'\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort\n}\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem, set } from 'shared-utils/painterState'\nimport {\n\tPerspectiveCamera,\n\tWithKeyNavigation,\n\tWithMouseRotation\n} from 'shared-utils/vr/camera'\nimport { events, State } from './context'\n\nexport class ViewPort {\n\tmoveSpeed = 0.04\n\tlookSpeed = 0.003\n\tcamera = new (WithKeyNavigation(WithMouseRotation(PerspectiveCamera)))({\n\t\tfovy: Math.PI * 0.4,\n\t\tposition: [0, 0, 25]\n\t})\n}\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\t\tcase events.FRAME:\n\t\t\tconst tpf = s.device.tpf / 60\n\t\t\tv.camera.updatePosFromKeys(v.moveSpeed * tpf, s.device.keys)\n\t\t\tv.camera.updateRotFromMouse(v.lookSpeed * tpf, s.device.mouse)\n\t\t\tv.camera.update()\n\t\t\treturn\n\n\t\tcase events.RESIZE:\n\t\t\tv.camera.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tv.camera.needsUpdateProjection = true\n\t}\n})\n\nset<State>('viewPort', new ViewPort(), {\n\treset: { moveSpeed: true, lookSpeed: true }\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { getForm } from 'shared-utils/painterState'\nimport { partial } from 'tvs-libs/dist/fp/core'\nimport { normal } from 'tvs-libs/dist/geometry/primitives'\nimport {\n\tdivideHorizontal,\n\tdivideVertical,\n\textrudeBottom,\n\textrudeRight,\n\tQuad,\n\tright,\n\ttriangulate,\n} from 'tvs-libs/dist/geometry/quad'\nimport { normalRand } from 'tvs-libs/dist/math/random'\nimport { flatten, times } from 'tvs-libs/dist/utils/sequence'\nimport { convertStackGLGeometry } from 'tvs-painter/dist/utils/stackgl'\nimport { painter } from './context'\n\nconst vertDiv = partial(divideVertical, 0.5, 0.5)\nconst horzDiv = partial(divideHorizontal, 0.5, 0.5)\n\nfunction subdivide(quads: Quad[], times = 1): Quad[] {\n\tfor (let i = 0; i < times; i++) {\n\t\tquads = flatten(quads.map(q => flatten(vertDiv(q).map(horzDiv))))\n\t}\n\treturn quads\n}\n\nfunction randomColor() {\n\treturn [normalRand(), normalRand(), normalRand()]\n}\n\nconst boxSliceCount = 10\n\nfunction randomDivide(q: Quad, sliceCount: number) {\n\tconst quads: Quad[] = []\n\tlet rest = q\n\tfor (let i = sliceCount; i > 1; i--) {\n\t\tconst upRatio = 1 / i + ((Math.random() * 2 - 1) * 0.5) / i\n\t\tconst downRatio = 1 / i + ((Math.random() * 2 - 1) * 0.5) / i\n\t\tconst [left, right] = divideVertical(upRatio, downRatio, rest)\n\t\tquads.push(left)\n\t\trest = right\n\t}\n\tquads.push(rest)\n\treturn quads\n}\n\nconst colors = times(randomColor, 4 * boxSliceCount)\n\nconst quad = extrudeBottom([0, -9, 0], [[-10, 10, -10], [10, 10, -10]])\n\nfunction makeSideSegments(q: Quad, count: number) {\n\treturn randomDivide(q, count).map(q => flatten(subdivide(horzDiv(q))))\n}\n\nconst box = (() => {\n\tconst count = boxSliceCount\n\tconst bk = quad\n\tconst rt = extrudeRight([0, 0, 20], right(bk))\n\tconst ft = extrudeRight([-20, 0, 0], right(rt))\n\tconst lf = extrudeRight([0, 0, -20], right(ft))\n\treturn [\n\t\tmakeSideSegments(bk, count),\n\t\tmakeSideSegments(rt, count),\n\t\tmakeSideSegments(ft, count),\n\t\tmakeSideSegments(lf, count),\n\t]\n})()\n\nexport const faceNormals = box.map(q => normal(q[1]))\n\nexport const wallsForm = getForm(painter, 'wallsForm').update(\n\tconvertStackGLGeometry({\n\t\tposition: flatten(flatten(box)),\n\t\t// color: flatten(b.map((side) => flatten(side.map((slice) => flatten(slice.map((q) => (q as any[]).map(() => pickRandom(c)))))))),\n\t\tcolor: flatten(\n\t\t\tbox.map((side, i) =>\n\t\t\t\tflatten(\n\t\t\t\t\tside.map((slice, j) =>\n\t\t\t\t\t\tslice.map(() => colors[i * boxSliceCount + j]),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t\tnormal: flatten(\n\t\t\tbox.map((side, i) => flatten(side).map(() => faceNormals[i])),\n\t\t),\n\t\tcells: triangulate(4 * boxSliceCount * 4 * 2),\n\t}),\n)\n\nexport const groundHeight = -5\nconst floorQuads = subdivide(\n\t[\n\t\textrudeBottom(\n\t\t\t[0, 0, -200],\n\t\t\t[[-100, groundHeight, 100], [100, groundHeight, 100]],\n\t\t),\n\t],\n\t3,\n)\n\nexport const groundForm = getForm(painter, 'groundForm').update(\n\tconvertStackGLGeometry({\n\t\tposition: flatten(floorQuads),\n\t\tnormal: flatten(floorQuads).map(() => [0, 1, 0]),\n\t\tcells: triangulate(floorQuads.length),\n\t}),\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4, quat } from 'gl-matrix'\nimport { addSystem } from 'shared-utils/painterState'\nimport * as geo from 'tvs-libs/dist/math/geometry'\nimport { events } from './context'\nimport { groundHeight } from './geometries'\n\nlet time = 0\n\nexport const wallsTransform = mat4.create()\nconst rotation = quat.create()\n\nexport const floorTransform = mat4.create()\n\nexport const floorMirrorView = mat4.create()\n\nconst planeEquation = geo.planeFromNormalAndCoplanarPoint(\n\t[0, 1, 0],\n\t[0, groundHeight, 0]\n)\nexport const floorMirrorMatrix = geo.mirrorMatrixFromPlane(planeEquation)\n\naddSystem('state', (e, s) => {\n\tif (e === events.FRAME) {\n\t\ttime += s.device.tpf\n\n\t\tquat.fromEuler(\n\t\t\trotation,\n\t\t\tMath.sin(0.0007 * time) * 1.1,\n\t\t\ttime * 0.001,\n\t\t\tMath.sin(0.0008 * time) * 1.1\n\t\t)\n\n\t\tmat4.fromRotationTranslationScaleOrigin(\n\t\t\twallsTransform,\n\t\t\trotation,\n\t\t\t[0, 0, 0],\n\t\t\t[1, 1, 1],\n\t\t\t[0, 100, 0]\n\t\t)\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport { getDrawingLayer, getSketch } from 'shared-utils/painterState'\nimport { getShade } from 'shared-utils/painterState'\nimport { getBlurByAlphaEffect } from 'shared-utils/shaders/effects/blur'\nimport { canvas, gl, painter, state } from './context'\nimport { groundForm, wallsForm } from './geometries'\nimport groundFrag from './glsl/ground.frag'\nimport groundVert from './glsl/ground.vert'\nimport wallsFrag from './glsl/walls.frag'\nimport wallsVert from './glsl/walls.vert'\nimport * as init from './state'\nimport { floorMirrorMatrix, floorMirrorView } from './state'\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1],\n\tenable: [gl.DEPTH_TEST]\n})\n\n// ===== Shaders =====\n\nexport const wallsShade = getShade(painter, 'walls').update({\n\tvert: wallsVert,\n\tfrag: wallsFrag\n})\n\nexport const groundShade = getShade(painter, 'ground').update({\n\tvert: groundVert,\n\tfrag: groundFrag\n})\n\n// ===== objects =====\n\nexport const wallsSketch = getSketch(painter, 'walls').update({\n\tform: wallsForm,\n\tshade: wallsShade,\n\tuniforms: {\n\t\ttransform: init.wallsTransform\n\t}\n})\n\nexport const groundSketch = getSketch(painter, 'ground').update({\n\tform: groundForm,\n\tshade: groundShade,\n\tuniforms: {\n\t\ttransform: init.floorTransform,\n\t\treflection: null,\n\t\tsize: () => [canvas.width, canvas.height]\n\t}\n})\n\n// ===== layers =====\n\nexport const mirrorScene = getDrawingLayer(painter, 'mirror scene').update({\n\tsketches: [wallsSketch],\n\tuniforms: {\n\t\tview: () =>\n\t\t\tmat4.multiply(\n\t\t\t\tfloorMirrorView,\n\t\t\t\tstate.viewPort.camera.viewMat,\n\t\t\t\tfloorMirrorMatrix as any\n\t\t\t),\n\t\tprojection: () => state.viewPort.camera.projectionMat\n\t},\n\tdrawSettings: {\n\t\tclearBits: gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT\n\t}\n})\n\nexport const scene = getDrawingLayer(painter, 'scene').update({\n\tsketches: [groundSketch, wallsSketch],\n\tuniforms: {\n\t\tview: () => state.viewPort.camera.viewMat,\n\t\tprojection: () => state.viewPort.camera.projectionMat\n\t},\n\tdrawSettings: {\n\t\tclearBits: gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT\n\t}\n})\n\nconst blurEffect = getBlurByAlphaEffect(painter, 'blur', {\n\tstrength: 10,\n\tstrengthOffset: 0.3,\n\tblurRatioVertical: 3\n})\n\nexport const layers = [mirrorScene, blurEffect, scene]\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { dispatch, get } from 'shared-utils/painterState'\nimport { repeat } from 'shared-utils/scheduler'\nimport './camera'\nimport { events, painter } from './context'\nimport { layers } from './renderer'\n\nrepeat(tpf => {\n\tget('device').tpf = tpf\n\tdispatch(events.FRAME)\n\tpainter.compose(...layers)\n}, 'loop')\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}