{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/contants.js","webpack:///../libs/libs/dist/events/dom.js","webpack:///../libs/libs/dist/events/mouse.js","webpack:///../libs/painter/dist/asset-lib.js","webpack:///../libs/painter/dist/render-utils.js","webpack:///../libs/painter/dist/form.js","webpack:///../libs/painter/dist/texture.js","webpack:///../libs/painter/dist/render-target.js","webpack:///../libs/painter/dist/frame.js","webpack:///../libs/painter/dist/layer.js","webpack:///../libs/painter/dist/shade.js","webpack:///../libs/painter/dist/sketch.js","webpack:///../libs/painter/dist/painter.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/utils/object.js","webpack:///../libs/painter/dist/utils/geometry/plane.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/libs/dist/utils/sequence.js","webpack:///../libs/libs/dist/events/keyboard.js","webpack:///./experiments/game-of-life/glsl/base.frag","webpack:///./experiments/game-of-life/glsl/plane-material.frag","webpack:///./experiments/game-of-life/glsl/plane-material.vert","webpack:///../libs/libs/dist/math/random.js","webpack:///./shared-utils/scheduler.ts","webpack:///./experiments/game-of-life/context.ts","webpack:///./experiments/game-of-life/paint.ts","webpack:///./experiments/game-of-life/renderer.ts","webpack:///./experiments/game-of-life/index.ts","webpack:///../libs/libs/dist/utils/predicates.js","webpack:///../libs/painter/dist/utils/context.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","windowSize","callback","resize","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","Buttons","LEFT","MIDDLE","RIGHT","mouse","opts","cb","element","document","enableRightButton","state","pressed","drag","x","y","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","defaultTextureSettings","wrap","minFilter","magFilter","defaultForms","renderQuad","attribs","[object Object]","contants","buffer","Float32Array","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","_texture","samplerArraySetter","size","units","Int32Array","textures","index","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","b","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","formCounter","form_Form","_painter","id","this","data","_drawType","_itemCount","_attribs","attribData","createBuffer","bufferData","elements","_elements","glType","typedArray","Uint8ClampedArray","Error","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","undefined","textureCount","texture_Texture","_data","createTexture","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","asset","texImage2D","RGBA","isWebGL2","RGBA32F","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","indexOf","generateMipmap","assign","deleteTexture","render_target_targetCount","render_target_RenderTarget","frameBuffer","depthBuffer","bufferStructure","length","every","buf","predicates","createFramebuffer","bindFramebuffer","FRAMEBUFFER","some","getExtension","texCount","bufferAttachments","COLOR_ATTACHMENT0","glx","attachment","COLOR_ATTACHMENT0_WEBGL","drawBuffers","drawBuffersWEBGL","update","framebufferTexture2D","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","deleteFramebuffer","deleteRenderbuffer","frameCount","frame_Frame","layers","_targets","_textures","Array","isArray","selfReferencing","layerCount","reduce","layer","_uniforms","targetCount","drawingBufferWidth","drawingBufferHeight","_destroyTargets","targetData","sequence","forEach","tex","destroy","tmp","layer_layerCount","Layer","sketches","sketch","shade","uniforms","shadeCounter","shade_Shade","fragSource","trim","vertSource","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","_program","_frag","_vert","attachShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","_uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","uniformSetters","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","_attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","drawSettings","_drawSettings","form","painter_Painter","canvas","maxBufferSamples","useWebGL1","getContext","sizeMultiplier","getParameter","MAX_SAMPLES","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","_renderQuad","createForm","_staticSketch","createFlatSketch","context","createSketch","createShade","createLayer","globalUniforms","viewport","draw","frames","frame","renderFrame","idx","source","image","sources","useProgram","shadeForm","shadeUniforms","drawInstance","drawElements","drawArrays","renderLayer","target","layerPasses","j","_swapTargets","currentCanvas","painter","getPainter","device","cancelWindow","cancelMouse","cancelKeys","scheduler","dispatch","baseEvents","RESIZE","keyboard","k","keys","init","getForm","getShade","getSketch","getLayer","getFrame","getEffect","set","getState","addSystem","painterState_forms","shades","painterState_layers","painterState_frames","createFrame","effects","createEffect","tpf","prop","val","reset","deepOverride","obj1","obj2","opt","ignore","val1","val2","systems","FRAME","plane","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","iy","ix","offset2","indices","a","position","normal","uv","EPSILON","ARRAY_TYPE","RANDOM","Math","random","PI","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b1","b2","b3","translate","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","fn","arg","vec4_length","vec4_squaredLength","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","fromEuler","halfToRad","cx","cy","cz","quat_str","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","obj","Keys","onKeydown","keyCode","Date","now","onKeyup","randInt","int","randIntInRange","from","to","normalRand","once","repeat","stop","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","updates","requestAnimationFrame","getElementById","paint","painterState","events","PROCESS_PAINT","CLEANUP_PAINT","ctx","getImageData","putImageData","fillStyle","fillRect","paintFrame","effect","base_default","previous","automaton","planMat","gl_matrix","projection","renderer_form","glsl_plane_material_default","plane_material_default","transform","compose","equalArray","equalObject","arr1","arr2","k1","makeClear","clearArray","item","toUpperCase","resizeCanvas","multiplier","clientWidth","clientHeight"],"mappings":"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","file":"experiments/game-of-life/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 63);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8b50,\n    FLOAT_VEC3: 0x8b51,\n    FLOAT_VEC4: 0x8b52,\n    INT: 0x1404,\n    INT_VEC2: 0x8b53,\n    INT_VEC3: 0x8b54,\n    INT_VEC4: 0x8b55,\n    BOOL: 0x8b56,\n    BOOL_VEC2: 0x8b57,\n    BOOL_VEC3: 0x8b58,\n    BOOL_VEC4: 0x8b59,\n    FLOAT_MAT2: 0x8b5a,\n    FLOAT_MAT3: 0x8b5b,\n    FLOAT_MAT4: 0x8b5c,\n    SAMPLER_2D: 0x8b5e,\n    SAMPLER_CUBE: 0x8b60,\n    SAMPLER_3D: 0x8b5f,\n    SAMPLER_2D_SHADOW: 0x8b62,\n    FLOAT_MAT2X3: 0x8b65,\n    FLOAT_MAT2X4: 0x8b66,\n    FLOAT_MAT3X2: 0x8b67,\n    FLOAT_MAT3X4: 0x8b68,\n    FLOAT_MAT4X2: 0x8b69,\n    FLOAT_MAT4X3: 0x8b6a,\n    SAMPLER_2D_ARRAY: 0x8dc1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n    SAMPLER_CUBE_SHADOW: 0x8dc5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8dc6,\n    UNSIGNED_INT_VEC3: 0x8dc7,\n    UNSIGNED_INT_VEC4: 0x8dc8,\n    INT_SAMPLER_2D: 0x8dca,\n    INT_SAMPLER_3D: 0x8dcb,\n    INT_SAMPLER_CUBE: 0x8dcc,\n    INT_SAMPLER_2D_ARRAY: 0x8dcf,\n    UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n    TEXTURE_2D: 0x0de1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806f,\n    TEXTURE_2D_ARRAY: 0x8c1a,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140b,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n    UNSIGNED_INT_24_8: 0x84fa,\n};\nexport const TEXTURE_FORMAT = {\n    RED: 0x1903,\n    RG: 0x8227,\n    RGB: 0x1907,\n    RGBA: 0x1908,\n    RED_INTEGER: 0x8d94,\n    RG_INTEGER: 0x8228,\n    RGB_INTEGER: 0x8d98,\n    RGBA_INTEGER: 0x8d99,\n    DEPTH_COMPONENT: 0x1902,\n};\nexport const TEXTURE_FORMAT_INTERNAL = {\n    R8: 0x8229,\n    RG8: 0x822b,\n    RGB8: 0x8051,\n    RGBA8: 0x8058,\n    R16F: 0x822d,\n    RG16F: 0x822f,\n    RGB16F: 0x881b,\n    RGBA16F: 0x881a,\n    R32F: 0x822e,\n    RG32F: 0x8230,\n    RGB32F: 0x8815,\n    RGBA32F: 0x8814,\n    R8I: 0x8231,\n    RG8I: 0x8237,\n    RGB8I: 0x8d8f,\n    RGBA8I: 0x8d8e,\n    R8UI: 0x8232,\n    RG8UI: 0x8238,\n    RGB8UI: 0x8d7d,\n    RGBA8UI: 0x8d7c,\n    R16I: 0x8233,\n    RG16I: 0x8239,\n    RGB16I: 0x8d89,\n    RGBA16I: 0x8d88,\n    R16UI: 0x8234,\n    RG16UI: 0x823a,\n    RGB16UI: 0x8d77,\n    RGBA16UI: 0x8d76,\n    R32I: 0x8235,\n    RG32I: 0x823b,\n    RGB32I: 0x8d83,\n    RGBA32I: 0x8d82,\n    R32UI: 0x8236,\n    RG32UI: 0x823c,\n    RGB32UI: 0x8d71,\n    RGBA32UI: 0x8d70,\n    RGB10_A2: 0x8059,\n    RGB10_A2UI: 0x906f,\n    SRGB: 0x8c40,\n    SRGB8: 0x8c41,\n    SRGB8_ALPHA8: 0x8c43,\n    R8_SNORM: 0x8f94,\n    RG8_SNORM: 0x8f95,\n    RGB8_SNORM: 0x8f96,\n    RGBA8_SNORM: 0x8f97,\n    DEPTH_COMPONENT16: 0x81a5,\n    DEPTH_COMPONENT24: 0x81a6,\n    DEPTH_COMPONENT32F: 0x8cac,\n};\nexport const TEXTURE_FORMAT_DEFAULTS = {\n    [GL_TYPE.UNSIGNED_BYTE]: {\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R8,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG8,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB8,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA8,\n    },\n    [GL_TYPE.UNSIGNED_SHORT]: {\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT16,\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R16UI,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG16UI,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB16UI,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA16UI,\n    },\n    [GL_TYPE.UNSIGNED_INT]: {\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT24,\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R32UI,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG32UI,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB32UI,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA32UI,\n    },\n    [GL_TYPE.FLOAT]: {\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R16F,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG16F,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB16F,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA16F,\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT32F,\n    },\n    COMPRESSED_TYPES: {},\n};\n//# sourceMappingURL=contants.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 },\n    };\n    const destroy = windowSize(s => (state.size = s));\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2,\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false,\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { },\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST',\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]),\n                storeType: 'STATIC',\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]),\n                storeType: 'STATIC',\n            },\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4,\n    },\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`,\n    },\n};\n//# sourceMappingURL=asset-lib.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return (v) => {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return (v) => {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return (v) => {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return (texture) => {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture._texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return (textures) => {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]._texture);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: {\n        Type: Float32Array,\n        size: 4,\n        setter: floatSetter,\n        arraySetter: floatArraySetter,\n    },\n    [GL_TYPE.FLOAT_VEC2]: {\n        Type: Float32Array,\n        size: 8,\n        setter: floatVec2Setter,\n    },\n    [GL_TYPE.FLOAT_VEC3]: {\n        Type: Float32Array,\n        size: 12,\n        setter: floatVec3Setter,\n    },\n    [GL_TYPE.FLOAT_VEC4]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatVec4Setter,\n    },\n    [GL_TYPE.INT]: {\n        Type: Int32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: uintSetter,\n        arraySetter: uintArraySetter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        Type: Uint32Array,\n        size: 8,\n        setter: uintVec2Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        Type: Uint32Array,\n        size: 12,\n        setter: uintVec3Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        Type: Uint32Array,\n        size: 16,\n        setter: uintVec4Setter,\n    },\n    [GL_TYPE.BOOL]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatMat2Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3]: {\n        Type: Float32Array,\n        size: 36,\n        setter: floatMat3Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4]: {\n        Type: Float32Array,\n        size: 64,\n        setter: floatMat4Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X3]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat23Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X4]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat24Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X2]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat32Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X4]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat34Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X2]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat42Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X3]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat43Setter,\n    },\n    [GL_TYPE.SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        size: 8,\n        setter: intAttribSetter,\n        itemSize: 2,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        size: 12,\n        setter: intAttribSetter,\n        itemSize: 3,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        size: 16,\n        setter: intAttribSetter,\n        itemSize: 4,\n    },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 },\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw new Error('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array,\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(_painter, id = 'Form' + formCounter++) {\n        this._painter = _painter;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        if (data.drawType) {\n            this._drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this._itemCount = data.itemCount;\n        }\n        this._attribs = this._attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this._attribs[id] == null) {\n                this._attribs[id] = {\n                    buffer: gl.createBuffer(),\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this._attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this._elements == null) {\n                this._elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null,\n                };\n            }\n            this._elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        for (const id in this._attribs) {\n            gl.deleteBuffer(this._attribs[id].buffer);\n        }\n        this._attribs = {};\n        if (this._elements) {\n            gl.deleteBuffer(this._elements.buffer);\n            this._elements = undefined;\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { defaultTextureSettings } from './asset-lib';\nlet textureCount = 1;\nexport class Texture {\n    constructor(_painter, id = 'Texture' + textureCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this._texture = null;\n        this._data = {};\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        if (this._texture == null) {\n            this._texture = gl.createTexture();\n        }\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\n        if ((data.wrap && data.wrap !== this._data.wrap) ||\n            (data.wrapS && data.wrapS !== this._data.wrapS) ||\n            (data.wrapT && data.wrapT !== this._data.wrapT)) {\n            let wrapS, wrapT;\n            if (data.wrap) {\n                wrapS = wrapT = data.wrap;\n            }\n            else {\n                wrapT = data.wrapT || defaultTextureSettings.wrap;\n                wrapS = data.wrapS || defaultTextureSettings.wrap;\n            }\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n        }\n        else if (!(this._data.wrap || this._data.wrapS || this._data.wrapT)) {\n            this._data.wrap = this._data.wrapT = this._data.wrapS = defaultTextureSettings.wrap;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[this._data.wrap]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[this._data.wrap]);\n        }\n        if (data.magFilter && data.magFilter !== this._data.magFilter) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n        }\n        else if (!this._data.magFilter) {\n            this._data.magFilter = defaultTextureSettings.magFilter;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[this._data.magFilter]);\n        }\n        if (data.minFilter && data.minFilter !== this._data.minFilter) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n        }\n        else if (!this._data.minFilter) {\n            this._data.minFilter = defaultTextureSettings.minFilter;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[this._data.minFilter]);\n        }\n        if (data.asset) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.data !== undefined) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, data.type === 'FLOAT' && this._painter.isWebGL2\n                ? gl.RGBA32F\n                : gl.RGBA, data.width, // width and height are required if using custom data\n            data.height, 0, gl.RGBA, gl[data.type || 'UNSIGNED_BYTE'], data.data);\n        }\n        if (data.flipY != null && data.flipY !== this._data.flipY) {\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        Object.assign(this._data, data);\n        return this;\n    }\n    destroy() {\n        this._painter.gl.deleteTexture(this._texture);\n        this._data = {};\n        this._texture = null;\n    }\n}\n//# sourceMappingURL=texture.js.map","import { equalObject } from 'tvs-libs/dist/utils/predicates';\nimport { Texture } from './texture';\nlet targetCount = 1;\nexport class RenderTarget {\n    constructor(_painter, id = 'Form' + targetCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this.width = 0;\n        this.height = 0;\n        this.frameBuffer = null;\n        this.textures = [];\n        this.depthBuffer = null;\n        this.bufferStructure = [];\n        this._data = {};\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        const width = data.width || this.width;\n        const height = data.height || this.height;\n        if (!(width && height)) {\n            return this;\n        }\n        else if (width === this.width && height === this.height) {\n            if (!data.bufferStructure)\n                return this;\n            if (data.bufferStructure.length === this.bufferStructure.length &&\n                this.bufferStructure.every((buf, i) => equalObject(buf, data.bufferStructure[i]))) {\n                return this;\n            }\n        }\n        if (this.frameBuffer == null) {\n            this.frameBuffer = gl.createFramebuffer();\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n        if (data.bufferStructure && data.bufferStructure.length) {\n            this.bufferStructure = data.bufferStructure;\n            if (this.bufferStructure.some(t => t.type === 'FLOAT')) {\n                if (this._painter.isWebGL2) {\n                    gl.getExtension('EXT_color_buffer_float');\n                }\n                else {\n                    gl.getExtension('OES_texture_float');\n                }\n            }\n        }\n        const texCount = this.bufferStructure.length || 1;\n        const bufferAttachments = [gl.COLOR_ATTACHMENT0];\n        if (texCount > 1) {\n            let glx;\n            if (!this._painter.isWebGL2) {\n                glx = gl.getExtension('WEBGL_draw_buffers');\n            }\n            const attachment = this._painter.isWebGL2\n                ? gl.COLOR_ATTACHMENT0\n                : glx.COLOR_ATTACHMENT0_WEBGL;\n            for (let i = 0; i < texCount; i++) {\n                bufferAttachments[i] = attachment + i;\n            }\n            this._painter.isWebGL2\n                ? gl.drawBuffers(bufferAttachments)\n                : glx.drawBuffersWEBGL(bufferAttachments);\n        }\n        for (let i = 0; i < texCount; i++) {\n            if (!this.textures[i]) {\n                this.textures[i] = new Texture(this._painter, this.id + '_Texture' + i);\n            }\n            const texture = this.textures[i];\n            texture.update(Object.assign({ minFilter: 'NEAREST', magFilter: 'NEAREST' }, this.bufferStructure[i], { data: null, width,\n                height }));\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture._texture, 0);\n        }\n        if (this.depthBuffer == null) {\n            this.depthBuffer = gl.createRenderbuffer();\n        }\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);\n        const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        if (err !== gl.FRAMEBUFFER_COMPLETE) {\n            console.error('framebuffer error', err, data);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        Object.assign(this._data, data);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        gl.deleteFramebuffer(this.frameBuffer);\n        gl.deleteRenderbuffer(this.depthBuffer);\n        for (const texture of this.textures) {\n            gl.deleteTexture(texture);\n        }\n        this.textures = [];\n        this.frameBuffer = null;\n        this.depthBuffer = null;\n        this._data = {};\n        this.bufferStructure = [];\n        this.width = 0;\n        this.height = 0;\n    }\n}\n//# sourceMappingURL=render-target.js.map","import { times } from 'tvs-libs/dist/utils/sequence';\nimport { RenderTarget } from './render-target';\nimport { Texture } from './texture';\nlet frameCount = 1;\nexport class Frame {\n    constructor(_painter, id = 'Frame' + frameCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this.width = 0;\n        this.height = 0;\n        this.layers = [];\n        this._data = {};\n        this._targets = [];\n        this._textures = [];\n    }\n    image(i = 0) {\n        return ((this._targets.length &&\n            this._targets[this._targets.length - 1].textures[i]) ||\n            this._textures[i]);\n    }\n    update(data = {}) {\n        const gl = this._painter.gl;\n        const layers = Array.isArray(data.layers)\n            ? data.layers\n            : data.layers\n                ? [data.layers]\n                : this.layers;\n        const selfReferencing = data.selfReferencing || this._data.selfReferencing;\n        const layerCount = layers.reduce((count, layer) => count + (layer._uniforms.length || 1), 0);\n        const targetCount = selfReferencing || layerCount > 1 ? 2 : layerCount;\n        const width = data.width || this._data.width || gl.drawingBufferWidth;\n        const height = data.height || this._data.height || gl.drawingBufferHeight;\n        if (targetCount !== this._targets.length) {\n            this._destroyTargets();\n        }\n        const targetData = Object.assign({}, data, { width, height });\n        if (!this._targets.length && targetCount > 0) {\n            this._targets = times(i => new RenderTarget(this._painter, this.id + '_target' + (i + 1)).update(targetData), targetCount);\n        }\n        else if (this._targets.length) {\n            this._targets.forEach(t => {\n                t.update(targetData);\n            });\n        }\n        if (data.texture) {\n            // Hardcode to one static texture for now\n            if (!this._textures[0]) {\n                this._textures[0] = new Texture(this._painter, this.id + '_Texture0');\n            }\n            data.texture.width = data.texture.width || width;\n            data.texture.height = data.texture.height || height;\n            this._textures[0].update(data.texture);\n        }\n        Object.assign(this._data, data);\n        this.layers = layers;\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    destroy() {\n        this._destroyTargets();\n        this._textures.forEach(tex => tex.destroy());\n        this._textures = [];\n        this._data = {};\n        this.layers = [];\n        this.width = 0;\n        this.height = 0;\n    }\n    _destroyTargets() {\n        this._targets.forEach(t => t.destroy());\n        this._targets = [];\n    }\n    _swapTargets() {\n        if (this._targets.length > 1) {\n            const tmp = this._targets[0];\n            this._targets[0] = this._targets[1];\n            this._targets[1] = tmp;\n        }\n    }\n}\n//# sourceMappingURL=frame.js.map","let layerCount = 1;\nexport class Layer {\n    constructor(id = 'DrawingLayer' + layerCount++) {\n        this.id = id;\n        this.sketches = [];\n        this._data = {};\n        this._uniforms = [];\n    }\n    update(data) {\n        if (data.sketches) {\n            this.sketches = Array.isArray(data.sketches)\n                ? data.sketches\n                : [data.sketches];\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this._uniforms = Array.isArray(data.uniforms)\n                ? data.uniforms\n                : [data.uniforms];\n        }\n        Object.assign(this._data, data);\n        return this;\n    }\n    destroy() {\n        for (const sketch of this.sketches) {\n            sketch.destroy();\n        }\n        this._data.sketches = [];\n        this._data = {};\n        this._uniforms = [];\n    }\n}\n//# sourceMappingURL=layer.js.map","import { createAttributeSetters, createUniformSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(_painter, id = 'Shade' + shadeCounter++) {\n        this._painter = _painter;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        const fragSource = (data.frag && data.frag.trim()) || this.fragSource;\n        const vertSource = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(fragSource &&\n            vertSource &&\n            (fragSource !== this.fragSource || vertSource !== this.vertSource))) {\n            return this;\n        }\n        this.destroy();\n        if (fragSource.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        const program = gl.createProgram();\n        const frag = gl.createShader(gl.FRAGMENT_SHADER);\n        const vert = gl.createShader(gl.VERTEX_SHADER);\n        if (!(program && vert && frag))\n            return;\n        this._program = program;\n        this._frag = frag;\n        this._vert = vert;\n        gl.attachShader(program, vert);\n        gl.attachShader(program, frag);\n        gl.shaderSource(vert, vertSource);\n        gl.shaderSource(frag, fragSource);\n        gl.compileShader(vert);\n        gl.compileShader(frag);\n        if (!gl.getShaderParameter(vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(vert), addLineNumbers(vertSource));\n        }\n        if (!gl.getShaderParameter(frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(frag), addLineNumbers(fragSource));\n        }\n        gl.linkProgram(program);\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(program);\n            console.error('Error in program linking:', lastError);\n        }\n        this._uniformSetters = createUniformSetters(gl, program);\n        this._attributeSetters = createAttributeSetters(gl, program);\n        this.fragSource = fragSource;\n        this.vertSource = vertSource;\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        gl.deleteProgram(this._program);\n        gl.deleteShader(this._frag);\n        gl.deleteShader(this._vert);\n        this.vertSource = undefined;\n        this.fragSource = undefined;\n        this._attributeSetters = {};\n        this._uniformSetters = {};\n    }\n}\nfunction addLineNumbers(src) {\n    return src\n        .trim()\n        .split('\\n')\n        .map((line, i) => i + 1 + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n        this._uniforms = [];\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this._drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this._uniforms = Array.isArray(data.uniforms)\n                ? data.uniforms\n                : [data.uniforms];\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n        this._drawSettings = undefined;\n        this._uniforms = [];\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { defaultForms, defaultShaders, getDefaultLayerSettings, } from './asset-lib';\nimport { Form } from './form';\nimport { Frame } from './frame';\nimport { Layer } from './layer';\nimport { applyDrawSettings, revertDrawSettings } from './render-utils';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { resizeCanvas } from './utils/context';\nexport class Painter {\n    constructor(canvas, opts = {}) {\n        this.canvas = canvas;\n        this.isWebGL2 = true;\n        this.maxBufferSamples = 0;\n        let gl = null;\n        if (!opts.useWebGL1) {\n            gl =\n                canvas.getContext('webgl2', opts) ||\n                    canvas.getContext('experimental-webgl2', opts);\n        }\n        if (gl == null) {\n            this.isWebGL2 = false;\n            gl =\n                canvas.getContext('webgl', opts) ||\n                    canvas.getContext('experimental-webgl', opts);\n        }\n        if (gl == null) {\n            throw Error('Cannot initialize WebGL.');\n        }\n        this.gl = gl;\n        this.sizeMultiplier = opts.sizeMultiplier || 1;\n        if (this.isWebGL2) {\n            this.maxBufferSamples = gl.getParameter(gl.MAX_SAMPLES);\n        }\n        this.resize();\n        applyDrawSettings(gl, getDefaultLayerSettings(gl));\n        this._renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this._staticSketch = this.createFlatSketch();\n    }\n    resize() {\n        resizeCanvas(this.gl.canvas, this.sizeMultiplier);\n        return this;\n    }\n    destroy() {\n        this._staticSketch.destroy();\n        this._renderQuad.destroy();\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, drawSettings));\n        return this;\n    }\n    createForm(id) {\n        return new Form(this, id);\n    }\n    createShade(id) {\n        return new Shade(this, id);\n    }\n    createSketch(id) {\n        return new Sketch(id);\n    }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this._renderQuad,\n            shade: this.createShade(s.id + '_defaultShade').update(defaultShaders.basicEffect),\n        });\n    }\n    createFrame(id) {\n        return new Frame(this, id);\n    }\n    createLayer(id) {\n        return new Layer(id);\n    }\n    createEffect(id) {\n        const l = this.createLayer(id);\n        return l.update({\n            sketches: this.createFlatSketch(l.id + '_effectSketch'),\n        });\n    }\n    draw(sketch, globalUniforms) {\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        draw(gl, sketch, globalUniforms);\n        return this;\n    }\n    compose(...frames) {\n        for (const frame of frames) {\n            renderFrame(this.gl, frame);\n        }\n        return this;\n    }\n    display(frame, idx = 0) {\n        return this.draw(this._staticSketch, { source: frame.image(idx) });\n    }\n}\nfunction draw(gl, sketch, globalUniforms, sources) {\n    const { shade: shade, form: form, _drawSettings: drawSettings, _uniforms: uniforms, } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade._program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, sources);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    for (let i = 0; i < (uniforms.length || 1); i++) {\n        drawInstance(gl, sketch, uniforms[i], sources);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, uniforms, sources) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, sources);\n    }\n    if (sketch.form._elements && sketch.form._elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form._elements.buffer);\n        gl.drawElements(sketch.form._drawType, sketch.form._itemCount, sketch.form._elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form._drawType, 0, sketch.form._itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form._attribs) {\n        const setter = shade._attributeSetters[name];\n        if (setter) {\n            setter.setter(form._attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, sources) {\n    for (const name in uniforms) {\n        const setter = shade._uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (typeof value === 'string' && sources) {\n                setter.setter(sources[value]);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, uniforms, target, source) {\n    if (target) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, target.width, target.height);\n    }\n    else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer._data.drawSettings) {\n        applyDrawSettings(gl, layer._data.drawSettings);\n    }\n    for (const sketch of layer.sketches) {\n        draw(gl, sketch, uniforms, source);\n    }\n    if (layer._data.drawSettings) {\n        revertDrawSettings(gl, layer._data.drawSettings);\n    }\n}\nfunction renderFrame(gl, frame) {\n    for (let i = 0; i < frame.layers.length; i++) {\n        const layer = frame.layers[i];\n        const layerPasses = layer._uniforms.length || 1;\n        for (let j = 0; j < layerPasses; j++) {\n            const target = frame._targets[0];\n            const sources = i + j === 0 && frame._textures.length\n                ? frame._textures\n                : frame._targets[1] && frame._targets[1].textures;\n            renderLayer(gl, layer, layer._uniforms[j], target, sources);\n            frame._swapTargets();\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/events/dom'\nimport { keyboard, KeyState } from 'tvs-libs/dist/events/keyboard'\nimport { mouse, MouseState } from 'tvs-libs/dist/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/utils/object'\nimport { PainterOptions } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/form'\nimport { Frame } from 'tvs-painter/dist/frame'\nimport { Layer } from 'tvs-painter/dist/layer'\nimport { Painter } from 'tvs-painter/dist/painter'\nimport { Shade } from 'tvs-painter/dist/shade'\nimport { Sketch } from 'tvs-painter/dist/sketch'\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement, opts?: PainterOptions) {\n\tinit(canvas, opts)\n\treturn painter\n}\n\nconst forms: { [id: string]: Form } = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: { [id: string]: Shade } = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: { [id: string]: Sketch } = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst layers: { [id: string]: Layer } = {}\nexport function getLayer(painter: Painter, id: string) {\n\treturn layers[id] || (layers[id] = painter.createLayer('Layer_' + id))\n}\n\nconst frames: { [id: string]: Frame } = {}\nexport function getFrame(painter: Painter, id: string) {\n\treturn frames[id] || (frames[id] = painter.createFrame('Frame_' + id))\n}\n\nconst effects: { [id: string]: Layer } = {}\nexport function getEffect(painter: Painter, id: string) {\n\treturn effects[id] || (effects[id] = painter.createEffect('Effect_' + id))\n}\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\ttpf: number\n\t\tcanvas: HTMLCanvasElement\n\t\tmouse: MouseState\n\t\tkeys: KeyState\n\t\tsizeMultiplier: number\n\t\tkeepCanvasSize?: boolean\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1,\n\t},\n} as BaseState\n;(window as any).state = state\n\nexport function get<\n\tS extends BaseState = BaseState,\n\tK extends keyof S = keyof S\n>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<\n\tS extends BaseState = BaseState,\n\tK extends keyof S = keyof S\n>(key: K, val: S[K], opts?: { reset: any }) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (\n\tevent: string,\n\tstate: S,\n) => void\n\nconst systems: { [id: string]: ActionHandler<any> } = {}\n\nexport function addSystem<S extends BaseState = BaseState>(\n\tid: string,\n\ts: ActionHandler<S>,\n) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize',\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init(canvas: HTMLCanvasElement, opts?: PainterOptions) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(canvas, opts)\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() =>\n\t\t\tonce(() => {\n\t\t\t\tpainter.sizeMultiplier = state.device.sizeMultiplier\n\t\t\t\tpainter.resize()\n\t\t\t\tdispatch(baseEvents.RESIZE)\n\t\t\t}, 'resize'),\n\t\t)\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => (state.device.mouse = m),\n\t\t)\n\n\t\tcancelKeys = keyboard(k => (state.device.keys = k))\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) &&\n                !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, {\n                        ignore: ignore && ignore[key],\n                    });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - iy / gridY;\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new (vertices.length / 3 > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = ix + 1 + gridX1 * (iy + 1);\n            const d = ix + 1 + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            position: {\n                buffer: vertices,\n            },\n            normal: {\n                buffer: normals,\n            },\n            uv: {\n                buffer: uvs,\n            },\n        },\n        elements: {\n            buffer: indices,\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length,\n    };\n}\n//# sourceMappingURL=plane.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = shuffled[i] !== undefined ? shuffled[i] : arr[i];\n        shuffled[i] = shuffled[j] !== undefined ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { },\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D paint;\\nuniform sampler2D previous;\\nuniform float size;\\nvarying vec2 coords;\\n\\nint getCell(vec2 uv) {\\n\\tvec4 paintTex = texture2D(paint, uv);\\n\\tvec4 prevTex = texture2D(previous, uv);\\n\\tif (paintTex.r > 0.0 || prevTex.r > 0.0) {\\n\\t\\treturn 1;\\n\\t} else {\\n\\t\\treturn 0;\\n\\t}\\n}\\n\\nvoid main() {\\n\\tfloat one = 1.0 / size;\\n\\tvec2 uvR = vec2(coords.x + one, coords.y);\\n\\tvec2 uvL = vec2(coords.x - one, coords.y);\\n\\tvec2 uvRT = vec2(coords.x + one, coords.y - one);\\n\\tvec2 uvLT = vec2(coords.x - one, coords.y - one);\\n\\tvec2 uvRB = vec2(coords.x + one, coords.y + one);\\n\\tvec2 uvLB = vec2(coords.x - one, coords.y + one);\\n\\tvec2 uvT = vec2(coords.x, coords.y - one);\\n\\tvec2 uvB = vec2(coords.x, coords.y + one);\\n\\n\\tvec4 paintTex = texture2D(paint, coords);\\n\\tvec4 prevTex = texture2D(previous, coords);\\n\\n\\tint cellL = getCell(uvL);\\n\\tint cellR = getCell(uvR);\\n\\tint cellT = getCell(uvT);\\n\\tint cellB = getCell(uvB);\\n\\tint cellTL = getCell(uvLT);\\n\\tint cellTR = getCell(uvRT);\\n\\tint cellBL = getCell(uvLB);\\n\\tint cellBR = getCell(uvRB);\\n\\n\\tint neighbours = cellL + cellR + cellT + cellB + cellTL + cellTR + cellBL + cellBR;\\n\\n\\tvec4 color = vec4(vec3(0.0), 1.0);\\n\\tif (neighbours == 3 || (neighbours == 2 && prevTex.r > 0.0) || paintTex.r > 0.0) {\\n\\t\\tcolor = vec4(1.0, 0.0, 1.0, 1.0);\\n\\t}\\n\\n\\tgl_FragColor = color;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nuniform sampler2D tex;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\tgl_FragColor = texture2D(tex, vUv);\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform mat4 transform;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projection * transform * vec4(position, 1.0);\\n}\\n\"","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","// onNextTick\n// schedule actions on next animation frame\n\ntype Callback = (n: number) => void\n\nlet updateOnce: { [id: string]: Callback } | null = null\nconst updateRepeat: { [id: string]: Callback } = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\nfunction processUpdates(time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\nexport function once(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\nexport function repeat(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\nexport function stop(id: Callback | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { baseEvents, getPainter } from 'shared-utils/painterState'\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\nexport const paint = document.getElementById('paint') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const events = {\n\t...baseEvents,\n\tPROCESS_PAINT: 'process_paint',\n\tCLEANUP_PAINT: 'cleanup_paint',\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem } from 'shared-utils/painterState'\nimport { events, paint } from './context'\n\nconst ctx = paint.getContext('2d')\nif (!ctx) throw Error('unable to initialize 2d context')\n\nconst data = ctx.getImageData(0, 0, paint.width, paint.height)\n\nfor (let i = 0; i < data.data.length; i += 4) {\n\tdata.data[i] = Math.random() > 0.5 ? 255 : 0\n\tdata.data[i + 3] = 255\n}\n\nctx.putImageData(data, 0, 0)\n\naddSystem('paint', (e, s) => {\n\tif (e === events.CLEANUP_PAINT) {\n\t\tctx.fillStyle = 'black'\n\t\tctx.fillRect(0, 0, paint.width, paint.height)\n\t}\n\n\tconst d = s.device\n\tif (e === events.PROCESS_PAINT && d.mouse.dragging && d.mouse.drag.event) {\n\t\tconst { clientX, clientY } = d.mouse.drag.event\n\t\tconst x = Math.floor((clientX / window.innerWidth) * paint.width)\n\t\tconst y = Math.floor((clientY / window.innerHeight) * paint.height)\n\t\tctx.fillStyle = 'white'\n\t\tctx.fillRect(x, y, 1, 1)\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport {\n\taddSystem,\n\tgetEffect,\n\tgetForm,\n\tgetFrame,\n\tgetShade,\n\tgetSketch,\n} from 'shared-utils/painterState'\nimport { makeClear } from 'tvs-painter/dist/utils/context'\nimport { plane } from 'tvs-painter/dist/utils/geometry/plane'\nimport { events, gl, paint, painter } from './context'\nimport base from './glsl/base.frag'\nimport planeFrag from './glsl/plane-material.frag'\nimport planeVert from './glsl/plane-material.vert'\n\n// ===== gof layers =====\n\nconst paintFrame = getFrame(painter, 'paint')\n\nconst bufferSize = 256\n\nconst effect = getEffect(painter, 'layer').update({\n\tfrag: base,\n\tuniforms: {\n\t\tsize: bufferSize,\n\t\tpaint: () => paintFrame.image(),\n\t\tprevious: '0',\n\t},\n})\n\nexport const automaton = getFrame(painter, 'automaton').update({\n\tlayers: effect,\n\tselfReferencing: true,\n\twidth: bufferSize,\n\theight: bufferSize,\n\tbufferStructure: [\n\t\t{\n\t\t\tflipY: true,\n\t\t\twrap: 'REPEAT',\n\t\t},\n\t],\n})\n\n// ===== scene =====\n\nconst planMat = mat4.fromTranslation(mat4.create(), [0, 0, -3])\nconst rotation = 0.001\nconst projection = mat4.perspective(mat4.create(), 45, 1, 0.01, 10)\n\nconst form = getForm(painter, 'plane').update(plane(2, 2))\n\nconst shade = getShade(painter, 'plane').update({\n\tvert: planeVert,\n\tfrag: planeFrag,\n})\n\nexport const sketch = getSketch(painter, 'plane').update({\n\tform,\n\tshade,\n\tuniforms: {\n\t\tprojection,\n\t\ttransform: () => mat4.rotateY(planMat, planMat, rotation),\n\t\ttex: () => automaton.image(),\n\t},\n\tdrawSettings: {\n\t\tclearColor: [0.0, 1.0, 0.0, 1.0],\n\t\tclearBits: makeClear(gl, 'color'),\n\t},\n})\n\n// ===== state =====\n\naddSystem('renderer', e => {\n\tif (e === events.FRAME) {\n\t\tpaintFrame.update({ texture: { asset: paint } })\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { dispatch, get } from 'shared-utils/painterState'\nimport { repeat } from 'shared-utils/scheduler'\nimport { events, painter } from './context'\nimport './paint'\nimport { automaton, sketch } from './renderer'\n\nrepeat(tpf => {\n\tget('device').tpf = tpf\n\tdispatch(events.PROCESS_PAINT)\n\tdispatch(events.FRAME)\n\tpainter.compose(automaton)\n\tpainter.draw(sketch)\n\tdispatch(events.CLEANUP_PAINT)\n}, 'loop')\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2 || !arr1) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","export function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map"],"sourceRoot":""}