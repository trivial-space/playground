{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///./experiments/game-of-life/context.ts","webpack:///./experiments/game-of-life/paint.ts","webpack:///./experiments/game-of-life/renderer.ts","webpack:///./experiments/game-of-life/index.ts","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/painter/dist/lib/utils/geometry/plane.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///./experiments/game-of-life/glsl/base.frag","webpack:///./experiments/game-of-life/glsl/plane-material.frag","webpack:///./experiments/game-of-life/glsl/plane-material.vert","webpack:///../libs/libs/dist/lib/math/random.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","canvas","document","getElementById","paint","painter","painterState","gl","state","events","assign","PROCESS_PAINT","CLEANUP_PAINT","ctx","getContext","Error","data","getImageData","width","height","length","Math","random","putImageData","fillStyle","e","fillRect","device","mouse","dragging","drag","event","clientX","clientY","x","floor","window","innerWidth","y","innerHeight","updateDrawSettings","clearColor","paintLayer","layerProps","buffered","flipY","frag","base_default","a","wrap","drawSettings","disable","DEPTH_TEST","layer1","update","layer2","uniforms","size","texture","previous","planMat","gl_matrix","fromTranslation","projection","perspective","renderer_form","createForm","plane","shade","createShade","vert","glsl_plane_material_default","plane_material_default","sketch","createSketch","form","transform","rotateY","tex","renderer","currentLayer","planeLayer","createDrawingLayer","sketches","clearBits","context","[object Object]","this","switch","FRAME","swapLayers","asset","scheduler","tpf","compose","once","repeat","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","id","updates","requestAnimationFrame","fn","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","units","Int32Array","textures","index","contants","Type","Float32Array","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","b","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","oldData","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","target","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearDepth","clear","revertDrawSettings","formCounter","form_Form","drawType","itemCount","attribs","attribData","createBuffer","bufferData","storeType","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shadeCounter","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","destroy","staticLayerCount","layer_StaticLayer","_texture","asset_lib","generateMipmap","drawingLayerCount","layer_DrawingLayer","targets","sequence","doubleBuffered","forEach","basicEffect","undefined","painter_Painter","resize","renderQuad","result","createFlatSketch","multiplier","forceUpdateTargets","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","debug","windowSize","callback","addEventListener","removeEventListener","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","Buttons","LEFT","MIDDLE","RIGHT","opts","cb","element","enableRightButton","pressed","dX","dY","oX","oY","onMouseDown","button","onMouseUp","onMouseMove","preventDefault","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","set","getState","addSystem","dispatch","baseEvents","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_4__","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_5__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","cancelWindow","cancelMouse","cancelKeys","sizeMultiplier","RESIZE","k","keys","init","forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","prop","val","reset","systems","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","iy","ix","offset2","indices","position","normal","uv","EPSILON","ARRAY_TYPE","RANDOM","PI","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b1","b2","b3","translate","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateZ","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","vec","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","defaultTextureSettings","getDefaultLayerSettings","defaultForms","defaultShaders","_contants__WEBPACK_IMPORTED_MODULE_0__","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","obj","Keys","keyboard","onKeydown","keyCode","Date","now","onKeyup","contextAttributes","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","randInt","int","randIntInRange","from","to","normalRand"],"mappings":"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","file":"experiments/game-of-life/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 100);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","import { baseEvents, BaseState, getPainter, getState } from 'shared-utils/painterState'\nimport { RenderState } from './renderer'\n\nexport interface State extends BaseState {\n\trenderer: RenderState\n}\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\nexport const paint = document.getElementById('paint') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents,\n\tPROCESS_PAINT: 'process_paint',\n\tCLEANUP_PAINT: 'cleanup_paint'\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem } from 'shared-utils/painterState'\nimport { events, paint, State } from './context'\n\nconst ctx = paint.getContext('2d')\nif (!ctx) throw Error('unable to initialize 2d context')\n\nconst data = ctx.getImageData(0, 0, paint.width, paint.height)\n\nfor (let i = 0; i < data.data.length; i += 4) {\n\tdata.data[i] = Math.random() > 0.5 ? 255 : 0\n\tdata.data[i + 3] = 255\n}\n\nctx.putImageData(data, 0, 0)\n\nctx.fillStyle = 'white'\naddSystem<State>('paint', (e, s) => {\n\tif (e === events.CLEANUP_PAINT) {\n\t\tctx.fillStyle = 'black'\n\t\tctx.fillRect(0, 0, paint.width, paint.height)\n\t}\n\n\tconst d = s.device\n\tif (e === events.PROCESS_PAINT && d.mouse.dragging && d.mouse.drag.event) {\n\t\tconst { clientX, clientY } = d.mouse.drag.event\n\t\tconst x = Math.floor((clientX / window.innerWidth) * paint.width)\n\t\tconst y = Math.floor((clientY / window.innerHeight) * paint.height)\n\t\tctx.fillStyle = 'white'\n\t\tctx.fillRect(x, y, 1, 1)\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4 } from 'gl-matrix'\nimport { addSystem, getEffectLayer, getStaticLayer, set } from 'shared-utils/painterState'\nimport { LayerData } from 'tvs-painter'\nimport { makeClear } from 'tvs-painter/dist/lib/utils/context'\nimport { plane } from 'tvs-painter/dist/lib/utils/geometry/plane'\nimport { events, gl, paint, painter, State, state } from './context'\nimport base from './glsl/base.frag'\nimport planeFrag from './glsl/plane-material.frag'\nimport planeVert from './glsl/plane-material.vert'\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [0, 0, 0, 1]\n})\n\n// ===== gof layers =====\n\nconst paintLayer = getStaticLayer(painter, 'paint')\n\nconst bufferSize = 256\n\nconst layerProps: LayerData = {\n\tbuffered: true,\n\tflipY: true,\n\twidth: bufferSize,\n\theight: bufferSize,\n\tfrag: base,\n\twrap: 'REPEAT',\n\tdrawSettings: {\n\t\tdisable: [gl.DEPTH_TEST]\n\t}\n}\n\nconst layer1 = getEffectLayer(painter, 'layer1')\n\t.update(layerProps)\n\nconst layer2 = getEffectLayer(painter, 'layer2')\n\t.update({\n\t\t...layerProps,\n\t\tuniforms: {\n\t\t\tsize: bufferSize,\n\t\t\tpaint: () => paintLayer.texture(),\n\t\t\tprevious: () => layer1.texture()\n\t\t}\n\t})\n\nlayer1.update({\n\tuniforms: {\n\t\tsize: bufferSize,\n\t\tpaint: () => paintLayer.texture(),\n\t\tprevious: () => layer2.texture()\n\t}\n})\n\n// ===== scene =====\n\nconst planMat = mat4.fromTranslation(mat4.create(), [0, 0, -3])\nconst rotation = 0.001\nconst projection = mat4.perspective(mat4.create(), 45, 1, 0.01, 10)\n\n\nconst form = painter.createForm().update(plane(2, 2))\n\nconst shade = painter.createShade().update({\n\tvert: planeVert,\n\tfrag: planeFrag\n})\n\nconst sketch = painter.createSketch().update({\n\tform, shade,\n\tuniforms: {\n\t\ttransform: () => mat4.rotateY(planMat, planMat, rotation),\n\t\ttex: () => state.renderer.currentLayer.texture()\n\t}\n})\n\nexport const planeLayer = painter.createDrawingLayer().update({\n\tsketches: [sketch],\n\tuniforms: {\n\t\tprojection\n\t},\n\tdrawSettings: {\n\t\tclearColor: [0.0, 1.0, 0.0, 1.0],\n\t\tclearBits: makeClear(gl, 'color', 'depth')\n\t}\n})\n\n// ===== state =====\n\nexport class RenderState {\n\tcurrentLayer = layer1\n\n\tswitch = true\n\tswapLayers () {\n\t\tthis.switch = !this.switch\n\t\tthis.currentLayer = this.switch ? layer1 : layer2\n\t}\n}\n\nset<State>('renderer', new RenderState())\n\naddSystem<State>('renderer', (e, s) => {\n\tif (e === events.FRAME) {\n\t\ts.renderer.swapLayers()\n\t\tpaintLayer.update({ asset: paint })\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { dispatch, get } from 'shared-utils/painterState'\nimport { repeat } from 'shared-utils/scheduler'\nimport { events, painter, state } from './context'\nimport './paint'\nimport './renderer'\nimport { planeLayer } from './renderer'\n\n\nrepeat(tpf => {\n\tget('device').tpf = tpf\n\tdispatch(events.PROCESS_PAINT)\n\tdispatch(events.FRAME)\n\tpainter.compose(state.renderer.currentLayer, planeLayer)\n\tdispatch(events.CLEANUP_PAINT)\n}, 'loop')\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n        this.program = gl.createProgram();\n        this.frag = gl.createShader(gl.FRAGMENT_SHADER);\n        this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nimport { Painter } from './painter';\nimport { defaultTextureSettings, defaultShaders } from './asset-lib';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        if (data.asset) {\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n        }\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), data.doubleBuffered ? 2 : 1);\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag, vert: defaultShaders.basicEffect.vert });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' }\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n        this.result.shade.update(defaultShaders.basicEffect);\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) { return new Form(this.gl, id); }\n    createShade(id) { return new Shade(this.gl, id); }\n    createSketch(id) { return new Sketch(id); }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade')\n        });\n    }\n    createStaticLayer(id) { return new StaticLayer(this.gl, id); }\n    createDrawingLayer(id) { return new DrawingLayer(this.gl, id); }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings, uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        const i = layer.targets.length - 1;\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else if (layer.targets.length === 2) {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tsizeMultiplier: number\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: ActionHandler<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: ActionHandler<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize(state.device.sizeMultiplier)\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - (iy / gridY);\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new ((vertices.length / 3) > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = (ix + 1) + gridX1 * (iy + 1);\n            const d = (ix + 1) + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            'position': {\n                buffer: vertices\n            },\n            'normal': {\n                buffer: normals\n            },\n            'uv': {\n                buffer: uvs\n            }\n        },\n        elements: {\n            buffer: indices\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length\n    };\n}\n//# sourceMappingURL=plane.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","export function getContext(canvas, contextAttributes) {\n    const gl = canvas.getContext('webgl', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D paint;\\nuniform sampler2D previous;\\nuniform float size;\\nvarying vec2 coords;\\n\\nint getCell(vec2 uv) {\\n\\tvec4 paintTex = texture2D(paint, uv);\\n\\tvec4 prevTex = texture2D(previous, uv);\\n\\tif (paintTex.r > 0.0 || prevTex.r > 0.0) {\\n\\t\\treturn 1;\\n\\t} else {\\n\\t\\treturn 0;\\n\\t}\\n}\\n\\nvoid main() {\\n\\tfloat one = 1.0 / size;\\n\\tvec2 uvR = vec2(coords.x + one, coords.y);\\n\\tvec2 uvL = vec2(coords.x - one, coords.y);\\n\\tvec2 uvRT = vec2(coords.x + one, coords.y - one);\\n\\tvec2 uvLT = vec2(coords.x - one, coords.y - one);\\n\\tvec2 uvRB = vec2(coords.x + one, coords.y + one);\\n\\tvec2 uvLB = vec2(coords.x - one, coords.y + one);\\n\\tvec2 uvT = vec2(coords.x, coords.y - one);\\n\\tvec2 uvB = vec2(coords.x, coords.y + one);\\n\\n\\tvec4 paintTex = texture2D(paint, coords);\\n\\tvec4 prevTex = texture2D(previous, coords);\\n\\n\\tint cellL = getCell(uvL);\\n\\tint cellR = getCell(uvR);\\n\\tint cellT = getCell(uvT);\\n\\tint cellB = getCell(uvB);\\n\\tint cellTL = getCell(uvLT);\\n\\tint cellTR = getCell(uvRT);\\n\\tint cellBL = getCell(uvLB);\\n\\tint cellBR = getCell(uvRB);\\n\\n\\tint neighbours = cellL + cellR + cellT + cellB + cellTL + cellTR + cellBL + cellBR;\\n\\n\\tvec4 color = vec4(vec3(0.0), 1.0);\\n\\tif (neighbours == 3 || (neighbours == 2 && prevTex.r > 0.0) || paintTex.r > 0.0) {\\n\\t\\tcolor = vec4(1.0);\\n\\t}\\n\\n\\tgl_FragColor = color;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nuniform sampler2D tex;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\tgl_FragColor = texture2D(tex, vUv);\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform mat4 transform;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projection * transform * vec4(position, 1.0);\\n}\\n\"","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map"],"sourceRoot":""}