{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../libs/flow/dist/lib/utils/graph-utils.js","webpack:///../libs/flow/dist/lib/utils/entity-reference.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/math/random.js","webpack:///../libs/flow/dist/lib/runtime-types.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///../libs/utils/node_modules/gl-matrix/src/gl-matrix.js","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///../libs/utils/dist/lib/vr/flow-painter-utils.js","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///../libs/libs/dist/lib/utils/uuid.js","webpack:///./experiments/area-light/graph/painter.ts","webpack:///./experiments/area-light/graph/events.ts","webpack:///../libs/painter/dist/lib/utils/geometry/plane.js","webpack:///../libs/flow/dist/lib/runtime.js","webpack:///../libs/flow/dist/lib/utils/code-evaluator.js","webpack:///../libs/flow-tools/dist/tvs-flow-tools.js","webpack:///../libs/flow-tools/dist/lib/console/tree.js","webpack:///./shared-utils/reload.ts","webpack:///../libs/flow-tools/dist/lib/utils/webpack.js","webpack:///./experiments/area-light/graph/state.ts","webpack:///./experiments/area-light/graph/camera.ts","webpack:///../libs/utils/dist/lib/vr/flow-camera.js","webpack:///../libs/libs/dist/lib/events/animation.js","webpack:///./experiments/area-light/graph/shaders/shaders.ts","webpack:///./experiments/area-light/graph/geometries/plane.ts","webpack:///./experiments/area-light/graph/shaders/geo-vert.glsl","webpack:///./experiments/area-light/graph/shaders/geo-frag.glsl","webpack:///./experiments/area-light/graph/shaders/light-frag.glsl","webpack:///./experiments/area-light/graph sync \\.ts$","webpack:///./experiments/area-light/graph/renderer.ts","webpack:///./experiments/area-light/flow.ts","webpack:///./experiments/area-light/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","__assign","assign","arguments","length","val","stream","asyncStream","streamStart","asyncStreamStart","delta","isEntity","resolveEntityIds","getGraphFromAll","entity_reference_assign","streamNameSuffix","reactionNameSuffix","mergePath","id","path","createEntityRef","spec","accept","reset","uuid","streams","entity","HOT","type","runtime_types","COLD","_id","_ns","_value","updateVal","fn","a","getId","procedure","push","react","dependencies","processId","getStreamSpec","pidSuffix","deps","ACCUMULATOR","concat","getGraph","graph","entities","processes","arcs","meta","forEach","streamSpec","pid","reduce","dep","depId","ports","port","portId","arc_1","process","arc","async","autostart","e","es","g","g1","g2","merge","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","vec","stride","offset","count","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","defaultTextureSettings","getDefaultLayerSettings","defaultForms","defaultShaders","_contants__WEBPACK_IMPORTED_MODULE_0__","wrap","minFilter","magFilter","gl","clearColor","enable","DEPTH_TEST","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","renderQuad","attribs","[object Object]","buffer","storeType","drawType","itemCount","basicEffect","vert","frag","pickRandom","doTimes","times","zip","flatten","mapcat","map","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","isArray","obj","Keys","keyboard","opts","callback","cb","element","window","pressed","onKeydown","event","keyCode","Date","now","onKeyup","addEventListener","removeEventListener","getContext","canvas","contextAttributes","Error","makeClear","clearArray","item","toUpperCase","resizeCanvas","multiplier","width","clientWidth","height","clientHeight","randInt","int","randIntInRange","from","to","normalRand","createEntity","createProcess","createArc","PORT_TYPES","tvs_libs_dist_lib_utils_uuid__WEBPACK_IMPORTED_MODULE_0__","_utils_code_evaluator__WEBPACK_IMPORTED_MODULE_1__","_a","_b","json","undefined","JSON","parse","context","_c","code","_d","_e","_f","TypeError","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_rotate","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","mat4_fromQuat","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_mul","mat4_sub","vec2_create","unequal","equalArray","arr1","arr2","getBindPointForSamplerType","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","contants","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","updateRenderTarget","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","setting","disable","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearDepth","clearBits","clear","revertDrawSettings","formCounter","form_Form","this","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shadeCounter","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","line","join","sketchCounter","Sketch","drawSettings","form","shade","uniforms","destroy","staticLayerCount","layer_StaticLayer","_texture","asset","asset_lib","generateMipmap","drawingLayerCount","layer_DrawingLayer","targets","buffered","sequence","doubleBuffered","sketches","sketch","update","painter_Painter","resize","createForm","result","createFlatSketch","forceUpdateTargets","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","newLast","looping","directRender","renderLayer","composeLayers","defaultTexture","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","debug","setupPainter","makeShadeEntity","makeFormEntity","makeSketchEntity","makeStaticLayerEntity","makeDrawingLayerEntity","makeEffectLayerEntity","tvs_flow_dist_lib_utils_entity_reference__WEBPACK_IMPORTED_MODULE_0__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_1__","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_utils_predicates__WEBPACK_IMPORTED_MODULE_3__","windowSizeEntity","painterSettings","painter","send","canvasSize","_","updateDrawSettings","createStaticLayer","createEffectLayer","windowSize","innerWidth","innerHeight","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","mouse","Buttons","LEFT","MIDDLE","RIGHT","document","enableRightButton","state","drag","dX","dY","dragging","oX","oY","onMouseDown","button","clientX","clientY","onMouseUp","onMouseMove","preventDefault","v4","_rnds","_byteToHex","_hexToByte","rnds","_rng","buf","bth","unparse","tvs_utils_dist_lib_vr_flow_painter_utils__WEBPACK_IMPORTED_MODULE_1__","_events__WEBPACK_IMPORTED_MODULE_2__","tick","keys","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_events_animation__WEBPACK_IMPORTED_MODULE_4__","getElementById","plane","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","iy","ix","offset2","indices","position","normal","uv","_runtime_types__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_1__","engine","ps","setMeta","newMeta","setVal","engineE","flush","addEntity","eE","activatedEntities","processGraph","removeEntity","aId","removeArc","addProcess","eP","engineP","acc","values","sources","updateArc","removeProcess","stop","addArc","requestAnimationFrame","execute","effects","sink","reactions","pId","eId","blockFlush","addGraph","graphSpec","callbacksWaiting","log","activeEIds","_i","activeEIds_1","calledProcesses","activeEIds_2","cbs","complete","oldVal","runReactions","replaceGraph","newEntityIds","newProcessIds","filter","getState","getMeta","setContext","ctx","setDebug","isDebug","on","off","start","evaluate","prefix","postfix","factory","eval","configurable","default","u","empty","h","TypeStyle","types","extend","classes","media","autoGenerateTag","setStylesTarget","cssRaw","cssRule","forceRenderStyles","fontFace","getStyles","keyframes","reinit","style","createTypeStyle","O","action","SET_RUNTIME","payload","label","runtime","SELECT_ACTIVE_RUNTIME","PROCESS_RUN","PROCESS_STOP","ENTITY_RESET","ENTITY_INSPECT","I","C","M","N","A","ui","tree","viewBox","activeWindow","MAIN","SET_ACTIVE_WINDOW","UPDATE_VISIBILITY","visible","CLOSE_WINDOW","MOVE_WINDOW","controls","area","RESIZE_WINDOW","TREE","TOGGLE_LEVEL","fold","ENTITY","SET_ACTIVE_ENTITY","activeEntityId","activeProcessId","watchingEntity","SET_ACTIVE_PROCESS","RESET_ACTIVE_NODE","SAVE_VALUE","T","WATCH_ACTIVE_ENTITY","SET_VIEW_MODE","viewMode","SAVE_META","GRAPH","MOVE_VIEWPORT","offsetX","offsetY","UPDATE_SCALE","UPDATE_SIZE","MOVE_ENTITY_POSITION","E","borderRadius","backgroundColor","boxShadow","borderTop","borderBottom","padding","listStyle","zIndex","fontSize","fontFamily","lineHeight","color","userSelect","$nest","& *","MozUserSelect","pop","group","createEntityTree","sort","slice","shift","__path__","__entity__","namespace","find","eid","reaction","output","inputs","printEntityName","metaEntity","enhancedGraphData","visibility","replace","charCodeAt","IS_UNIQUE","styleString","nestedStyles","isUnique","hash","escape","cache","__extends","setPrototypeOf","__proto__","constructor","toLowerCase","hyphenate","stringHash","change","remove","changes","sheet","changeId","_keys","_children","_counters","getIdentifier","splice","unmerge","Cache","selector","Selector","Style","rule","Rule","registerStyle","registerKeyframes","registerHashRule","registerRule","registerCss","FreeStyle","margin","verticalAlign","display","& input","border","cursor","outline","& > svg","&.selected","&.tiny","background","metaTree","metaGraph","metaControls","DETAILS","VALUE","class","fill","strokeWidth","stroke","title","onclick","icon","onmouseup","whiteSpace","& h1, & h2","fontWeight","& ul","& li","& nav","flexDirection","paddingTop","alignItems","alignContent","&>.resize","&>header","minHeight","&>header input","&>header .gap","flexGrow","overflow","& h3","& a","&:hover, &:focus","textDecoration","& td, & th","paddingRight","paddingBottom","textAlign","& p, & div","marginTop","marginBottom","paddingLeft","&>li","& .entity-controls","& .entity-item:hover>.entity-controls","& .entity-item.selected","& pre","modulePathToNamespace","getGraphFromModules","setTimeout","raf","orientation","minWidth","maxWidth","maxHeight","contains","onmousedown","currentTarget","entityWindow","activeNode","dimensions","node","controlsPosition","treeWindow","graphWindow","activeEntity","activeValue","metaEntities","watching","activeProcess","P","active","initial","fromIsActive","edges","selected","flowComponentFactory","current","setState","updateAsync","render","componentDidMount","componentWillUnmount","entityData","webpack","yoyo","createElement","className","body","appendChild","text","stringify","selectedRuntimeId","localStorage","setItem","setFlow","getItem","dispose","removeChild","getElement","treeData","graphData","ref","querySelector","processViewProps","entityViewProps","onClick","treeWindowProps","graphWindowProps","entityWindowProps","controlProps","_raw","_pendingRawChange","_styleUpdated","_freeStyle","_getTag","textContent","$debugName","_lastFreeStyleChangeId","_tag","debugName","_autoGenerateTag","_pending","_afterAllSync","head","run","clearTimeout","fun","nextTick","browser","env","argv","version","versions","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","ensureStringObj","explodeKeyframes","exec","parseFloat","match","parseInt","_format","_hasAlpha","_values","convertHelper","toHexString","toHSL","toHSLA","toRGB","toRGBA","red","green","blue","hue","saturation","lightness","alpha","opacity","lighten","darken","saturate","desaturate","grayscale","fade","fadeOut","fadeIn","mix","tint","spin","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","purple","rebeccapurple","silver","teal","transparent","white","yellow","step","onchange","onmousemove","stopPropagation","oncontextmenu","transform","data-eid","text-anchor","& svg","& text","paintOrder","& line","&.active","&.to","&.to.async","strokeDasharray","&.to.acc","&.from","&.from.cold","& rect","&.accept","& .group-1 rect","& .group-1.active rect","& circle.group-1","& circle.group-1.active","& .group-1 .initial","& .group-1 .accept","& .group-2 rect","& .group-2.active rect","& circle.group-2","& circle.group-2.active","& .group-2 .initial","& .group-2 .accept","& .group-3 rect","& .group-3.active rect","& circle.group-3","& circle.group-3.active","& .group-3 .initial","& .group-3 .accept","& .group-4 rect","& .group-4.active rect","& circle.group-4","& circle.group-4.active","& .group-4 .initial","& .group-4 .accept","& .group-5 rect","& .group-5.active rect","& circle.group-5","& circle.group-5.active","& .group-5 .initial","& .group-5 .accept","& .group-6 rect","& .group-6.active rect","& circle.group-6","& circle.group-6.active","& .group-6 .initial","& .group-6 .accept","& .group-7 rect","& .group-7.active rect","& circle.group-7","& circle.group-7.active","& .group-7 .initial","& .group-7 .accept","message","contentEditable","onInput","unshift","getTime","RegExp","_unmounted","_blockRender","_pendingSetState","_pendingState","props","_updateComponent","createVNode","_lastInput","_vNode","dom","parentNode","flags","parentVNode","getChildContext","_childContext","_lifecycle","internal_patch","_isSVG","trigger","componentDidUpdate","options","afterUpdate","findDOMNodeEnabled","internal_DOMNodeMap","Map","Promise","resolve","_blockSetState","_updating","EMPTY_OBJ","forceUpdate","then","delete","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","beforeRender","afterRender","Se","Ue","items","docEvent","disabled","cancelBubble","De","stopImmediatePropagation","vNode","Be","oninput","onChange","checked","multiple","defaultValue","setAttribute","children","xe","ge","wrapped","nodeType","tagName","J","ue","firstChild","Boolean","dangerouslySetInnerHTML","__html","le","createTextNode","replaceChild","nextSibling","previousSibling","nodeValue","B","F","removeAttribute","ee","namespaceURI","Ne","te","Z","Ie","Ge","re","Q","$","R","beforeUnmount","onComponentWillUnmount","recyclingEnabled","onComponentWillMount","onComponentDidMount","onComponentWillUpdate","onComponentDidUpdate","Ve","keyed","nonKeyed","G","Ye","H","L","ze","ke","Fe","de","input","lifecycle","D","W","Y","ne","X","V","U","se","ce","ie","K","ae","oe","he","ve","onComponentShouldUpdate","Le","has","Pe","Ae","cssText","He","innerHTML","Re","setAttributeNS","We","afterMount","componentWillMount","insertBefore","fe","Te","pe","ye","me","be","Oe","we","defaultProps","Ee","je","roots","Ce","Me","Set","navigator","platform","test","$e","NO_OP","cloneVNode","createRenderer","findDOMNode","getFlagsForElementVnode","internal_isUnitlessNumber","internal_normalize","linkEvent","hasAttribute","getAttribute","iterator","writable","ReferenceError","getPrototypeOf","resolveOptions","listenClick","defaultAction","defaultTarget","defaultText","container","listener","delegateTarget","clipboardAction","emitter","queryCommandSupported","initSelection","selectedText","selectFake","selectTarget","documentElement","removeFake","fakeHandlerCallback","fakeHandler","fakeElem","pageYOffset","scrollTop","copyText","execCommand","handleResult","clearSelection","focus","getSelection","removeAllRanges","_action","_target","nodeName","select","setSelectionRange","createRange","selectNodeContents","addRange","string","nodeList","HTMLElement","String","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","valueOf","NaN","self","Function","leading","maxWait","trailing","cancel","./events.ts","./state/entity.ts","./state/flow.ts","./state/graph.ts","./state/gui.ts","./state/tree.ts","./state/views.ts","watch","unwatch","flow","callAll","createTree","root","pathstring","createObject","streamIds","updateFlow","graphModules","nsSeparator","entity_reference","separator","groundColor","groundTransform","animate","rotationSpeed","lightRotation","time","lightPosition","lightColor","lightBackColor","lightTransforms","gl_matrix__WEBPACK_IMPORTED_MODULE_1__","rot","speed","pos","mats","camera_position","camera_rotX","camera_rotY","camera_rotation","camera_view","camera_perspectiveSettings","camera_perspective","moveSpeed","lookSpeed","moveForward","moveLeft","mouseDrag","dragDeltas","rotX","rotY","rotation","gl_matrix","makeFirstPersonView","lib_gl_matrix","perspectiveSettings","makePerspective","events","UP","DOWN","forward","animateWithTPF","oldTime","isRunning","next","newTime","geoSpec","lightFrag","_geo_vert_glsl__WEBPACK_IMPORTED_MODULE_1__","_geo_vert_glsl__WEBPACK_IMPORTED_MODULE_1___default","_geo_frag_glsl__WEBPACK_IMPORTED_MODULE_2__","_geo_frag_glsl__WEBPACK_IMPORTED_MODULE_2___default","_light_frag_glsl__WEBPACK_IMPORTED_MODULE_3__","_light_frag_glsl__WEBPACK_IMPORTED_MODULE_3___default","geometry","tvs_painter_dist_lib_utils_geometry_plane__WEBPACK_IMPORTED_MODULE_0__","tvs_flow_dist_lib_utils_entity_reference__WEBPACK_IMPORTED_MODULE_1__","segX","segY","./camera.ts","./geometries/plane.ts","./painter.ts","./renderer.ts","./shaders/shaders.ts","./state.ts","webpackContext","req","webpackContextResolve","planeForm","geoShade","image","textureData","groundSketch","lightSketch","sceneLayer","lightLayer","_painter__WEBPACK_IMPORTED_MODULE_2__","_events__WEBPACK_IMPORTED_MODULE_3__","_camera__WEBPACK_IMPORTED_MODULE_4__","_geometries_plane__WEBPACK_IMPORTED_MODULE_5__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_6__","_state__WEBPACK_IMPORTED_MODULE_7__","_shaders_shaders__WEBPACK_IMPORTED_MODULE_8__","img","Image","onload","tex","frontMat","backMat","backColor","CULL_FACE","light","ground","projection","scene","eyePosition","lightMats","lightMat","positions","colors","BLEND","compose","tools","tvs_flow_tools","nodes","reload"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,IAIAlC,IAAAmC,EAAA,mCClFAnC,EAAAU,EAAA0B,EAAA,sBAAAC,IAAArC,EAAAU,EAAA0B,EAAA,sBAAAE,IAAAtC,EAAAU,EAAA0B,EAAA,sBAAAG,IAAAvC,EAAAU,EAAA0B,EAAA,sBAAAI,IAAAxC,EAAAU,EAAA0B,EAAA,sBAAAK,IAAAzC,EAAAU,EAAA0B,EAAA,sBAAAM,IAAO,MAAAL,EAAA,WACAC,EAAA,SACAC,EAAA,KACAC,EAAA,SACAC,EAAA,SACAC,GACPC,MAAA,KACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,IAAA,KACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,KAAA,MACAC,UAAA,MACAC,UAAA,MACAC,UAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,aAAA,MACAC,WAAA,MACAC,kBAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,aAAA,MACAC,iBAAA,MACAC,wBAAA,MACAC,oBAAA,MACAC,aAAA,KACAC,kBAAA,MACAC,kBAAA,MACAC,kBAAA,MACAC,eAAA,MACAC,eAAA,MACAC,iBAAA,MACAC,qBAAA,MACAC,wBAAA,MACAC,wBAAA,MACAC,0BAAA,MACAC,8BAAA,MACAC,WAAA,KACAC,iBAAA,MACAC,WAAA,MACAC,iBAAA,MACAC,KAAA,KACAC,cAAA,KACAC,MAAA,KACAC,eAAA,KACAC,uBAAA,MACAC,uBAAA,MACAC,qBAAA,MACAC,WAAA,KACAC,4BAAA,MACAC,6BAAA,MACAC,yBAAA,MACAC,+BAAA,MACAC,kBAAA,qCC9DA,IAAAC,EAA4BtF,OAAAuF,QAAA,SAAA/E,GAC5B,QAAAa,EAAA/B,EAAA,EAAAyB,EAAAyE,UAAAC,OAA4CnG,EAAAyB,EAAOzB,IAEnD,QAAA8B,KADAC,EAAAmE,UAAAlG,GACAU,OAAAkB,UAAAC,eAAA1B,KAAA4B,EAAAD,KACAZ,EAAAY,GAAAC,EAAAD,IAEA,OAAAZ,uBCNAtB,EAAAU,EAAA0B,EAAA,sBAAAoE,IAAAxG,EAAAU,EAAA0B,EAAA,sBAAAqE,IAAAzG,EAAAU,EAAA0B,EAAA,sBAAAsE,IAAA1G,EAAAU,EAAA0B,EAAA,sBAAAuE,IAAA3G,EAAAU,EAAA0B,EAAA,sBAAAwE,IAAA5G,EAAAU,EAAA0B,EAAA,sBAAAyE,IAAA7G,EAAAU,EAAA0B,EAAA,sBAAA0E,IAAA9G,EAAAU,EAAA0B,EAAA,sBAAA2E,IAAA/G,EAAAU,EAAA0B,EAAA,sBAAA4E,IAAA,IAAIC,EAAwBnG,OAAAuF,QAAA,SAAA/E,GAC5B,QAAAa,EAAA/B,EAAA,EAAAyB,EAAAyE,UAAAC,OAA4CnG,EAAAyB,EAAOzB,IAEnD,QAAA8B,KADAC,EAAAmE,UAAAlG,GACAU,OAAAkB,UAAAC,eAAA1B,KAAA4B,EAAAD,KACAZ,EAAAY,GAAAC,EAAAD,IAEA,OAAAZ,GAKA4F,EAAA,SACAC,EAAA,WACA,SAAAC,EAAAC,EAAAC,GACA,OAAAA,IAAA,IAAAD,IAEA,SAAAE,EAAAC,GACA,IAEA/F,EACAgG,EACAC,EAJArG,EAAAmG,EAAAnG,MACAgG,EAAavG,OAAA6G,EAAA,EAAA7G,GAIb8G,KACAC,KAwFA,OAvFAA,EAAAC,KACAD,SACAE,KAAcC,EAAA,EAAUF,KAExBD,EAAAI,MACAJ,SACAE,KAAcC,EAAA,EAAUC,MAExBJ,EAAAR,GAAA,SAAAa,EAAAC,GAGA,OAFAd,EAAAD,EAAAc,EAAAC,GACA1G,EAAA0G,EACAN,GAEAA,EAAArB,IAAA,SAAA4B,GAEA,OADA/G,EAAA+G,EACAP,GAEAA,EAAAQ,UAAA,SAAAC,GAEA,OADAjH,EAAAiH,EAAAjH,GACAwG,GAEAA,EAAAJ,OAAA,SAAAc,GAEA,OADAd,EAAAc,EACAV,GAEAA,EAAAH,MAAA,WAEA,OADAA,GAAA,EACAG,GAEAA,EAAAW,MAAA,WAAgC,OAAAnB,GAChCG,EAAAiB,WACAb,EAAAc,KAAAlB,GAEAK,EAAAc,MAAA,SAAAC,EAAAH,EAAAI,GACA,IAAArB,EAAAsB,EAAAF,EAAAH,EAAAI,GACArB,EAAAuB,UAAA5B,EACA,IAAA6B,EAAAxB,EAAAoB,aAMA,OALApB,EAAAoB,eAA8Bf,SAAAE,KAAuBC,EAAA,EAAUiB,cAC/DD,KAAAzC,SACAiB,EAAAoB,aAAApB,EAAAoB,aAAAM,OAAAF,IAEApB,EAAAc,KAAAlB,GACAK,GAEAA,EAAAsB,SAAA,WACA,IAAAC,GD3DAC,YACAC,aACAC,QACAC,SCgGA,OAvCAJ,EAAAC,SAAAhC,GAA6BvG,OAAAkH,EAAA,EAAAlH,EAAcuG,KAAAhG,QAAAoG,SAAAC,UAC3CE,EAAA6B,QAAA,SAAAC,GACA,IAAAV,EAAAU,EAAAd,aACAe,EAAAD,EAAAb,UACAzB,EAAAsC,EAAAb,UAAApH,GACA4F,EAAAqC,EAAAX,WAAAC,KAAAzC,OACA,IAAAyC,EAAAY,OAAA,SAAAjJ,EAAAkJ,GACA,IAAAC,EAAAD,EAAAhC,OAAAW,QACA,OAAAsB,IAAAzC,EACA1G,EAEAA,EAAA,IAAAmJ,GACqB,IACrB,IACAC,KACAf,GACAA,EAAAS,QAAA,SAAAO,EAAAC,GAEA,GADAF,EAAAE,GAAAD,EAAAjC,KACAiC,EAAAjC,OAAsCC,EAAA,EAAUiB,YAAA,CAChD,IAAAiB,EAAoCpJ,OAAAkH,EAAA,EAAAlH,EACpCqJ,QAAAR,EACA9B,OAAAmC,EAAAnC,OAAAW,QACAwB,KAAAC,IAEAb,EAAAG,KAAAW,EAAA7C,IAAA6C,KAIA,IAAAE,EAAsBtJ,OAAAkH,EAAA,EAAAlH,EAAWqJ,QAAAR,EAAA9B,OAAAR,IACjC+B,EAAAG,KAAAa,EAAA/C,IAAA+C,EACAhB,EAAAE,UAAAK,GAAmC7I,OAAAkH,EAAA,EAAAlH,EACnCuG,GAAAsC,EACAI,QACAtB,UAAAiB,EAAAjB,UACA4B,MAAAX,EAAAW,MACAC,UAAAZ,EAAAY,UACAzD,MAAA6C,EAAA7C,UAGAuC,GAEAvB,EAEO,SAAArB,EAAAnF,GACP,OAAAkG,GAA4BlG,UAE5B,SAAAyH,EAAAF,EAAAH,EAAAI,GACA,IAAArB,GACAiB,aAWA,OATA,MAAAG,KAAArC,SACAiB,EAAAoB,gBAEA,iBAAAC,EACArB,EAAAqB,YAGArB,EAAAuB,UAAA7B,EAEAM,EAEO,IAAAf,EAAA,SAAAmC,EAAAH,EAAAI,GACP,OAAAtB,EAAAuB,EAAAF,EAAAH,EAAAI,KAEOnC,EAAA,SAAAkC,EAAAH,EAAAI,GACP,OAAAtB,EAA2BN,KAAW6B,EAAAF,EAAAH,EAAAI,IAAsDwB,OAAA,MAErF1D,EAAA,SAAAiC,EAAAH,EAAAI,GACP,OAAAtB,EAA2BN,KAAW6B,EAAAF,EAAAH,EAAAI,IAAsDyB,WAAA,MAErF1D,EAAA,SAAAgC,EAAAH,EAAAI,GACP,OAAAtB,EAA2BN,KAAW6B,EAAAF,EAAAH,EAAAI,IAAsDwB,OAAA,EAAAC,WAAA,MAErFzD,EAAA,SAAAgB,EAAAY,EAAAI,GAAqD,OAAAtB,EAAwBN,KAAW6B,GAAAjB,EAAAC,KAAAW,EAAAI,IAAsDhC,OAAA,MAC9I,SAAAC,EAAAyD,GACP,OAAAA,GACA,mBAAAA,EAAAlD,IACA,mBAAAkD,EAAApB,UACAoB,EAAAzC,KAAAyC,EAAAtC,KAEO,SAAAlB,EAAAsC,EAAA/B,GACP,QAAAD,KAAAgC,EAAA,CACA,IAAAkB,EAAAlB,EAAAhC,GACAP,EAAAyD,IACAA,EAAAlD,KAAAC,GAGA,OAAA+B,EAEO,SAAArC,EAAAqC,GACP,IAAAmB,KACA,QAAAnD,KAAAgC,EAAA,CACA,IAAAkB,EAAAlB,EAAAhC,GACAP,EAAAyD,IACAC,EAAA9B,KAAA6B,GAGA,OAAAC,EAAAZ,OAAA,SAAAa,EAAAF,GAAsC,ODvJ/B,SAAAG,EAAAC,GACP,OACAtB,SAAAjD,KAA6BsE,EAAArB,SAAAsB,EAAAtB,UAC7BC,UAAAlD,KAA8BsE,EAAApB,UAAAqB,EAAArB,WAC9BC,KAAAnD,KAAyBsE,EAAAnB,KAAAoB,EAAApB,MACzBC,KAAApD,KAAyBsE,EAAAlB,KAAAmB,EAAAnB,OCkJqBoB,CAAYH,EAAAF,EAAApB,cD7J1DE,YACAC,aACAC,QACAC,okKEPO,IAAAqB,EAAA,KACAC,EAAA,oBAAAC,0BAAAC,MACAC,EAAAC,KAAAC,OAWPD,KAAAE,GCPO,SAAA1J,IACP,IAAA2J,EAAA,IAAgBP,EAAmB,IAmBnC,OAlBMA,GAAmBC,eACzBM,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,OAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EASO,SAAAC,EAAA/C,GACP,IAAA8C,EAAA,IAAgBP,EAAmB,IAiBnC,OAhBAO,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAUO,SAAAE,EAAAF,EAAA9C,GAiBP,OAhBA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAwBO,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAnB,EAAA,IAAgBP,EAAmB,IAiBnC,OAhBAO,EAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,EAAA,GAAAa,EACAb,EAAA,IAAAc,EACAd,EAAA,IAAAe,EACAf,EAAA,IAAAgB,EACAhB,EAAA,IAAAiB,EACAjB,EAAA,IAAAkB,EACAlB,EAAA,IAAAmB,EACAnB,EAyBO,SAAAoB,EAAApB,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAiBP,OAhBAnB,EAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,EAAA,GAAAa,EACAb,EAAA,IAAAc,EACAd,EAAA,IAAAe,EACAf,EAAA,IAAAgB,EACAhB,EAAA,IAAAiB,EACAjB,EAAA,IAAAkB,EACAlB,EAAA,IAAAmB,EACAnB,EASO,SAAAqB,EAAArB,GAiBP,OAhBAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAUO,SAAAsB,EAAAtB,EAAA9C,GAEP,GAAA8C,IAAA9C,EAAA,CACA,IAAAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA0E,EAAA1E,EAAA,IAEA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAAuB,EACAvB,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAAwB,EACAxB,EAAA,GAAA0B,EACA1B,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAAyB,EACAzB,EAAA,IAAA2B,EACA3B,EAAA,IAAA4B,OAEA5B,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IAGA,OAAA8C,EAUO,SAAA6B,EAAA7B,EAAA9C,GACP,IAAA4E,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IACAmF,EAAAnF,EAAA,IACAoF,EAAApF,EAAA,IACAqF,EAAArF,EAAA,IAEAsF,EAAAV,EAAAE,EAAAT,EAAAQ,EACAU,EAAAX,EAAAJ,EAAAF,EAAAO,EACAW,EAAAZ,EAAAH,EAAAF,EAAAM,EACAY,EAAApB,EAAAG,EAAAF,EAAAQ,EACAY,EAAArB,EAAAI,EAAAF,EAAAO,EACAa,EAAArB,EAAAG,EAAAF,EAAAC,EACAoB,EAAAb,EAAAI,EAAAH,EAAAE,EACAW,EAAAd,EAAAK,EAAAH,EAAAC,EACAY,EAAAf,EAAAM,EAAAX,EAAAQ,EACAa,EAAAf,EAAAI,EAAAH,EAAAE,EACAa,EAAAhB,EAAAK,EAAAX,EAAAS,EACAc,EAAAhB,EAAAI,EAAAX,EAAAU,EAGAc,EAAAZ,EAAAW,EAAAV,EAAAS,EAAAR,EAAAO,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAAM,GAGAA,EAAA,EAAAA,EAEApD,EAAA,IAAAgC,EAAAmB,EAAAzB,EAAAwB,EAAAvB,EAAAsB,GAAAG,EACApD,EAAA,IAAAwB,EAAA0B,EAAA3B,EAAA4B,EAAA1B,EAAAwB,GAAAG,EACApD,EAAA,IAAAqC,EAAAQ,EAAAP,EAAAM,EAAAL,EAAAI,GAAAS,EACApD,EAAA,IAAAmC,EAAAS,EAAAV,EAAAW,EAAAjB,EAAAe,GAAAS,EACApD,EAAA,IAAA0B,EAAAsB,EAAAjB,EAAAoB,EAAAxB,EAAAoB,GAAAK,EACApD,EAAA,IAAA8B,EAAAqB,EAAA3B,EAAAwB,EAAAvB,EAAAsB,GAAAK,EACApD,EAAA,IAAAsC,EAAAI,EAAAN,EAAAS,EAAAN,EAAAE,GAAAW,EACApD,EAAA,IAAAiC,EAAAY,EAAAV,EAAAO,EAAAd,EAAAa,GAAAW,EACApD,EAAA,IAAA+B,EAAAmB,EAAAlB,EAAAgB,EAAArB,EAAAmB,GAAAM,EACApD,EAAA,IAAAuB,EAAAyB,EAAAlB,EAAAoB,EAAAzB,EAAAqB,GAAAM,EACApD,EAAA,KAAAoC,EAAAQ,EAAAP,EAAAK,EAAAH,EAAAC,GAAAY,EACApD,EAAA,KAAAkC,EAAAQ,EAAAT,EAAAW,EAAAhB,EAAAY,GAAAY,EACApD,EAAA,KAAAgC,EAAAe,EAAAhB,EAAAkB,EAAAvB,EAAAoB,GAAAM,EACApD,EAAA,KAAA8B,EAAAmB,EAAA1B,EAAAwB,EAAAvB,EAAAsB,GAAAM,EACApD,EAAA,KAAAqC,EAAAI,EAAAL,EAAAO,EAAAL,EAAAE,GAAAY,EACApD,EAAA,KAAAiC,EAAAU,EAAAT,EAAAO,EAAAN,EAAAK,GAAAY,EAEApD,GArBA,KA+BO,SAAAqD,EAAArD,EAAA9C,GACP,IAAA4E,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IACAmF,EAAAnF,EAAA,IACAoF,EAAApF,EAAA,IACAqF,EAAArF,EAAA,IAkBA,OAhBA8C,EAAA,GAAAgC,GAAAG,EAAAI,EAAAX,EAAAU,GAAAJ,GAAAR,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAE,EAAAD,EAAAQ,GACAnC,EAAA,KAAAuB,GAAAY,EAAAI,EAAAX,EAAAU,GAAAJ,GAAAV,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAI,EAAAH,EAAAU,IACAnC,EAAA,GAAAuB,GAAAG,EAAAa,EAAAZ,EAAAW,GAAAN,GAAAR,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAG,EAAAF,EAAAC,GACA1B,EAAA,KAAAuB,GAAAG,EAAAE,EAAAD,EAAAQ,GAAAH,GAAAR,EAAAI,EAAAH,EAAAU,GAAAD,GAAAV,EAAAG,EAAAF,EAAAC,IACA1B,EAAA,KAAA+B,GAAAI,EAAAI,EAAAX,EAAAU,GAAAL,GAAAP,EAAAa,EAAAZ,EAAAW,GAAAF,GAAAV,EAAAE,EAAAD,EAAAQ,IACAnC,EAAA,GAAA8B,GAAAK,EAAAI,EAAAX,EAAAU,GAAAL,GAAAT,EAAAe,EAAAd,EAAAa,GAAAF,GAAAZ,EAAAI,EAAAH,EAAAU,GACAnC,EAAA,KAAA8B,GAAAJ,EAAAa,EAAAZ,EAAAW,GAAAP,GAAAP,EAAAe,EAAAd,EAAAa,GAAAF,GAAAZ,EAAAG,EAAAF,EAAAC,IACA1B,EAAA,GAAA8B,GAAAJ,EAAAE,EAAAD,EAAAQ,GAAAJ,GAAAP,EAAAI,EAAAH,EAAAU,GAAAF,GAAAT,EAAAG,EAAAF,EAAAC,GACA1B,EAAA,GAAA+B,GAAAG,EAAAK,EAAAX,EAAAS,GAAAJ,GAAAD,EAAAO,EAAAZ,EAAAU,GAAAD,GAAAJ,EAAAJ,EAAAD,EAAAO,GACAlC,EAAA,KAAA8B,GAAAI,EAAAK,EAAAX,EAAAS,GAAAJ,GAAAV,EAAAgB,EAAAd,EAAAY,GAAAD,GAAAb,EAAAK,EAAAH,EAAAS,IACAlC,EAAA,IAAA8B,GAAAE,EAAAO,EAAAZ,EAAAU,GAAAN,GAAAR,EAAAgB,EAAAd,EAAAY,GAAAD,GAAAb,EAAAI,EAAAF,EAAAO,GACAhC,EAAA,MAAA8B,GAAAE,EAAAJ,EAAAD,EAAAO,GAAAH,GAAAR,EAAAK,EAAAH,EAAAS,GAAAD,GAAAV,EAAAI,EAAAF,EAAAO,IACAhC,EAAA,MAAA+B,GAAAG,EAAAI,EAAAH,EAAAE,GAAAJ,GAAAD,EAAAM,EAAAZ,EAAAW,GAAAD,GAAAJ,EAAAG,EAAAT,EAAAQ,IACAlC,EAAA,IAAA8B,GAAAI,EAAAI,EAAAH,EAAAE,GAAAJ,GAAAV,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAY,EAAAX,EAAAU,GACAlC,EAAA,MAAA8B,GAAAE,EAAAM,EAAAZ,EAAAW,GAAAN,GAAAR,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAG,EAAAF,EAAAQ,IACAhC,EAAA,IAAA8B,GAAAE,EAAAG,EAAAT,EAAAQ,GAAAH,GAAAR,EAAAY,EAAAX,EAAAU,GAAAD,GAAAV,EAAAG,EAAAF,EAAAQ,GACAhC,EASO,SAAAsD,EAAApG,GACP,IAAA4E,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IACAmF,EAAAnF,EAAA,IACAoF,EAAApF,EAAA,IACAqF,EAAArF,EAAA,IAgBA,OAdA4E,EAAAE,EAAAT,EAAAQ,IAWAI,EAAAI,EAAAX,EAAAU,IAVAR,EAAAJ,EAAAF,EAAAO,IASAG,EAAAK,EAAAX,EAAAS,IARAP,EAAAH,EAAAF,EAAAM,IAOAG,EAAAI,EAAAH,EAAAE,IANAd,EAAAG,EAAAF,EAAAQ,IAKAC,EAAAM,EAAAX,EAAAQ,IAJAb,EAAAI,EAAAF,EAAAO,IAGAC,EAAAK,EAAAH,EAAAC,IAFAZ,EAAAG,EAAAF,EAAAC,IACAO,EAAAI,EAAAH,EAAAE,GAmBO,SAAAmB,EAAAvD,EAAA9C,EAAAsG,GACP,IAAA1B,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IACAmF,EAAAnF,EAAA,IACAoF,EAAApF,EAAA,IACAqF,EAAArF,EAAA,IAGAuG,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GAuBA,OAtBAxD,EAAA,GAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,GAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,GAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,GAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EAEAkB,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GAAUG,EAAAH,EAAA,GAAUI,EAAAJ,EAAA,GAChCxD,EAAA,GAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,GAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,GAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,GAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EAEAkB,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GAAUG,EAAAH,EAAA,IAAWI,EAAAJ,EAAA,IACjCxD,EAAA,GAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,GAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,IAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,IAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EAEAkB,EAAAD,EAAA,IAAaE,EAAAF,EAAA,IAAWG,EAAAH,EAAA,IAAWI,EAAAJ,EAAA,IACnCxD,EAAA,IAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,IAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,IAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,IAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EACAvC,EAWO,SAAA6D,EAAA7D,EAAA9C,EAAA4G,GACP,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAhC,OAAA,EACAP,OAAA,EACAC,OAAA,EACAC,OAAA,EACAM,OAAA,EACAC,OAAA,EACAN,OAAA,EACAC,OAAA,EACAM,OAAA,EACAC,OAAA,EACAC,OAAA,EACAP,OAAA,EAsBA,OApBA1E,IAAA8C,GACAA,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,IAAA+G,EAAA/G,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,IAAA+G,EAAA/G,EAAA,MAEA4E,EAAA5E,EAAA,GAAeqE,EAAArE,EAAA,GAAWsE,EAAAtE,EAAA,GAAWuE,EAAAvE,EAAA,GACrC6E,EAAA7E,EAAA,GAAe8E,EAAA9E,EAAA,GAAWwE,EAAAxE,EAAA,GAAWyE,EAAAzE,EAAA,GACrC+E,EAAA/E,EAAA,GAAegF,EAAAhF,EAAA,GAAWiF,EAAAjF,EAAA,IAAY0E,EAAA1E,EAAA,IAEtC8C,EAAA,GAAA8B,EAAiB9B,EAAA,GAAAuB,EAAavB,EAAA,GAAAwB,EAAaxB,EAAA,GAAAyB,EAC3CzB,EAAA,GAAA+B,EAAiB/B,EAAA,GAAAgC,EAAahC,EAAA,GAAA0B,EAAa1B,EAAA,GAAA2B,EAC3C3B,EAAA,GAAAiC,EAAiBjC,EAAA,GAAAkC,EAAalC,EAAA,IAAAmC,EAAcnC,EAAA,IAAA4B,EAE5C5B,EAAA,IAAA8B,EAAAiC,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/G,EAAA,IACA8C,EAAA,IAAAuB,EAAAwC,EAAA/B,EAAAgC,EAAA9B,EAAA+B,EAAA/G,EAAA,IACA8C,EAAA,IAAAwB,EAAAuC,EAAArC,EAAAsC,EAAA7B,EAAA8B,EAAA/G,EAAA,IACA8C,EAAA,IAAAyB,EAAAsC,EAAApC,EAAAqC,EAAApC,EAAAqC,EAAA/G,EAAA,KAGA8C,EAWO,SAASkE,EAAKlE,EAAA9C,EAAA4G,GACrB,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GAkBA,OAhBA9D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA+G,EACAjE,EAAA,GAAA9C,EAAA,GAAA+G,EACAjE,EAAA,IAAA9C,EAAA,IAAA+G,EACAjE,EAAA,IAAA9C,EAAA,IAAA+G,EACAjE,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAYO,SAAAmE,EAAAnE,EAAA9C,EAAAkH,EAAAC,GACP,IAIAvN,EACA1B,EACAa,EACA6L,EACAP,EACAC,EACAC,EACAM,EACAC,EACAN,EACAC,EACAM,EACAC,EACAC,EACAP,EACAY,EACAC,EACAC,EACAQ,EACAC,EACAmB,EACAC,EACAC,EACAC,EA3BAV,EAAAM,EAAA,GACAL,EAAAK,EAAA,GACAJ,EAAAI,EAAA,GACAK,EAAA7E,KAAA8E,KAAAZ,IAAAC,IAAAC,KA0BA,OAAAS,EAAYlF,EACZ,MAIAuE,GADAW,EAAA,EAAAA,EAEAV,GAAAU,EACAT,GAAAS,EAEA5N,EAAA+I,KAAA+E,IAAAR,GAEAnO,EAAA,GADAb,EAAAyK,KAAAgF,IAAAT,IAGAtC,EAAA5E,EAAA,GAAaqE,EAAArE,EAAA,GAAWsE,EAAAtE,EAAA,GAAWuE,EAAAvE,EAAA,GACnC6E,EAAA7E,EAAA,GAAa8E,EAAA9E,EAAA,GAAWwE,EAAAxE,EAAA,GAAWyE,EAAAzE,EAAA,GACnC+E,EAAA/E,EAAA,GAAagF,EAAAhF,EAAA,GAAWiF,EAAAjF,EAAA,IAAY0E,EAAA1E,EAAA,IAGpCsF,EAAAuB,IAAA9N,EAAAb,EAAsBqN,EAAAuB,EAAAD,EAAA9N,EAAAgO,EAAAnN,EAAwB4L,EAAAuB,EAAAF,EAAA9N,EAAA+N,EAAAlN,EAC9CoM,EAAAa,EAAAC,EAAA/N,EAAAgO,EAAAnN,EAA0BqM,EAAAa,IAAA/N,EAAAb,EAAoBkP,EAAAL,EAAAD,EAAA/N,EAAA8N,EAAAjN,EAC9CyN,EAAAR,EAAAE,EAAAhO,EAAA+N,EAAAlN,EAA0B0N,EAAAR,EAAAC,EAAAhO,EAAA8N,EAAAjN,EAAwB2N,EAAAR,IAAAhO,EAAAb,EAGlD4K,EAAA,GAAA8B,EAAAU,EAAAT,EAAAU,EAAAR,EAAAS,EACA1C,EAAA,GAAAuB,EAAAiB,EAAAR,EAAAS,EAAAP,EAAAQ,EACA1C,EAAA,GAAAwB,EAAAgB,EAAAd,EAAAe,EAAAN,EAAAO,EACA1C,EAAA,GAAAyB,EAAAe,EAAAb,EAAAc,EAAAb,EAAAc,EACA1C,EAAA,GAAA8B,EAAAoB,EAAAnB,EAAAoB,EAAAlB,EAAAqC,EACAtE,EAAA,GAAAuB,EAAA2B,EAAAlB,EAAAmB,EAAAjB,EAAAoC,EACAtE,EAAA,GAAAwB,EAAA0B,EAAAxB,EAAAyB,EAAAhB,EAAAmC,EACAtE,EAAA,GAAAyB,EAAAyB,EAAAvB,EAAAwB,EAAAvB,EAAA0C,EACAtE,EAAA,GAAA8B,EAAAyC,EAAAxC,EAAAyC,EAAAvC,EAAAwC,EACAzE,EAAA,GAAAuB,EAAAgD,EAAAvC,EAAAwC,EAAAtC,EAAAuC,EACAzE,EAAA,IAAAwB,EAAA+C,EAAA7C,EAAA8C,EAAArC,EAAAsC,EACAzE,EAAA,IAAAyB,EAAA8C,EAAA5C,EAAA6C,EAAA5C,EAAA6C,EAEAvH,IAAA8C,IAEAA,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAEA8C,GAWO,SAAA8E,EAAA9E,EAAA9C,EAAAkH,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GACArC,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IAuBA,OArBAA,IAAA8C,IAEAA,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAIA8C,EAAA,GAAA+B,EAAA3M,EAAA6M,EAAAnL,EACAkJ,EAAA,GAAAgC,EAAA5M,EAAA8M,EAAApL,EACAkJ,EAAA,GAAA0B,EAAAtM,EAAA+M,EAAArL,EACAkJ,EAAA,GAAA2B,EAAAvM,EAAAwM,EAAA9K,EACAkJ,EAAA,GAAAiC,EAAA7M,EAAA2M,EAAAjL,EACAkJ,EAAA,GAAAkC,EAAA9M,EAAA4M,EAAAlL,EACAkJ,EAAA,IAAAmC,EAAA/M,EAAAsM,EAAA5K,EACAkJ,EAAA,IAAA4B,EAAAxM,EAAAuM,EAAA7K,EACAkJ,EAWO,SAAA+E,EAAA/E,EAAA9C,EAAAkH,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GACAtC,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IAuBA,OArBAA,IAAA8C,IAEAA,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAIA8C,EAAA,GAAA8B,EAAA1M,EAAA6M,EAAAnL,EACAkJ,EAAA,GAAAuB,EAAAnM,EAAA8M,EAAApL,EACAkJ,EAAA,GAAAwB,EAAApM,EAAA+M,EAAArL,EACAkJ,EAAA,GAAAyB,EAAArM,EAAAwM,EAAA9K,EACAkJ,EAAA,GAAA8B,EAAAhL,EAAAmL,EAAA7M,EACA4K,EAAA,GAAAuB,EAAAzK,EAAAoL,EAAA9M,EACA4K,EAAA,IAAAwB,EAAA1K,EAAAqL,EAAA/M,EACA4K,EAAA,IAAAyB,EAAA3K,EAAA8K,EAAAxM,EACA4K,EAWO,SAAAgF,EAAAhF,EAAA9C,EAAAkH,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GACAtC,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GAuBA,OArBAA,IAAA8C,IAEAA,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAIA8C,EAAA,GAAA8B,EAAA1M,EAAA2M,EAAAjL,EACAkJ,EAAA,GAAAuB,EAAAnM,EAAA4M,EAAAlL,EACAkJ,EAAA,GAAAwB,EAAApM,EAAAsM,EAAA5K,EACAkJ,EAAA,GAAAyB,EAAArM,EAAAuM,EAAA7K,EACAkJ,EAAA,GAAA+B,EAAA3M,EAAA0M,EAAAhL,EACAkJ,EAAA,GAAAgC,EAAA5M,EAAAmM,EAAAzK,EACAkJ,EAAA,GAAA0B,EAAAtM,EAAAoM,EAAA1K,EACAkJ,EAAA,GAAA2B,EAAAvM,EAAAqM,EAAA3K,EACAkJ,EAcO,SAAAiF,EAAAjF,EAAA8D,GAiBP,OAhBA9D,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MACAA,EAcO,SAAAkF,EAAAlF,EAAA8D,GAiBP,OAhBA9D,EAAA,GAAA8D,EAAA,GACA9D,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA8D,EAAA,GACA9D,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAeO,SAAAmF,EAAAnF,EAAAoE,EAAAC,GACP,IAIAvN,EACA1B,EACAa,EANA8N,EAAAM,EAAA,GACAL,EAAAK,EAAA,GACAJ,EAAAI,EAAA,GACAK,EAAA7E,KAAA8E,KAAAZ,IAAAC,IAAAC,KAKA,OAAAS,EAAYlF,EACZ,MAIAuE,GADAW,EAAA,EAAAA,EAEAV,GAAAU,EACAT,GAAAS,EAEA5N,EAAA+I,KAAA+E,IAAAR,GAEAnO,EAAA,GADAb,EAAAyK,KAAAgF,IAAAT,IAIApE,EAAA,GAAA+D,IAAA9N,EAAAb,EACA4K,EAAA,GAAAgE,EAAAD,EAAA9N,EAAAgO,EAAAnN,EACAkJ,EAAA,GAAAiE,EAAAF,EAAA9N,EAAA+N,EAAAlN,EACAkJ,EAAA,KACAA,EAAA,GAAA+D,EAAAC,EAAA/N,EAAAgO,EAAAnN,EACAkJ,EAAA,GAAAgE,IAAA/N,EAAAb,EACA4K,EAAA,GAAAiE,EAAAD,EAAA/N,EAAA8N,EAAAjN,EACAkJ,EAAA,KACAA,EAAA,GAAA+D,EAAAE,EAAAhO,EAAA+N,EAAAlN,EACAkJ,EAAA,GAAAgE,EAAAC,EAAAhO,EAAA8N,EAAAjN,EACAkJ,EAAA,IAAAiE,IAAAhO,EAAAb,EACA4K,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcO,SAAAoF,EAAApF,EAAAoE,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GAmBA,OAhBApE,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA5K,EACA4K,EAAA,GAAAlJ,EACAkJ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAlJ,EACAkJ,EAAA,IAAA5K,EACA4K,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcO,SAAAqF,EAAArF,EAAAoE,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GAmBA,OAhBApE,EAAA,GAAA5K,EACA4K,EAAA,KACAA,EAAA,IAAAlJ,EACAkJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAlJ,EACAkJ,EAAA,KACAA,EAAA,IAAA5K,EACA4K,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcO,SAAAsF,EAAAtF,EAAAoE,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GAmBA,OAhBApE,EAAA,GAAA5K,EACA4K,EAAA,GAAAlJ,EACAkJ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAlJ,EACAkJ,EAAA,GAAA5K,EACA4K,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAkBO,SAAAuF,EAAAvF,EAAAwF,EAAA1B,GAEP,IAAAC,EAAAyB,EAAA,GACAxB,EAAAwB,EAAA,GACAvB,EAAAuB,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACAI,EAAA/B,EAAA4B,EACAI,EAAAhC,EAAA6B,EACAI,EAAAhC,EAAA2B,EACAM,EAAAjC,EAAA4B,EACAM,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAmBA,OAjBA5F,EAAA,MAAAgG,EAAAE,GACAlG,EAAA,GAAA8F,EAAAO,EACArG,EAAA,GAAA+F,EAAAK,EACApG,EAAA,KACAA,EAAA,GAAA8F,EAAAO,EACArG,EAAA,MAAA6F,EAAAK,GACAlG,EAAA,GAAAiG,EAAAE,EACAnG,EAAA,KACAA,EAAA,GAAA+F,EAAAK,EACApG,EAAA,GAAAiG,EAAAE,EACAnG,EAAA,OAAA6F,EAAAG,GACAhG,EAAA,MACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MAEAA,EAUO,SAAAsG,EAAAtG,EAAA9C,GACP,IAAAqJ,EAAA,IAAwB9G,EAAmB,GAC3C+G,GAAAtJ,EAAA,GACAuJ,GAAAvJ,EAAA,GACAwJ,GAAAxJ,EAAA,GACAyJ,EAAAzJ,EAAA,GACA0J,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GAEA8J,EAAAR,IAAAC,IAAAC,IAAAC,IAYA,OAVAK,EAAA,GACAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GAAAO,EACAT,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GAAAM,EACAT,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GAAAQ,IAEAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACAF,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACAH,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,IAEAjB,EAAAvF,EAAA9C,EAAAqJ,GACAvG,EAYO,SAAAiH,EAAAjH,EAAAkH,GAKP,OAJAlH,EAAA,GAAAkH,EAAA,IACAlH,EAAA,GAAAkH,EAAA,IACAlH,EAAA,GAAAkH,EAAA,IAEAlH,EAaO,SAAAmH,EAAAnH,EAAAkH,GACP,IAAAzG,EAAAyG,EAAA,GACAxG,EAAAwG,EAAA,GACAvG,EAAAuG,EAAA,GACArG,EAAAqG,EAAA,GACApG,EAAAoG,EAAA,GACAnG,EAAAmG,EAAA,GACAjG,EAAAiG,EAAA,GACAhG,EAAAgG,EAAA,GACA/F,EAAA+F,EAAA,IAMA,OAJAlH,EAAA,GAAAH,KAAA8E,KAAAlE,IAAAC,IAAAC,KACAX,EAAA,GAAAH,KAAA8E,KAAA9D,IAAAC,IAAAC,KACAf,EAAA,GAAAH,KAAA8E,KAAA1D,IAAAC,IAAAC,KAEAnB,EAYO,SAAAoH,EAAApH,EAAAkH,GAEP,IAAAG,EAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAI,EAAA,EA4BA,OA1BAD,EAAA,GACAC,EAAA,EAAAzH,KAAA8E,KAAA0C,EAAA,GACArH,EAAA,OAAAsH,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAAzH,KAAA8E,KAAA,EAAAuC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAlH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,OAAAsH,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAAzH,KAAA8E,KAAA,EAAAuC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAlH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,OAAAsH,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,IAEAA,EAAA,EAAAzH,KAAA8E,KAAA,EAAAuC,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAlH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,OAAAsH,GAGAtH,EAoBO,SAAAuH,EAAAvH,EAAAwF,EAAA1B,EAAAhN,GAEP,IAAAiN,EAAAyB,EAAA,GACAxB,EAAAwB,EAAA,GACAvB,EAAAuB,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACAI,EAAA/B,EAAA4B,EACAI,EAAAhC,EAAA6B,EACAI,EAAAhC,EAAA2B,EACAM,EAAAjC,EAAA4B,EACAM,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EACA4B,EAAA1Q,EAAA,GACA2Q,EAAA3Q,EAAA,GACA4Q,EAAA5Q,EAAA,GAmBA,OAjBAkJ,EAAA,OAAAgG,EAAAE,IAAAsB,EACAxH,EAAA,IAAA8F,EAAAO,GAAAmB,EACAxH,EAAA,IAAA+F,EAAAK,GAAAoB,EACAxH,EAAA,KACAA,EAAA,IAAA8F,EAAAO,GAAAoB,EACAzH,EAAA,OAAA6F,EAAAK,IAAAuB,EACAzH,EAAA,IAAAiG,EAAAE,GAAAsB,EACAzH,EAAA,KACAA,EAAA,IAAA+F,EAAAK,GAAAsB,EACA1H,EAAA,IAAAiG,EAAAE,GAAAuB,EACA1H,EAAA,QAAA6F,EAAAG,IAAA0B,EACA1H,EAAA,MACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MAEAA,EAuBO,SAAA2H,EAAA3H,EAAAwF,EAAA1B,EAAAhN,EAAAtB,GAEP,IAAAuO,EAAAyB,EAAA,GACAxB,EAAAwB,EAAA,GACAvB,EAAAuB,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACAI,EAAA/B,EAAA4B,EACAI,EAAAhC,EAAA6B,EACAI,EAAAhC,EAAA2B,EACAM,EAAAjC,EAAA4B,EACAM,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAEA4B,EAAA1Q,EAAA,GACA2Q,EAAA3Q,EAAA,GACA4Q,EAAA5Q,EAAA,GAEA8Q,EAAApS,EAAA,GACAqS,EAAArS,EAAA,GACAsS,EAAAtS,EAAA,GAEAuS,GAAA,GAAA/B,EAAAE,IAAAsB,EACAQ,GAAAlC,EAAAO,GAAAmB,EACAS,GAAAlC,EAAAK,GAAAoB,EACAU,GAAApC,EAAAO,GAAAoB,EACAU,GAAA,GAAAtC,EAAAK,IAAAuB,EACAW,GAAAnC,EAAAE,GAAAsB,EACAY,GAAAtC,EAAAK,GAAAsB,EACAY,GAAArC,EAAAE,GAAAuB,EACAa,GAAA,GAAA1C,EAAAG,IAAA0B,EAmBA,OAjBA1H,EAAA,GAAA+H,EACA/H,EAAA,GAAAgI,EACAhI,EAAA,GAAAiI,EACAjI,EAAA,KACAA,EAAA,GAAAkI,EACAlI,EAAA,GAAAmI,EACAnI,EAAA,GAAAoI,EACApI,EAAA,KACAA,EAAA,GAAAqI,EACArI,EAAA,GAAAsI,EACAtI,EAAA,IAAAuI,EACAvI,EAAA,MACAA,EAAA,IAAA8D,EAAA,GAAA8D,GAAAG,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAP,GACA9H,EAAA,IAAA8D,EAAA,GAAA+D,GAAAG,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAR,GACA9H,EAAA,IAAA8D,EAAA,GAAAgE,GAAAG,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAT,GACA9H,EAAA,MAEAA,EAWO,SAAAwI,EAAAxI,EAAAwF,GACP,IAAAzB,EAAAyB,EAAA,GACAxB,EAAAwB,EAAA,GACAvB,EAAAuB,EAAA,GACAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACA+C,EAAAzE,EAAA0B,EACAM,EAAAhC,EAAA2B,EACA+C,EAAAzE,EAAAyB,EACAiD,EAAA1E,EAAA0B,EACAO,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAsBA,OApBA5F,EAAA,KAAAgG,EAAAE,EACAlG,EAAA,GAAAyI,EAAApC,EACArG,EAAA,GAAA0I,EAAAtC,EACApG,EAAA,KAEAA,EAAA,GAAAyI,EAAApC,EACArG,EAAA,KAAA6F,EAAAK,EACAlG,EAAA,GAAA2I,EAAAxC,EACAnG,EAAA,KAEAA,EAAA,GAAA0I,EAAAtC,EACApG,EAAA,GAAA2I,EAAAxC,EACAnG,EAAA,MAAA6F,EAAAG,EACAhG,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAeO,SAAA4I,EAAA5I,EAAA6I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAC,EAAA,GAAAL,EAAAD,GACAO,EAAA,GAAAJ,EAAAD,GACAM,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAlJ,EAAA,KAAAiJ,EAAAE,EACAnJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAiJ,EAAAG,EACApJ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA8I,EAAAD,GAAAM,EACAnJ,EAAA,IAAAgJ,EAAAD,GAAAK,EACApJ,EAAA,KAAAkJ,EAAAD,GAAAI,EACArJ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAkJ,EAAAD,EAAA,EAAAI,EACArJ,EAAA,MACAA,EAcO,SAAAsJ,EAAAtJ,EAAAuJ,EAAAC,EAAAP,EAAAC,GACP,IAAAO,EAAA,EAAA5J,KAAA6J,IAAAH,EAAA,GACAF,OAAA,EAuBA,OAtBArJ,EAAA,GAAAyJ,EAAAD,EACAxJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAyJ,EACAzJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACA,MAAAkJ,OAAAS,KACAN,EAAA,GAAAJ,EAAAC,GACAlJ,EAAA,KAAAkJ,EAAAD,GAAAI,EACArJ,EAAA,MAAAkJ,EAAAD,EAAAI,IAEArJ,EAAA,OACAA,EAAA,OAAAiJ,GAEAjJ,EAcO,SAAA4J,EAAA5J,EAAA6J,EAAAZ,EAAAC,GACP,IAAAY,EAAAjK,KAAA6J,IAAAG,EAAAE,UAAAlK,KAAAE,GAAA,KACAiK,EAAAnK,KAAA6J,IAAAG,EAAAI,YAAApK,KAAAE,GAAA,KACAmK,EAAArK,KAAA6J,IAAAG,EAAAM,YAAAtK,KAAAE,GAAA,KACAqK,EAAAvK,KAAA6J,IAAAG,EAAAQ,aAAAxK,KAAAE,GAAA,KACAuK,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,GAkBA,OAhBAhK,EAAA,GAAAsK,EACAtK,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAuK,EACAvK,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAkK,EAAAE,GAAAE,EAAA,GACAtK,EAAA,IAAA8J,EAAAE,GAAAO,EAAA,GACAvK,EAAA,IAAAkJ,GAAAD,EAAAC,GACAlJ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAkJ,EAAAD,KAAAC,GACAlJ,EAAA,MACAA,EAeO,SAAAwK,EAAAxK,EAAA6I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAuB,EAAA,GAAA5B,EAAAC,GACA4B,EAAA,GAAA3B,EAAAC,GACAK,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAlJ,EAAA,MAAAyK,EACAzK,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA0K,EACA1K,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAqJ,EACArJ,EAAA,MACAA,EAAA,KAAA6I,EAAAC,GAAA2B,EACAzK,EAAA,KAAAgJ,EAAAD,GAAA2B,EACA1K,EAAA,KAAAkJ,EAAAD,GAAAI,EACArJ,EAAA,MACAA,EAaO,SAAA2K,EAAA3K,EAAA4K,EAAAC,EAAAC,GACP,IAAAC,OAAA,EACAC,OAAA,EACAtF,OAAA,EACAuF,OAAA,EACAC,OAAA,EACAvF,OAAA,EACAwF,OAAA,EACAC,OAAA,EACAxF,OAAA,EACAlB,OAAA,EACA2G,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAEA,OAAAhL,KAAAiM,IAAAT,EAAAM,GAAiCnM,GAAgBK,KAAAiM,IAAAR,EAAAM,GAA+BpM,GAAgBK,KAAAiM,IAAAP,EAAAM,GAA+BrM,EAC/H6B,EAAArB,IAGAmL,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACAhG,EAAA2F,EAAAM,EAOAd,EAAAU,GAFA7F,GAHAlB,EAAA,EAAA7E,KAAA8E,KAAAwG,IAAAC,IAAAxF,MAKA8F,GAHAN,GAAA1G,GAIAsG,EAAAU,GALAP,GAAAzG,GAKA8G,EAAA5F,EACAF,EAAA8F,EAAAJ,EAAAK,EAAAN,GACAzG,EAAA7E,KAAA8E,KAAAoG,IAAAC,IAAAtF,OAOAqF,GADArG,EAAA,EAAAA,EAEAsG,GAAAtG,EACAgB,GAAAhB,IAPAqG,EAAA,EACAC,EAAA,EACAtF,EAAA,GAQAuF,EAAAG,EAAA1F,EAAAE,EAAAoF,EACAE,EAAAtF,EAAAmF,EAAAI,EAAAzF,EACAC,EAAAwF,EAAAH,EAAAI,EAAAL,GAEArG,EAAA7E,KAAA8E,KAAAsG,IAAAC,IAAAvF,OAOAsF,GADAvG,EAAA,EAAAA,EAEAwG,GAAAxG,EACAiB,GAAAjB,IAPAuG,EAAA,EACAC,EAAA,EACAvF,EAAA,GAQA3F,EAAA,GAAA+K,EACA/K,EAAA,GAAAiL,EACAjL,EAAA,GAAAmL,EACAnL,EAAA,KACAA,EAAA,GAAAgL,EACAhL,EAAA,GAAAkL,EACAlL,EAAA,GAAAoL,EACApL,EAAA,KACAA,EAAA,GAAA0F,EACA1F,EAAA,GAAA2F,EACA3F,EAAA,IAAA4F,EACA5F,EAAA,MACAA,EAAA,MAAA+K,EAAAM,EAAAL,EAAAM,EAAA5F,EAAA6F,GACAvL,EAAA,MAAAiL,EAAAI,EAAAH,EAAAI,EAAA3F,EAAA4F,GACAvL,EAAA,MAAAmL,EAAAE,EAAAD,EAAAE,EAAA1F,EAAA2F,GACAvL,EAAA,MAEAA,GAYO,SAAA+L,EAAA/L,EAAA4K,EAAAoB,EAAAlB,GACP,IAAAO,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GAEAK,EAAAE,EAAAW,EAAA,GACAZ,EAAAE,EAAAU,EAAA,GACApG,EAAA2F,EAAAS,EAAA,GAEAtH,EAAAyG,IAAAC,IAAAxF,IACAlB,EAAA,IAEAyG,GADAzG,EAAA,EAAA7E,KAAA8E,KAAAD,GAEA0G,GAAA1G,EACAkB,GAAAlB,GAGA,IAAAqG,EAAAU,EAAA7F,EAAA8F,EAAAN,EACAJ,EAAAU,EAAAP,EAAAK,EAAA5F,EACAF,EAAA8F,EAAAJ,EAAAK,EAAAN,EA0BA,OAxBAzG,EAAAqG,IAAAC,IAAAtF,KACA,IAEAqF,GADArG,EAAA,EAAA7E,KAAA8E,KAAAD,GAEAsG,GAAAtG,EACAgB,GAAAhB,GAGA1E,EAAA,GAAA+K,EACA/K,EAAA,GAAAgL,EACAhL,EAAA,GAAA0F,EACA1F,EAAA,KACAA,EAAA,GAAAoL,EAAA1F,EAAAE,EAAAoF,EACAhL,EAAA,GAAA4F,EAAAmF,EAAAI,EAAAzF,EACA1F,EAAA,GAAAmL,EAAAH,EAAAI,EAAAL,EACA/K,EAAA,KACAA,EAAA,GAAAmL,EACAnL,EAAA,GAAAoL,EACApL,EAAA,IAAA4F,EACA5F,EAAA,MACAA,EAAA,IAAAqL,EACArL,EAAA,IAAAsL,EACAtL,EAAA,IAAAuL,EACAvL,EAAA,MACAA,EASO,SAAAiM,EAAA/O,GACP,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QASO,SAAAgP,EAAAhP,GACP,OAAA2C,KAAA8E,KAAA9E,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,QAWO,SAAAkP,EAAApM,EAAA9C,EAAAsG,GAiBP,OAhBAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAWO,SAAAqM,EAAArM,EAAA9C,EAAAsG,GAiBP,OAhBAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAWO,SAAAsM,EAAAtM,EAAA9C,EAAAsG,GAiBP,OAhBAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAYO,SAAAuM,EAAAvM,EAAA9C,EAAAsG,EAAAgJ,GAiBP,OAhBAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAUO,SAAAyM,EAAAvP,EAAAsG,GACP,OAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,IAUO,SAASkJ,EAAMxP,EAAAsG,GACtB,IAAAmJ,EAAAzP,EAAA,GACA0P,EAAA1P,EAAA,GACA2P,EAAA3P,EAAA,GACA4P,EAAA5P,EAAA,GACA6P,EAAA7P,EAAA,GACA8P,EAAA9P,EAAA,GACA+P,EAAA/P,EAAA,GACAgQ,EAAAhQ,EAAA,GACAiQ,EAAAjQ,EAAA,GACAkQ,EAAAlQ,EAAA,GACA6E,EAAA7E,EAAA,IACA8E,EAAA9E,EAAA,IACAwE,EAAAxE,EAAA,IACAyE,EAAAzE,EAAA,IACAmQ,EAAAnQ,EAAA,IACAoQ,EAAApQ,EAAA,IAEAuG,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACA+J,EAAA/J,EAAA,GACAgK,EAAAhK,EAAA,GACAiK,EAAAjK,EAAA,GACAkK,EAAAlK,EAAA,GACAmK,EAAAnK,EAAA,GACAoK,EAAApK,EAAA,GACAN,EAAAM,EAAA,IACAL,EAAAK,EAAA,IACAc,EAAAd,EAAA,IACAqK,EAAArK,EAAA,IACAsK,EAAAtK,EAAA,IACAuK,EAAAvK,EAAA,IAEA,OAAA3D,KAAAiM,IAAAa,EAAAlJ,IAA8BjE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAa,GAAA9M,KAAAiM,IAAArI,KAAA5D,KAAAiM,IAAAc,EAAAlJ,IAAqElE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAc,GAAA/M,KAAAiM,IAAApI,KAAA7D,KAAAiM,IAAAe,EAAAlJ,IAAqEnE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAe,GAAAhN,KAAAiM,IAAAnI,KAAA9D,KAAAiM,IAAAgB,EAAAlJ,IAAqEpE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAgB,GAAAjN,KAAAiM,IAAAlI,KAAA/D,KAAAiM,IAAAiB,EAAAQ,IAAqE/N,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAiB,GAAAlN,KAAAiM,IAAAyB,KAAA1N,KAAAiM,IAAAkB,EAAAQ,IAAqEhO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAkB,GAAAnN,KAAAiM,IAAA0B,KAAA3N,KAAAiM,IAAAmB,EAAAQ,IAAqEjO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAmB,GAAApN,KAAAiM,IAAA2B,KAAA5N,KAAAiM,IAAAoB,EAAAQ,IAAqElO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAoB,GAAArN,KAAAiM,IAAA4B,KAAA7N,KAAAiM,IAAAqB,EAAAQ,IAAqEnO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAqB,GAAAtN,KAAAiM,IAAA6B,KAAA9N,KAAAiM,IAAAsB,EAAAQ,IAAqEpO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAsB,GAAAvN,KAAAiM,IAAA8B,KAAA/N,KAAAiM,IAAA/J,EAAAmB,IAAuE1D,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAA/J,GAAAlC,KAAAiM,IAAA5I,KAAArD,KAAAiM,IAAA9J,EAAAmB,IAAyE3D,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAA9J,GAAAnC,KAAAiM,IAAA3I,KAAAtD,KAAAiM,IAAApK,EAAA4C,IAAyE9E,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAApK,GAAA7B,KAAAiM,IAAAxH,KAAAzE,KAAAiM,IAAAnK,EAAAkM,IAAyErO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAnK,GAAA9B,KAAAiM,IAAA+B,KAAAhO,KAAAiM,IAAAuB,EAAAS,IAAyEtO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAuB,GAAAxN,KAAAiM,IAAAgC,KAAAjO,KAAAiM,IAAAwB,EAAAS,IAAyEvO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAwB,GAAAzN,KAAAiM,IAAAiC,IAOxzC,IAAAE,GAAA1K,EAMA2K,GAAA7B,ECpyDA,SAAS8B,KAChB,IAAAnO,EAAA,IAAgBP,EAAmB,GAMnC,OALMA,GAAmBC,eACzBM,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EASO,SAASoO,GAAKlR,GACrB,IAAA8C,EAAA,IAAgBP,EAAmB,GAInC,OAHAO,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EASO,SAASqO,GAAMnR,GACtB,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACA,OAAA2C,KAAA8E,KAAAZ,IAAAC,IAAAC,KAWO,SAASqK,GAAUvK,EAAAC,EAAAC,GAC1B,IAAAjE,EAAA,IAAgBP,EAAmB,GAInC,OAHAO,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAUO,SAASuO,GAAIvO,EAAA9C,GAIpB,OAHA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAYO,SAASwO,GAAGxO,EAAA+D,EAAAC,EAAAC,GAInB,OAHAjE,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAWO,SAASyO,GAAGzO,EAAA9C,EAAAsG,GAInB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAWO,SAAS0O,GAAQ1O,EAAA9C,EAAAsG,GAIxB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAWO,SAAS2O,GAAQ3O,EAAA9C,EAAAsG,GAIxB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAWO,SAAA4O,GAAA5O,EAAA9C,EAAAsG,GAIP,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAUO,SAAA6O,GAAA7O,EAAA9C,GAIP,OAHA8C,EAAA,GAAAH,KAAAgP,KAAA3R,EAAA,IACA8C,EAAA,GAAAH,KAAAgP,KAAA3R,EAAA,IACA8C,EAAA,GAAAH,KAAAgP,KAAA3R,EAAA,IACA8C,EAUO,SAAA8O,GAAA9O,EAAA9C,GAIP,OAHA8C,EAAA,GAAAH,KAAAiP,MAAA5R,EAAA,IACA8C,EAAA,GAAAH,KAAAiP,MAAA5R,EAAA,IACA8C,EAAA,GAAAH,KAAAiP,MAAA5R,EAAA,IACA8C,EAWO,SAAA+O,GAAA/O,EAAA9C,EAAAsG,GAIP,OAHAxD,EAAA,GAAAH,KAAAkP,IAAA7R,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAkP,IAAA7R,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAkP,IAAA7R,EAAA,GAAAsG,EAAA,IACAxD,EAWO,SAAAgO,GAAAhO,EAAA9C,EAAAsG,GAIP,OAHAxD,EAAA,GAAAH,KAAAmO,IAAA9Q,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAmO,IAAA9Q,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAmO,IAAA9Q,EAAA,GAAAsG,EAAA,IACAxD,EAUO,SAAAgP,GAAAhP,EAAA9C,GAIP,OAHA8C,EAAA,GAAAH,KAAAmP,MAAA9R,EAAA,IACA8C,EAAA,GAAAH,KAAAmP,MAAA9R,EAAA,IACA8C,EAAA,GAAAH,KAAAmP,MAAA9R,EAAA,IACA8C,EAWO,SAASiP,GAAKjP,EAAA9C,EAAAsG,GAIrB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAYO,SAAAkP,GAAAlP,EAAA9C,EAAAsG,EAAAgJ,GAIP,OAHAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAUO,SAAAmP,GAAAjS,EAAAsG,GACP,IAAAO,EAAAP,EAAA,GAAAtG,EAAA,GACA8G,EAAAR,EAAA,GAAAtG,EAAA,GACA+G,EAAAT,EAAA,GAAAtG,EAAA,GACA,OAAA2C,KAAA8E,KAAAZ,IAAAC,IAAAC,KAUO,SAAAmL,GAAAlS,EAAAsG,GACP,IAAAO,EAAAP,EAAA,GAAAtG,EAAA,GACA8G,EAAAR,EAAA,GAAAtG,EAAA,GACA+G,EAAAT,EAAA,GAAAtG,EAAA,GACA,OAAA6G,IAAAC,IAAAC,IASO,SAAAoL,GAAAnS,GACP,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACA,OAAA6G,IAAAC,IAAAC,IAUO,SAAAqL,GAAAtP,EAAA9C,GAIP,OAHA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAUO,SAAAuP,GAAAvP,EAAA9C,GAIP,OAHA8C,EAAA,KAAA9C,EAAA,GACA8C,EAAA,KAAA9C,EAAA,GACA8C,EAAA,KAAA9C,EAAA,GACA8C,EAUO,SAAAwP,GAAAxP,EAAA9C,GACP,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAwH,EAAAX,IAAAC,IAAAC,IAQA,OAPAS,EAAA,IAEAA,EAAA,EAAA7E,KAAA8E,KAAAD,GACA1E,EAAA,GAAA9C,EAAA,GAAAwH,EACA1E,EAAA,GAAA9C,EAAA,GAAAwH,EACA1E,EAAA,GAAA9C,EAAA,GAAAwH,GAEA1E,EAUO,SAASyP,GAAGvS,EAAAsG,GACnB,OAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,GAWO,SAAAkM,GAAA1P,EAAA9C,EAAAsG,GACP,IAAAoD,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACAsJ,EAAAhD,EAAA,GACAiD,EAAAjD,EAAA,GACAkD,EAAAlD,EAAA,GAKA,OAHAxD,EAAA,GAAA6G,EAAAH,EAAAI,EAAAL,EACAzG,EAAA,GAAA8G,EAAAN,EAAAI,EAAAF,EACA1G,EAAA,GAAA4G,EAAAH,EAAAI,EAAAL,EACAxG,EAYO,SAAA2P,GAAA3P,EAAA9C,EAAAsG,EAAAvN,GACP,IAAA2Q,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GAIA,OAHA8C,EAAA,GAAA4G,EAAA3Q,GAAAuN,EAAA,GAAAoD,GACA5G,EAAA,GAAA6G,EAAA5Q,GAAAuN,EAAA,GAAAqD,GACA7G,EAAA,GAAA8G,EAAA7Q,GAAAuN,EAAA,GAAAsD,GACA9G,EAcO,SAAA4P,GAAA5P,EAAA9C,EAAAsG,EAAApO,EAAAC,EAAAY,GACP,IAAA4Z,EAAA5Z,IACA6Z,EAAAD,GAAA,EAAA5Z,EAAA,KACA8Z,EAAAF,GAAA5Z,EAAA,GAAAA,EACA+Z,EAAAH,GAAA5Z,EAAA,GACAga,EAAAJ,GAAA,IAAA5Z,GAMA,OAJA+J,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EAEAjQ,EAcO,SAAAkQ,GAAAlQ,EAAA9C,EAAAsG,EAAApO,EAAAC,EAAAY,GACP,IAAAka,EAAA,EAAAla,EACAma,EAAAD,IACAN,EAAA5Z,IACA6Z,EAAAM,EAAAD,EACAJ,EAAA,EAAA9Z,EAAAma,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAA5Z,EAMA,OAJA+J,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EAEAjQ,EAUO,SAAAF,GAAAE,EAAAwM,GACPA,KAAA,EAEA,IAAA3W,EAAyB,EAAf+J,IAAeC,KAAAE,GACzBkE,EAAyB,EAAfrE,IAAe,EACzByQ,EAAAxQ,KAAA8E,KAAA,EAAAV,KAAAuI,EAKA,OAHAxM,EAAA,GAAAH,KAAAgF,IAAAhP,GAAAwa,EACArQ,EAAA,GAAAH,KAAA+E,IAAA/O,GAAAwa,EACArQ,EAAA,GAAAiE,EAAAuI,EACAxM,EAYO,SAAAsQ,GAAAtQ,EAAA9C,EAAA/H,GACP,IAAA4O,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAuI,EAAAtQ,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,IAAA8O,EAAA9O,EAAA,IAKA,OAJAsQ,KAAA,EACAzF,EAAA,IAAA7K,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,KAAAsQ,EACAzF,EAAA,IAAA7K,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,KAAAsQ,EACAzF,EAAA,IAAA7K,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,IAAA8O,EAAA9O,EAAA,KAAAsQ,EACAzF,EAWO,SAAAuQ,GAAAvQ,EAAA9C,EAAA/H,GACP,IAAA4O,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GAIA,OAHA8C,EAAA,GAAA+D,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,GACA6K,EAAA,GAAA+D,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,GACA6K,EAAA,GAAA+D,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,GACA6K,EAYO,SAAAwQ,GAAAxQ,EAAA9C,EAAAsI,GAEP,IAAAiL,EAAAjL,EAAA,GACAkL,EAAAlL,EAAA,GACAmL,EAAAnL,EAAA,GACAoL,EAAApL,EAAA,GACAzB,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GAGA2T,EAAAH,EAAAzM,EAAA0M,EAAA3M,EACA8M,EAAAH,EAAA5M,EAAA0M,EAAAxM,EACA8M,EAAAN,EAAAzM,EAAA0M,EAAA3M,EAEAiN,EAAAN,EAAAK,EAAAJ,EAAAG,EACAG,EAAAN,EAAAE,EAAAJ,EAAAM,EACAG,EAAAT,EAAAK,EAAAJ,EAAAG,EAEAM,EAAA,EAAAP,EAYA,OAXAC,GAAAM,EACAL,GAAAK,EACAJ,GAAAI,EAEAH,GAAA,EACAC,GAAA,EACAC,GAAA,EAEAlR,EAAA,GAAA+D,EAAA8M,EAAAG,EACAhR,EAAA,GAAAgE,EAAA8M,EAAAG,EACAjR,EAAA,GAAAiE,EAAA8M,EAAAG,EACAlR,EAWO,SAASoR,GAAOpR,EAAA9C,EAAAsG,EAAApO,GACvB,IAAAyB,KACAhB,KAgBA,OAdAgB,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GAGA3N,EAAA,GAAAgB,EAAA,GACAhB,EAAA,GAAAgB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAAAyB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GACAS,EAAA,GAAAgB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAAAyB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAGA4K,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GAEAxD,EAWO,SAASqR,GAAOrR,EAAA9C,EAAAsG,EAAApO,GACvB,IAAAyB,KACAhB,KAgBA,OAdAgB,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GAGA3N,EAAA,GAAAgB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAAAyB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GACAS,EAAA,GAAAgB,EAAA,GACAhB,EAAA,GAAAgB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAAAyB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAGA4K,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GAEAxD,EAWO,SAASsR,GAAOtR,EAAA9C,EAAAsG,EAAApO,GACvB,IAAAyB,KACAhB,KAgBA,OAdAgB,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GAGA3N,EAAA,GAAAgB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAAAyB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GACAS,EAAA,GAAAgB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAAAyB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GACAS,EAAA,GAAAgB,EAAA,GAGAmJ,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GAEAxD,EASO,SAAAuR,GAAArU,EAAAsG,GACP,IAAAgO,EAAclD,GAAUpR,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACxBuU,EAAcnD,GAAU9K,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAExBgM,GAAAgC,KACAhC,GAAAiC,KAEA,IAAAC,EAAejC,GAAG+B,EAAAC,GAElB,OAAAC,EAAA,EACA,EACGA,GAAA,EACH7R,KAAAE,GAEAF,KAAA8R,KAAAD,GAUO,SAASE,GAAG1U,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,SAAS2U,GAAW3U,EAAAsG,GAC3B,OAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,GAUO,SAASsO,GAAM5U,EAAAsG,GACtB,IAAAmJ,EAAAzP,EAAA,GACA0P,EAAA1P,EAAA,GACA2P,EAAA3P,EAAA,GACAuG,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACA,OAAA3D,KAAAiM,IAAAa,EAAAlJ,IAA8BjE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAa,GAAA9M,KAAAiM,IAAArI,KAAA5D,KAAAiM,IAAAc,EAAAlJ,IAAqElE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAc,GAAA/M,KAAAiM,IAAApI,KAAA7D,KAAAiM,IAAAe,EAAAlJ,IAAqEnE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAe,GAAAhN,KAAAiM,IAAAnI,IAOjN,IAAIoO,GAAMrD,GAMNsD,GAAMrD,GAMVsD,GAAArD,GAMAsD,GAAA/C,GAMAgD,GAAA/C,GAMIgD,GAAM/D,GAMVgE,GAAAhD,GAcAjR,GAAA,WACP,IAAAkU,EAAYnE,KAEZ,gBAAAjR,EAAAqV,EAAAC,EAAAC,EAAAxV,EAAAyV,GACA,IAAA3d,OAAA,EACAC,OAAA,EAeA,IAdAud,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAxd,EADAyd,EACA5S,KAAAkP,IAAA0D,EAAAF,EAAAC,EAAAtV,EAAAhC,QAEAgC,EAAAhC,OAGAnG,EAAAyd,EAAoBzd,EAAAC,EAAOD,GAAAwd,EAC3BD,EAAA,GAAApV,EAAAnI,GAAoBud,EAAA,GAAApV,EAAAnI,EAAA,GAAkBud,EAAA,GAAApV,EAAAnI,EAAA,GACtCkI,EAAAqV,IAAAI,GACAxV,EAAAnI,GAAAud,EAAA,GAAoBpV,EAAAnI,EAAA,GAAAud,EAAA,GAAkBpV,EAAAnI,EAAA,GAAAud,EAAA,GAGtC,OAAApV,GA1BO,GC3cA,SAASyV,GAAMzV,GACtB,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAuI,EAAAvI,EAAA,GACA,OAAA2C,KAAA8E,KAAAZ,IAAAC,IAAAC,IAAAwB,KASO,SAASmN,GAAa1V,GAC7B,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAuI,EAAAvI,EAAA,GACA,OAAA6G,IAAAC,IAAAC,IAAAwB,KA2QkB,WAClB,IAAA6M,EA9jBO,WACP,IAAAtS,EAAA,IAAgBP,EAAmB,GAOnC,OANMA,GAAmBC,eACzBM,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAsjBY6S,GADM,GC1jBX,SAASC,KAChB,IAAA9S,EAAA,IAAgBP,EAAmB,GAOnC,OANMA,GAAmBC,eACzBM,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,KACAA,EASO,SAAS+S,GAAQ/S,GAKxB,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAYO,SAAAgT,GAAAhT,EAAAqE,EAAAD,GACPA,GAAA,GACA,IAAAtN,EAAA+I,KAAA+E,IAAAR,GAKA,OAJApE,EAAA,GAAAlJ,EAAAuN,EAAA,GACArE,EAAA,GAAAlJ,EAAAuN,EAAA,GACArE,EAAA,GAAAlJ,EAAAuN,EAAA,GACArE,EAAA,GAAAH,KAAAgF,IAAAT,GACApE,EAgBO,SAAAiT,GAAAC,EAAA1N,GACP,IAAApB,EAAA,EAAAvE,KAAA8R,KAAAnM,EAAA,IACA1O,EAAA+I,KAAA+E,IAAAR,EAAA,GAWA,OAVAtN,EAAU0I,GACV0T,EAAA,GAAA1N,EAAA,GAAA1O,EACAoc,EAAA,GAAA1N,EAAA,GAAA1O,EACAoc,EAAA,GAAA1N,EAAA,GAAA1O,IAGAoc,EAAA,KACAA,EAAA,KACAA,EAAA,MAEA9O,EAWO,SAAS+O,GAAQnT,EAAA9C,EAAAsG,GACxB,IAAAoD,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAsJ,EAAAhD,EAAA,GACAiD,EAAAjD,EAAA,GACAkD,EAAAlD,EAAA,GACAmD,EAAAnD,EAAA,GAMA,OAJAxD,EAAA,GAAA4G,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACAzG,EAAA,GAAA6G,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA1G,EAAA,GAAA8G,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACAxG,EAAA,GAAA+G,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACA1G,EAWO,SAASoT,GAAOpT,EAAA9C,EAAAkH,GACvBA,GAAA,GAEA,IAAAwC,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAsJ,EAAA3G,KAAA+E,IAAAR,GACAuC,EAAA9G,KAAAgF,IAAAT,GAMA,OAJApE,EAAA,GAAA4G,EAAAD,EAAAI,EAAAP,EACAxG,EAAA,GAAA6G,EAAAF,EAAAG,EAAAN,EACAxG,EAAA,GAAA8G,EAAAH,EAAAE,EAAAL,EACAxG,EAAA,GAAA+G,EAAAJ,EAAAC,EAAAJ,EACAxG,EAWO,SAASqT,GAAOrT,EAAA9C,EAAAkH,GACvBA,GAAA,GAEA,IAAAwC,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAuJ,EAAA5G,KAAA+E,IAAAR,GACAuC,EAAA9G,KAAAgF,IAAAT,GAMA,OAJApE,EAAA,GAAA4G,EAAAD,EAAAG,EAAAL,EACAzG,EAAA,GAAA6G,EAAAF,EAAAI,EAAAN,EACAzG,EAAA,GAAA8G,EAAAH,EAAAC,EAAAH,EACAzG,EAAA,GAAA+G,EAAAJ,EAAAE,EAAAJ,EACAzG,EAWO,SAASsT,GAAOtT,EAAA9C,EAAAkH,GACvBA,GAAA,GAEA,IAAAwC,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAwJ,EAAA7G,KAAA+E,IAAAR,GACAuC,EAAA9G,KAAAgF,IAAAT,GAMA,OAJApE,EAAA,GAAA4G,EAAAD,EAAAE,EAAAH,EACA1G,EAAA,GAAA6G,EAAAF,EAAAC,EAAAF,EACA1G,EAAA,GAAA8G,EAAAH,EAAAI,EAAAL,EACA1G,EAAA,GAAA+G,EAAAJ,EAAAG,EAAAJ,EACA1G,EAYO,SAAAuT,GAAAvT,EAAA9C,GACP,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GAMA,OAJA8C,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAAA,GAAAH,KAAA8E,KAAA9E,KAAAiM,IAAA,EAAA/H,IAAAC,IAAAC,MACAjE,EAYO,SAAAwT,GAAAxT,EAAA9C,EAAAsG,EAAAvN,GAGP,IAAA2Q,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAsJ,EAAAhD,EAAA,GACAiD,EAAAjD,EAAA,GACAkD,EAAAlD,EAAA,GACAmD,EAAAnD,EAAA,GAEAiQ,OAAA,EACAC,OAAA,EACAC,OAAA,EACAC,OAAA,EACAC,OAAA,EA+BA,OA5BAH,EAAA9M,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,GAEA,IACA+M,KACAlN,KACAC,KACAC,KACAC,MAGA,EAAA+M,EAAoBlU,GAEpBiU,EAAA5T,KAAA8R,KAAA+B,GACAC,EAAA9T,KAAA+E,IAAA6O,GACAG,EAAA/T,KAAA+E,KAAA,EAAA3O,GAAAwd,GAAAE,EACAE,EAAAhU,KAAA+E,IAAA3O,EAAAwd,GAAAE,IAIAC,EAAA,EAAA3d,EACA4d,EAAA5d,GAGA+J,EAAA,GAAA4T,EAAAhN,EAAAiN,EAAArN,EACAxG,EAAA,GAAA4T,EAAA/M,EAAAgN,EAAApN,EACAzG,EAAA,GAAA4T,EAAA9M,EAAA+M,EAAAnN,EACA1G,EAAA,GAAA4T,EAAA7M,EAAA8M,EAAAlN,EAEA3G,EASO,SAAS8T,GAAM9T,GAGtB,IAAA+T,EAAWnU,IACXoU,EAAWpU,IACXqU,EAAWrU,IAEXsU,EAAArU,KAAA8E,KAAA,EAAAoP,GACAI,EAAAtU,KAAA8E,KAAAoP,GAMA,OAJA/T,EAAA,GAAAkU,EAAArU,KAAA+E,IAAA,EAAA/E,KAAAE,GAAAiU,GACAhU,EAAA,GAAAkU,EAAArU,KAAAgF,IAAA,EAAAhF,KAAAE,GAAAiU,GACAhU,EAAA,GAAAmU,EAAAtU,KAAA+E,IAAA,EAAA/E,KAAAE,GAAAkU,GACAjU,EAAA,GAAAmU,EAAAtU,KAAAgF,IAAA,EAAAhF,KAAAE,GAAAkU,GACAjU,EAUO,SAASoU,GAAMpU,EAAA9C,GACtB,IAAAyP,EAAAzP,EAAA,GACA0P,EAAA1P,EAAA,GACA2P,EAAA3P,EAAA,GACA4P,EAAA5P,EAAA,GACAmX,EAAA1H,IAAAC,IAAAC,IAAAC,IACAwH,EAAAD,EAAA,EAAAA,EAAA,EAQA,OAJArU,EAAA,IAAA2M,EAAA2H,EACAtU,EAAA,IAAA4M,EAAA0H,EACAtU,EAAA,IAAA6M,EAAAyH,EACAtU,EAAA,GAAA8M,EAAAwH,EACAtU,EAWO,SAAAuU,GAAAvU,EAAA9C,GAKP,OAJA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAcO,SAAAwU,GAAAxU,EAAA7K,GAGP,IAAAsf,EAAAtf,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAuf,OAAA,EAEA,GAAAD,EAAA,EAEAC,EAAA7U,KAAA8E,KAAA8P,EAAA,GACAzU,EAAA,MAAA0U,EACAA,EAAA,GAAAA,EACA1U,EAAA,IAAA7K,EAAA,GAAAA,EAAA,IAAAuf,EACA1U,EAAA,IAAA7K,EAAA,GAAAA,EAAA,IAAAuf,EACA1U,EAAA,IAAA7K,EAAA,GAAAA,EAAA,IAAAuf,MACG,CAEH,IAAA3f,EAAA,EACAI,EAAA,GAAAA,EAAA,KAAAJ,EAAA,GACAI,EAAA,GAAAA,EAAA,EAAAJ,SAAA,GACA,IAAA4f,GAAA5f,EAAA,KACA6f,GAAA7f,EAAA,KAEA2f,EAAA7U,KAAA8E,KAAAxP,EAAA,EAAAJ,KAAAI,EAAA,EAAAwf,KAAAxf,EAAA,EAAAyf,KAAA,GACA5U,EAAAjL,GAAA,GAAA2f,EACAA,EAAA,GAAAA,EACA1U,EAAA,IAAA7K,EAAA,EAAAwf,EAAAC,GAAAzf,EAAA,EAAAyf,EAAAD,IAAAD,EACA1U,EAAA2U,IAAAxf,EAAA,EAAAwf,EAAA5f,GAAAI,EAAA,EAAAJ,EAAA4f,IAAAD,EACA1U,EAAA4U,IAAAzf,EAAA,EAAAyf,EAAA7f,GAAAI,EAAA,EAAAJ,EAAA6f,IAAAF,EAGA,OAAA1U,EAaO,SAAA6U,GAAA7U,EAAA+D,EAAAC,EAAAC,GACP,IAAA6Q,EAAA,GAAAjV,KAAAE,GAAA,IACAgE,GAAA+Q,EACA9Q,GAAA8Q,EACA7Q,GAAA6Q,EAEA,IAAAtN,EAAA3H,KAAA+E,IAAAb,GACAgR,EAAAlV,KAAAgF,IAAAd,GACA0D,EAAA5H,KAAA+E,IAAAZ,GACAgR,EAAAnV,KAAAgF,IAAAb,GACA0D,EAAA7H,KAAA+E,IAAAX,GACAgR,EAAApV,KAAAgF,IAAAZ,GAOA,OALAjE,EAAA,GAAAwH,EAAAwN,EAAAC,EAAAF,EAAAtN,EAAAC,EACA1H,EAAA,GAAA+U,EAAAtN,EAAAwN,EAAAzN,EAAAwN,EAAAtN,EACA1H,EAAA,GAAA+U,EAAAC,EAAAtN,EAAAF,EAAAC,EAAAwN,EACAjV,EAAA,GAAA+U,EAAAC,EAAAC,EAAAzN,EAAAC,EAAAC,EAEA1H,EASO,SAASkV,GAAGhY,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,IAAIiY,GD1YJ,SAAcjY,GACrB,IAAA8C,EAAA,IAAgBP,EAAmB,GAKnC,OAJAO,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,GCgZWoV,GDpYJ,SAAmBrR,EAAAC,EAAAC,EAAAwB,GAC1B,IAAAzF,EAAA,IAAgBP,EAAmB,GAKnC,OAJAO,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAAA,GAAAyF,EACAzF,GCwYWqV,GD9XJ,SAAarV,EAAA9C,GAKpB,OAJA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,GCsYWsV,GDzXJ,SAAYtV,EAAA+D,EAAAC,EAAAC,EAAAwB,GAKnB,OAJAzF,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAAA,GAAAyF,EACAzF,GC+XWuV,GDpXJ,SAAYvV,EAAA9C,EAAAsG,GAKnB,OAJAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,GCqXWwV,GAAMrC,GAWNsC,GDxPJ,SAAczV,EAAA9C,EAAAsG,GAKrB,OAJAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,GC6PW0V,GDnHJ,SAAYxY,EAAAsG,GACnB,OAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,IC8HWmS,GDlHJ,SAAa3V,EAAA9C,EAAAsG,EAAAvN,GACpB,IAAA2Q,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GAKA,OAJA8C,EAAA,GAAA4G,EAAA3Q,GAAAuN,EAAA,GAAAoD,GACA5G,EAAA,GAAA6G,EAAA5Q,GAAAuN,EAAA,GAAAqD,GACA7G,EAAA,GAAA8G,EAAA7Q,GAAAuN,EAAA,GAAAsD,GACA9G,EAAA,GAAA+G,EAAA9Q,GAAAuN,EAAA,GAAAuD,GACA/G,GCiHW4V,GAASjD,GAMTkD,GAAMD,GASNE,GAAgBlD,GAMhBmD,GAASD,GAUTE,GD7LJ,SAAkBhW,EAAA9C,GACzB,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAuI,EAAAvI,EAAA,GACAwH,EAAAX,IAAAC,IAAAC,IAAAwB,IAQA,OAPAf,EAAA,IACAA,EAAA,EAAA7E,KAAA8E,KAAAD,GACA1E,EAAA,GAAA+D,EAAAW,EACA1E,EAAA,GAAAgE,EAAAU,EACA1E,EAAA,GAAAiE,EAAAS,EACA1E,EAAA,GAAAyF,EAAAf,GAEA1E,GCyLWiW,GDhDJ,SAAoB/Y,EAAAsG,GAC3B,OAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,ICwDW0S,GD9CJ,SAAehZ,EAAAsG,GACtB,IAAAmJ,EAAAzP,EAAA,GACA0P,EAAA1P,EAAA,GACA2P,EAAA3P,EAAA,GACA4P,EAAA5P,EAAA,GACAuG,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACA,OAAA3D,KAAAiM,IAAAa,EAAAlJ,IAA8BjE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAa,GAAA9M,KAAAiM,IAAArI,KAAA5D,KAAAiM,IAAAc,EAAAlJ,IAAqElE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAc,GAAA/M,KAAAiM,IAAApI,KAAA7D,KAAAiM,IAAAe,EAAAlJ,IAAqEnE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAe,GAAAhN,KAAAiM,IAAAnI,KAAA9D,KAAAiM,IAAAgB,EAAAlJ,IAAqEpE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAgB,GAAAjN,KAAAiM,IAAAlI,KCkDtSuS,GAAA,WACP,IAAAC,EAAgBjI,KAChBkI,EAAkB/H,GAAe,OACjCgI,EAAkBhI,GAAe,OAEjC,gBAAAtO,EAAA9C,EAAAsG,GACA,IAAA6Q,EAAc5E,GAAQvS,EAAAsG,GACtB,OAAA6Q,GAAA,SACM3E,GAAU0G,EAAAC,EAAAnZ,GACNkV,GAAQgE,GAAA,MAAsB1G,GAAU0G,EAAAE,EAAApZ,GAC5CsS,GAAc4G,KACpBpD,GAAAhT,EAAAoW,EAAAvW,KAAAE,IACAC,GACKqU,EAAA,SACLrU,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,IAEM0P,GAAU0G,EAAAlZ,EAAAsG,GAChBxD,EAAA,GAAAoW,EAAA,GACApW,EAAA,GAAAoW,EAAA,GACApW,EAAA,GAAAoW,EAAA,GACApW,EAAA,KAAAqU,EACa2B,GAAShW,OAzBf,GAyCAuW,GAAA,WACP,IAAAC,EAAc1D,KACd2D,EAAc3D,KAEd,gBAAA9S,EAAA9C,EAAAsG,EAAApO,EAAAC,EAAAY,GAKA,OAJAud,GAAAgD,EAAAtZ,EAAA7H,EAAAY,GACAud,GAAAiD,EAAAjT,EAAApO,EAAAa,GACAud,GAAAxT,EAAAwW,EAAAC,EAAA,EAAAxgB,GAAA,EAAAA,IAEA+J,GATO,GAuBA0W,GAAA,WACP,IAAAC,ECvnBO,WACP,IAAA3W,EAAA,IAAgBP,EAAmB,GAYnC,OAXMA,GAAmBC,eACzBM,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,ED0mBa4W,GAEb,gBAAA5W,EAAA6W,EAAA/N,EAAAgC,GAaA,OAZA6L,EAAA,GAAA7N,EAAA,GACA6N,EAAA,GAAA7N,EAAA,GACA6N,EAAA,GAAA7N,EAAA,GAEA6N,EAAA,GAAA7L,EAAA,GACA6L,EAAA,GAAA7L,EAAA,GACA6L,EAAA,GAAA7L,EAAA,GAEA6L,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GAEWb,GAAShW,EAAAwU,GAAAxU,EAAA2W,KAhBb,GEloBPhiB,EAAAU,EAAA0B,EAAA,sBAAA+f,IAAAniB,EAAAU,EAAA0B,EAAA,sBAAAggB,IAAApiB,EAAAU,EAAA0B,EAAA,sBAAAigB,kCCAAriB,EAAAU,EAAA0B,EAAA,sBAAAkgB,IAAAtiB,EAAAU,EAAA0B,EAAA,sBAAAmgB,IAAAviB,EAAAU,EAAA0B,EAAA,sBAAAogB,IAAAxiB,EAAAU,EAAA0B,EAAA,sBAAAqgB,IAAA,IAAAC,EAAA1iB,EAAA,GACO,MAAAsiB,GACPK,KAAA,gBACAC,UAAA,SACAC,UAAA,WAEO,SAAAN,EAAAO,GACP,OACAC,YAAA,SACAC,QAAAF,EAAAG,YACAC,WAAAJ,EAAAK,UAAAL,EAAAM,sBAGO,MAAAZ,GACPa,YACAC,SACAC,CAAab,EAAA,IACbc,OAAA,IAAAzY,eACA,KACA,KACA,IACA,OAEA0Y,UAAA,UAEAF,CAAab,EAAA,IACbc,OAAA,IAAAzY,cACA,IACA,IACA,IACA,MAEA0Y,UAAA,WAGAC,SAAA,iBACAC,UAAA,IAGOlB,GACPmB,aACAC,yBACiBnB,EAAA,sBACAA,EAAA,oBACFA,EAAA,wBAEZA,EAAA,OAAiCA,EAAA,4BACdA,EAAA,mBAEtBoB,oDACoBpB,EAAA,oBACLA,EAAA,iDAEaA,EAAA,MAAqCA,EAAA,yCCrDjE1iB,EAAAU,EAAA0B,EAAA,sBAAA2hB,IAAA/jB,EAAAU,EAAA0B,EAAA,sBAAA4hB,IAAAhkB,EAAAU,EAAA0B,EAAA,sBAAA6hB,IAAAjkB,EAAAU,EAAA0B,EAAA,sBAAA8hB,IAAAlkB,EAAAU,EAAA0B,EAAA,sBAAA+hB,IAAAnkB,EAAAU,EAAA0B,EAAA,sBAAAgiB,IAAApkB,EAAAU,EAAA0B,EAAA,sBAAAiiB,IAAArkB,EAAAU,EAAA0B,EAAA,sBAAAkiB,IAAA,IAAAC,EAAAvkB,EAAA,GACO,SAAA+jB,EAAAS,GACP,OAAAA,EAAe1jB,OAAAyjB,EAAA,EAAAzjB,CAAO0jB,EAAAje,SAEf,SAAAyd,EAAA1b,EAAAwV,GACP,QAAA1d,EAAA,EAAmBA,EAAA0d,EAAW1d,IAC9BkI,EAAAlI,GAGO,SAAA6jB,EAAA3b,EAAAwV,EAAA2G,MACP,QAAArkB,EAAA,EAAmBA,EAAA0d,EAAW1d,IAC9BqkB,EAAArkB,GAAAkI,EAAAlI,GAEA,OAAAqkB,EAEO,SAAAP,EAAA5b,EAAAoc,EAAAC,EAAAF,MACP,MAAAle,EAAA2E,KAAAkP,IAAAsK,EAAAne,OAAAoe,EAAApe,QACA,QAAAnG,EAAA,EAAmBA,EAAAmG,EAAYnG,IAC/BqkB,EAAArkB,GAAAkI,EAAAoc,EAAAtkB,GAAAukB,EAAAvkB,IAEA,OAAAqkB,EAEO,SAAAN,EAAAS,EAAAH,MACP,UAAAI,KAAAD,EAAA,CACA,MAAAE,EAAAL,EAAAle,OACA,QAAAnG,EAAA,EAAuBA,EAAAykB,EAAAte,OAAqBnG,IAC5CqkB,EAAArkB,EAAA0kB,GAAAD,EAAAzkB,GAGA,OAAAqkB,EAEO,SAAAL,EAAA9b,EAAAsc,EAAAH,MACP,OAAAN,EAAAS,EAAAP,IAAA/b,GAAAmc,GAYO,SAAAJ,EAAA/b,EAAAyc,GACP,GAAA/Z,MAAAga,QAAAD,GACA,OAAAA,EAAAV,IAAA/b,GAEA,CACA,MAAA2c,KACA,UAAAtjB,KAAAojB,EACAE,EAAAtjB,GAAA2G,EAAAyc,EAAApjB,MAEA,OAAAsjB,GAGO,SAAAX,EAAAhc,EAAAyc,GACP,UAAApjB,KAAAojB,EACAzc,EAAAyc,EAAApjB,qCC1DO,IAAAujB,EAsHA,SAAAC,EAAAC,EAAAC,GACP,MAAAC,EAAAD,GAAAD,GACAG,QAAWA,EAAAC,QAAmBJ,EAC9BK,KACA,SAAAC,EAAAC,GACAF,EAAAE,EAAAC,SAAAC,KAAAC,MACAR,EAAAG,GAEA,SAAAM,EAAAJ,UACAF,EAAAE,EAAAC,SACAN,EAAAG,GAKA,OAHAF,EAAAS,iBAAA,QAAAD,GAAA,GACAR,EAAAS,iBAAA,UAAAN,GAAA,GACAJ,EAAAG,GACA,WACAF,EAAAU,oBAAA,QAAAF,GACAR,EAAAU,oBAAA,UAAAP,IAvIA1lB,EAAAU,EAAA0B,EAAA,sBAAA8iB,IAAAllB,EAAAU,EAAA0B,EAAA,sBAAA+iB,IACA,SAAAD,GACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,2BACAA,IAAA,aACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,gCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,uBACAA,IAAA,yBACAA,IAAA,eACAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,uBACAA,IAAA,qBACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,mBACAA,IAAA,iBAnHA,CAoHCA,0CCrHM,SAAAgB,EAAAC,EAAAC,GACP,MAAAtD,EAAAqD,EAAAD,WAAA,QAAAE,IAAAD,EAAAD,WAAA,qBAAAE,GACA,SAAAtD,EACA,MAAAuD,MAAA,uCAEA,OAAAvD,EAEO,SAAAwD,EAAAxD,KAAAyD,GACP,OAAAA,EAAA3c,OAAA,CAAA6a,EAAA+B,IAAA/B,EAAA3B,EAAA0D,EAAAC,cAAA,kBAUO,SAAAC,EAAAP,EAAAQ,EAAA,GACP,MAAAC,EAAAT,EAAAU,YAAAF,EAAA,EACAG,EAAAX,EAAAY,aAAAJ,EAAA,EACA,OAAAR,EAAAS,WACAT,EAAAW,cACAX,EAAAS,QACAT,EAAAW,UACA,GAzBA9mB,EAAAU,EAAA0B,EAAA,sBAAA8jB,IAAAlmB,EAAAU,EAAA0B,EAAA,sBAAAkkB,IAAAtmB,EAAAU,EAAA0B,EAAA,sBAAAskB,kCCAO,SAAAM,EAAAC,GACP,OAAA/b,KAAAiP,MAAAjP,KAAAC,SAAA8b,GAEO,SAAAC,EAAAC,EAAAC,GACP,OAAAJ,EAAAI,EAAAD,KAEO,SAAAE,IACP,OAAAnc,KAAAC,SAAAD,KAAAC,SAAAD,KAAAC,UAAA,EAPAnL,EAAAU,EAAA0B,EAAA,sBAAA4kB,IAAAhnB,EAAAU,EAAA0B,EAAA,sBAAA8kB,IAAAlnB,EAAAU,EAAA0B,EAAA,sBAAAilB,kCCAArnB,EAAAU,EAAA0B,EAAA,sBAAAklB,IAAAtnB,EAAAU,EAAA0B,EAAA,sBAAAmlB,IAAAvnB,EAAAU,EAAA0B,EAAA,sBAAAolB,IAAAxnB,EAAAU,EAAA0B,EAAA,sBAAAqlB,IAAA,IAAAC,EAAA1nB,EAAA,IAAA2nB,EAAA3nB,EAAA,IAEO,SAAAsnB,EAAAM,GACP,IAAAC,EAAAD,EAAAvgB,UAAA,IAAAwgB,EAAyC/mB,OAAA4mB,EAAA,EAAA5mB,GAAE+mB,EAAAxmB,EAAAumB,EAAAvmB,MAAAymB,EAAAF,EAAAE,KAAArgB,EAAAmgB,EAAAngB,OAAAC,EAAAkgB,EAAAlgB,MAAA8B,EAAAoe,EAAApe,KAI3C,YAHAue,IAAA1mB,GAAAymB,IACAzmB,EAAA2mB,KAAAC,MAAAH,KAGAzgB,KACAhG,QACAoG,SACAC,QACA8B,QAGO,SAAA+d,EAAAK,EAAAM,GACP,IAAAL,EAAAD,EAAAvgB,UAAA,IAAAwgB,EAAyC/mB,OAAA4mB,EAAA,EAAA5mB,GAAE+mB,EAAAM,EAAAP,EAAA7d,aAAA,IAAAoe,OAAA1f,EAAAmf,EAAAnf,UAAA2f,EAAAR,EAAAQ,KAAAC,EAAAT,EAAAtd,iBAAA,IAAA+d,KAAAC,EAAAV,EAAAvd,aAAA,IAAAie,KAAAC,EAAAX,EAAA/gB,aAAA,IAAA0hB,KAAA/e,EAAAoe,EAAApe,KAI3C,GAHA,MAAAf,GAAA,MAAA2f,IACA3f,EAAoB3H,OAAA6mB,EAAA,EAAA7mB,CAAQsnB,EAAAF,IAE5B,MAAAzf,EACA,MAAA+f,UAAA,2CAKA,OAHA3hB,IAAAkD,EAAAxD,QACAwD,EAAArB,KAAA+e,EAAA3f,MAGAT,KACA0C,QACAtB,YACA6B,YACAD,QACAxD,QACA2C,QAGO,SAAAge,EAAAI,GACP,IAAAvgB,EAAAugB,EAAAvgB,GAAAQ,EAAA+f,EAAA/f,OAAAsC,EAAAyd,EAAAzd,QAAAH,EAAA4d,EAAA5d,KAAAR,EAAAoe,EAAApe,KACA,SAAA3B,EACA,MAAA2gB,UAAA,8BAAAnhB,GAEA,SAAA8C,EACA,MAAAqe,UAAA,+BAAAnhB,GAUA,OARA,MAAAA,IAEAA,EADA,MAAA2C,EACAG,EAAA,KAAAtC,EAGAA,EAAA,KAAAsC,EAAA,KAAAH,IAIA3C,KACAQ,SACAsC,UACAH,OACAR,QAGO,IAAAie,GACPxf,KAAA,OACAH,IAAA,MACAmB,YAAA,suHCzDO,MAAA4B,EAAA,KACA,IAAAC,EAAA,oBAAAC,0BAAAC,MACA,MAAAC,EAAAC,KAAAC,OAWPD,KAAAE,GCPO,SAASqd,IAChB,IAAApd,EAAA,IAAgBP,EAAmB,IAiBnC,OAhBAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EASO,SAASqd,EAAKngB,GACrB,IAAA8C,EAAA,IAAgBP,EAAmB,IAiBnC,OAhBAO,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAUO,SAASsd,EAAItd,EAAA9C,GAiBpB,OAhBA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAwBO,SAASud,EAAUnd,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAC1B,IAAAnB,EAAA,IAAgBP,EAAmB,IAiBnC,OAhBAO,EAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,EAAA,GAAAa,EACAb,EAAA,IAAAc,EACAd,EAAA,IAAAe,EACAf,EAAA,IAAAgB,EACAhB,EAAA,IAAAiB,EACAjB,EAAA,IAAAkB,EACAlB,EAAA,IAAAmB,EACAnB,EAyBO,SAASwd,EAAGxd,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAiBnB,OAhBAnB,EAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,EAAA,GAAAa,EACAb,EAAA,IAAAc,EACAd,EAAA,IAAAe,EACAf,EAAA,IAAAgB,EACAhB,EAAA,IAAAiB,EACAjB,EAAA,IAAAkB,EACAlB,EAAA,IAAAmB,EACAnB,EAUO,SAASyd,EAAQzd,GAiBxB,OAhBAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAUO,SAAS0d,EAAS1d,EAAA9C,GAEzB,GAAA8C,IAAA9C,EAAA,CACA,IAAAqE,EAAArE,EAAA,GAAAsE,EAAAtE,EAAA,GAAAuE,EAAAvE,EAAA,GACAwE,EAAAxE,EAAA,GAAAyE,EAAAzE,EAAA,GACA0E,EAAA1E,EAAA,IAEA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAAuB,EACAvB,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAAwB,EACAxB,EAAA,GAAA0B,EACA1B,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAAyB,EACAzB,EAAA,IAAA2B,EACA3B,EAAA,IAAA4B,OAEA5B,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,IACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IAGA,OAAA8C,EAUO,SAAS2d,EAAM3d,EAAA9C,GACtB,IAAA4E,EAAA5E,EAAA,GAAAqE,EAAArE,EAAA,GAAAsE,EAAAtE,EAAA,GAAAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GAAA8E,EAAA9E,EAAA,GAAAwE,EAAAxE,EAAA,GAAAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAAAiF,EAAAjF,EAAA,IAAA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IAAAmF,EAAAnF,EAAA,IAAAoF,EAAApF,EAAA,IAAAqF,EAAArF,EAAA,IAEAsF,EAAAV,EAAAE,EAAAT,EAAAQ,EACAU,EAAAX,EAAAJ,EAAAF,EAAAO,EACAW,EAAAZ,EAAAH,EAAAF,EAAAM,EACAY,EAAApB,EAAAG,EAAAF,EAAAQ,EACAY,EAAArB,EAAAI,EAAAF,EAAAO,EACAa,EAAArB,EAAAG,EAAAF,EAAAC,EACAoB,EAAAb,EAAAI,EAAAH,EAAAE,EACAW,EAAAd,EAAAK,EAAAH,EAAAC,EACAY,EAAAf,EAAAM,EAAAX,EAAAQ,EACAa,EAAAf,EAAAI,EAAAH,EAAAE,EACAa,EAAAhB,EAAAK,EAAAX,EAAAS,EACAc,EAAAhB,EAAAI,EAAAX,EAAAU,EAGAc,EAAAZ,EAAAW,EAAAV,EAAAS,EAAAR,EAAAO,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAAM,GAGAA,EAAA,EAAAA,EAEApD,EAAA,IAAAgC,EAAAmB,EAAAzB,EAAAwB,EAAAvB,EAAAsB,GAAAG,EACApD,EAAA,IAAAwB,EAAA0B,EAAA3B,EAAA4B,EAAA1B,EAAAwB,GAAAG,EACApD,EAAA,IAAAqC,EAAAQ,EAAAP,EAAAM,EAAAL,EAAAI,GAAAS,EACApD,EAAA,IAAAmC,EAAAS,EAAAV,EAAAW,EAAAjB,EAAAe,GAAAS,EACApD,EAAA,IAAA0B,EAAAsB,EAAAjB,EAAAoB,EAAAxB,EAAAoB,GAAAK,EACApD,EAAA,IAAA8B,EAAAqB,EAAA3B,EAAAwB,EAAAvB,EAAAsB,GAAAK,EACApD,EAAA,IAAAsC,EAAAI,EAAAN,EAAAS,EAAAN,EAAAE,GAAAW,EACApD,EAAA,IAAAiC,EAAAY,EAAAV,EAAAO,EAAAd,EAAAa,GAAAW,EACApD,EAAA,IAAA+B,EAAAmB,EAAAlB,EAAAgB,EAAArB,EAAAmB,GAAAM,EACApD,EAAA,IAAAuB,EAAAyB,EAAAlB,EAAAoB,EAAAzB,EAAAqB,GAAAM,EACApD,EAAA,KAAAoC,EAAAQ,EAAAP,EAAAK,EAAAH,EAAAC,GAAAY,EACApD,EAAA,KAAAkC,EAAAQ,EAAAT,EAAAW,EAAAhB,EAAAY,GAAAY,EACApD,EAAA,KAAAgC,EAAAe,EAAAhB,EAAAkB,EAAAvB,EAAAoB,GAAAM,EACApD,EAAA,KAAA8B,EAAAmB,EAAA1B,EAAAwB,EAAAvB,EAAAsB,GAAAM,EACApD,EAAA,KAAAqC,EAAAI,EAAAL,EAAAO,EAAAL,EAAAE,GAAAY,EACApD,EAAA,KAAAiC,EAAAU,EAAAT,EAAAO,EAAAN,EAAAK,GAAAY,EAEApD,GArBA,KA+BO,SAAS4d,EAAO5d,EAAA9C,GACvB,IAAA4E,EAAA5E,EAAA,GAAAqE,EAAArE,EAAA,GAAAsE,EAAAtE,EAAA,GAAAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GAAA8E,EAAA9E,EAAA,GAAAwE,EAAAxE,EAAA,GAAAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAAAiF,EAAAjF,EAAA,IAAA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IAAAmF,EAAAnF,EAAA,IAAAoF,EAAApF,EAAA,IAAAqF,EAAArF,EAAA,IAkBA,OAhBA8C,EAAA,GAAAgC,GAAAG,EAAAI,EAAAX,EAAAU,GAAAJ,GAAAR,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAE,EAAAD,EAAAQ,GACAnC,EAAA,KAAAuB,GAAAY,EAAAI,EAAAX,EAAAU,GAAAJ,GAAAV,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAI,EAAAH,EAAAU,IACAnC,EAAA,GAAAuB,GAAAG,EAAAa,EAAAZ,EAAAW,GAAAN,GAAAR,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAG,EAAAF,EAAAC,GACA1B,EAAA,KAAAuB,GAAAG,EAAAE,EAAAD,EAAAQ,GAAAH,GAAAR,EAAAI,EAAAH,EAAAU,GAAAD,GAAAV,EAAAG,EAAAF,EAAAC,IACA1B,EAAA,KAAA+B,GAAAI,EAAAI,EAAAX,EAAAU,GAAAL,GAAAP,EAAAa,EAAAZ,EAAAW,GAAAF,GAAAV,EAAAE,EAAAD,EAAAQ,IACAnC,EAAA,GAAA8B,GAAAK,EAAAI,EAAAX,EAAAU,GAAAL,GAAAT,EAAAe,EAAAd,EAAAa,GAAAF,GAAAZ,EAAAI,EAAAH,EAAAU,GACAnC,EAAA,KAAA8B,GAAAJ,EAAAa,EAAAZ,EAAAW,GAAAP,GAAAP,EAAAe,EAAAd,EAAAa,GAAAF,GAAAZ,EAAAG,EAAAF,EAAAC,IACA1B,EAAA,GAAA8B,GAAAJ,EAAAE,EAAAD,EAAAQ,GAAAJ,GAAAP,EAAAI,EAAAH,EAAAU,GAAAF,GAAAT,EAAAG,EAAAF,EAAAC,GACA1B,EAAA,GAAA+B,GAAAG,EAAAK,EAAAX,EAAAS,GAAAJ,GAAAD,EAAAO,EAAAZ,EAAAU,GAAAD,GAAAJ,EAAAJ,EAAAD,EAAAO,GACAlC,EAAA,KAAA8B,GAAAI,EAAAK,EAAAX,EAAAS,GAAAJ,GAAAV,EAAAgB,EAAAd,EAAAY,GAAAD,GAAAb,EAAAK,EAAAH,EAAAS,IACAlC,EAAA,IAAA8B,GAAAE,EAAAO,EAAAZ,EAAAU,GAAAN,GAAAR,EAAAgB,EAAAd,EAAAY,GAAAD,GAAAb,EAAAI,EAAAF,EAAAO,GACAhC,EAAA,MAAA8B,GAAAE,EAAAJ,EAAAD,EAAAO,GAAAH,GAAAR,EAAAK,EAAAH,EAAAS,GAAAD,GAAAV,EAAAI,EAAAF,EAAAO,IACAhC,EAAA,MAAA+B,GAAAG,EAAAI,EAAAH,EAAAE,GAAAJ,GAAAD,EAAAM,EAAAZ,EAAAW,GAAAD,GAAAJ,EAAAG,EAAAT,EAAAQ,IACAlC,EAAA,IAAA8B,GAAAI,EAAAI,EAAAH,EAAAE,GAAAJ,GAAAV,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAY,EAAAX,EAAAU,GACAlC,EAAA,MAAA8B,GAAAE,EAAAM,EAAAZ,EAAAW,GAAAN,GAAAR,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAG,EAAAF,EAAAQ,IACAhC,EAAA,IAAA8B,GAAAE,EAAAG,EAAAT,EAAAQ,GAAAH,GAAAR,EAAAY,EAAAX,EAAAU,GAAAD,GAAAV,EAAAG,EAAAF,EAAAQ,GACAhC,EASO,SAAS6d,EAAW3gB,GAC3B,IAAA4E,EAAA5E,EAAA,GAAAqE,EAAArE,EAAA,GAAAsE,EAAAtE,EAAA,GAAAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GAAA8E,EAAA9E,EAAA,GAAAwE,EAAAxE,EAAA,GAAAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAAAiF,EAAAjF,EAAA,IAAA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IAAAmF,EAAAnF,EAAA,IAAAoF,EAAApF,EAAA,IAAAqF,EAAArF,EAAA,IAgBA,OAdA4E,EAAAE,EAAAT,EAAAQ,IAWAI,EAAAI,EAAAX,EAAAU,IAVAR,EAAAJ,EAAAF,EAAAO,IASAG,EAAAK,EAAAX,EAAAS,IARAP,EAAAH,EAAAF,EAAAM,IAOAG,EAAAI,EAAAH,EAAAE,IANAd,EAAAG,EAAAF,EAAAQ,IAKAC,EAAAM,EAAAX,EAAAQ,IAJAb,EAAAI,EAAAF,EAAAO,IAGAC,EAAAK,EAAAH,EAAAC,IAFAZ,EAAAG,EAAAF,EAAAC,IACAO,EAAAI,EAAAH,EAAAE,GAmBO,SAAS0b,EAAQ9d,EAAA9C,EAAAsG,GACxB,IAAA1B,EAAA5E,EAAA,GAAAqE,EAAArE,EAAA,GAAAsE,EAAAtE,EAAA,GAAAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GAAA8E,EAAA9E,EAAA,GAAAwE,EAAAxE,EAAA,GAAAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAAAiF,EAAAjF,EAAA,IAAA0E,EAAA1E,EAAA,IACAkF,EAAAlF,EAAA,IAAAmF,EAAAnF,EAAA,IAAAoF,EAAApF,EAAA,IAAAqF,EAAArF,EAAA,IAGAuG,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAuBA,OAtBAxD,EAAA,GAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,GAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,GAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,GAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EAEAkB,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GAAWG,EAAAH,EAAA,GAAWI,EAAAJ,EAAA,GAClCxD,EAAA,GAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,GAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,GAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,GAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EAEAkB,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GAAWG,EAAAH,EAAA,IAAYI,EAAAJ,EAAA,IACnCxD,EAAA,GAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,GAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,IAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,IAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EAEAkB,EAAAD,EAAA,IAAaE,EAAAF,EAAA,IAAYG,EAAAH,EAAA,IAAYI,EAAAJ,EAAA,IACrCxD,EAAA,IAAAyD,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAA1B,EAAA2B,EAAAxB,EACApC,EAAA,IAAAyD,EAAAlC,EAAAmC,EAAA1B,EAAA2B,EAAAzB,EAAA0B,EAAAvB,EACArC,EAAA,IAAAyD,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EAAAxB,EAAAyB,EAAAtB,EACAtC,EAAA,IAAAyD,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/B,EAAAgC,EAAArB,EACAvC,EAWO,SAAS+d,EAAS/d,EAAA9C,EAAA4G,GACzB,IACAhC,EAAAP,EAAAC,EAAAC,EACAM,EAAAC,EAAAN,EAAAC,EACAM,EAAAC,EAAAC,EAAAP,EAHAmC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAyBA,OApBA5G,IAAA8C,GACAA,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,IAAA+G,EAAA/G,EAAA,IACA8C,EAAA,IAAA9C,EAAA,GAAA6G,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,IAAA+G,EAAA/G,EAAA,MAEA4E,EAAA5E,EAAA,GAAeqE,EAAArE,EAAA,GAAYsE,EAAAtE,EAAA,GAAYuE,EAAAvE,EAAA,GACvC6E,EAAA7E,EAAA,GAAe8E,EAAA9E,EAAA,GAAYwE,EAAAxE,EAAA,GAAYyE,EAAAzE,EAAA,GACvC+E,EAAA/E,EAAA,GAAegF,EAAAhF,EAAA,GAAYiF,EAAAjF,EAAA,IAAa0E,EAAA1E,EAAA,IAExC8C,EAAA,GAAA8B,EAAiB9B,EAAA,GAAAuB,EAAcvB,EAAA,GAAAwB,EAAcxB,EAAA,GAAAyB,EAC7CzB,EAAA,GAAA+B,EAAiB/B,EAAA,GAAAgC,EAAchC,EAAA,GAAA0B,EAAc1B,EAAA,GAAA2B,EAC7C3B,EAAA,GAAAiC,EAAiBjC,EAAA,GAAAkC,EAAclC,EAAA,IAAAmC,EAAenC,EAAA,IAAA4B,EAE9C5B,EAAA,IAAA8B,EAAAiC,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EAAA/G,EAAA,IACA8C,EAAA,IAAAuB,EAAAwC,EAAA/B,EAAAgC,EAAA9B,EAAA+B,EAAA/G,EAAA,IACA8C,EAAA,IAAAwB,EAAAuC,EAAArC,EAAAsC,EAAA7B,EAAA8B,EAAA/G,EAAA,IACA8C,EAAA,IAAAyB,EAAAsC,EAAApC,EAAAqC,EAAApC,EAAAqC,EAAA/G,EAAA,KAGA8C,EAWO,SAASkE,EAAKlE,EAAA9C,EAAA4G,GACrB,IAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAkBA,OAhBA9D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA6G,EACA/D,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA8G,EACAhE,EAAA,GAAA9C,EAAA,GAAA+G,EACAjE,EAAA,GAAA9C,EAAA,GAAA+G,EACAjE,EAAA,IAAA9C,EAAA,IAAA+G,EACAjE,EAAA,IAAA9C,EAAA,IAAA+G,EACAjE,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAYO,SAASge,EAAMhe,EAAA9C,EAAAkH,EAAAC,GACtB,IAEAvN,EAAA1B,EAAAa,EACA6L,EAAAP,EAAAC,EAAAC,EACAM,EAAAC,EAAAN,EAAAC,EACAM,EAAAC,EAAAC,EAAAP,EACAY,EAAAC,EAAAC,EACAQ,EAAAC,EAAAmB,EACAC,EAAAC,EAAAC,EARAV,EAAAM,EAAA,GAAAL,EAAAK,EAAA,GAAAJ,EAAAI,EAAA,GACAK,EAAA7E,KAAA8E,KAAAZ,IAAAC,IAAAC,KASA,OAAAS,EAAYlF,EAAmB,MAG/BuE,GADAW,EAAA,EAAAA,EAEAV,GAAAU,EACAT,GAAAS,EAEA5N,EAAA+I,KAAA+E,IAAAR,GAEAnO,EAAA,GADAb,EAAAyK,KAAAgF,IAAAT,IAGAtC,EAAA5E,EAAA,GAAaqE,EAAArE,EAAA,GAAYsE,EAAAtE,EAAA,GAAYuE,EAAAvE,EAAA,GACrC6E,EAAA7E,EAAA,GAAa8E,EAAA9E,EAAA,GAAYwE,EAAAxE,EAAA,GAAYyE,EAAAzE,EAAA,GACrC+E,EAAA/E,EAAA,GAAagF,EAAAhF,EAAA,GAAYiF,EAAAjF,EAAA,IAAa0E,EAAA1E,EAAA,IAGtCsF,EAAAuB,IAAA9N,EAAAb,EAAsBqN,EAAAuB,EAAAD,EAAA9N,EAAAgO,EAAAnN,EAAyB4L,EAAAuB,EAAAF,EAAA9N,EAAA+N,EAAAlN,EAC/CoM,EAAAa,EAAAC,EAAA/N,EAAAgO,EAAAnN,EAA0BqM,EAAAa,IAAA/N,EAAAb,EAAqBkP,EAAAL,EAAAD,EAAA/N,EAAA8N,EAAAjN,EAC/CyN,EAAAR,EAAAE,EAAAhO,EAAA+N,EAAAlN,EAA0B0N,EAAAR,EAAAC,EAAAhO,EAAA8N,EAAAjN,EAAyB2N,EAAAR,IAAAhO,EAAAb,EAGnD4K,EAAA,GAAA8B,EAAAU,EAAAT,EAAAU,EAAAR,EAAAS,EACA1C,EAAA,GAAAuB,EAAAiB,EAAAR,EAAAS,EAAAP,EAAAQ,EACA1C,EAAA,GAAAwB,EAAAgB,EAAAd,EAAAe,EAAAN,EAAAO,EACA1C,EAAA,GAAAyB,EAAAe,EAAAb,EAAAc,EAAAb,EAAAc,EACA1C,EAAA,GAAA8B,EAAAoB,EAAAnB,EAAAoB,EAAAlB,EAAAqC,EACAtE,EAAA,GAAAuB,EAAA2B,EAAAlB,EAAAmB,EAAAjB,EAAAoC,EACAtE,EAAA,GAAAwB,EAAA0B,EAAAxB,EAAAyB,EAAAhB,EAAAmC,EACAtE,EAAA,GAAAyB,EAAAyB,EAAAvB,EAAAwB,EAAAvB,EAAA0C,EACAtE,EAAA,GAAA8B,EAAAyC,EAAAxC,EAAAyC,EAAAvC,EAAAwC,EACAzE,EAAA,GAAAuB,EAAAgD,EAAAvC,EAAAwC,EAAAtC,EAAAuC,EACAzE,EAAA,IAAAwB,EAAA+C,EAAA7C,EAAA8C,EAAArC,EAAAsC,EACAzE,EAAA,IAAAyB,EAAA8C,EAAA5C,EAAA6C,EAAA5C,EAAA6C,EAEAvH,IAAA8C,IACAA,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAEA8C,GAWO,SAAA8E,EAAA9E,EAAA9C,EAAAkH,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GACArC,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IAsBA,OApBAA,IAAA8C,IACAA,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAIA8C,EAAA,GAAA+B,EAAA3M,EAAA6M,EAAAnL,EACAkJ,EAAA,GAAAgC,EAAA5M,EAAA8M,EAAApL,EACAkJ,EAAA,GAAA0B,EAAAtM,EAAA+M,EAAArL,EACAkJ,EAAA,GAAA2B,EAAAvM,EAAAwM,EAAA9K,EACAkJ,EAAA,GAAAiC,EAAA7M,EAAA2M,EAAAjL,EACAkJ,EAAA,GAAAkC,EAAA9M,EAAA4M,EAAAlL,EACAkJ,EAAA,IAAAmC,EAAA/M,EAAAsM,EAAA5K,EACAkJ,EAAA,IAAA4B,EAAAxM,EAAAuM,EAAA7K,EACAkJ,EAWO,SAAA+E,EAAA/E,EAAA9C,EAAAkH,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GACAtC,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA+E,EAAA/E,EAAA,GACAgF,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,IACA0E,EAAA1E,EAAA,IAsBA,OApBAA,IAAA8C,IACAA,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAIA8C,EAAA,GAAA8B,EAAA1M,EAAA6M,EAAAnL,EACAkJ,EAAA,GAAAuB,EAAAnM,EAAA8M,EAAApL,EACAkJ,EAAA,GAAAwB,EAAApM,EAAA+M,EAAArL,EACAkJ,EAAA,GAAAyB,EAAArM,EAAAwM,EAAA9K,EACAkJ,EAAA,GAAA8B,EAAAhL,EAAAmL,EAAA7M,EACA4K,EAAA,GAAAuB,EAAAzK,EAAAoL,EAAA9M,EACA4K,EAAA,IAAAwB,EAAA1K,EAAAqL,EAAA/M,EACA4K,EAAA,IAAAyB,EAAA3K,EAAA8K,EAAAxM,EACA4K,EAWO,SAAAgF,EAAAhF,EAAA9C,EAAAkH,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GACAtC,EAAA5E,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GACA6E,EAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GACAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GAsBA,OApBAA,IAAA8C,IACAA,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,IACA8C,EAAA,IAAA9C,EAAA,KAIA8C,EAAA,GAAA8B,EAAA1M,EAAA2M,EAAAjL,EACAkJ,EAAA,GAAAuB,EAAAnM,EAAA4M,EAAAlL,EACAkJ,EAAA,GAAAwB,EAAApM,EAAAsM,EAAA5K,EACAkJ,EAAA,GAAAyB,EAAArM,EAAAuM,EAAA7K,EACAkJ,EAAA,GAAA+B,EAAA3M,EAAA0M,EAAAhL,EACAkJ,EAAA,GAAAgC,EAAA5M,EAAAmM,EAAAzK,EACAkJ,EAAA,GAAA0B,EAAAtM,EAAAoM,EAAA1K,EACAkJ,EAAA,GAAA2B,EAAAvM,EAAAqM,EAAA3K,EACAkJ,EAcO,SAASie,EAAeje,EAAA8D,GAiB/B,OAhBA9D,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MACAA,EAcO,SAASke,EAAWle,EAAA8D,GAiB3B,OAhBA9D,EAAA,GAAA8D,EAAA,GACA9D,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA8D,EAAA,GACA9D,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAeO,SAASme,EAAYne,EAAAoE,EAAAC,GAC5B,IAEAvN,EAAA1B,EAAAa,EAFA8N,EAAAM,EAAA,GAAAL,EAAAK,EAAA,GAAAJ,EAAAI,EAAA,GACAK,EAAA7E,KAAA8E,KAAAZ,IAAAC,IAAAC,KAGA,OAAAS,EAAYlF,EAAmB,MAG/BuE,GADAW,EAAA,EAAAA,EAEAV,GAAAU,EACAT,GAAAS,EAEA5N,EAAA+I,KAAA+E,IAAAR,GAEAnO,EAAA,GADAb,EAAAyK,KAAAgF,IAAAT,IAIApE,EAAA,GAAA+D,IAAA9N,EAAAb,EACA4K,EAAA,GAAAgE,EAAAD,EAAA9N,EAAAgO,EAAAnN,EACAkJ,EAAA,GAAAiE,EAAAF,EAAA9N,EAAA+N,EAAAlN,EACAkJ,EAAA,KACAA,EAAA,GAAA+D,EAAAC,EAAA/N,EAAAgO,EAAAnN,EACAkJ,EAAA,GAAAgE,IAAA/N,EAAAb,EACA4K,EAAA,GAAAiE,EAAAD,EAAA/N,EAAA8N,EAAAjN,EACAkJ,EAAA,KACAA,EAAA,GAAA+D,EAAAE,EAAAhO,EAAA+N,EAAAlN,EACAkJ,EAAA,GAAAgE,EAAAC,EAAAhO,EAAA8N,EAAAjN,EACAkJ,EAAA,IAAAiE,IAAAhO,EAAAb,EACA4K,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcO,SAAAoF,EAAApF,EAAAoE,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GAmBA,OAhBApE,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA5K,EACA4K,EAAA,GAAAlJ,EACAkJ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAlJ,EACAkJ,EAAA,IAAA5K,EACA4K,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcO,SAAAqF,EAAArF,EAAAoE,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GAmBA,OAhBApE,EAAA,GAAA5K,EACA4K,EAAA,KACAA,EAAA,IAAAlJ,EACAkJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAlJ,EACAkJ,EAAA,KACAA,EAAA,IAAA5K,EACA4K,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcO,SAAAsF,EAAAtF,EAAAoE,GACP,IAAAtN,EAAA+I,KAAA+E,IAAAR,GACAhP,EAAAyK,KAAAgF,IAAAT,GAmBA,OAhBApE,EAAA,GAAA5K,EACA4K,EAAA,GAAAlJ,EACAkJ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAlJ,EACAkJ,EAAA,GAAA5K,EACA4K,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAkBO,SAAAuF,EAAAvF,EAAAwF,EAAA1B,GAEP,IAAAC,EAAAyB,EAAA,GAAAxB,EAAAwB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACAI,EAAA/B,EAAA4B,EACAI,EAAAhC,EAAA6B,EACAI,EAAAhC,EAAA2B,EACAM,EAAAjC,EAAA4B,EACAM,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAmBA,OAjBA5F,EAAA,MAAAgG,EAAAE,GACAlG,EAAA,GAAA8F,EAAAO,EACArG,EAAA,GAAA+F,EAAAK,EACApG,EAAA,KACAA,EAAA,GAAA8F,EAAAO,EACArG,EAAA,MAAA6F,EAAAK,GACAlG,EAAA,GAAAiG,EAAAE,EACAnG,EAAA,KACAA,EAAA,GAAA+F,EAAAK,EACApG,EAAA,GAAAiG,EAAAE,EACAnG,EAAA,OAAA6F,EAAAG,GACAhG,EAAA,MACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MAEAA,EAUO,SAAAsG,EAAAtG,EAAA9C,GACP,IAAAqJ,EAAA,IAAwB9G,EAAmB,GAC3C+G,GAAAtJ,EAAA,GAAAuJ,GAAAvJ,EAAA,GAAAwJ,GAAAxJ,EAAA,GAAAyJ,EAAAzJ,EAAA,GACA0J,EAAA1J,EAAA,GAAA2J,EAAA3J,EAAA,GAAA4J,EAAA5J,EAAA,GAAA6J,EAAA7J,EAAA,GAEA8J,EAAAR,IAAAC,IAAAC,IAAAC,IAYA,OAVAK,EAAA,GACAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GAAAO,EACAT,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GAAAM,EACAT,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GAAAQ,IAEAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACAF,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACAH,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,IAEAjB,EAAAvF,EAAA9C,EAAAqJ,GACAvG,EAYO,SAAAiH,EAAAjH,EAAAkH,GAKP,OAJAlH,EAAA,GAAAkH,EAAA,IACAlH,EAAA,GAAAkH,EAAA,IACAlH,EAAA,GAAAkH,EAAA,IAEAlH,EAaO,SAAAmH,EAAAnH,EAAAkH,GACP,IAAAzG,EAAAyG,EAAA,GACAxG,EAAAwG,EAAA,GACAvG,EAAAuG,EAAA,GACArG,EAAAqG,EAAA,GACApG,EAAAoG,EAAA,GACAnG,EAAAmG,EAAA,GACAjG,EAAAiG,EAAA,GACAhG,EAAAgG,EAAA,GACA/F,EAAA+F,EAAA,IAMA,OAJAlH,EAAA,GAAAH,KAAA8E,KAAAlE,IAAAC,IAAAC,KACAX,EAAA,GAAAH,KAAA8E,KAAA9D,IAAAC,IAAAC,KACAf,EAAA,GAAAH,KAAA8E,KAAA1D,IAAAC,IAAAC,KAEAnB,EAYO,SAAAoH,EAAApH,EAAAkH,GAEP,IAAAG,EAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAI,EAAA,EA4BA,OA1BAD,EAAA,GACAC,EAAA,EAAAzH,KAAA8E,KAAA0C,EAAA,GACArH,EAAA,OAAAsH,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAAzH,KAAA8E,KAAA,EAAAuC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAlH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,OAAAsH,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAAzH,KAAA8E,KAAA,EAAAuC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAlH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,OAAAsH,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,IAEAA,EAAA,EAAAzH,KAAA8E,KAAA,EAAAuC,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAlH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,IAAAkH,EAAA,GAAAA,EAAA,IAAAI,EACAtH,EAAA,OAAAsH,GAGAtH,EAoBO,SAAAuH,EAAAvH,EAAAwF,EAAA1B,EAAAhN,GAEP,IAAAiN,EAAAyB,EAAA,GAAAxB,EAAAwB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACAI,EAAA/B,EAAA4B,EACAI,EAAAhC,EAAA6B,EACAI,EAAAhC,EAAA2B,EACAM,EAAAjC,EAAA4B,EACAM,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EACA4B,EAAA1Q,EAAA,GACA2Q,EAAA3Q,EAAA,GACA4Q,EAAA5Q,EAAA,GAmBA,OAjBAkJ,EAAA,OAAAgG,EAAAE,IAAAsB,EACAxH,EAAA,IAAA8F,EAAAO,GAAAmB,EACAxH,EAAA,IAAA+F,EAAAK,GAAAoB,EACAxH,EAAA,KACAA,EAAA,IAAA8F,EAAAO,GAAAoB,EACAzH,EAAA,OAAA6F,EAAAK,IAAAuB,EACAzH,EAAA,IAAAiG,EAAAE,GAAAsB,EACAzH,EAAA,KACAA,EAAA,IAAA+F,EAAAK,GAAAsB,EACA1H,EAAA,IAAAiG,EAAAE,GAAAuB,EACA1H,EAAA,QAAA6F,EAAAG,IAAA0B,EACA1H,EAAA,MACAA,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,IAAA8D,EAAA,GACA9D,EAAA,MAEAA,EAuBO,SAAA2H,EAAA3H,EAAAwF,EAAA1B,EAAAhN,EAAAtB,GAEP,IAAAuO,EAAAyB,EAAA,GAAAxB,EAAAwB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACAI,EAAA/B,EAAA4B,EACAI,EAAAhC,EAAA6B,EACAI,EAAAhC,EAAA2B,EACAM,EAAAjC,EAAA4B,EACAM,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAEA4B,EAAA1Q,EAAA,GACA2Q,EAAA3Q,EAAA,GACA4Q,EAAA5Q,EAAA,GAEA8Q,EAAApS,EAAA,GACAqS,EAAArS,EAAA,GACAsS,EAAAtS,EAAA,GAEAuS,GAAA,GAAA/B,EAAAE,IAAAsB,EACAQ,GAAAlC,EAAAO,GAAAmB,EACAS,GAAAlC,EAAAK,GAAAoB,EACAU,GAAApC,EAAAO,GAAAoB,EACAU,GAAA,GAAAtC,EAAAK,IAAAuB,EACAW,GAAAnC,EAAAE,GAAAsB,EACAY,GAAAtC,EAAAK,GAAAsB,EACAY,GAAArC,EAAAE,GAAAuB,EACAa,GAAA,GAAA1C,EAAAG,IAAA0B,EAmBA,OAjBA1H,EAAA,GAAA+H,EACA/H,EAAA,GAAAgI,EACAhI,EAAA,GAAAiI,EACAjI,EAAA,KACAA,EAAA,GAAAkI,EACAlI,EAAA,GAAAmI,EACAnI,EAAA,GAAAoI,EACApI,EAAA,KACAA,EAAA,GAAAqI,EACArI,EAAA,GAAAsI,EACAtI,EAAA,IAAAuI,EACAvI,EAAA,MACAA,EAAA,IAAA8D,EAAA,GAAA8D,GAAAG,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAP,GACA9H,EAAA,IAAA8D,EAAA,GAAA+D,GAAAG,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAR,GACA9H,EAAA,IAAA8D,EAAA,GAAAgE,GAAAG,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAT,GACA9H,EAAA,MAEAA,EAWO,SAASoe,EAAQpe,EAAAwF,GACxB,IAAAzB,EAAAyB,EAAA,GAAAxB,EAAAwB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAA3B,IACA4B,EAAA3B,IACA4B,EAAA3B,IAEA4B,EAAA9B,EAAA2B,EACA+C,EAAAzE,EAAA0B,EACAM,EAAAhC,EAAA2B,EACA+C,EAAAzE,EAAAyB,EACAiD,EAAA1E,EAAA0B,EACAO,EAAAjC,EAAA2B,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAsBA,OApBA5F,EAAA,KAAAgG,EAAAE,EACAlG,EAAA,GAAAyI,EAAApC,EACArG,EAAA,GAAA0I,EAAAtC,EACApG,EAAA,KAEAA,EAAA,GAAAyI,EAAApC,EACArG,EAAA,KAAA6F,EAAAK,EACAlG,EAAA,GAAA2I,EAAAxC,EACAnG,EAAA,KAEAA,EAAA,GAAA0I,EAAAtC,EACApG,EAAA,GAAA2I,EAAAxC,EACAnG,EAAA,MAAA6F,EAAAG,EACAhG,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAeO,SAAA4I,EAAA5I,EAAA6I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAC,EAAA,GAAAL,EAAAD,GACAO,EAAA,GAAAJ,EAAAD,GACAM,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAlJ,EAAA,KAAAiJ,EAAAE,EACAnJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAiJ,EAAAG,EACApJ,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA8I,EAAAD,GAAAM,EACAnJ,EAAA,IAAAgJ,EAAAD,GAAAK,EACApJ,EAAA,KAAAkJ,EAAAD,GAAAI,EACArJ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAkJ,EAAAD,EAAA,EAAAI,EACArJ,EAAA,MACAA,EAaO,SAAAsJ,EAAAtJ,EAAAuJ,EAAAC,EAAAP,EAAAC,GACP,IAAAO,EAAA,EAAA5J,KAAA6J,IAAAH,EAAA,GACAF,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAlJ,EAAA,GAAAyJ,EAAAD,EACAxJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAyJ,EACAzJ,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAkJ,EAAAD,GAAAI,EACArJ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAAAkJ,EAAAD,EAAAI,EACArJ,EAAA,MACAA,EAcO,SAAA4J,EAAA5J,EAAA6J,EAAAZ,EAAAC,GACP,IAAAY,EAAAjK,KAAA6J,IAAAG,EAAAE,UAAAlK,KAAAE,GAAA,KACAiK,EAAAnK,KAAA6J,IAAAG,EAAAI,YAAApK,KAAAE,GAAA,KACAmK,EAAArK,KAAA6J,IAAAG,EAAAM,YAAAtK,KAAAE,GAAA,KACAqK,EAAAvK,KAAA6J,IAAAG,EAAAQ,aAAAxK,KAAAE,GAAA,KACAuK,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,GAkBA,OAhBAhK,EAAA,GAAAsK,EACAtK,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAuK,EACAvK,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAkK,EAAAE,GAAAE,EAAA,GACAtK,EAAA,IAAA8J,EAAAE,GAAAO,EAAA,GACAvK,EAAA,IAAAkJ,GAAAD,EAAAC,GACAlJ,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAkJ,EAAAD,KAAAC,GACAlJ,EAAA,MACAA,EAeO,SAAAwK,EAAAxK,EAAA6I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACP,IAAAuB,EAAA,GAAA5B,EAAAC,GACA4B,EAAA,GAAA3B,EAAAC,GACAK,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAlJ,EAAA,MAAAyK,EACAzK,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA0K,EACA1K,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAqJ,EACArJ,EAAA,MACAA,EAAA,KAAA6I,EAAAC,GAAA2B,EACAzK,EAAA,KAAAgJ,EAAAD,GAAA2B,EACA1K,EAAA,KAAAkJ,EAAAD,GAAAI,EACArJ,EAAA,MACAA,EAaO,SAAA2K,EAAA3K,EAAA4K,EAAAC,EAAAC,GACP,IAAAC,EAAAC,EAAAtF,EAAAuF,EAAAC,EAAAvF,EAAAwF,EAAAC,EAAAxF,EAAAlB,EACA2G,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAEA,OAAAhL,KAAAiM,IAAAT,EAAAM,GAAiCnM,GACjCK,KAAAiM,IAAAR,EAAAM,GAAiCpM,GACjCK,KAAAiM,IAAAP,EAAAM,GAAiCrM,EACtBie,EAAQzd,IAGnBmL,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACAhG,EAAA2F,EAAAM,EAOAd,EAAAU,GAFA7F,GAHAlB,EAAA,EAAA7E,KAAA8E,KAAAwG,IAAAC,IAAAxF,MAKA8F,GAHAN,GAAA1G,GAIAsG,EAAAU,GALAP,GAAAzG,GAKA8G,EAAA5F,EACAF,EAAA8F,EAAAJ,EAAAK,EAAAN,GACAzG,EAAA7E,KAAA8E,KAAAoG,IAAAC,IAAAtF,OAOAqF,GADArG,EAAA,EAAAA,EAEAsG,GAAAtG,EACAgB,GAAAhB,IAPAqG,EAAA,EACAC,EAAA,EACAtF,EAAA,GAQAuF,EAAAG,EAAA1F,EAAAE,EAAAoF,EACAE,EAAAtF,EAAAmF,EAAAI,EAAAzF,EACAC,EAAAwF,EAAAH,EAAAI,EAAAL,GAEArG,EAAA7E,KAAA8E,KAAAsG,IAAAC,IAAAvF,OAOAsF,GADAvG,EAAA,EAAAA,EAEAwG,GAAAxG,EACAiB,GAAAjB,IAPAuG,EAAA,EACAC,EAAA,EACAvF,EAAA,GAQA3F,EAAA,GAAA+K,EACA/K,EAAA,GAAAiL,EACAjL,EAAA,GAAAmL,EACAnL,EAAA,KACAA,EAAA,GAAAgL,EACAhL,EAAA,GAAAkL,EACAlL,EAAA,GAAAoL,EACApL,EAAA,KACAA,EAAA,GAAA0F,EACA1F,EAAA,GAAA2F,EACA3F,EAAA,IAAA4F,EACA5F,EAAA,MACAA,EAAA,MAAA+K,EAAAM,EAAAL,EAAAM,EAAA5F,EAAA6F,GACAvL,EAAA,MAAAiL,EAAAI,EAAAH,EAAAI,EAAA3F,EAAA4F,GACAvL,EAAA,MAAAmL,EAAAE,EAAAD,EAAAE,EAAA1F,EAAA2F,GACAvL,EAAA,MAEAA,GAYO,SAAA+L,EAAA/L,EAAA4K,EAAAoB,EAAAlB,GACP,IAAAO,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GAEAK,EAAAE,EAAAW,EAAA,GACAZ,EAAAE,EAAAU,EAAA,GACApG,EAAA2F,EAAAS,EAAA,GAEAtH,EAAAyG,IAAAC,IAAAxF,IACAlB,EAAA,IAEAyG,GADAzG,EAAA,EAAA7E,KAAA8E,KAAAD,GAEA0G,GAAA1G,EACAkB,GAAAlB,GAGA,IAAAqG,EAAAU,EAAA7F,EAAA8F,EAAAN,EACAJ,EAAAU,EAAAP,EAAAK,EAAA5F,EACAF,EAAA8F,EAAAJ,EAAAK,EAAAN,EA0BA,OAxBAzG,EAAAqG,IAAAC,IAAAtF,KACA,IAEAqF,GADArG,EAAA,EAAA7E,KAAA8E,KAAAD,GAEAsG,GAAAtG,EACAgB,GAAAhB,GAGA1E,EAAA,GAAA+K,EACA/K,EAAA,GAAAgL,EACAhL,EAAA,GAAA0F,EACA1F,EAAA,KACAA,EAAA,GAAAoL,EAAA1F,EAAAE,EAAAoF,EACAhL,EAAA,GAAA4F,EAAAmF,EAAAI,EAAAzF,EACA1F,EAAA,GAAAmL,EAAAH,EAAAI,EAAAL,EACA/K,EAAA,KACAA,EAAA,GAAAmL,EACAnL,EAAA,GAAAoL,EACApL,EAAA,IAAA4F,EACA5F,EAAA,MACAA,EAAA,IAAAqL,EACArL,EAAA,IAAAsL,EACAtL,EAAA,IAAAuL,EACAvL,EAAA,MACAA,EASO,SAASqe,EAAGnhB,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SACAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QASO,SAASohB,EAAIphB,GACpB,OAAA2C,KAAA8E,KAAA9E,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,MAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,OAAA2C,KAAAsM,IAAAjP,EAAA,QAWO,SAASqhB,EAAGve,EAAA9C,EAAAsG,GAiBnB,OAhBAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAWO,SAASwe,EAAQxe,EAAA9C,EAAAsG,GAiBxB,OAhBAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IACAxD,EAWO,SAASye,EAAcze,EAAA9C,EAAAsG,GAiB9B,OAhBAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAAA,IAAA9C,EAAA,IAAAsG,EACAxD,EAYO,SAAS0e,EAAoB1e,EAAA9C,EAAAsG,EAAAgJ,GAiBpC,OAhBAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAAA,IAAA9C,EAAA,IAAAsG,EAAA,IAAAgJ,EACAxM,EAUO,SAAS2e,EAAWzhB,EAAAsG,GAC3B,OAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IACAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IACAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KACAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,KAAAtG,EAAA,MAAAsG,EAAA,IAUO,SAASkJ,EAAMxP,EAAAsG,GACtB,IAAAmJ,EAAAzP,EAAA,GAAA0P,EAAA1P,EAAA,GAAA2P,EAAA3P,EAAA,GAAA4P,EAAA5P,EAAA,GACA6P,EAAA7P,EAAA,GAAA8P,EAAA9P,EAAA,GAAA+P,EAAA/P,EAAA,GAAAgQ,EAAAhQ,EAAA,GACAiQ,EAAAjQ,EAAA,GAAAkQ,EAAAlQ,EAAA,GAAA6E,EAAA7E,EAAA,IAAA8E,EAAA9E,EAAA,IACAwE,EAAAxE,EAAA,IAAAyE,EAAAzE,EAAA,IAAAmQ,EAAAnQ,EAAA,IAAAoQ,EAAApQ,EAAA,IAEAuG,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GACA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GAAAkK,EAAAlK,EAAA,GACAmK,EAAAnK,EAAA,GAAAoK,EAAApK,EAAA,GAAAN,EAAAM,EAAA,IAAAL,EAAAK,EAAA,IACAc,EAAAd,EAAA,IAAAqK,EAAArK,EAAA,IAAAsK,EAAAtK,EAAA,IAAAuK,EAAAvK,EAAA,IAEA,OAAA3D,KAAAiM,IAAAa,EAAAlJ,IAA+BjE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAa,GAAA9M,KAAAiM,IAAArI,KAC/C5D,KAAAiM,IAAAc,EAAAlJ,IAA+BlE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAc,GAAA/M,KAAAiM,IAAApI,KAC/C7D,KAAAiM,IAAAe,EAAAlJ,IAA+BnE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAe,GAAAhN,KAAAiM,IAAAnI,KAC/C9D,KAAAiM,IAAAgB,EAAAlJ,IAA+BpE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAgB,GAAAjN,KAAAiM,IAAAlI,KAC/C/D,KAAAiM,IAAAiB,EAAAQ,IAA+B/N,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAiB,GAAAlN,KAAAiM,IAAAyB,KAC/C1N,KAAAiM,IAAAkB,EAAAQ,IAA+BhO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAkB,GAAAnN,KAAAiM,IAAA0B,KAC/C3N,KAAAiM,IAAAmB,EAAAQ,IAA+BjO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAmB,GAAApN,KAAAiM,IAAA2B,KAC/C5N,KAAAiM,IAAAoB,EAAAQ,IAA+BlO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAoB,GAAArN,KAAAiM,IAAA4B,KAC/C7N,KAAAiM,IAAAqB,EAAAQ,IAA+BnO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAqB,GAAAtN,KAAAiM,IAAA6B,KAC/C9N,KAAAiM,IAAAsB,EAAAQ,IAA+BpO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAsB,GAAAvN,KAAAiM,IAAA8B,KAC/C/N,KAAAiM,IAAA/J,EAAAmB,IAAiC1D,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAA/J,GAAAlC,KAAAiM,IAAA5I,KACjDrD,KAAAiM,IAAA9J,EAAAmB,IAAiC3D,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAA9J,GAAAnC,KAAAiM,IAAA3I,KACjDtD,KAAAiM,IAAApK,EAAA4C,IAAiC9E,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAApK,GAAA7B,KAAAiM,IAAAxH,KACjDzE,KAAAiM,IAAAnK,EAAAkM,IAAiCrO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAnK,GAAA9B,KAAAiM,IAAA+B,KACjDhO,KAAAiM,IAAAuB,EAAAS,IAAiCtO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAuB,GAAAxN,KAAAiM,IAAAgC,KACjDjO,KAAAiM,IAAAwB,EAAAS,IAAiCvO,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAwB,GAAAzN,KAAAiM,IAAAiC,IAO1C,MAAM6Q,EAAMd,EAMNe,GAAML,EC9pDZ,SAASrQ,KAChB,IAAAnO,EAAA,IAAgBP,EAAmB,GAInC,OAHAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EASO,SAASoO,GAAKlR,GACrB,IAAA8C,EAAA,IAAgBP,EAAmB,GAInC,OAHAO,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EASO,SAASqO,GAAMnR,GACtB,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACA,OAAA2C,KAAA8E,KAAAZ,IAAAC,IAAAC,KAWO,SAASqK,GAAUvK,EAAAC,EAAAC,GAC1B,IAAAjE,EAAA,IAAgBP,EAAmB,GAInC,OAHAO,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAUO,SAASuO,GAAIvO,EAAA9C,GAIpB,OAHA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAAA,GAAA9C,EAAA,GACA8C,EAYO,SAASwO,GAAGxO,EAAA+D,EAAAC,EAAAC,GAInB,OAHAjE,EAAA,GAAA+D,EACA/D,EAAA,GAAAgE,EACAhE,EAAA,GAAAiE,EACAjE,EAWO,SAASyO,GAAGzO,EAAA9C,EAAAsG,GAInB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAWO,SAAS0O,GAAQ1O,EAAA9C,EAAAsG,GAIxB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAWO,SAAS2O,GAAQ3O,EAAA9C,EAAAsG,GAIxB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAWO,SAAA4O,GAAA5O,EAAA9C,EAAAsG,GAIP,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GACAxD,EAUO,SAAA6O,GAAA7O,EAAA9C,GAIP,OAHA8C,EAAA,GAAAH,KAAAgP,KAAA3R,EAAA,IACA8C,EAAA,GAAAH,KAAAgP,KAAA3R,EAAA,IACA8C,EAAA,GAAAH,KAAAgP,KAAA3R,EAAA,IACA8C,EAUO,SAAA8O,GAAA9O,EAAA9C,GAIP,OAHA8C,EAAA,GAAAH,KAAAiP,MAAA5R,EAAA,IACA8C,EAAA,GAAAH,KAAAiP,MAAA5R,EAAA,IACA8C,EAAA,GAAAH,KAAAiP,MAAA5R,EAAA,IACA8C,EAWO,SAAA+O,GAAA/O,EAAA9C,EAAAsG,GAIP,OAHAxD,EAAA,GAAAH,KAAAkP,IAAA7R,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAkP,IAAA7R,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAkP,IAAA7R,EAAA,GAAAsG,EAAA,IACAxD,EAWO,SAAAgO,GAAAhO,EAAA9C,EAAAsG,GAIP,OAHAxD,EAAA,GAAAH,KAAAmO,IAAA9Q,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAmO,IAAA9Q,EAAA,GAAAsG,EAAA,IACAxD,EAAA,GAAAH,KAAAmO,IAAA9Q,EAAA,GAAAsG,EAAA,IACAxD,EAUO,SAAAgP,GAAAhP,EAAA9C,GAIP,OAHA8C,EAAA,GAAAH,KAAAmP,MAAA9R,EAAA,IACA8C,EAAA,GAAAH,KAAAmP,MAAA9R,EAAA,IACA8C,EAAA,GAAAH,KAAAmP,MAAA9R,EAAA,IACA8C,EAWO,SAASiP,GAAKjP,EAAA9C,EAAAsG,GAIrB,OAHAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAAA,GAAA9C,EAAA,GAAAsG,EACAxD,EAYO,SAAAkP,GAAAlP,EAAA9C,EAAAsG,EAAAgJ,GAIP,OAHAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAAA,GAAA9C,EAAA,GAAAsG,EAAA,GAAAgJ,EACAxM,EAUO,SAAAmP,GAAAjS,EAAAsG,GACP,IAAAO,EAAAP,EAAA,GAAAtG,EAAA,GACA8G,EAAAR,EAAA,GAAAtG,EAAA,GACA+G,EAAAT,EAAA,GAAAtG,EAAA,GACA,OAAA2C,KAAA8E,KAAAZ,IAAAC,IAAAC,KAUO,SAAAmL,GAAAlS,EAAAsG,GACP,IAAAO,EAAAP,EAAA,GAAAtG,EAAA,GACA8G,EAAAR,EAAA,GAAAtG,EAAA,GACA+G,EAAAT,EAAA,GAAAtG,EAAA,GACA,OAAA6G,IAAAC,IAAAC,IASO,SAAAoL,GAAAnS,GACP,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACA,OAAA6G,IAAAC,IAAAC,IAUO,SAAAqL,GAAAtP,EAAA9C,GAIP,OAHA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAAA,IAAA9C,EAAA,GACA8C,EAUO,SAAAuP,GAAAvP,EAAA9C,GAIP,OAHA8C,EAAA,KAAA9C,EAAA,GACA8C,EAAA,KAAA9C,EAAA,GACA8C,EAAA,KAAA9C,EAAA,GACA8C,EAUO,SAAAwP,GAAAxP,EAAA9C,GACP,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAwH,EAAAX,IAAAC,IAAAC,IAQA,OAPAS,EAAA,IAEAA,EAAA,EAAA7E,KAAA8E,KAAAD,GACA1E,EAAA,GAAA9C,EAAA,GAAAwH,EACA1E,EAAA,GAAA9C,EAAA,GAAAwH,EACA1E,EAAA,GAAA9C,EAAA,GAAAwH,GAEA1E,EAUO,SAASyP,GAAGvS,EAAAsG,GACnB,OAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,GAAAtG,EAAA,GAAAsG,EAAA,GAWO,SAAAkM,GAAA1P,EAAA9C,EAAAsG,GACP,IAAAoD,EAAA1J,EAAA,GAAA2J,EAAA3J,EAAA,GAAA4J,EAAA5J,EAAA,GACAsJ,EAAAhD,EAAA,GAAAiD,EAAAjD,EAAA,GAAAkD,EAAAlD,EAAA,GAKA,OAHAxD,EAAA,GAAA6G,EAAAH,EAAAI,EAAAL,EACAzG,EAAA,GAAA8G,EAAAN,EAAAI,EAAAF,EACA1G,EAAA,GAAA4G,EAAAH,EAAAI,EAAAL,EACAxG,EAYO,SAAA2P,GAAA3P,EAAA9C,EAAAsG,EAAAvN,GACP,IAAA2Q,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GACA4J,EAAA5J,EAAA,GAIA,OAHA8C,EAAA,GAAA4G,EAAA3Q,GAAAuN,EAAA,GAAAoD,GACA5G,EAAA,GAAA6G,EAAA5Q,GAAAuN,EAAA,GAAAqD,GACA7G,EAAA,GAAA8G,EAAA7Q,GAAAuN,EAAA,GAAAsD,GACA9G,EAcO,SAAA4P,GAAA5P,EAAA9C,EAAAsG,EAAApO,EAAAC,EAAAY,GACP,IAAA4Z,EAAA5Z,IACA6Z,EAAAD,GAAA,EAAA5Z,EAAA,KACA8Z,EAAAF,GAAA5Z,EAAA,GAAAA,EACA+Z,EAAAH,GAAA5Z,EAAA,GACAga,EAAAJ,GAAA,IAAA5Z,GAMA,OAJA+J,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EAEAjQ,EAcO,SAAAkQ,GAAAlQ,EAAA9C,EAAAsG,EAAApO,EAAAC,EAAAY,GACP,IAAAka,EAAA,EAAAla,EACAma,EAAAD,IACAN,EAAA5Z,IACA6Z,EAAAM,EAAAD,EACAJ,EAAA,EAAA9Z,EAAAma,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAA5Z,EAMA,OAJA+J,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EACAjQ,EAAA,GAAA9C,EAAA,GAAA4S,EAAAtM,EAAA,GAAAuM,EAAA3a,EAAA,GAAA4a,EAAA3a,EAAA,GAAA4a,EAEAjQ,EAUO,SAAAF,GAAAE,EAAAwM,GACPA,KAAA,EAEA,IAAA3W,EAAyB,EAAf+J,IAAeC,KAAAE,GACzBkE,EAA0B,EAAfrE,IAAe,EAC1ByQ,EAAAxQ,KAAA8E,KAAA,EAAAV,KAAAuI,EAKA,OAHAxM,EAAA,GAAAH,KAAAgF,IAAAhP,GAAAwa,EACArQ,EAAA,GAAAH,KAAA+E,IAAA/O,GAAAwa,EACArQ,EAAA,GAAAiE,EAAAuI,EACAxM,EAYO,SAAAsQ,GAAAtQ,EAAA9C,EAAA/H,GACP,IAAA4O,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,GACAuI,EAAAtQ,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,IAAA8O,EAAA9O,EAAA,IAKA,OAJAsQ,KAAA,EACAzF,EAAA,IAAA7K,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,KAAAsQ,EACAzF,EAAA,IAAA7K,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,KAAAsQ,EACAzF,EAAA,IAAA7K,EAAA,GAAA4O,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,IAAA8O,EAAA9O,EAAA,KAAAsQ,EACAzF,EAWO,SAAAuQ,GAAAvQ,EAAA9C,EAAA/H,GACP,IAAA4O,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,GAIA,OAHA8C,EAAA,GAAA+D,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,GACA6K,EAAA,GAAA+D,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,GACA6K,EAAA,GAAA+D,EAAA5O,EAAA,GAAA6O,EAAA7O,EAAA,GAAA8O,EAAA9O,EAAA,GACA6K,EAYO,SAAAwQ,GAAAxQ,EAAA9C,EAAAsI,GAEP,IAAAiL,EAAAjL,EAAA,GAAAkL,EAAAlL,EAAA,GAAAmL,EAAAnL,EAAA,GAAAoL,EAAApL,EAAA,GACAzB,EAAA7G,EAAA,GAAA8G,EAAA9G,EAAA,GAAA+G,EAAA/G,EAAA,GAGA2T,EAAAH,EAAAzM,EAAA0M,EAAA3M,EACA8M,EAAAH,EAAA5M,EAAA0M,EAAAxM,EACA8M,EAAAN,EAAAzM,EAAA0M,EAAA3M,EAEAiN,EAAAN,EAAAK,EAAAJ,EAAAG,EACAG,EAAAN,EAAAE,EAAAJ,EAAAM,EACAG,EAAAT,EAAAK,EAAAJ,EAAAG,EAEAM,EAAA,EAAAP,EAYA,OAXAC,GAAAM,EACAL,GAAAK,EACAJ,GAAAI,EAEAH,GAAA,EACAC,GAAA,EACAC,GAAA,EAEAlR,EAAA,GAAA+D,EAAA8M,EAAAG,EACAhR,EAAA,GAAAgE,EAAA8M,EAAAG,EACAjR,EAAA,GAAAiE,EAAA8M,EAAAG,EACAlR,EAWO,SAASoR,GAAOpR,EAAA9C,EAAAsG,EAAApO,GACvB,IAAAyB,KAAAhB,KAgBA,OAdAgB,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GAGA3N,EAAA,GAAAgB,EAAA,GACAhB,EAAA,GAAAgB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAAAyB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GACAS,EAAA,GAAAgB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAAAyB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAGA4K,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GAEAxD,EAWO,SAASqR,GAAOrR,EAAA9C,EAAAsG,EAAApO,GACvB,IAAAyB,KAAAhB,KAgBA,OAdAgB,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GAGA3N,EAAA,GAAAgB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAAAyB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GACAS,EAAA,GAAAgB,EAAA,GACAhB,EAAA,GAAAgB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAAAyB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAGA4K,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GAEAxD,EAWO,SAASsR,GAAOtR,EAAA9C,EAAAsG,EAAApO,GACvB,IAAAyB,KAAAhB,KAgBA,OAdAgB,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GACA3M,EAAA,GAAAqG,EAAA,GAAAsG,EAAA,GAGA3N,EAAA,GAAAgB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GAAAyB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GACAS,EAAA,GAAAgB,EAAA,GAAAgJ,KAAA+E,IAAAxP,GAAAyB,EAAA,GAAAgJ,KAAAgF,IAAAzP,GACAS,EAAA,GAAAgB,EAAA,GAGAmJ,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GACAxD,EAAA,GAAAnK,EAAA,GAAA2N,EAAA,GAEAxD,EASO,SAAAuR,GAAArU,EAAAsG,GACP,IAAAgO,EAAclD,GAAUpR,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACxBuU,EAAcnD,GAAU9K,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAExBgM,GAAAgC,KACAhC,GAAAiC,KAEA,IAAAC,EAAejC,GAAG+B,EAAAC,GAElB,OAAAC,EAAA,EACA,EAEAA,GAAA,EACA7R,KAAAE,GAEAF,KAAA8R,KAAAD,GAUO,SAASE,GAAG1U,GACnB,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUO,SAAS2U,GAAW3U,EAAAsG,GAC3B,OAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,IAAAtG,EAAA,KAAAsG,EAAA,GAUO,SAASsO,GAAM5U,EAAAsG,GACtB,IAAAmJ,EAAAzP,EAAA,GAAA0P,EAAA1P,EAAA,GAAA2P,EAAA3P,EAAA,GACAuG,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GACA,OAAA3D,KAAAiM,IAAAa,EAAAlJ,IAA+BjE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAa,GAAA9M,KAAAiM,IAAArI,KAC/C5D,KAAAiM,IAAAc,EAAAlJ,IAA+BlE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAc,GAAA/M,KAAAiM,IAAApI,KAC/C7D,KAAAiM,IAAAe,EAAAlJ,IAA+BnE,EAAgBK,KAAAmO,IAAA,EAAAnO,KAAAiM,IAAAe,GAAAhN,KAAAiM,IAAAnI,IAOxC,MAAMoO,GAAMrD,GAMNsD,GAAMrD,GAMZsD,GAAArD,GAMAsD,GAAA/C,GAMAgD,GAAA/C,GAMMgD,GAAM/D,GAMZgE,GAAAhD,GAcAjR,GAAA,WACP,IAAAkU,EAAYnE,KAEZ,gBAAAjR,EAAAqV,EAAAC,EAAAC,EAAAxV,EAAAyV,GACA,IAAA3d,EAAAC,EAeA,IAdAud,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAxd,EADAyd,EACA5S,KAAAkP,IAAA0D,EAAAF,EAAAC,EAAAtV,EAAAhC,QAEAgC,EAAAhC,OAGAnG,EAAAyd,EAAmBzd,EAAAC,EAAOD,GAAAwd,EAC1BD,EAAA,GAAApV,EAAAnI,GAAoBud,EAAA,GAAApV,EAAAnI,EAAA,GAAiBud,EAAA,GAAApV,EAAAnI,EAAA,GACrCkI,EAAAqV,IAAAI,GACAxV,EAAAnI,GAAAud,EAAA,GAAoBpV,EAAAnI,EAAA,GAAAud,EAAA,GAAiBpV,EAAAnI,EAAA,GAAAud,EAAA,GAGrC,OAAApV,GAzBO,ICvKa,WACpB,IAAAoV,EAjjBO,WACP,IAAAtS,EAAA,IAAgBP,EAAmB,GAKnC,OAJAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EA2iBY6S,GADQ,GC7iBb,SAASC,KAChB,IAAA9S,EAAA,IAAgBP,EAAmB,GAKnC,OAJAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EA+KO,SAAAwT,GAAAxT,EAAA9C,EAAAsG,EAAAvN,GAGP,IAGAwd,EAAAC,EAAAC,EAAAC,EAAAC,EAHAjN,EAAA1J,EAAA,GAAA2J,EAAA3J,EAAA,GAAA4J,EAAA5J,EAAA,GAAA6J,EAAA7J,EAAA,GACAsJ,EAAAhD,EAAA,GAAAiD,EAAAjD,EAAA,GAAAkD,EAAAlD,EAAA,GAAAmD,EAAAnD,EAAA,GAiCA,OA5BAkQ,EAAA9M,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,GAEA,IACA+M,KACAlN,KACAC,KACAC,KACAC,MAGA,EAAA+M,EAAA,MAEAD,EAAA5T,KAAA8R,KAAA+B,GACAC,EAAA9T,KAAA+E,IAAA6O,GACAG,EAAA/T,KAAA+E,KAAA,EAAA3O,GAAAwd,GAAAE,EACAE,EAAAhU,KAAA+E,IAAA3O,EAAAwd,GAAAE,IAIAC,EAAA,EAAA3d,EACA4d,EAAA5d,GAGA+J,EAAA,GAAA4T,EAAAhN,EAAAiN,EAAArN,EACAxG,EAAA,GAAA4T,EAAA/M,EAAAgN,EAAApN,EACAzG,EAAA,GAAA4T,EAAA9M,EAAA+M,EAAAnN,EACA1G,EAAA,GAAA4T,EAAA7M,EAAA8M,EAAAlN,EAEA3G,EAsIO,MA4HMgW,GDvIN,SAAkBhW,EAAA9C,GACzB,IAAA6G,EAAA7G,EAAA,GACA8G,EAAA9G,EAAA,GACA+G,EAAA/G,EAAA,GACAuI,EAAAvI,EAAA,GACAwH,EAAAX,IAAAC,IAAAC,IAAAwB,IAQA,OAPAf,EAAA,IACAA,EAAA,EAAA7E,KAAA8E,KAAAD,GACA1E,EAAA,GAAA+D,EAAAW,EACA1E,EAAA,GAAAgE,EAAAU,EACA1E,EAAA,GAAAiE,EAAAS,EACA1E,EAAA,GAAAyF,EAAAf,GAEA1E,ICyJO,WACP,IAAAoW,EAAgBjI,KAChBkI,EAAkB/H,GAAe,OACjCgI,EAAkBhI,GAAe,QAH1B,GA0CA,WACP,IAAAkI,EAAc1D,KACd2D,EAAc3D,KAFP,GAuBA,WACP,IAAA6D,EChkBO,WACP,IAAA3W,EAAA,IAAgBP,EAAmB,GAUnC,OATAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EDqjBa4W,GADN,IEQa,WACpB,IAAAtE,EAxkBO,WACP,IAAAtS,EAAA,IAAgBP,EAAmB,GAGnC,OAFAO,EAAA,KACAA,EAAA,KACAA,EAokBY8e,GADQ,GCnlBpBnqB,EAAAU,EAAA0B,EAAA,sBAAA+f,IAAAniB,EAAAU,EAAA0B,EAAA,sBAAAigB,mCCAAriB,EAAAU,EAAA0B,EAAA,sBAAAgoB,IAAApqB,EAAAU,EAAA0B,EAAA,sBAAAioB,IAAO,MAIAD,EAAA,CAAA7hB,EAAAsG,IAAAtG,IAAAsG,EAEA,SAAAwb,EAAAC,EAAAC,GACP,GAAAD,IAAAC,EACA,SAEA,IAAAA,EACA,SAEA,GAAAD,EAAA/jB,SAAAgkB,EAAAhkB,OACA,SAEA,QAAAnG,EAAA,EAAmBA,EAAAkqB,EAAA/jB,OAAiBnG,IACpC,GAAAkqB,EAAAlqB,KAAAmqB,EAAAnqB,GACA,SAGA,mDCnBA,SAAAoqB,EAAAziB,GACA,OAAA0iB,EAAA1iB,GAAA2iB,UA2BA,SAAAC,EAAA7H,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA+H,UAAAD,EAAAzb,IAGA,SAAA2b,EAAAhI,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAiI,WAAAH,EAAAzb,IAGA,SAAA6b,EAAAlI,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAmI,WAAAL,EAAAzb,IAGA,SAAA+b,EAAApI,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAqI,WAAAP,EAAAzb,IAGA,SAAAic,EAAAtI,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAuI,WAAAT,EAAAzb,IAyEA,SAAAmc,EAAAxI,EAAA/a,EAAAwjB,EAAAX,GACA,MAAAF,EAAAF,EAAAziB,GACA,gBAAAyjB,GACA1I,EAAA+H,UAAAD,EAAAW,GACAzI,EAAA2I,cAAA3I,EAAA4I,SAAAH,GACAzI,EAAA6I,YAAAjB,EAAAc,IAGA,SAAAI,EAAA9I,EAAA/a,EAAAwjB,EAAAX,EAAAiB,GACA,MAAAnB,EAAAF,EAAAziB,GACA+jB,EAAA,IAAAC,WAAAF,GACA,QAAAzrB,EAAA,EAAmBA,EAAAyrB,IAAUzrB,EAC7B0rB,EAAA1rB,GAAAmrB,EAAAnrB,EAEA,gBAAA4rB,GACAlJ,EAAAiI,WAAAH,EAAAkB,GACA,UAAAG,KAAAD,EACAlJ,EAAA2I,cAAA3I,EAAA4I,SAAAI,EAAAG,IACAnJ,EAAA6I,YAAAjB,EAAAsB,EAAAC,KAOA,MAAAxB,GACAlH,CAAK2I,EAAA,EAAOvpB,QAAUwpB,KAAAphB,aAAA8gB,KAAA,EAAAO,OAlJtB,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAuJ,UAAAzB,EAAAzb,KAgJsBmd,YA7ItB,SAAAxJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAyJ,WAAA3B,EAAAzb,MA4IAoU,CAAK2I,EAAA,EAAOtpB,aAAeupB,KAAAphB,aAAA8gB,KAAA,EAAAO,OAzI3B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA0J,WAAA5B,EAAAzb,MAwIAoU,CAAK2I,EAAA,EAAOrpB,aAAespB,KAAAphB,aAAA8gB,KAAA,GAAAO,OArI3B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA2J,WAAA7B,EAAAzb,MAoIAoU,CAAK2I,EAAA,EAAOppB,aAAeqpB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAjI3B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA4J,WAAA9B,EAAAzb,MAgIAoU,CAAK2I,EAAA,EAAOnpB,MAAQopB,KAAAJ,WAAAF,KAAA,EAAAO,OAAAzB,EAAA2B,YAAAxB,GACpBvH,CAAK2I,EAAA,EAAOlpB,WAAampB,KAAAJ,WAAAF,KAAA,EAAAO,OAAApB,GACzBzH,CAAK2I,EAAA,EAAOjpB,WAAakpB,KAAAJ,WAAAF,KAAA,GAAAO,OAAAlB,GACzB3H,CAAK2I,EAAA,EAAOhpB,WAAaipB,KAAAJ,WAAAF,KAAA,GAAAO,OAAAhB,GACzB7H,CAAK2I,EAAA,EAAO3nB,eAAiB4nB,KAAAQ,YAAAd,KAAA,EAAAO,OAxG7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA8J,WAAAhC,EAAAzb,KAsG6Bmd,YAnG7B,SAAAxJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA+J,YAAAjC,EAAAzb,MAkGAoU,CAAK2I,EAAA,EAAO1nB,oBAAsB2nB,KAAAQ,YAAAd,KAAA,EAAAO,OA/FlC,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAgK,YAAAlC,EAAAzb,MA8FAoU,CAAK2I,EAAA,EAAOznB,oBAAsB0nB,KAAAQ,YAAAd,KAAA,GAAAO,OA3FlC,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAiK,YAAAnC,EAAAzb,MA0FAoU,CAAK2I,EAAA,EAAOxnB,oBAAsBynB,KAAAQ,YAAAd,KAAA,GAAAO,OAvFlC,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAkK,YAAApC,EAAAzb,MAsFAoU,CAAK2I,EAAA,EAAO/oB,OAASgpB,KAAAQ,YAAAd,KAAA,EAAAO,OAAAzB,EAAA2B,YAAAxB,GACrBvH,CAAK2I,EAAA,EAAO9oB,YAAc+oB,KAAAQ,YAAAd,KAAA,EAAAO,OAAApB,GAC1BzH,CAAK2I,EAAA,EAAO7oB,YAAc8oB,KAAAQ,YAAAd,KAAA,GAAAO,OAAAlB,GAC1B3H,CAAK2I,EAAA,EAAO5oB,YAAc6oB,KAAAQ,YAAAd,KAAA,GAAAO,OAAAhB,GAC1B7H,CAAK2I,EAAA,EAAO3oB,aAAe4oB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAvF3B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAmK,iBAAArC,GAAA,EAAAzb,MAsFAoU,CAAK2I,EAAA,EAAO1oB,aAAe2oB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAnF3B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAoK,iBAAAtC,GAAA,EAAAzb,MAkFAoU,CAAK2I,EAAA,EAAOzoB,aAAe0oB,KAAAphB,aAAA8gB,KAAA,GAAAO,OA/E3B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAqK,iBAAAvC,GAAA,EAAAzb,MA8EAoU,CAAK2I,EAAA,EAAOpoB,eAAiBqoB,KAAAphB,aAAA8gB,KAAA,GAAAO,OA3E7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAsK,mBAAAxC,GAAA,EAAAzb,MA0EAoU,CAAK2I,EAAA,EAAOnoB,eAAiBooB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAlE7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAuK,mBAAAzC,GAAA,EAAAzb,MAiEAoU,CAAK2I,EAAA,EAAOloB,eAAiBmoB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAxE7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAwK,mBAAA1C,GAAA,EAAAzb,MAuEAoU,CAAK2I,EAAA,EAAOjoB,eAAiBkoB,KAAAphB,aAAA8gB,KAAA,GAAAO,OA1D7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAAyK,mBAAA3C,GAAA,EAAAzb,MAyDAoU,CAAK2I,EAAA,EAAOhoB,eAAiBioB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAhE7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA0K,mBAAA5C,GAAA,EAAAzb,MA+DAoU,CAAK2I,EAAA,EAAO/nB,eAAiBgoB,KAAAphB,aAAA8gB,KAAA,GAAAO,OAvD7B,SAAAtJ,EAAA8H,GACA,gBAAAzb,GACA2T,EAAA2K,mBAAA7C,GAAA,EAAAzb,MAsDAoU,CAAK2I,EAAA,EAAOxoB,aAAeyoB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO/mB,YAC3Hoe,CAAK2I,EAAA,EAAOvoB,eAAiBwoB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO9mB,kBAC7Hme,CAAK2I,EAAA,EAAOtoB,aAAeuoB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO7mB,YAC3Hke,CAAK2I,EAAA,EAAOroB,oBAAsBsoB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO/mB,YAClIoe,CAAK2I,EAAA,EAAO9nB,mBAAqB+nB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO5mB,kBACjIie,CAAK2I,EAAA,EAAO7nB,0BAA4B8nB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO5mB,kBACxIie,CAAK2I,EAAA,EAAO5nB,sBAAwB6nB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO9mB,kBACpIme,CAAK2I,EAAA,EAAOvnB,iBAAmBwnB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO/mB,YAC/Hoe,CAAK2I,EAAA,EAAOtnB,iBAAmBunB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO7mB,YAC/Hke,CAAK2I,EAAA,EAAOrnB,mBAAqBsnB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO9mB,kBACjIme,CAAK2I,EAAA,EAAOpnB,uBAAyBqnB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO5mB,kBACrIie,CAAK2I,EAAA,EAAOnnB,0BAA4BonB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO/mB,YACxIoe,CAAK2I,EAAA,EAAOlnB,0BAA4BmnB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO7mB,YACxIke,CAAK2I,EAAA,EAAOjnB,4BAA8BknB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO9mB,kBAC1Ime,CAAK2I,EAAA,EAAOhnB,gCAAkCinB,KAAA,KAAAN,KAAA,EAAAO,OAAAd,EAAAgB,YAAAV,EAAAlB,UAAyFwB,EAAA,EAAO5mB,mBAE9I,SAAAooB,EAAA5K,EAAA8H,EAAA+C,GACA,gBAAA9e,GACAiU,EAAA8K,WAAA9K,EAAA+K,aAAAhf,EAAA2U,QACAV,EAAAgL,wBAAAlD,GACA9H,EAAAiL,oBAAAnD,EAAA+C,EAAAK,SAA4D9B,EAAA,EAAOvpB,MAAAkM,EAAAgM,YAAA,EAAAhM,EAAA+O,QAAA,EAAA/O,EAAAgP,QAAA,IAGnE,SAAAoQ,EAAAnL,EAAA8H,EAAA+C,GACA,gBAAA9e,GACAiU,EAAA8K,WAAA9K,EAAA+K,aAAAhf,EAAA2U,QACAV,EAAAgL,wBAAAlD,GACA9H,EAAAoL,qBAAAtD,EAAA+C,EAAAK,SAA6D9B,EAAA,EAAOnpB,IAAA8L,EAAA+O,QAAA,EAAA/O,EAAAgP,QAAA,IAGpE,SAAAsQ,EAAArL,EAAA8H,EAAA+C,GACA,MAAAS,EAAAT,EAAA9B,KACA/N,EAAA6P,EAAA7P,MACA,gBAAAjP,GACAiU,EAAA8K,WAAA9K,EAAA+K,aAAAhf,EAAA2U,QACA,MAAA6K,EAAAD,EACAvC,EAAAwC,EAAAvQ,EAEAF,EADA6M,EAAiCyB,EAAA,EAAOvpB,OACxCkpB,KAAAwC,EACAxT,EAAAhM,EAAAgM,YAAA,EACAgD,EAAAhP,EAAAgP,QAAA,EACAyQ,EAAA1Q,EAAAE,EACA,QAAA1d,EAAA,EAAuBA,EAAA0d,IAAW1d,EAClC0iB,EAAAgL,wBAAAlD,EAAAxqB,GACA0iB,EAAAiL,oBAAAnD,EAAAxqB,EAAAyrB,EAAuDK,EAAA,EAAOvpB,MAAAkY,EAAA+C,EAAAC,EAAAyQ,EAAAluB,IAI9D,MAAAmuB,GACAhL,CAAK2I,EAAA,EAAOvpB,QAAUkpB,KAAA,EAAAO,OAAAsB,EAAAM,SAAA,GACtBzK,CAAK2I,EAAA,EAAOtpB,aAAeipB,KAAA,EAAAO,OAAAsB,EAAAM,SAAA,GAC3BzK,CAAK2I,EAAA,EAAOrpB,aAAegpB,KAAA,GAAAO,OAAAsB,EAAAM,SAAA,GAC3BzK,CAAK2I,EAAA,EAAOppB,aAAe+oB,KAAA,GAAAO,OAAAsB,EAAAM,SAAA,GAC3BzK,CAAK2I,EAAA,EAAOnpB,MAAQ8oB,KAAA,EAAAO,OAAA6B,EAAAD,SAAA,GACpBzK,CAAK2I,EAAA,EAAOlpB,WAAa6oB,KAAA,EAAAO,OAAA6B,EAAAD,SAAA,GACzBzK,CAAK2I,EAAA,EAAOjpB,WAAa4oB,KAAA,GAAAO,OAAA6B,EAAAD,SAAA,GACzBzK,CAAK2I,EAAA,EAAOhpB,WAAa2oB,KAAA,GAAAO,OAAA6B,EAAAD,SAAA,GACzBzK,CAAK2I,EAAA,EAAO3nB,eAAiBsnB,KAAA,EAAAO,OAAA6B,EAAAD,SAAA,GAC7BzK,CAAK2I,EAAA,EAAO1nB,oBAAsBqnB,KAAA,EAAAO,OAAA6B,EAAAD,SAAA,GAClCzK,CAAK2I,EAAA,EAAOznB,oBAAsBonB,KAAA,GAAAO,OAAA6B,EAAAD,SAAA,GAClCzK,CAAK2I,EAAA,EAAOxnB,oBAAsBmnB,KAAA,GAAAO,OAAA6B,EAAAD,SAAA,GAClCzK,CAAK2I,EAAA,EAAO/oB,OAAS0oB,KAAA,EAAAO,OAAA6B,EAAAD,SAAA,GACrBzK,CAAK2I,EAAA,EAAO9oB,YAAcyoB,KAAA,EAAAO,OAAA6B,EAAAD,SAAA,GAC1BzK,CAAK2I,EAAA,EAAO7oB,YAAcwoB,KAAA,GAAAO,OAAA6B,EAAAD,SAAA,GAC1BzK,CAAK2I,EAAA,EAAO5oB,YAAcuoB,KAAA,GAAAO,OAAA6B,EAAAD,SAAA,GAC1BzK,CAAK2I,EAAA,EAAO3oB,aAAesoB,KAAA,EAAAO,OAAA+B,EAAArQ,MAAA,GAC3ByF,CAAK2I,EAAA,EAAO1oB,aAAeqoB,KAAA,EAAAO,OAAA+B,EAAArQ,MAAA,GAC3ByF,CAAK2I,EAAA,EAAOzoB,aAAeooB,KAAA,GAAAO,OAAA+B,EAAArQ,MAAA,IA2Ef0Q,UACAC,WACAC,WACAC,YACA5C,WACAY,YACA5hB,aACA4jB,YACAA,YACAA,YACAA,YACAhC,YACAA,YACAA,YACAA,YACAA,YAyDL,SAAAiC,EAAA9L,EAAA+L,KAAuCC,MAI9C,GAHA,MAAAD,EAAAE,OAAAF,EAAAE,QAAAD,EAAAC,OACAjM,EAAAkM,YAAAlM,EAAAmM,oBAAAJ,EAAAE,OAEAF,EAAAlM,MAAAkM,EAAAlM,OAAAmM,EAAAnM,MACAkM,EAAAK,OAAAL,EAAAK,QAAAJ,EAAAI,OACAL,EAAAM,OAAAN,EAAAM,QAAAL,EAAAK,MAAA,CACA,IAAAD,EAAAC,EACAN,EAAAlM,KACAuM,EAAAC,EAAAN,EAAAlM,MAGAwM,EAAAN,EAAAM,OAAA,gBACAD,EAAAL,EAAAK,OAAA,iBAEApM,EAAAsM,cAAAtM,EAAA3d,WAAA2d,EAAAuM,eAAAvM,EAAAoM,IACApM,EAAAsM,cAAAtM,EAAA3d,WAAA2d,EAAAwM,eAAAxM,EAAAqM,IAEAN,EAAAhM,WAAAgM,EAAAhM,YAAAiM,EAAAjM,WACAC,EAAAsM,cAAAtM,EAAA3d,WAAA2d,EAAAyM,mBAAAzM,EAAA+L,EAAAhM,YAEAgM,EAAAjM,WAAAiM,EAAAjM,YAAAkM,EAAAlM,WACAE,EAAAsM,cAAAtM,EAAA3d,WAAA2d,EAAA0M,mBAAA1M,EAAA+L,EAAAjM,YAIO,SAAA6M,EAAA3M,EAAAzL,EAAAwX,EAAAC,GACP,SAAAzX,EAAAuP,OAAA,MAAAvP,EAAAyP,OACA,OAEA,MAAAzP,EAAAqY,cACArY,EAAAqY,YAAA5M,EAAA6M,qBAEAtY,EAAA2U,WACA3U,EAAA2U,aAEAlJ,EAAA8M,gBAAA9M,EAAA+M,YAAAxY,EAAAqY,aACArY,EAAAyY,cAAA/nB,OAAA+a,EAAAngB,OACAmgB,EAAAiN,aAAA,qBAEA,MAAAC,EAAA3Y,EAAAyY,cAAAhS,MACA,GAAAkS,EAAA,GACA,MAAAC,EAAAnN,EAAAiN,aAAA,wBAA+DxM,sBAC/D2M,KACA,QAAA9vB,EAAA,EAAuBA,EAAA4vB,EAAc5vB,IACrC8vB,EAAAxnB,KAAAunB,qBAA2D7vB,YAE3D6vB,EAAAE,iBAAAD,GACA,QAAA9vB,EAAA,EAAuBA,EAAA4vB,EAAc5vB,IAAA,CACrC,MAAAiX,EAAA2U,SAAA5rB,KACAiX,EAAA2U,SAAA5rB,GAAA0iB,EAAAsN,iBAEA,MAAA5E,EAAAnU,EAAA2U,SAAA5rB,GACA0iB,EAAA6I,YAAA7I,EAAA3d,WAAAqmB,GACA1I,EAAAuN,WAAAvN,EAAA3d,WAAA,EAAA2d,EAAAwN,KAAAjZ,EAAAuP,MAAAvP,EAAAyP,OAAA,EAAAhE,EAAAwN,KAAAjZ,EAAAyY,cAAA/nB,KAAA,MACA6mB,EAAA9L,EAAA+L,EAAAC,GACAhM,EAAAyN,qBAAAzN,EAAA+M,YAAAK,EAAA9vB,GAAA0iB,EAAA3d,WAAAqmB,EAAA,QAGA,CACA,MAAAnU,EAAA2U,SAAA,KACA3U,EAAA2U,SAAA,GAAAlJ,EAAAsN,iBAEA,MAAA5E,EAAAnU,EAAA2U,SAAA,GACAlJ,EAAA6I,YAAA7I,EAAA3d,WAAAqmB,GACA1I,EAAAuN,WAAAvN,EAAA3d,WAAA,EAAA2d,EAAAwN,KAAAjZ,EAAAuP,MAAAvP,EAAAyP,OAAA,EAAAhE,EAAAwN,KAAAjZ,EAAAyY,cAAA/nB,KAAA,MACA6mB,EAAA9L,EAAA+L,EAAAC,GACAhM,EAAAyN,qBAAAzN,EAAA+M,YAAA/M,EAAA0N,kBAAA1N,EAAA3d,WAAAqmB,EAAA,GAEA,MAAAnU,EAAAoZ,cACApZ,EAAAoZ,YAAA3N,EAAA4N,sBAEA5N,EAAA6N,iBAAA7N,EAAA8N,aAAAvZ,EAAAoZ,aACA3N,EAAA+N,oBAAA/N,EAAA8N,aAAA9N,EAAAgO,kBAAAzZ,EAAAuP,MAAAvP,EAAAyP,QACAhE,EAAAiO,wBAAAjO,EAAA+M,YAAA/M,EAAAkO,iBAAAlO,EAAA8N,aAAAvZ,EAAAoZ,aACA,MAAAQ,EAAAnO,EAAAoO,uBAAApO,EAAA+M,aACAoB,IAAAnO,EAAAqO,sBACAC,QAAAC,MAAA,oBAAAJ,EAAApC,GAEA/L,EAAA8M,gBAAA9M,EAAA+M,YAAA,MACA/M,EAAA6I,YAAA7I,EAAA3d,WAAA,MACA2d,EAAA6N,iBAAA7N,EAAA8N,aAAA,MAEO,SAAAU,EAAAxO,EAAAzL,GACPyL,EAAAyO,kBAAAla,EAAAqY,aACA5M,EAAA0O,mBAAAna,EAAAoZ,aACA,UAAAjF,KAAAnU,EAAA2U,SACAlJ,EAAA2O,cAAAjG,GAIO,SAAAkG,EAAA5O,EAAA6O,GACP,GAAAA,EAAA3O,OACA,UAAA4O,KAAAD,EAAA3O,OACAF,EAAAE,OAAA4O,GAGA,GAAAD,EAAAE,QACA,UAAAD,KAAAD,EAAAE,QACA/O,EAAA+O,QAAAD,GAGAD,EAAAzO,WACAJ,EAAAI,UAAA4O,MAAAhP,EAAA6O,EAAAzO,WAEA,MAAAyO,EAAAI,WACAjP,EAAAiP,UAAAJ,EAAAI,WAEA,MAAAJ,EAAAK,UACAlP,EAAAkP,SAAAL,EAAAK,UAEA,MAAAL,EAAAM,WACAnP,EAAAmP,UAAAN,EAAAM,WAEA,MAAAN,EAAAO,WACApP,EAAAoP,UAAAP,EAAAO,WAEAP,EAAAQ,WACArP,EAAAqP,UAAAL,MAAAhP,EAAA6O,EAAAQ,WAEA,MAAAR,EAAAS,WACAtP,EAAAsP,UAAAT,EAAAS,WAEAT,EAAA5O,YACAD,EAAAC,WAAA+O,MAAAhP,EAAA6O,EAAA5O,YAEA,MAAA4O,EAAAU,YACAvP,EAAAuP,WAAAV,EAAAU,YAEA,MAAAV,EAAAW,WACAxP,EAAAyP,MAAAZ,EAAAW,WAGO,SAAAE,EAAA1P,EAAA6O,GACP,GAAAA,EAAA3O,OACA,UAAA4O,KAAAD,EAAA3O,OACAF,EAAA+O,QAAAD,GAGA,GAAAD,EAAAE,QACA,UAAAD,KAAAD,EAAAE,QACA/O,EAAAE,OAAA4O,qBClhBA,IAAAa,EAAA,QACaC,EACbnP,YAAAT,EAAAzb,EAAA,OAAAorB,KACAE,KAAA7P,KACA6P,KAAAtrB,KAEAkc,OAAAsL,GACA,MAAA/L,EAAA6P,KAAA7P,GACA+L,EAAAnL,WACAiP,KAAAjP,SAAAZ,EAAA+L,EAAAnL,WAEAmL,EAAAlL,YACAgP,KAAAhP,UAAAkL,EAAAlL,WAEAgP,KAAArP,QAAAqP,KAAArP,YACA,UAAAjc,KAAAwnB,EAAAvL,QAAA,CACA,MAAAsP,EAAA/D,EAAAvL,QAAAjc,GACA,MAAAsrB,KAAArP,QAAAjc,KACAsrB,KAAArP,QAAAjc,IACAmc,OAAAV,EAAA+P,iBAGA/P,EAAA8K,WAAA9K,EAAA+K,aAAA8E,KAAArP,QAAAjc,GAAAmc,QACAV,EAAAgQ,WAAAhQ,EAAA+K,aAAA+E,EAAApP,OAAAV,GAAA8P,EAAAnP,WAAA,oBAEA,GAAAoL,EAAAkE,SAAA,CACA,MAAAvP,EAAAqL,EAAAkE,SAAAvP,OACA,MAAAmP,KAAAI,WACAJ,KAAAI,UACAvP,OAAAV,EAAA+P,eACAG,OAAA,OAGAL,KAAAI,SAAAC,OD6SO,SAAAC,GACP,GAAAA,aAAAzE,UACA,OAAetC,EAAA,EAAO3mB,KAEtB,GAAA0tB,aAAAxE,WACA,OAAevC,EAAA,EAAO1mB,cAEtB,GAAAytB,aAAAC,kBACA,OAAehH,EAAA,EAAO1mB,cAEtB,GAAAytB,aAAAvE,WACA,OAAexC,EAAA,EAAOzmB,MAEtB,GAAAwtB,aAAAtE,YACA,OAAezC,EAAA,EAAOxmB,eAEtB,GAAAutB,aAAAlH,WACA,OAAeG,EAAA,EAAOnpB,IAEtB,GAAAkwB,aAAAtG,YACA,OAAeT,EAAA,EAAO3nB,aAEtB,GAAA0uB,aAAAloB,aACA,OAAemhB,EAAA,EAAOvpB,MAEtB,oCCtUmCwwB,CAAsB3P,GACzDV,EAAA8K,WAAA9K,EAAAsQ,qBAAAT,KAAAI,SAAAvP,QACAV,EAAAgQ,WAAAhQ,EAAAsQ,qBAAA5P,EAAAV,GAAA+L,EAAAkE,SAAAtP,WAAA,oBAEA,OAAAkP,KAEApP,UACA,UAAAlc,KAAAsrB,KAAArP,QACAqP,KAAA7P,GAAAuQ,aAAAV,KAAArP,QAAAjc,GAAAmc,QAEAmP,KAAAI,UACAJ,KAAA7P,GAAAuQ,aAAAV,KAAAI,SAAAvP,SC5CA,IAAA8P,EAAA,QACaC,EACbhQ,YAAAT,EAAAzb,EAAA,QAAAisB,KACAX,KAAA7P,KACA6P,KAAAtrB,KACAsrB,KAAAa,QAAA1Q,EAAA2Q,gBACAd,KAAA7O,KAAAhB,EAAA4Q,aAAA5Q,EAAA6Q,iBACAhB,KAAA9O,KAAAf,EAAA4Q,aAAA5Q,EAAA8Q,eACA9Q,EAAA+Q,aAAAlB,KAAAa,QAAAb,KAAA9O,MACAf,EAAA+Q,aAAAlB,KAAAa,QAAAb,KAAA7O,MAEAP,OAAAsL,GACA,MAAA/L,EAAA6P,KAAA7P,GACAgB,EAAA+K,EAAA/K,MAAA+K,EAAA/K,KAAAgQ,QAAAnB,KAAAoB,WACAlQ,EAAAgL,EAAAhL,MAAAgL,EAAAhL,KAAAiQ,QAAAnB,KAAAqB,WACA,IAAAlQ,IAAAD,EACA,OAAA8O,KAiBA,GAfA7O,EAAAmQ,QAAA,2BACAnR,EAAAiN,aAAA,sBAEAjN,EAAAoR,aAAAvB,KAAA9O,QACAf,EAAAoR,aAAAvB,KAAA7O,QACAhB,EAAAqR,cAAAxB,KAAA9O,MACAf,EAAAqR,cAAAxB,KAAA7O,MACAhB,EAAAsR,mBAAAzB,KAAA9O,KAAAf,EAAAuR,iBACAjD,QAAAC,MAAA,mCAAAvO,EAAAwR,iBAAA3B,KAAA9O,MAAA0Q,EAAA1Q,IAEAf,EAAAsR,mBAAAzB,KAAA7O,KAAAhB,EAAAuR,iBACAjD,QAAAC,MAAA,qCAAAvO,EAAAwR,iBAAA3B,KAAA7O,MAAAyQ,EAAAzQ,IAEAhB,EAAA0R,YAAA7B,KAAAa,UACA1Q,EAAA2R,oBAAA9B,KAAAa,QAAA1Q,EAAA4R,aACA,CACA,MAAAC,EAAA7R,EAAA8R,kBAAAjC,KAAAa,SACApC,QAAAC,MAAA,4BAAAsD,GAMA,OAJAhC,KAAAkC,eF+MO,SAAA/R,EAAA0Q,GACP,IAAAsB,EAAA,EACA,SAAAC,EAAAvB,EAAAwB,GACA,MAAApK,EAAA9H,EAAAmS,mBAAAzB,EAAAwB,EAAAr0B,MACAqkB,EAAAgQ,EAAAnJ,KAAA,WAAAmJ,EAAAr0B,KAAAu0B,QAAA,GACAntB,EAAAitB,EAAAjtB,KACA4lB,EAAAlD,EAAA1iB,GACA,IAAA4lB,EACA,wBAAA5lB,EAAAotB,SAAA,IAEA,SAAAvK,EACA,OAEA,IAAAwB,EACA,GAhHA,SAAAgJ,GACA,cAAAA,EAAAjJ,KA+GAkJ,CAAA1H,GAAA,CAEA,MAAApC,EAAAuJ,EACAA,GAAAE,EAAAnJ,KAEAO,EADApH,EACA2I,EAAArB,YAAAxJ,EAAA/a,EAAAwjB,EAAAX,EAAAoK,EAAAnJ,MAGA8B,EAAAvB,OAAAtJ,EAAA/a,EAAAwjB,EAAAX,QAKAwB,EADAuB,EAAArB,aAAAtH,EACA2I,EAAArB,YAAAxJ,EAAA8H,GAGA+C,EAAAvB,OAAAtJ,EAAA8H,GAGA,OAAgBwB,SAAAxB,YAEhB,MAAAiK,KACAS,EAAAxS,EAAA2R,oBAAAjB,EAAA1Q,EAAAyS,iBACA,QAAAn1B,EAAA,EAAmBA,EAAAk1B,IAAiBl1B,EAAA,CACpC,MAAA40B,EAAAlS,EAAA0S,iBAAAhC,EAAApzB,GACA,IAAA40B,EACA,SAEA,IAAAr0B,EAAAq0B,EAAAr0B,KAKA,GAHA,QAAAA,EAAAu0B,QAAA,KACAv0B,IAAAu0B,OAAA,EAAAv0B,EAAA4F,OAAA,IAEAitB,EAAA,CACA,MAAApH,EAAA2I,EAAAvB,EAAAwB,GACA5I,IACAyI,EAAAl0B,GAAAyrB,IAIA,OAAAyI,EErQ8BY,CAAoB3S,EAAA6P,KAAAa,SAClDb,KAAA+C,iBFsQO,SAAA5S,EAAA0Q,GACP,MAAAmC,KACAC,EAAA9S,EAAA2R,oBAAAjB,EAAA1Q,EAAA+S,mBACA,QAAAz1B,EAAA,EAAmBA,EAAAw1B,EAAgBx1B,IAAA,CACnC,MAAA01B,EAAAhT,EAAAiT,gBAAAvC,EAAApzB,GACA,IAAA01B,EACA,MAEA,MAAAlL,EAAA9H,EAAAkT,kBAAAxC,EAAAsC,EAAAn1B,MACAgtB,EAAAY,EAAAuH,EAAA/tB,MACAqkB,EAAAuB,EAAAvB,OAAAtJ,EAAA8H,EAAA+C,GACAgI,EAAAG,EAAAn1B,OAA0CyrB,SAAAxB,YAE1C,OAAA+K,EEnRgCM,CAAsBnT,EAAA6P,KAAAa,SACtDb,KAAAoB,WAAAjQ,EACA6O,KAAAqB,WAAAnQ,EACA8O,KAEApP,UACAoP,KAAA7P,GAAAoT,cAAAvD,KAAAa,SACAb,KAAA7P,GAAAqT,aAAAxD,KAAA7O,MACA6O,KAAA7P,GAAAqT,aAAAxD,KAAA9O,OAGA,SAAA0Q,EAAA6B,GACA,OAAAA,EAAAtC,OAAAuC,MAAA,MACAhS,IAAA,CAAAiS,EAAAl2B,MAAA,OAAAk2B,GACAC,KAAA,MCrDA,IAAAC,EAAA,QACOC,EACPlT,YAAAlc,EAAA,SAAAmvB,KACA7D,KAAAtrB,KAEAkc,OAAAsL,GAaA,OAZAA,EAAA6H,eACA/D,KAAA+D,aAAA7H,EAAA6H,cAEA7H,EAAA8H,OACAhE,KAAAgE,KAAA9H,EAAA8H,MAEA9H,EAAA+H,QACAjE,KAAAiE,MAAA/H,EAAA+H,OAEA/H,EAAAgI,WACAlE,KAAAkE,SAAAhI,EAAAgI,UAEAlE,KAEApP,UACAoP,KAAAgE,MAAAhE,KAAAgE,KAAAG,UACAnE,KAAAiE,OAAAjE,KAAAiE,MAAAE,sBClBA,IAAAC,EAAA,QACaC,EACbzT,YAAAT,EAAAzb,EAAA,cAAA0vB,KACApE,KAAA7P,KACA6P,KAAAtrB,KACAsrB,KAAA9D,QACA8D,KAAAsE,SAAAnU,EAAAsN,gBAEA7M,UACA,OAAAoP,KAAAsE,SAEA1T,OAAAsL,GAsBA,OArBA8D,KAAA7P,GAAA6I,YAAAgH,KAAA7P,GAAA3d,WAAAwtB,KAAAnH,WACAqD,EAAAqI,QACArI,EAAAlM,MAAAkM,EAAAK,OAAAL,EAAAM,QACAN,EAAAlM,KAA4BwU,EAAA,EAAsBxU,MAElDkM,EAAAjM,YACAiM,EAAAjM,UAAiCuU,EAAA,EAAsBvU,WAEvDiM,EAAAhM,YACAgM,EAAAhM,UAAiCsU,EAAA,EAAsBtU,YAG/C+L,EAAgB+D,KAAA7P,GAAA+L,EAAA8D,KAAA9D,MACxBA,EAAAqI,OACAvE,KAAA7P,GAAAuN,WAAAsC,KAAA7P,GAAA3d,WAAA,EAAAwtB,KAAA7P,GAAAwN,KAAAqC,KAAA7P,GAAAwN,KAAAqC,KAAA7P,GAAAtd,cAAAqpB,EAAAqI,OAEArI,EAAAjM,WAAAiM,EAAAjM,UAAAqR,QAAA,aACAtB,KAAA7P,GAAAsU,eAAAzE,KAAA7P,GAAA3d,YAEAwtB,KAAA7P,GAAA6I,YAAAgH,KAAA7P,GAAA3d,WAAA,MACArE,OAAAuF,OAAAssB,KAAA9D,QACA8D,KAEApP,UACAoP,KAAA7P,GAAA2O,cAAAkB,KAAAnH,YAGA,IAAA6L,EAAA,QACaC,EACb/T,YAAAT,EAAAzb,EAAA,eAAAgwB,KACA1E,KAAA7P,KACA6P,KAAAtrB,KACAsrB,KAAA9D,QAEAtL,QAAAnjB,EAAA,GAMA,OAAAuyB,KAAA4E,SAAA5E,KAAA4E,QAAA,GAAAvL,SAAA5rB,IAAA,KAEAmjB,OAAAsL,GAiCA,GAhCAA,EAAA2I,WAAA7E,KAAA4E,SACA5E,KAAA4E,QAA2Bz2B,OAAA22B,EAAA,EAAA32B,CAAKV,KAChCiH,GAAAsrB,KAAAtrB,GAAA,WAAAjH,EAAA,GACAwmB,MAAAiI,EAAAjI,OAAA+L,KAAA7P,GAAAqD,OAAAS,MACAE,OAAA+H,EAAA/H,QAAA6L,KAAA7P,GAAAqD,OAAAW,OACA4I,YAAA,KAAA1D,YAAAyE,YAAA,KACAX,eACA/nB,KAAA8mB,EAAAiB,eAAAjB,EAAAiB,cAAA/nB,MAAA4qB,KAAA7P,GAAAtd,cACAsY,MAAA+Q,EAAAiB,eAAAjB,EAAAiB,cAAAhS,OAAA,KAEa+Q,EAAA6I,eAAA,KACb7I,EAAAlM,MAAAkM,EAAAK,OAAAL,EAAAM,QACAN,EAAAlM,KAA4BwU,EAAA,EAAsBxU,MAElDkM,EAAAjM,YACAiM,EAAAjM,UAAiCuU,EAAA,EAAsBvU,WAEvDiM,EAAAhM,YACAgM,EAAAhM,UAAiCsU,EAAA,EAAsBtU,WAEvD8P,KAAA4E,QAAA9tB,QAAAnI,GAAsCmuB,EAAkBkD,KAAA7P,GAAAxhB,EAAAutB,EAAA8D,KAAA9D,QAExD8D,KAAA4E,SAAA1I,EAAAjI,OAAAiI,EAAA/H,QACA6L,KAAA4E,QAAA9tB,QAAAnI,IACAA,EAAAslB,MAAAiI,EAAAjI,MACAtlB,EAAAwlB,OAAA+H,EAAA/H,OACgB2I,EAAkBkD,KAAA7P,GAAAxhB,EAAAutB,EAAA8D,KAAA9D,QAGlCA,EAAA8I,WACAhF,KAAAgF,SAAA9I,EAAA8I,UAEA9I,EAAA/K,KAAA,CACA,MAAA8T,EAAAjF,KAAAgF,UAAAhF,KAAAgF,SAAA,GACAC,GACAA,EAAAhB,MAAAiB,QAAqC/T,KAAA+K,EAAA/K,KAAAD,KAAwBsT,EAAA,EAAcvT,YAAAC,OAO3E,OAJAgL,EAAAgI,WACAlE,KAAAkE,SAAAhI,EAAAgI,UAEA/1B,OAAAuF,OAAAssB,KAAA9D,QACA8D,KAEApP,UACA,GAAAoP,KAAAgF,SACA,UAAAC,KAAAjF,KAAAgF,SACAC,EAAAd,UAGAnE,KAAA4E,UACA5E,KAAA4E,QAAA9tB,QAAAnI,GAAsCgwB,EAAmBqB,KAAA7P,GAAAxhB,IACzDqxB,KAAA4E,aAAAxP,IC/GA/nB,EAAAU,EAAA0B,EAAA,sBAAA01B,UAOaA,EACbvU,YAAAT,GACA6P,KAAA7P,KACA6P,KAAA4E,UACalwB,GAAA,iBACAA,GAAA,iBAEbsrB,KAAAoF,OAAA,MACApF,KAAAtP,WAAAsP,KAAAqF,aAAAH,OAAmDV,EAAA,EAAY9T,YAC/DsP,KAAAsF,OAAAtF,KAAAuF,mBACAvF,KAAAsF,OAAArB,MAAAiB,OAAiCV,EAAA,EAAcvT,aAE/CL,OAAAoD,EAAA,EAAAwR,GAAA,GACA,MAAAhS,EAAAwM,KAAA7P,GAAAqD,OAaA,OAZ2BrlB,OAAAonB,EAAA,EAAApnB,CAAYqlB,EAAAQ,IACvCwR,IACAxF,KAAA4E,QAAA9tB,QAAAnI,IACAA,EAAAslB,MAAAT,EAAAS,MACAtlB,EAAAwlB,OAAAX,EAAAW,OACAxlB,EAAAwuB,eACAhS,MAAA,EACA/V,KAAA4qB,KAAA7P,GAAAtd,eAEgBiqB,EAAkBkD,KAAA7P,GAAAxhB,EAAa61B,EAAA,KAG/CxE,KAEApP,UACAoP,KAAAsF,OAAAnB,UACA,UAAAzf,KAAAsb,KAAA4E,QACYjG,EAAmBqB,KAAA7P,GAAAzL,GAG/BkM,mBAAAmT,GAEA,OADQhF,EAAiBiB,KAAA7P,GAAAhiB,OAAAuF,UAA4BvF,OAAAq2B,EAAA,EAAAr2B,CAAuB6xB,KAAA7P,IAAA4T,IAC5E/D,KAEApP,WAAAlc,GAAoB,WAAYqrB,EAAIC,KAAA7P,GAAAzb,GACpCkc,YAAAlc,GAAqB,WAAYksB,EAAKZ,KAAA7P,GAAAzb,GACtCkc,aAAAlc,GAAsB,WAAYovB,EAAMpvB,GACxCkc,iBAAAlc,GACA,MAAAlF,EAAAwwB,KAAAyF,aAAA/wB,GACA,OAAAlF,EAAA01B,QACAlB,KAAAhE,KAAAtP,WACAuT,MAAAjE,KAAA0F,YAAAl2B,EAAAkF,GAAA,mBAGAkc,kBAAAlc,GAA2B,WAAY2vB,EAAWrE,KAAA7P,GAAAzb,GAClDkc,mBAAAlc,GAA4B,WAAYiwB,EAAY3E,KAAA7P,GAAAzb,GACpDkc,kBAAAlc,GACA,MAAAhH,EAAAsyB,KAAA2F,mBAAAjxB,GACA,OAAAhH,EAAAw3B,QACAF,UAAAhF,KAAAuF,iBAAA73B,EAAAgH,GAAA,oBAGAkc,KAAAqU,EAAAW,GAEA,OADAC,EAAA7F,KAAA7P,GAAA8U,EAAA,KAAAW,GACA5F,KAEApP,WAAAkV,GAEA,OA0HA,SAAA3V,EAAA2V,EAAAlB,EAAAU,GACA,MAAAS,EAAAD,EAAAlyB,OAAA,EACA,QAAAnG,EAAA,EAAmBA,EAAAq4B,EAAAlyB,OAAmBnG,IAAA,CACtC,MAAAu4B,EAAAF,EAAAr4B,GAIA,GAAA4K,MAAAga,QAAA2T,EAAA9B,UAAA,CACA,MAAA+B,EAAAF,EAAAC,EAAA9B,SAAAtwB,OAAA,EACAoyB,EAAAE,SAAA,EACA,QAAA7Y,EAAA,EAA2BA,EAAA2Y,EAAA9B,SAAAtwB,OAA2ByZ,IAAA,CAClC,EAGpB,MAAA8Y,EAAA14B,EAAA4f,IAAA4Y,EACAG,EAAAjW,EAAA6V,EAAApB,EAAAoB,EAAA9B,SAAA7W,GAAAiY,EAAAa,QAGA,CACA,MAAAA,EAAA14B,IAAAs4B,EACAK,EAAAjW,EAAA6V,EAAApB,EAAAoB,EAAA9B,SAAAoB,EAAAa,KA/IAE,CAAArG,KAAA7P,GAAA2V,EAAA9F,KAAA4E,QAAA5E,KAAAsF,QACAtF,MAIA,SAAA6F,EAAA1V,EAAA8U,EAAAqB,EAAAV,GACA,MAAA3B,MAAWA,EAAAD,OAAAD,eAAAG,YAAsCe,EACjD,IAAAhB,IAAAD,EACA,MAAAtQ,MAAA,+CAUA,GARAvD,EAAAoW,WAAAtC,EAAApD,SAgCA,SAAAoD,EAAAD,GACA,UAAAh2B,KAAAg2B,EAAArT,QAAA,CACA,MAAA8I,EAAAwK,EAAAlB,iBAAA/0B,GACAyrB,GACAA,SAAAuK,EAAArT,QAAA3iB,KAnCAw4B,CAAAvC,EAAAD,GACA4B,GACAa,EAAAxC,EAAA2B,EAAAU,GAEAvC,GACQhF,EAAiB5O,EAAA4T,GAEzB1rB,MAAAga,QAAA6R,GACA,UAAAwC,KAAAxC,EACAyC,EAAAxW,EAAA8U,EAAAqB,EAAAI,QAIAC,EAAAxW,EAAA8U,EAAAqB,EAAApC,GAEAH,GACQlE,EAAkB1P,EAAA4T,GAG1B,SAAA4C,EAAAxW,EAAA8U,EAAAqB,EAAApC,GACAA,GACAuC,EAAAxB,EAAAhB,MAAAC,EAAAoC,GAEArB,EAAAjB,KAAA5D,UAAA,MAAA6E,EAAAjB,KAAA5D,SAAAC,QACAlQ,EAAA8K,WAAA9K,EAAAsQ,qBAAAwE,EAAAjB,KAAA5D,SAAAvP,QACAV,EAAAyW,aAAA3B,EAAAjB,KAAAjT,SAAAkU,EAAAjB,KAAAhT,UAAAiU,EAAAjB,KAAA5D,SAAAC,OAAA,IAGAlQ,EAAA0W,WAAA5B,EAAAjB,KAAAjT,SAAA,EAAAkU,EAAAjB,KAAAhT,WAWA,SAAAyV,EAAAxC,EAAAC,EAAAoC,GACA,UAAAt4B,KAAAk2B,EAAA,CACA,MAAAzK,EAAAwK,EAAA/B,eAAAl0B,GACA,GAAAyrB,EAAA,CACA,IAAA/qB,EAAAw1B,EAAAl2B,GACA,mBAAAU,IACAA,OAEA,OAAAA,GAAA,iBAAAA,EACA+qB,SAAA6M,GAGA7M,SAAA/qB,KAKA,SAAA03B,EAAAjW,EAAA6V,EAAApB,EAAAV,EAAA4C,EAAAX,GACA,MAAAY,EAAAnC,EAAA,GACAlgB,EAAAkgB,EAAA,GACA,GAAAuB,EAIAhW,EAAA8M,gBAAA9M,EAAA+M,YAAA,MACA/M,EAAA6W,SAAA,IAAA7W,EAAA8W,mBAAA9W,EAAA+W,0BAEA,GAAAlB,EAAApB,QAAA,CACA,MAAAn3B,EAAAu4B,EAAApB,QAAAhxB,OAAA,EACY,EAGZuc,EAAA8M,gBAAA9M,EAAA+M,YAAA8I,EAAApB,QAAAn3B,GAAAsvB,aACA5M,EAAA6W,SAAA,IAAAhB,EAAApB,QAAAn3B,GAAAwmB,MAAA+R,EAAApB,QAAAn3B,GAAA0mB,aAMAhE,EAAA8M,gBAAA9M,EAAA+M,YAAAxY,EAAAqY,aACA5M,EAAA6W,SAAA,IAAA7W,EAAA8W,mBAAA9W,EAAA+W,qBAKA,GAHAlB,EAAA9J,KAAA6H,cACQhF,EAAiB5O,EAAA6V,EAAA9J,KAAA6H,cAEzBiC,EAAAhB,SACA,UAAAC,KAAAe,EAAAhB,SACAa,EAAA1V,EAAA8U,EAAAe,EAAAE,SAAAF,EAAAnN,WAAAkO,EAAA1N,SAAA,GAAA6K,QAKA2B,EAAA1V,EAAA2W,EAAA,MAAsCC,OAAAf,EAAAnN,YAQtC,GAHAmN,EAAA9J,KAAA6H,cACQlE,EAAkB1P,EAAA6V,EAAA9J,KAAA6H,eAE1BoC,EACA,GAAAH,EAAApB,SAIA,OAAAoB,EAAApB,QAAAhxB,OAAA,CACA,MAAAuzB,EAAAnB,EAAApB,QAAA,GACAoB,EAAApB,QAAA,GAAAoB,EAAApB,QAAA,GACAoB,EAAApB,QAAA,GAAAuC,EACAnB,EAAAE,SAAA,QAPAtB,EAAA,GAAAlgB,EACAkgB,EAAA,GAAAmC,EA7GA5B,EAAOiC,OAAA,gCCxEP/5B,EAAAU,EAAA0B,EAAA,sBAAA43B,IAAAh6B,EAAAU,EAAA0B,EAAA,sBAAA63B,IAAAj6B,EAAAU,EAAA0B,EAAA,sBAAA83B,IAAAl6B,EAAAU,EAAA0B,EAAA,sBAAA+3B,IAAAn6B,EAAAU,EAAA0B,EAAA,sBAAAg4B,IAAAp6B,EAAAU,EAAA0B,EAAA,sBAAAi4B,IAAAr6B,EAAAU,EAAA0B,EAAA,sBAAAk4B,IAAA,IAAAC,EAAAv6B,EAAA,GAAAw6B,EAAAx6B,EAAA,GAAAy6B,EAAAz6B,EAAA,IAAA06B,EAAA16B,EAAA,IAeO,SAAAg6B,EAAA7T,EAAAwU,EAAAC,GACP,IAAA9X,EAAahiB,OAAAy5B,EAAA,EAAAz5B,EAAMqlB,EAAAre,KAAe0yB,EAAA,GAClCK,EAAkB/5B,OAAAy5B,EAAA,EAAAz5B,EAAWgiB,EAAAhb,KAAA,SAAAgzB,EAAAhY,GAC7B,IAAA5gB,EAAA,IAAoBu4B,EAAA,EAAO3X,GAE3B,OADAgY,EAAA54B,GACAA,EAAA40B,UAEArvB,OAAgBizB,EAAA,GAChBK,EAAqBj6B,OAAAy5B,EAAA,EAAAz5B,EAAMqlB,EAAAre,IAAA6yB,EAAA7yB,KAAA,SAAAqe,GAAwD,OACnFS,MAAAT,EAAAU,YACAC,OAAAX,EAAAY,gBAMA,OAJA8T,EAAAlyB,OAAAoyB,EAAAjzB,KAAA,SAAA5F,EAAA84B,GAAqD,OAAA94B,EAAA61B,UAAqB,cAC1E6C,GACAC,EAAAlyB,OAAAiyB,EAAA9yB,KAAA,SAAA5F,EAAAC,GAA8D,OAAAD,EAAA+4B,mBAAA94B,MAElD04B,UAAA/X,KAAAiY,cAEL,SAAAd,EAAAY,EAAAhM,GACP,IAAAhnB,EAAiB/G,OAAAy5B,EAAA,EAAAz5B,EAAW+5B,EAAA/yB,KAAA,SAAAgzB,EAAAD,GAC5B,IAAAjE,EAAAiE,EAAAxC,cAEA,OADAyC,EAAAlE,GACAA,EAAAE,UAKA,OAHAjI,GACAhnB,EAAAc,OAAAkmB,EAAA/mB,KAAA,SAAAD,EAAAgnB,GAA0D,OAAAhnB,EAAAgwB,OAAAhJ,KAE1DhnB,EAEO,SAAAqyB,EAAAW,EAAAhM,GACP,IAAAhnB,EAAiB/G,OAAAy5B,EAAA,EAAAz5B,EAAW+5B,EAAA/yB,KAAA,SAAAgzB,EAAAD,GAC5B,IAAAlE,EAAAkE,EAAA7C,aAEA,OADA8C,EAAAnE,GACAA,EAAAG,UAKA,OAHAjI,GACAhnB,EAAAc,OAAAkmB,EAAA/mB,KAAA,SAAAD,EAAAgnB,GAA0D,OAAAhnB,EAAAgwB,OAAAhJ,KAE1DhnB,EAEO,SAAAsyB,EAAAU,EAAAhM,GACP,IAAAhnB,EAAiB/G,OAAAy5B,EAAA,EAAAz5B,EAAW+5B,EAAA/yB,KAAA,SAAAgzB,EAAAD,GAC5B,IAAAjD,EAAAiD,EAAAzC,eAEA,OADA0C,EAAAlD,GACAA,EAAAd,UAKA,OAHAjI,GACAhnB,EAAAc,OAAAkmB,EAAA/mB,KAAA,SAAAD,EAAAgnB,GAA0D,OAAAhnB,EAAAgwB,OAAAhJ,KAE1DhnB,EAaO,SAAAuyB,EAAAS,EAAAhM,GACP,IAAAhnB,EAAiB/G,OAAAy5B,EAAA,EAAAz5B,EAAW+5B,EAAA/yB,KAAA,SAAAgzB,EAAAD,GAC5B,IAAAlC,EAAAkC,EAAAK,oBAEA,OADAJ,EAAAnC,GACAA,EAAA7B,UAKA,OAHAjI,GACAhnB,EAAAc,OAAAkmB,EAAA/mB,KAAA,SAAAD,EAAAgnB,GAA0D,OAAAhnB,EAAAgwB,OAAAhJ,KAE1DhnB,EAEO,SAAAwyB,EAAAQ,EAAAhM,GACP,IAAAhnB,EAAiB/G,OAAAy5B,EAAA,EAAAz5B,EAAW+5B,EAAA/yB,KAAA,SAAAgzB,EAAAD,GAC5B,IAAAlC,EAAAkC,EAAAvC,qBAEA,OADAwC,EAAAnC,GACAA,EAAA7B,UAKA,OAHAjI,GACAhnB,EAAAc,OAAAkmB,EAAA/mB,KAAA,SAAAD,EAAAgnB,GAA0D,OAAAhnB,EAAAgwB,OAAAhJ,KAE1DhnB,EAEO,SAAAyyB,EAAAO,EAAAhM,GACP,IAAAhnB,EAAiB/G,OAAAy5B,EAAA,EAAAz5B,EAAW+5B,EAAA/yB,KAAA,SAAAgzB,EAAAD,GAC5B,IAAAlC,EAAAkC,EAAAM,oBAEA,OADAL,EAAAnC,GACAA,EAAA7B,UAKA,OAHAjI,GACAhnB,EAAAc,OAAAkmB,EAAA/mB,KAAA,SAAAD,EAAAgnB,GAA0D,OAAAhnB,EAAAgwB,OAAAhJ,KAE1DhnB,iCC5GO,SAAAuzB,EAAA/V,GACP,SAAA0S,IACA1S,GACAuB,MAAApB,OAAA6V,WACAvU,OAAAtB,OAAA8V,cAKA,OAFA9V,OAAAQ,iBAAA,SAAA+R,GACAA,IACA,WACAvS,OAAAS,oBAAA,SAAA8R,IAVA/3B,EAAAU,EAAA0B,EAAA,sBAAAg5B,kCCAO,SAAAG,EAAAC,EAAAC,GACP,oBAAAD,GACA,iBAAAC,IACAzwB,MAAAga,QAAAwW,KACAxwB,MAAAga,QAAAyW,IACAD,IAAAC,EAAA,CACA,MAAAxD,EAAAn3B,OAAAuF,UAAuCm1B,GACvC,UAAA75B,KAAA85B,EAAA,CACA,MAAAC,EAAAF,EAAA75B,GACAg6B,EAAAF,EAAA95B,QACA,IAAAg6B,EACA1D,EAAAt2B,GAAA45B,EAAAG,EAAAC,UAGA1D,EAAAt2B,GAGA,OAAAs2B,EAEA,OAAAwD,EAEO,SAAAG,EAAAJ,EAAAC,EAAAI,GACP,MAAAC,EAAAD,KAAAC,OACA,oBAAAN,GACA,iBAAAC,IACAzwB,MAAAga,QAAAwW,KACAxwB,MAAAga,QAAAyW,IACAD,IAAAC,EAAA,CACA,UAAA95B,KAAA65B,EACA,GAAAA,EAAAv5B,eAAAN,MAAAm6B,GAAAn6B,KAAAm6B,IAAA,IAAAA,EAAAn6B,IAAA,CACA,MAAA+5B,EAAAF,EAAA75B,GACAg6B,EAAAF,EAAA95B,QACAomB,IAAA4T,IACAH,EAAA75B,GAAAi6B,EAAAF,EAAAC,GAA0DG,YAAAn6B,MAI1D,OAAA65B,EAEA,OAAAC,EAvCAz7B,EAAAU,EAAA0B,EAAA,sBAAAm5B,IAAAv7B,EAAAU,EAAA0B,EAAA,sBAAAw5B,mCCAA57B,EAAAU,EAAA0B,EAAA,sBAAA25B,IAAO,MAAAC,GACPC,KAAA,EACAC,OAAA,EACAC,MAAA,GAEO,SAAAJ,EAAA3W,EAAAC,GACP,MAAAC,EAAAD,GAAAD,GACAG,QAAWA,EAAA6W,SAAAC,qBAAwCjX,EACnDkX,GACA7W,WACA8W,MAAentB,EAAA,EAAAC,EAAA,EAAAmtB,GAAA,EAAAC,GAAA,GACfC,UAAA,GAEA,IAAAttB,EAAA,EAAAC,EAAA,EAAAstB,EAAA,EAAAC,EAAA,EACA,SAAAC,EAAAtyB,GACA+xB,EAAA7W,QAAAlb,EAAAuyB,QAAAvyB,EACAA,EAAAuyB,SAAAd,EAAAC,OACA7sB,EAAAutB,EAAApyB,EAAAwyB,QACA1tB,EAAAutB,EAAAryB,EAAAyyB,QACAV,EAAAI,UAAA,GAEApX,EAAAgX,GAEA,SAAAW,EAAA1yB,UACA+xB,EAAA7W,QAAAlb,EAAAuyB,eACAR,EAAAC,KAAA5W,MACA2W,EAAAC,KAAAntB,EAAA,EACAktB,EAAAC,KAAAltB,EAAA,EACAitB,EAAAC,KAAAC,GAAA,EACAF,EAAAC,KAAAE,GAAA,EACAH,EAAAI,UAAA,EACApX,EAAAgX,GAEA,SAAAY,EAAA3yB,GACA+xB,EAAAI,WACAJ,EAAAC,KAAA5W,MAAApb,EACA+xB,EAAAC,KAAAntB,IAAA7E,EAAAwyB,QACAT,EAAAC,KAAAltB,IAAA9E,EAAAyyB,QACAV,EAAAC,KAAAC,GAAAG,EAAApyB,EAAAwyB,QACAT,EAAAC,KAAAE,GAAAG,EAAAryB,EAAAyyB,QACAL,EAAApyB,EAAAwyB,QACAH,EAAAryB,EAAAyyB,QACA1X,EAAAgX,IAGA,SAAAa,EAAA5yB,GACAA,EAAA4yB,iBASA,OAPA5X,EAAAS,iBAAA,YAAA6W,GACAT,SAAApW,iBAAA,UAAAiX,GACAb,SAAApW,iBAAA,YAAAkX,GACAb,GACA9W,EAAAS,iBAAA,cAAAmX,GAEA7X,EAAAgX,GACA,WACA/W,EAAAU,oBAAA,YAAA4W,GACAT,SAAAnW,oBAAA,YAAAiX,GACAd,SAAAnW,oBAAA,UAAAgX,GACAZ,GACA9W,EAAAU,oBAAA,cAAAkX,sCC5DAn9B,EAAAU,EAAA0B,EAAA,sBAAAg7B,IAAA,MAAAC,EAAA,IAAAryB,MAAA,IAUA,MAAAsyB,KACAC,KACA,QAAAn9B,EAAA,EAAeA,EAAA,IAASA,IACxBk9B,EAAAl9B,MAAA,KAAA+0B,SAAA,IAAAD,OAAA,GACAqI,EAAAD,EAAAl9B,MAcO,SAAAg9B,IACP,MAAAI,EA5BA,WACA,QAAAt8B,EAAAd,EAAA,EAAsBA,EAAA,GAAQA,IAC9B,MAAAA,KACAc,EAAA,WAAAgK,KAAAC,SACAkyB,EAAAj9B,GAAAc,MAAA,EAAAd,IAAA,QAGA,OAAAi9B,EAqBAI,GAGA,OAFAD,EAAA,MAAAA,EAAA,MACAA,EAAA,MAAAA,EAAA,OAfA,SAAAE,GACA,MAAAC,EAAAL,EACA,IAAAl9B,EAAA,EACA,OAAAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MAAA,IACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MAAA,IACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MAAA,IACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MAAA,IACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MACAu9B,EAAAD,EAAAt9B,MAAAu9B,EAAAD,EAAAt9B,MAMAw9B,CAAAJ,kCChCAx9B,EAAAkB,EAAAkB,GAAApC,EAAAU,EAAA0B,EAAA,6BAAAuvB,IAAA3xB,EAAAU,EAAA0B,EAAA,4BAAAy4B,IAAA76B,EAAAU,EAAA0B,EAAA,uBAAA0gB,IAAA9iB,EAAAU,EAAA0B,EAAA,+BAAA24B,IAAA,IAAAR,EAAAv6B,EAAA,GAAA69B,EAAA79B,EAAA,IAAA89B,EAAA99B,EAAA,IAMO,MAAM2xB,EAAW7wB,OAAAy5B,EAAA,EAAAz5B,EACvBiiB,YAAa,EAAG,EAAG,EAAG,KACpBrb,SAGUmzB,QAACA,EAAO/X,GAAEA,EAAEiY,WAAEA,GAC1Bj6B,OAAA+8B,EAAA,EAAA/8B,CAAag9B,EAAA,OAAQA,EAAA,WAAYnM,iCCZlC3xB,EAAAkB,EAAAkB,GAAApC,EAAAU,EAAA0B,EAAA,2BAAA+jB,IAAAnmB,EAAAU,EAAA0B,EAAA,yBAAA27B,IAAA/9B,EAAAU,EAAA0B,EAAA,+BAAAg5B,IAAAp7B,EAAAU,EAAA0B,EAAA,0BAAA25B,IAAA/7B,EAAAU,EAAA0B,EAAA,yBAAA47B,IAAA,IAAAzD,EAAAv6B,EAAA,GAAAi+B,EAAAj+B,EAAA,GAAAk+B,EAAAl+B,EAAA,IAAAm+B,EAAAn+B,EAAA,IAAAo+B,EAAAp+B,EAAA,IAOO,MAAMmmB,EAASrlB,OAAAy5B,EAAA,EAAAz5B,CAAY,KACjC,IAAMs7B,SAASiC,eAAe,gBAAkCtW,GAGpDgW,EAAOj9B,OAAAy5B,EAAA,EAAAz5B,CAAiB,KAAMs9B,EAAA,GAE9BhD,EAAat6B,OAAAy5B,EAAA,EAAAz5B,CAAiB,KAAMq9B,EAAA,GAEpCpC,EAA+Bj7B,OAAAy5B,EAAA,EAAAz5B,EAAaqlB,EAAOre,KAC/D,CAACgzB,EAAM3U,IAAWrlB,OAAAo9B,EAAA,EAAAp9B,EAAUykB,QAASY,EAAQkW,mBAAmB,GAAOvB,IAG3DkD,EAAOl9B,OAAAy5B,EAAA,EAAAz5B,CAAiB,KAAMm9B,EAAA,iCCnBpC,SAAAK,EAAA1X,EAAAE,EAAAyX,EAAAC,GACP,MAAAC,EAAA7X,EAAA,EACA8X,EAAA5X,EAAA,EACA6X,EAAAJ,GAAA,EACAK,EAAAJ,GAAA,EACAK,EAAAF,EAAA,EACAG,EAAAF,EAAA,EACAG,EAAAnY,EAAA+X,EACAK,EAAAlY,EAAA8X,EACAK,EAAA,IAAAl0B,aAAA8zB,EAAAC,EAAA,GACAI,EAAA,IAAAn0B,aAAA8zB,EAAAC,EAAA,GACAK,EAAA,IAAAp0B,aAAA8zB,EAAAC,EAAA,GACA,IAAAM,EAAAC,EACAxhB,EAAA,EACAyhB,EAAA,EACA,IAAAF,EAAA,EAAgBA,EAAAN,EAAaM,IAAA,CAC7B,MAAA/vB,EAAA+vB,EAAAJ,EAAAN,EACA,IAAAW,EAAA,EAAoBA,EAAAR,EAAaQ,IAAA,CACjC,MAAAjwB,EAAAiwB,EAAAN,EAAAN,EACAQ,EAAAphB,GAAAzO,EACA6vB,EAAAphB,EAAA,IAAAxO,EACA6vB,EAAArhB,EAAA,KACAshB,EAAAG,GAAAD,EAAAV,EACAQ,EAAAG,EAAA,KAAAF,EAAAR,EACA/gB,GAAA,EACAyhB,GAAA,GAGAzhB,EAAA,EACA,MAAA0hB,EAAA,IAAAN,EAAA14B,OAAA,QAAAomB,YAAAgC,aAAAgQ,EAAAC,EAAA,GACA,IAAAQ,EAAA,EAAgBA,EAAAR,EAAYQ,IAC5B,IAAAC,EAAA,EAAoBA,EAAAV,EAAYU,IAAA,CAChC,MAAA92B,EAAA82B,EAAAR,EAAAO,EACAvwB,EAAAwwB,EAAAR,GAAAO,EAAA,GACA3+B,EAAA4+B,EAAA,EAAAR,GAAAO,EAAA,GACA1+B,EAAA2+B,EAAA,EAAAR,EAAAO,EACAG,EAAA1hB,GAAAtV,EACAg3B,EAAA1hB,EAAA,GAAAhP,EACA0wB,EAAA1hB,EAAA,GAAAnd,EACA6+B,EAAA1hB,EAAA,GAAAhP,EACA0wB,EAAA1hB,EAAA,GAAApd,EACA8+B,EAAA1hB,EAAA,GAAAnd,EACAmd,GAAA,EAGA,OACAyF,SACAkc,UACAhc,OAAAyb,GAEAQ,QACAjc,OAAA0b,GAEAQ,IACAlc,OAAA2b,IAGApM,UACAvP,OAAA+b,GAEA7b,SAAA,YACAC,UAAA4b,EAAAh5B,QA7DAvG,EAAAU,EAAA0B,EAAA,sBAAAk8B,0CCAAt+B,EAAAU,EAAA0B,EAAA,sBAAAV,IAAA,IAAAi+B,EAAA3/B,EAAA,IAAA4/B,EAAA5/B,EAAA,IAAAoG,EAA4BtF,OAAAuF,QAAA,SAAA/E,GAC5B,QAAAa,EAAA/B,EAAA,EAAAyB,EAAAyE,UAAAC,OAA4CnG,EAAAyB,EAAOzB,IAEnD,QAAA8B,KADAC,EAAAmE,UAAAlG,GACAU,OAAAkB,UAAAC,eAAA1B,KAAA4B,EAAAD,KACAZ,EAAAY,GAAAC,EAAAD,IAEA,OAAAZ,GAIO,SAAAI,IACP,IAAA2H,KACAC,KACAC,KACAs2B,GACAr1B,MACAs1B,OAEAt2B,KACA0e,EAAA,KACA6R,GAAA,EAoBA,SAAAgG,EAAAC,GAIA,OAHA,MAAAA,GAAA,iBAAAA,GAAAh1B,MAAAga,QAAAgb,KACAx2B,EAAmB1I,OAAA8+B,EAAA,EAAA9+B,CAAS0I,EAAAw2B,IAE5Bx2B,EAKA,SAAAvI,EAAAoG,GACA,OAAAw4B,EAAAr1B,GAAAnD,IAAAw4B,EAAAr1B,GAAAnD,GAAAb,IAEA,SAAAiG,EAAApF,EAAAhG,GACA4+B,EAAAC,EAAA74B,GAAAhG,GAAA,IACA8+B,IAmBA,SAAAC,EAAA54B,GACA,IAAA+C,EAAgBzJ,OAAA6+B,EAAA,EAAA7+B,CAAY0G,GAC5B6B,EAAAkB,EAAAlD,IAAAkD,EACA,IAaAqd,EAbAyY,EAAAH,EAAA31B,EAAAlD,IAYA,YAXA0gB,IAAAxd,EAAAlJ,QAAAkJ,EAAA7C,YAAAqgB,IAAAsY,EAAA75B,MACA65B,EAAA75B,IAAA+D,EAAAlJ,MACAi/B,EAAA/1B,EAAAlD,KAAA,EACAk5B,GAAA,GAEAF,EAAA54B,OAAA8C,EAAA9C,OACA8C,EAAAf,MAAAu2B,GACA12B,UAAAue,KACAA,EAAArd,EAAAlD,IAAAkD,EAAAf,KACAoe,KAEArd,EAGA,SAAAi2B,EAAAn5B,GACA,IAAAg5B,EAAAH,EAAA74B,GACA,QAAAo5B,KAAAJ,EAAA92B,KACAm3B,EAAAD,GAEA,IAUA7Y,EAVArd,EAAAlB,EAAAhC,GACAkD,KAAAf,MACAu2B,GACA12B,UAAAue,KACAA,EAAArd,EAAAlD,SAAA0gB,EACAH,YAGAiY,EAAAr1B,GAAAnD,UACAgC,EAAAhC,GAGA,SAAAs5B,EAAAn5B,GACA,IA8BAogB,EA9BA1lB,EAAgBpB,OAAA6+B,EAAA,EAAA7+B,CAAa0G,EAAA0gB,GAC7Bne,EAAA7H,EAAA6H,MACA62B,EAAAC,EAAA3+B,EAAAmF,IAmBA,QAAAo5B,KAlBAn3B,EAAApH,EAAAmF,IAAAnF,SACA0+B,EAAAE,IACAF,EAAAG,UACAH,EAAAI,WACAJ,EAAAv2B,MAAAnI,EAAAmI,MACAu2B,EAAA/5B,MAAA3E,EAAA2E,MACA/F,OAAAk9B,KAAA4C,EAAAr3B,MAAAE,QAAA,SAAAg3B,GACA,IAAAz2B,EAAAT,EAAAk3B,GAAAz2B,KACA,MAAAA,GACAD,EAAAC,IAAAD,EAAAC,KAAiD21B,EAAA,EAAU12B,aAC3Dy3B,EAAAD,KAGA12B,EAAAN,QAAA,SAAAO,EAAA5J,GACA4J,IAAyB21B,EAAA,EAAU12B,cACnC23B,EAAAE,IAAA1gC,KAGAwgC,EAAAr3B,KACA03B,EAAA13B,EAAAk3B,IAOA,OALAv+B,EAAAsH,MAAAu2B,GACAz2B,WAAAse,KACAA,EAAA1lB,EAAAmF,IAAAnF,EAAAsH,KACAoe,KAEA1lB,EAGA,SAAAg/B,EAAA75B,GACA,IAAAu5B,EAAAC,EAAAx5B,GAKA,QAAAo5B,KAJAG,EAAAO,OACAP,EAAAO,cACAP,EAAAO,MAEAP,EAAAr3B,KACAm3B,EAAAD,UAEAZ,EAAAC,GAAAz4B,GACA,IASAugB,EATA1lB,EAAAoH,EAAAjC,GACAnF,KAAAsH,MACAu2B,GACAz2B,WAAAse,KACAA,EAAA1lB,EAAAmF,SAAA0gB,EACAH,YAGAte,EAAAjC,GAGA,SAAA+5B,EAAA55B,GACA,IAAA4C,EAAkBtJ,OAAA6+B,EAAA,EAAA7+B,CAAS0G,GAC3B+B,EAAAa,EAAA/C,IAAA+C,EACA62B,EAAA72B,GACA,IAWAwd,EAXAgZ,EAAAC,EAAAz2B,EAAAD,SAAAjI,EAAAoH,EAAAc,EAAAD,SAUA,OATAjI,IAAA,IAAAA,EAAAoI,WACAxJ,OAAAk9B,KAAA4C,EAAAr3B,MAAAhD,SAAAzF,OAAAk9B,KAAA97B,EAAA6H,OAAAxD,OAAA,GA2NA,SAAAq6B,GACAA,EAAAv2B,MACAg3B,sBAAA,WACAC,EAAAV,MAIAU,EAAAV,GACAA,EAAAv1B,MACAi1B,EAAAM,EAAAv1B,IAAAhE,KAAA,IAnOAiD,CAAAs2B,GAEAx2B,EAAAZ,MAAAu2B,GACAx2B,MAAAqe,KACAA,EAAAxd,EAAA/C,IAAA+C,EAAAZ,KACAoe,KAEAxd,EAGA,SAAAs2B,EAAAr5B,GACA,IA0BAugB,EA1BAxd,EAAAb,EAAAlC,GACA,GAAA+C,EAAA,CACA,IAAAw2B,EAAAC,EAAAz2B,EAAAD,SAAAk2B,EAAAH,EAAA91B,EAAAvC,eACA+4B,EAAAr3B,KAAAlC,UACAg5B,EAAA92B,KAAAlC,GACA,MAAA+C,EAAAJ,aACAq2B,EAAAkB,QAAAn3B,EAAAD,gBACAy2B,EAAAI,QAAA52B,EAAAJ,aACA42B,EAAAG,OAAA32B,EAAAJ,QAGA42B,EAAAO,OACAP,EAAAO,cACAP,EAAAO,MAEAP,EAAAY,KAAA,oBACAZ,EAAAv1B,WACAg1B,EAAAoB,UAAAr3B,EAAAD,UAEAC,EAAAZ,MAAAu2B,GACAx2B,MAAAqe,KACAA,EAAAxd,EAAA/C,SAAA0gB,EACAH,YAGAre,EAAAlC,GAGA,SAAA45B,EAAA72B,GACA,IAAAs3B,EAAAt3B,EAAAD,QAAAw3B,EAAAv3B,EAAAvC,OAAA+4B,EAAAC,EAAAa,GAAArB,EAAAH,EAAAyB,GAAAz/B,EAAAoH,EAAAo4B,GACArB,EAAA92B,KAAAa,EAAA/C,KAAA,EACAnF,IACA0+B,EAAAr3B,KAAAa,EAAA/C,KAAA,EACA,MAAA+C,EAAAJ,aACAq2B,EAAAkB,QAAAG,GACAx/B,EAAA6H,OAAA,MAAA7H,EAAA6H,MAAAK,EAAAJ,QACA42B,EAAAI,QAAA52B,EAAAJ,MAAAq2B,EACAn+B,EAAA6H,MAAAK,EAAAJ,QAA8C21B,EAAA,EAAU73B,MACxDu4B,EAAAkB,QAAAG,GAAAd,MAKAA,EAAAv1B,IAAAg1B,EACA,MAAAO,EAAAE,KACAF,EAAAI,QAAAJ,EAAAE,KAAAT,EACAA,EAAAoB,UAAAC,GAAAd,UAGAP,EAAAoB,UAAAC,GAEAd,EAAAY,KAAA,SAAAngC,GACA4+B,EAAAI,EAAAh/B,GAAA,KAAAugC,GACAzB,OAMA,SAAA0B,EAAAC,GACA,GAAAA,EAAAz4B,SACA,QAAAjJ,KAAA0hC,EAAAz4B,SACA+2B,EAAA0B,EAAAz4B,SAAAjJ,IAGA,GAAA0hC,EAAAx4B,UACA,QAAAlJ,KAAA0hC,EAAAx4B,UACAq3B,EAAAmB,EAAAx4B,UAAAlJ,IAGA,GAAA0hC,EAAAv4B,KACA,QAAAnJ,KAAA0hC,EAAAv4B,KACA63B,EAAAU,EAAAv4B,KAAAnJ,IAGA2/B,EAAA+B,EAAAt4B,MA6BA,IAAAu4B,KACAzB,KACAsB,GAAA,EACArB,GAAA,EACA,SAAAJ,IACApG,GACA3I,QAAA4Q,IAAA,kCAAA1B,GAGA,IADA,IAAA2B,EAAAnhC,OAAAk9B,KAAAsC,GACA4B,EAAA,EAAAC,EAAAF,EAAmDC,EAAAC,EAAA57B,OAA0B27B,IAAA,CAC7E,IAAAP,EAAAQ,EAAAD,GACA,GAAA5B,EAAAqB,GAAA,CACA,IAAAtB,EAAAR,EAAAr1B,GAAAm3B,GACA,QAAAz/B,KAAAm+B,EAAAoB,UACAH,EAAAjB,EAAAoB,UAAAv/B,KAIA,IAAAkgC,KACA9B,KACAC,GAAA,EACAqB,GAAA,EACA,QAAAha,EAAA,EAAAya,EAAAJ,EAAmDra,EAAAya,EAAA97B,OAA0BqhB,IAAA,CAC7E+Z,EAAAU,EAAAza,GACAyY,EAAAR,EAAAr1B,GAAAm3B,GAIA,QAAAz/B,KAHAm+B,EAAA/a,GAAA/e,OAAA,IACAw7B,EAAAJ,GAAAtB,GAEAA,EAAAkB,QACAa,EAAAlgC,KACAo/B,EAAAjB,EAAAkB,QAAAr/B,IACAkgC,EAAAlgC,IAAA,GAKA,GADA0/B,GAAA,EACArB,EACAJ,QAEA,CACA,IAAAmC,EAAAxhC,OAAAk9B,KAAA+D,GAEA,QAAA3hC,KADA2hC,KACAO,EAEA,IADA,IACAza,EAAA,EAAAM,GADAkY,EAAAR,EAAAr1B,GAAA83B,EAAAliC,KACAklB,GAA4CuC,EAAAM,EAAA5hB,OAAgBshB,IAAA,EAE5DvC,EADA6C,EAAAN,IACAwY,EAAA75B,KAGAuzB,GACA3I,QAAA4Q,IAAA,mBAIA,SAAAV,EAAAV,GAEA,IADA,IAAA2B,GAAA,EACAt4B,EAAA,EAA4BA,EAAA22B,EAAAI,QAAAz6B,OAA4B0D,IAAA,CACxD,IAAAmsB,EAAAwK,EAAAI,QAAA/2B,GACA,QAAA8d,IAAAqO,EAAA5vB,IAAA,CACA+7B,GAAA,EACA,MAIA,GADA3B,EAAAG,OAAA92B,GAAAmsB,EAAA5vB,IACAo6B,EAAA/5B,MAAA,CACA,QAAAkhB,IAAAqO,EAAAoM,OAAA,CACAD,GAAA,EACA,MAGA3B,EAAAG,OAAA92B,EAAA,GAAAmsB,EAAAoM,QAKA,GAAAD,EAIA,GAHAxI,GACA3I,QAAA4Q,IAAA,kBAAApB,EAAAv5B,IAEAu5B,EAAAv2B,MACAu2B,EAAAO,MACAP,EAAAO,OAEAP,EAAAO,KAAA73B,EAAAs3B,EAAAv5B,IAAAoB,UAAAqpB,MAAA5J,GAAA0Y,EAAAY,MAAAt4B,OAAA03B,EAAAG,aAEA,CACA,IAAAv6B,EAAA8C,EAAAs3B,EAAAv5B,IAAAoB,UAAAqpB,MAAA5J,EAAA0Y,EAAAG,QACAH,EAAAv1B,KACA40B,EAAAW,EAAAv1B,IAAA7E,EAAA,MAAAo6B,EAAAE,MAKA,SAAAb,EAAAI,EAAA75B,EAAAi8B,GACA,aAAA1a,IAAAvhB,GAAA65B,EAAA54B,SAAA44B,EAAA54B,OAAAjB,EAAA65B,EAAA75B,QACA65B,EAAAmC,OAAAnC,EAAA75B,IACA65B,EAAA75B,MACA85B,EAAAD,EAAAh5B,IAAAo7B,EACAlC,GAAA,GACA,GA+BA,SAAAL,EAAA74B,GAIA,OAHAgC,EAAAhC,IACA+4B,GAAuB/4B,OAEvBw4B,EAAAr1B,GAAAnD,KAAAw4B,EAAAr1B,GAAAnD,IACAA,KACAb,SAAAuhB,EACA0Z,aACAF,WACAh4B,QACA+b,QAGA,SAAAub,EAAAx5B,GACA,OAAAw4B,EAAAC,GAAAz4B,KAAAw4B,EAAAC,GAAAz4B,IACAA,KACAkC,QACAi4B,KAAA,eAGA,OACApB,YACAI,eACAG,aACAO,gBACAE,SACAV,YACAmB,WACAa,aAzLA,SAAAZ,GACA,IAAAa,KACAC,KACA,GAAAd,EAAAz4B,SACA,QAAAjJ,KAAA0hC,EAAAz4B,SAAA,CACA,IAAAkB,EAAAu3B,EAAAz4B,SAAAjJ,GACAmK,EAAAlD,KACAs7B,EAAAp4B,EAAAlD,KAAA,GAIA,GAAAy6B,EAAAx4B,UACA,QAAAlJ,KAAA0hC,EAAAx4B,UAAA,CACA,IAAApH,EAAA4/B,EAAAx4B,UAAAlJ,GACA8B,EAAAmF,KACAu7B,EAAA1gC,EAAAmF,KAAA,GAIAvG,OAAAk9B,KAAA30B,GACAw5B,OAAA,SAAAx7B,GAAmC,OAAAs7B,EAAAt7B,KACnCoC,QAAA+2B,GACA1/B,OAAAk9B,KAAA10B,GACAu5B,OAAA,SAAAx7B,GAAmC,OAAAu7B,EAAAv7B,KACnCoC,QAAAy3B,GACAW,EAAAC,IAiKA34B,SAtaA,WACA,OAAgBE,WAAAC,YAAAC,OAAAC,SAsahBs5B,SApaA,WACA,IAAAxG,KACA,QAAAqF,KAAA9B,EAAAr1B,GACA8xB,EAAAqF,GAAA9B,EAAAr1B,GAAAm3B,GAAAn7B,IAEA,OAAA81B,GAgaAyD,UACAgD,QAzZA,WACA,OAAAv5B,GAyZA0c,WAhaA,WACA,OAAAgC,GAgaA8a,WA9ZA,SAAAC,GACA/a,EAAA+a,GA8ZAC,SAnZA,SAAAC,GACApJ,EAAAoJ,GAmZAliC,MACAwL,MACAorB,OA3YA,SAAAxwB,EAAAiB,GACAmE,EAAApF,EAAAiB,EAAArH,EAAAoG,MA2YA+7B,GAzYA,SAAA/7B,EAAAie,GACA4a,EAAA74B,GACAie,GAAA5c,KAAA4c,IAwYA+d,IAtYA,SAAAh8B,EAAAie,GACA,IAAA+a,EAAAH,EAAA74B,GAEAg5B,EAAA/a,GADAA,EACA+a,EAAA/a,GAAAud,OAAA,SAAApiC,GAA+C,OAAAA,IAAA6kB,QAoY/Cge,MAvDA,SAAAz6B,GACA,IAAA+3B,EAAAC,EAAAh4B,GACAy4B,EAAAV,GACAA,EAAAv2B,OACA81B,KAoDAgB,KAjDA,SAAAt4B,GACA,IAAA+3B,EAAAC,EAAAh4B,GACA+3B,EAAAO,OACAP,EAAAO,cACAP,EAAAO,OA8CAhB,QACA1Y,WAAArhB,KAAiCu5B,EAAA,4EC1c1B,SAAA4D,SAAAnb,KAAAF,SACP,IAAAsb,OAAA,uBACAC,QAAA,KACAC,QAAAC,KAAAH,OAAApb,KAAAqb,SACA,OAAAC,QAAAnjC,KAAA2nB,SAJAloB,oBAAAU,EAAA0B,oBAAA,sBAAAmhC,yDCAgEpjC,OAAAD,QAA4I,WAAiB,gBAAAqK,GAAmB,SAAAjJ,EAAAJ,GAAc,GAAAW,EAAAX,GAAA,OAAAW,EAAAX,GAAAhB,QAA4B,IAAAE,EAAAyB,EAAAX,IAAYd,EAAAc,EAAAb,GAAA,EAAAH,YAAqB,OAAAqK,EAAArJ,GAAAX,KAAAH,EAAAF,QAAAE,IAAAF,QAAAoB,GAAAlB,EAAAC,GAAA,EAAAD,EAAAF,QAA2D,IAAA2B,KAAS,OAAAP,EAAAd,EAAA+J,EAAAjJ,EAAAb,EAAAoB,EAAAP,EAAAZ,EAAA,SAAA6J,EAAA1I,EAAAX,GAAuCI,EAAAT,EAAA0J,EAAA1I,IAAAf,OAAAC,eAAAwJ,EAAA1I,GAAqC+hC,cAAA,EAAA5iC,YAAA,EAAAC,IAAAC,KAAsCI,EAAAO,EAAA,SAAA0I,GAAiB,IAAA1I,EAAA0I,KAAA/I,WAAA,WAAiC,OAAA+I,EAAAs5B,SAAiB,WAAY,OAAAt5B,GAAU,OAAAjJ,EAAAZ,EAAAmB,EAAA,IAAAA,MAAsBP,EAAAT,EAAA,SAAA0J,EAAAjJ,GAAmB,OAAAR,OAAAkB,UAAAC,eAAA1B,KAAAgK,EAAAjJ,IAAiDA,EAAAY,EAAA,GAAAZ,IAAAa,EAAA,IAAvc,EAAyd,SAAAoI,EAAAjJ,EAAAO,GAAkB,aAAa,SAAAX,EAAAqJ,EAAAjJ,GAAgB,OAAAA,IAAA,IAAAiJ,IAAmB,SAAAnK,EAAAmK,GAAc,IAAAjJ,EAAAO,EAAAzB,EAAAmI,EAAAgC,EAAAlJ,MAAAhB,EAAAS,OAAAqB,EAAAoG,EAAAzH,GAAAgU,KAAA5S,KAA8C,OAAAA,EAAA4F,KAAcD,OAAA3F,EAAA6F,KAAA+7B,EAAArc,WAAA3f,KAA+B5F,EAAA+F,MAASJ,OAAA3F,EAAA6F,KAAA+7B,EAAArc,WAAAxf,MAAgC/F,EAAAmF,GAAA,SAAAkD,EAAA1I,GAAoB,OAAAxB,EAAAa,EAAAqJ,EAAA1I,GAAAP,EAAAO,EAAAK,GAAsBA,EAAAsE,IAAA,SAAA+D,GAAmB,OAAAhC,EAAAgC,EAAArI,GAAaA,EAAAmG,UAAA,SAAAkC,GAAyB,OAAAhC,EAAAgC,EAAAhC,GAAArG,GAAgBA,EAAAuF,OAAA,SAAA8C,GAAsB,OAAA1I,EAAA0I,EAAArI,GAAaA,EAAAwF,MAAA,WAAoB,OAAAtH,GAAA,EAAA8B,GAAcA,EAAAsG,MAAA,WAAoB,OAAAnI,GAASkK,EAAA9B,WAAAqM,EAAApM,KAAA6B,GAAArI,EAAAyG,MAAA,SAAA4B,EAAAjJ,EAAAO,GAAgD,IAAAX,EAAAL,EAAA0J,EAAAjJ,EAAAO,GAAeX,EAAA6H,UAAArI,EAAc,IAAAN,EAAAc,EAAA0H,aAAqB,OAAA1H,EAAA0H,eAAwBf,OAAA3F,EAAA6F,KAAA+7B,EAAArc,WAAAxe,cAAuC7I,KAAAmG,SAAArF,EAAA0H,aAAA1H,EAAA0H,aAAAM,OAAA9I,IAAA0U,EAAApM,KAAAxH,GAAAgB,GAAqEA,EAAAiH,SAAA,WAAuB,IAAAoB,EAAA9J,EAAAsjC,QAAgB,OAAAx5B,EAAAlB,SAAAhJ,GAAAS,OAAAgjC,EAAAxc,aAAAxmB,EAA6CuG,GAAAhH,EAAAgB,MAAAkH,EAAAd,OAAA5F,EAAA6F,MAAAtH,IAA8B0U,EAAArL,QAAA,SAAA5H,GAAwB,IAAAzB,EAAAyB,EAAA+G,aAAA/H,EAAAgB,EAAAgH,UAAA3H,EAAAW,EAAAgH,UAAAvH,GAAAjB,EAAAwB,EAAAkH,WAAA3I,KAAAmG,OAAA,IAAAnG,EAAAwJ,OAAA,SAAAW,EAAAjJ,GAA0G,IAAAO,EAAAP,EAAAuG,OAAAW,QAAuB,OAAA3G,IAAAxB,EAAAkK,IAAA,IAAA1I,GAAuB,QAAA0G,KAAcnI,KAAAqJ,QAAA,SAAAnI,EAAAO,GAA2B,GAAA0G,EAAA1G,GAAAP,EAAAyG,KAAAzG,EAAAyG,OAAA+7B,EAAArc,WAAAxe,YAAA,CAAkD,IAAA/H,EAAAJ,OAAAgjC,EAAAtc,UAAA1mB,EAA2BqJ,QAAAtJ,EAAAgH,OAAAvG,EAAAuG,OAAAW,QAAAwB,KAAAnI,IAA2C0I,EAAAhB,KAAArI,EAAAmG,IAAAnG,KAAkB,IAAAT,EAAAK,OAAAgjC,EAAAtc,UAAA1mB,EAA2BqJ,QAAAtJ,EAAAgH,OAAAxH,IAAqBkK,EAAAhB,KAAA9I,EAAA4G,IAAA5G,EAAA8J,EAAAjB,UAAAzI,GAAAC,OAAAgjC,EAAAvc,cAAAzmB,EAAuDuG,GAAAxG,EAAAkJ,MAAAxB,EAAAE,UAAA5G,EAAA4G,UAAA4B,MAAAxI,EAAAwI,MAAAC,UAAAzI,EAAAyI,UAAAzD,MAAAhF,EAAAgF,UAAuF0D,GAAIrI,EAAG,SAAArB,EAAA0J,EAAAjJ,EAAAO,GAAkB,IAAAX,GAAOuH,UAAAnH,GAAa,aAAAiJ,KAAAhE,SAAArF,EAAA0H,aAAA2B,GAAA,iBAAA1I,EAAAX,EAAA2H,UAAAhH,EAAAX,EAAA6H,UAAA+L,EAAA5T,EAA8F,SAAAqH,EAAAgC,GAAc,OAAAA,GAAA,mBAAAA,EAAAlD,IAAA,mBAAAkD,EAAApB,UAAAoB,EAAAzC,KAAAyC,EAAAtC,KAAgFnH,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAkF,IAAA,SAAA+D,GAAoB,OAAAnK,GAAUiB,MAAAkJ,KAAU1I,EAAAnB,EAAAY,EAAA,oBAA2B,OAAAY,IAASL,EAAAnB,EAAAY,EAAA,yBAAiC,OAAA0iC,IAASniC,EAAAnB,EAAAY,EAAA,yBAAiC,OAAA6N,IAAStN,EAAAnB,EAAAY,EAAA,8BAAsC,OAAAmJ,IAAS5I,EAAAnB,EAAAY,EAAA,mBAA2B,OAAA+N,IAAS/N,EAAAwF,SAAAyB,EAAAjH,EAAAyF,iBAAA,SAAAwD,EAAAjJ,GAAgD,QAAAO,KAAA0I,EAAA,CAAgB,IAAArJ,EAAAqJ,EAAA1I,GAAW0G,EAAArH,MAAAmG,GAAAxF,EAAAP,GAAgB,OAAAiJ,GAASjJ,EAAA0F,gBAAA,SAAAuD,GAA+B,IAAAjJ,KAAS,QAAAO,KAAA0I,EAAA,CAAgB,IAAArJ,EAAAqJ,EAAA1I,GAAW0G,EAAArH,IAAAI,EAAAoH,KAAAxH,GAAgB,OAAAI,EAAAsI,OAAA,SAAAW,EAAAjJ,GAA8B,OAAAb,EAAAmK,MAAAL,EAAAjJ,EAAA6H,aAA+B1I,EAAAsjC,UAAa,IAAAtjC,EAAAoB,EAAA,IAAAiiC,EAAAjiC,EAAA,GAAAM,EAAAN,EAAA,IAAAxB,EAAAsyB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAA6E,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,GAASuK,EAAA,SAAApU,EAAA,WAAAwB,EAAA,SAAAqI,EAAAjJ,EAAAO,GAA2C,OAAAzB,EAAAS,EAAA0J,EAAAjJ,EAAAO,KAAmBmiC,EAAA,SAAAz5B,EAAAjJ,EAAAO,GAAmB,OAAAzB,EAAAC,KAAaQ,EAAA0J,EAAAjJ,EAAAO,IAAWwI,OAAA,MAAY8E,EAAA,SAAA5E,EAAAjJ,EAAAO,GAAmB,OAAAzB,EAAAC,KAAaQ,EAAA0J,EAAAjJ,EAAAO,IAAWyI,WAAA,MAAgBG,EAAA,SAAAF,EAAAjJ,EAAAO,GAAmB,OAAAzB,EAAAC,KAAaQ,EAAA0J,EAAAjJ,EAAAO,IAAWwI,OAAA,EAAAC,WAAA,MAAyB+E,EAAA,SAAA9E,EAAAjJ,EAAAO,GAAmB,OAAAzB,EAAAC,KAAaQ,GAAA0J,EAAAzC,KAAAxG,EAAAO,IAAiBgF,OAAA,OAAa,SAAA0D,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAH,EAAAW,EAAA,IAAYP,EAAA2iC,UAAA/iC,EAAA+iC,UAAwB,IAAA7jC,EAAAyB,EAAA,IAAYP,EAAA4iC,MAAA9jC,EAAU,IAAAS,EAAAgB,EAAA,IAAYP,EAAA6iC,OAAAtjC,EAAAsjC,OAAA7iC,EAAA8iC,QAAAvjC,EAAAujC,QAAA9iC,EAAA+iC,MAAAxjC,EAAAwjC,MAAsD,IAAA97B,EAAA,IAAArH,EAAA+iC,WAAuBK,iBAAA,IAAqBhjC,EAAAijC,gBAAAh8B,EAAAg8B,gBAAAjjC,EAAAkjC,OAAAj8B,EAAAi8B,OAAAljC,EAAAmjC,QAAAl8B,EAAAk8B,QAAAnjC,EAAAojC,kBAAAn8B,EAAAm8B,kBAAApjC,EAAAqjC,SAAAp8B,EAAAo8B,SAAArjC,EAAAsjC,UAAAr8B,EAAAq8B,UAAAtjC,EAAAujC,UAAAt8B,EAAAs8B,UAAAvjC,EAAAwjC,OAAAv8B,EAAAu8B,OAAAxjC,EAAAyjC,MAAAx8B,EAAAw8B,MAAAzjC,EAAA0jC,gBAAA,SAAAz6B,GAAwP,IAAAjJ,EAAA,IAAAJ,EAAA+iC,WAAuBK,iBAAA,IAAqB,OAAA/5B,GAAAjJ,EAAAijC,gBAAAh6B,GAAAjJ,IAAkC,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAa,IAAAX,EAAAW,EAAA,IAAYA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAJ,EAAAqH,IAAW1G,EAAAnB,EAAAY,EAAA,eAAuB,OAAAJ,EAAA2N,IAAa,IAAAzO,EAAAyB,EAAA,IAAYA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAlB,EAAAmI,IAAW1G,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,EAAAyO,IAAWhN,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,EAAAK,IAAWoB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,EAAAM,IAAWmB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,EAAAmK,IAAW1I,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,EAAA0U,IAAWjT,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,EAAAqK,IAAa,IAAA5J,EAAAgB,EAAA,IAAYA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAT,EAAA0H,KAAa,SAAAgC,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,sBAA8B,OAAAwT,IAASjT,EAAAnB,EAAAY,EAAA,+BAAuC,OAAAZ,IAASmB,EAAAnB,EAAAY,EAAA,qBAA6B,OAAAY,IAASL,EAAAnB,EAAAY,EAAA,kBAA0B,OAAA0iC,IAASniC,EAAAnB,EAAAY,EAAA,uBAA+B,OAAA6N,IAAStN,EAAAnB,EAAAY,EAAA,sBAA8B,OAAAmJ,IAAS5I,EAAAnB,EAAAY,EAAA,wBAAgC,OAAA+N,IAASxN,EAAAnB,EAAAY,EAAA,0BAAkC,OAAAd,IAASqB,EAAAnB,EAAAY,EAAA,0BAAkC,OAAAuN,IAAShN,EAAAnB,EAAAY,EAAA,mBAA2B,OAAA05B,IAASn5B,EAAAnB,EAAAY,EAAA,+BAAuC,OAAA2jC,IAAW,IAAA/jC,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,GAAA0G,EAAA1G,EAAA,GAAApB,EAAAoB,EAAA,IAAAiiC,EAAAjiC,EAAA,GAAAM,EAAAN,EAAA,IAAAxB,GAAAwB,IAAAM,GAAAwwB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAkH,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAASuK,EAAAhU,OAAAI,EAAAsF,IAAA1F,KAAoB6H,OAAAvI,EAAA8kC,OAAAp9B,KAAA,SAAAyC,EAAAjJ,GAAqC,GAAAA,EAAAyG,OAAAQ,IAAA48B,YAAA,OAAA9kC,KAAuCkK,IAAA1I,MAAQP,EAAA8jC,QAAAC,OAAA/jC,EAAA8jC,QAAAE,QAAAzjC,IAA0C,IAAAA,IAAMnB,EAAAI,OAAAI,EAAAsF,IAAA1F,CAAA,IAAA6H,OAAAmM,EAAAhN,KAAA,SAAAyC,EAAAjJ,GAAkD,OAAAiJ,GAAAzJ,OAAAk9B,KAAA18B,GAAA,KAA4BqH,OAAAvI,EAAA8kC,OAAAp9B,KAAA,SAAAyC,EAAAjJ,GAAqC,GAAAA,EAAAyG,OAAAQ,IAAAg9B,sBAAA,OAAAjkC,EAAA8jC,UAAuDljC,EAAApB,OAAAI,EAAAuF,OAAA3F,EAAAgU,EAAA7M,KAAAvH,EAAAoH,KAAA,SAAAyC,EAAAjJ,GAAkD,OAAAiJ,EAAAjJ,KAAYqH,OAAAvI,EAAA8kC,OAAAp9B,KAAA,SAAAyC,EAAAjJ,GAAqC,IAAAO,EAAAP,EAAAyG,KAAA7G,EAAAI,EAAA8jC,QAAyB,OAAAvjC,GAAU,KAAA0G,IAAAi9B,YAAA,YAAAj7B,EAAA+4B,MAAApiC,GAA4C,KAAAqH,IAAAk9B,aAAA,YAAAl7B,EAAA42B,KAAAjgC,GAA4C,KAAAqH,IAAAm9B,aAAA,YAAAn7B,EAAAkC,IAAAvL,EAAAqJ,EAAApB,WAAAE,SAAAnI,GAAAG,OAA0E,KAAAkH,IAAAo9B,eAAA,YAAAvU,QAAA4Q,IAAA9gC,EAAAqJ,EAAAtJ,IAAAC,OAA6D8iC,EAAAljC,OAAAI,EAAAuF,OAAA3F,EAAAoB,EAAA4F,KAAA,SAAAyC,GAAyC,OAAAA,EAAAw4B,YAAmBp6B,OAAAvI,EAAA8kC,OAAAp9B,IAAA5F,EAAA+F,MAAA,SAAAsC,EAAAjJ,EAAAO,GAA8C,IAA05Eme,EAAA5Q,EAAAw2B,EAAAC,EAAAC,EAAAC,EAAAC,EAA15E9kC,EAAAI,EAAAyG,KAAA3H,EAAAkB,EAAA8jC,QAAAvkC,EAAAgB,EAAAiiC,EAAAv5B,EAAA07B,GAAA9jC,EAAA2hC,KAAA16B,MAAA/I,EAAAyjC,KAAAoC,KAAApxB,EAAAgvB,KAAAj8B,OAAAnH,EAAAyB,KAAAgkC,QAAAjkC,EAAA4hC,KAAAsC,aAA8G,OAAAllC,GAAU,KAAAqH,EAAAsG,EAAAw3B,KAAAC,kBAAA,OAAAzlC,EAAAk/B,SAAkDkG,IAAIG,aAAAhmC,KAAkB,KAAAmI,EAAAsG,EAAAw3B,KAAAE,kBAAA,IAAAvC,EAAAF,KAAA1jC,GAAA+O,EAAA60B,KAAAxe,QAAAwe,EAAAxe,OAAAghB,QAA8E,OAAA3lC,EAAAk/B,SAAkBkG,IAAAjmB,GAAOomB,aAAAhmC,GAAe4f,EAAA5f,IAAOolB,QAAQghB,SAAAr3B,IAAY6Q,KAAM,KAAAzX,EAAAsG,EAAAw3B,KAAAI,aAAA,OAAA5lC,EAAAk/B,SAA6CkG,IAAA72B,KAAQA,EAAAhP,IAAOolB,QAAQghB,SAAA,IAAYp3B,KAAM,KAAA7G,EAAAsG,EAAAw3B,KAAAK,YAAA,GAAAxkC,EAAA,CAAgC,IAAAuI,EAAAq5B,KAAA5hC,GAAc,GAAAuI,KAAA+0B,SAAA,CAAkB,IAAAnwB,EAAA5E,EAAA+0B,SAAAnrB,IAAAjU,EAAAiP,EAAA7O,EAAAiK,EAAA+0B,SAAAtrB,KAAA9T,EAAAgP,EAA+C,OAAAvO,EAAAk/B,QAAAj/B,OAAAL,EAAAC,EAAAI,EAA8BmlC,IAAIU,UAAUnH,UAAUnrB,IAAAhF,EAAA6E,KAAA1T,QAAmB,GAAAiK,EAAA,CAAM,IAAAoE,EAAApE,EAAA+a,QAAA/a,EAAA+a,OAAAohB,KAA8B,GAAA/3B,EAAA,CAAM,IAAAmsB,EAAAnsB,EAAAwF,IAAAjU,EAAAiP,EAAA7O,EAAAqO,EAAAqF,KAAA9T,EAAAgP,EAA6B,OAAAvO,EAAAk/B,QAAAj/B,OAAAL,EAAAC,EAAAI,EAA8BmlC,IAAAL,KAAQA,EAAA1jC,IAAOsjB,QAAQohB,MAAMvyB,IAAA2mB,EAAA9mB,KAAA1T,KAAeolC,QAAS,MAAM,KAAAr9B,EAAAsG,EAAAw3B,KAAAQ,cAAA,IAAA5B,EAAA/iC,GAAA4hC,KAAA5hC,IAAA4hC,EAAA5hC,GAAAsjB,QAAAse,EAAA5hC,GAAAsjB,OAAAohB,KAA4E,GAAA3B,EAAA,OAAApkC,EAAAk/B,QAAAj/B,OAAAL,EAAAC,EAAAI,EAAmCmlC,IAAAJ,KAAQA,EAAA3jC,IAAOsjB,QAAQohB,MAAMhgB,MAAAqe,EAAAre,MAAAxmB,EAAAgP,EAAA0X,OAAAme,EAAAne,OAAA1mB,EAAAiP,KAAwCw2B,MAAO,MAAM,KAAAt9B,EAAAsG,EAAAi4B,KAAAC,aAAA,IAAAj2B,EAAAzQ,KAAA2mC,SAA+C,OAAAnmC,EAAAk/B,SAAkBkG,IAAIC,MAAMc,MAAAlB,KAAUA,EAAA1lC,IAAA0Q,EAAA1Q,GAAA0lC,OAAmB,KAAAv9B,EAAAsG,EAAAo4B,OAAAC,kBAAA,OAAArmC,EAAAk/B,SAAoDkG,IAAIp+B,QAAQs/B,eAAA/mC,EAAAgnC,gBAAA,GAAAC,gBAAA,MAA0D,KAAA9+B,EAAAsG,EAAAo4B,OAAAK,mBAAA,OAAAzmC,EAAAk/B,SAAqDkG,IAAIp+B,QAAQu/B,gBAAAhnC,EAAA+mC,eAAA,GAAAE,gBAAA,MAA0D,KAAA9+B,EAAAsG,EAAAo4B,OAAAM,kBAAA,OAAA1mC,EAAAk/B,SAAoDkG,IAAIp+B,QAAQs/B,eAAA,GAAAC,gBAAA,GAAAC,gBAAA,MAA2D,KAAA9+B,EAAAsG,EAAAo4B,OAAAO,WAAA,IAAAC,EAAA3yB,KAAAqyB,eAAqD,OAAAM,GAAA5mC,EAAA4L,IAAAg7B,EAAArnC,GAAAS,EAAAk/B,SAAgCkG,IAAIp+B,QAAQw/B,gBAAA,MAAsB,KAAA9+B,EAAAsG,EAAAo4B,OAAAS,oBAAA,OAAA7mC,EAAAk/B,SAAsDkG,IAAIp+B,QAAQw/B,eAAAjnC,MAAqB,KAAAmI,EAAAsG,EAAAo4B,OAAAU,cAAA,OAAA9mC,EAAAk/B,SAAgDkG,IAAIp+B,QAAQ+/B,SAAAxnC,MAAe,KAAAmI,EAAAsG,EAAAo4B,OAAAY,UAAA,OAAAhnC,EAAAk/B,SAA4C12B,UAAA08B,KAAcA,EAAA3lC,EAAAiH,IAAAjH,EAAAiB,MAAA0kC,KAAsB,KAAAx9B,EAAAsG,EAAAi5B,MAAAC,cAAA,OAAAlnC,EAAAk/B,SAA+CkG,IAAI78B,OAAO+8B,SAAS6B,SAAAtnC,KAAAsnC,SAAA,GAAA5nC,EAAAgP,EAAA64B,SAAAvnC,KAAAunC,SAAA,GAAA7nC,EAAAiP,OAAiE,KAAA9G,EAAAsG,EAAAi5B,MAAAI,aAAA,OAAArnC,EAAAk/B,SAA8CkG,IAAI78B,OAAO+8B,SAAStuB,MAAAzX,OAAa,KAAAmI,EAAAsG,EAAAi5B,MAAAK,YAAA,OAAA/nC,EAAAwmB,OAAAxmB,EAAA0mB,OAAAjmB,EAAAk/B,SAAkEkG,IAAI78B,OAAO+8B,SAASvf,MAAAxmB,EAAAwmB,MAAAE,OAAA1mB,EAAA0mB,iBAAmC,EAAO,KAAAve,EAAAsG,EAAAi5B,MAAAM,qBAAA,GAAAtzB,KAAAqyB,eAAA,CAA4D,IAAAkB,EAAA99B,EAAAlB,UAAAkB,EAAAlB,SAAAyL,EAAAqyB,gBAAAlnB,EAAAooB,KAAApC,IAAAoC,EAAApC,GAAA78B,OAAAi/B,EAAApC,GAAA78B,MAAAo2B,UAAAp/B,EAAAkjC,MAAA3wB,EAAAxQ,KAAAgkC,SAAAhkC,EAAAgkC,QAAAtuB,OAAA,EAAsI,GAAAoI,EAAA,OAAApf,EAAAk/B,SAAuB12B,UAAA28B,KAAcA,EAAAlxB,EAAAqyB,iBAAsBlB,IAAI78B,OAAOo2B,UAAUpwB,EAAA6Q,EAAA7Q,EAAAhP,EAAAyG,MAAAuI,EAAAuD,EAAAtD,EAAA4Q,EAAA5Q,EAAAjP,EAAAyG,MAAAwI,EAAAsD,MAAuCqzB,SAAyBr9B,OAAAzG,EAAA+F,KAAA7H,EAAAg7B,WAAAtzB,KAAA,SAAAyC,EAAAjJ,EAAAO,GAAkD,OAAAP,EAAAy+B,QAAAj/B,OAAAL,EAAAC,EAAAI,CAAAyJ,MAAiC4E,EAAArO,OAAAI,EAAAuF,OAAA3F,EAAAkjC,EAAAl8B,KAAA,SAAAyC,GAAyC,OAAAA,KAAA07B,IAAA17B,EAAA07B,GAAA78B,QAA2B3B,OAAA5G,EAAAH,GAAA+J,EAAA3J,OAAAI,EAAAuF,OAAA3F,EAAAkjC,EAAAl8B,KAAA,SAAAyC,GAAqD,OAAAA,KAAA07B,IAAA17B,EAAA07B,GAAAC,OAA0Bz+B,OAAA5G,EAAAH,GAAA2O,EAAAvO,OAAAI,EAAAuF,OAAA3F,EAAAkjC,EAAAl8B,KAAA,SAAAyC,GAAqD,OAAAA,KAAA07B,IAAA17B,EAAA07B,GAAAp+B,SAA4BJ,OAAA5G,EAAAH,GAAAF,EAAAM,OAAAI,EAAAuF,OAAA3F,EAAAkjC,EAAAl8B,KAAA,SAAAyC,GAAqD,OAAAA,KAAAlB,WAAqB5B,OAAA3G,OAAAD,EAAAJ,EAAAK,CAAAqB,IAAA0M,EAAA/N,OAAAI,EAAAuF,OAAA3F,EAAAkjC,EAAAl8B,KAAA,SAAAyC,GAAgE,OAAAA,KAAA07B,IAAA17B,EAAA07B,GAAAU,WAA8Bl/B,OAAA5G,EAAAH,GAAAs6B,EAAAl6B,OAAAI,EAAAuF,OAAA3F,EAAAoB,EAAA4F,KAAA,SAAAyC,GAAqD,OAAAA,EAAApB,aAAoB87B,EAAAnkC,OAAAI,EAAAuF,OAAA3F,EAAAk6B,EAAAlzB,KAAAg8B,EAAAvD,eAA6C,SAAAh2B,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAgmB,aAAA,SAAA/c,GAA6B,IAAAjJ,EAAAiJ,EAAAlD,GAAAxF,OAAA,IAAAP,EAAAR,OAAAI,EAAAqH,EAAAzH,GAAAQ,EAAAlB,EAAAmK,EAAAlJ,MAAAR,EAAA0J,EAAAud,KAAAvf,EAAAgC,EAAA9C,OAAAhH,EAAA8J,EAAA7C,MAAAo8B,EAAAv5B,EAAAf,KAAyF,gBAAApJ,GAAAS,IAAAT,EAAA4nB,KAAAC,MAAApnB,KAAyCwG,GAAAxF,EAAAR,MAAAjB,EAAAqH,OAAAc,EAAAb,MAAAjH,EAAA+I,KAAAs6B,IAAsCxiC,EAAAimB,cAAA,SAAAhd,EAAAjJ,GAA+B,IAAAO,EAAA0I,EAAAlD,GAAAkB,OAAA,IAAA1G,EAAAf,OAAAI,EAAAqH,EAAAzH,GAAAe,EAAApB,EAAA8J,EAAAR,MAAA+5B,OAAA,IAAArjC,OAAA0B,EAAAoI,EAAA9B,UAAApI,EAAAkK,EAAA6d,KAAAtT,EAAAvK,EAAAD,UAAA5J,OAAA,IAAAoU,KAAA5S,EAAAqI,EAAAF,MAAA25B,OAAA,IAAA9hC,KAAAiN,EAAA5E,EAAA1D,MAAA4D,OAAA,IAAA0E,KAAAE,EAAA9E,EAAAf,KAAsL,SAAArH,GAAA,MAAA9B,IAAA8B,EAAArB,OAAAV,EAAAmI,EAAAzH,CAAAT,EAAAiB,IAAA,MAAAa,EAAA,MAAAqmB,UAAA,2CAA6G,OAAA/d,IAAAq5B,EAAAv9B,QAAAu9B,EAAAp7B,KAAA7H,EAAAiH,MAAoCT,GAAAkB,EAAAwB,MAAA+5B,EAAAr7B,UAAAtG,EAAAmI,UAAA5J,EAAA2J,MAAA25B,EAAAn9B,MAAA4D,EAAAjB,KAAA6F,IAA6D/N,EAAAkmB,UAAA,SAAAjd,GAAyB,IAAAjJ,EAAAiJ,EAAAlD,GAAAxF,EAAA0I,EAAA1C,OAAA3G,EAAAqJ,EAAAJ,QAAA/J,EAAAmK,EAAAP,KAAAnJ,EAAA0J,EAAAf,KAAoD,SAAA3H,EAAA,MAAA2mB,UAAA,8BAAAlnB,GAA4D,SAAAJ,EAAA,MAAAsnB,UAAA,+BAAAlnB,GAA6D,aAAAA,MAAA,MAAAlB,EAAAc,EAAA,KAAAW,IAAA,KAAAX,EAAA,KAAAd,IAAsDiH,GAAA/F,EAAAuG,OAAAhG,EAAAsI,QAAAjJ,EAAA8I,KAAA5J,EAAAoJ,KAAA3I,IAAuCgB,EAAAnB,EAAAY,EAAA,wBAA+B,OAAAT,IAAW,IAAAK,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,IAAAhB,GAAuBoH,KAAA,OAAAH,IAAA,MAAAmB,YAAA,gBAAiD,SAAAsB,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAJ,IAASW,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,IAAW,IAAAc,GAAOykC,eAAA,sBAAAD,aAAA,oBAAAF,YAAA,mBAAAC,aAAA,oBAAAN,YAAA,mBAAAI,sBAAA,8BAAwNnlC,GAAI6mC,QAAQS,oBAAA,iCAAAF,WAAA,wBAAAK,UAAA,uBAAAP,mBAAA,0BAAAJ,kBAAA,yBAAAK,kBAAA,0BAAAI,cAAA,4BAAsSG,OAAQI,aAAA,yBAAAC,YAAA,wBAAAJ,cAAA,0BAAAK,qBAAA,iCAAuKtB,MAAOC,aAAA,yBAAqCV,MAAOC,kBAAA,6BAAAC,kBAAA,6BAAAE,aAAA,wBAAAC,YAAA,+BAAAG,cAAA,4BAAuN,SAAAt8B,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAT,IAASgB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAiH,IAAS1G,EAAAnB,EAAAY,EAAA,eAAuB,OAAAb,IAASoB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAwiC,IAASjiC,EAAAnB,EAAAY,EAAA,eAAuB,OAAAa,IAASN,EAAAnB,EAAAY,EAAA,eAAuB,OAAAjB,IAASwB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAwT,IAAW,IAAA5T,EAAAW,EAAA,GAAAzB,GAAAyB,IAAAX,GAAAW,EAAA,KAAAhB,EAAA,QAAA0H,EAAA,GAAA9H,EAAA,OAAAqjC,GAAuDwE,aAAA,EAAAC,gBAAAznC,OAAAV,EAAAmI,EAAAzH,CAAA,cAAAq0B,WAAAqT,UAAA,8BAAAC,UAAA,qCAAAC,aAAA,gCAAuMvmC,GAAImmC,aAAA,EAAAE,UAAA,kCAAAE,aAAA,qCAAAD,UAAA,gCAAsJpoC,GAAIsoC,QAAA,EAAAC,UAAA,QAA2B9zB,EAAAhU,OAAAI,EAAA6jC,MAAAjkC,EAAoB0+B,SAAA,QAAAnrB,IAAA,EAAAH,KAAA,EAAA0S,MAAA,EAAAE,OAAA,EAAA+hB,OAAA,IAAAC,SAAAvgC,EAAAwgC,WAAA,aAAAC,WAAA,IAAAC,MAAApoC,EAAAqoC,WAAA,OAAAC,OAA6IC,OAAOF,WAAA,OAAAG,cAAA,YAA2C,SAAA9+B,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,IAAAjJ,EAAAiJ,EAAA8rB,MAAA,KAAmB,OAAOgP,MAAA/jC,EAAAgoC,MAAAC,MAAAjoC,EAAAi1B,KAAA,MAAiCz1B,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAkoC,iBAAA,SAAAj/B,EAAAjJ,QAAmC,IAAAA,MAAA,KAAoB,IAAAO,KAAS,OAAAf,OAAAk9B,KAAAzzB,GAAAk/B,OAAAhgC,QAAA,SAAAvI,GAAiD,IAAAd,EAAAmK,EAAArJ,GAAAL,EAAAT,EAAAiH,GAAAgvB,MAAA/0B,GAAAiH,EAAA1G,EAAApB,EAAAI,EAAA6oC,QAAA5F,KAAgDjjC,EAAA4I,QAAA,WAAqB,IAAAc,EAAA9J,EAAAkpC,QAAgBlpC,EAAA8F,QAAAu9B,EAAAp7B,KAAA6B,GAAAhC,IAAAgC,GAAAhC,EAAAgC,KAAkCq/B,SAAA9F,EAAAvN,KAAAj1B,KAAmBiH,EAAAgC,IAAQs/B,WAAAzpC,OAAgByB,GAAIP,EAAAi/B,aAAA,SAAAh2B,GAA4B,IAAAjJ,KAAQO,KAAK0G,EAAA,SAAA1G,GAAe,IAAAzB,EAAAmK,EAAAlB,SAAAxH,GAAA0G,EAAArH,EAAAW,GAA2BP,EAAAO,GAAAhB,KAAST,GAAIO,KAAA4H,EAAA88B,MAAAyE,UAAAvhC,EAAAghC,MAAAjgC,UAAAxI,OAAAigC,OAAAx2B,EAAAhB,MAAAs5B,OAAA,SAAAt4B,GAAkF,OAAAA,EAAA1C,SAAAzH,EAAAiH,IAAA,MAAAkD,EAAAP,OAAqCqa,IAAA,SAAA9Z,GAAkB,OAAAA,EAAAJ,aAAsB,QAAA1J,KAAA8J,EAAAlB,SAAAd,EAAA9H,GAA6B,IAAAqjC,EAAA,SAAAxiC,GAAkB,IAAAiH,EAAAgC,EAAAjB,UAAAhI,GAAAb,EAAAS,EAAAI,EAAA+0B,MAAA,MAAAsT,SAAA7F,EAAAv7B,EAAAwB,MAAAkqB,QAAA7zB,EAAAqnB,WAAAxe,aAAA9G,KAAA9B,EAAAS,OAAAigC,OAAAx2B,EAAAhB,MAAAwgC,KAAA,SAAAx/B,GAA0I,OAAAA,EAAAJ,UAAA7I,GAAA,MAAAiJ,EAAAP,OAAmC8K,EAAAzU,KAAAwH,OAAgBi8B,GAAA,GAAAhvB,IAAA3S,EAAA2hC,IAAgBkG,IAAAl1B,EAAA/M,KAAA3H,EAAAqnB,WAAAxe,cAAoCpH,EAAAP,GAAAT,KAAW0H,GAAI5H,KAAAF,EAAA4kC,MAAAyE,UAAArpC,EAAA8oC,MAAAU,SAAAnG,GAAA,EAAAoG,OAAAp1B,EAAAq1B,OAAArpC,OAAAigC,OAAAx2B,EAAAhB,MAAAs5B,OAAA,SAAAt4B,GAAsG,OAAAA,EAAAJ,UAAA7I,GAAA,MAAAiJ,EAAAP,OAAmCJ,OAAA,SAAAW,EAAAjJ,GAAuB,OAAAiJ,EAAAjJ,EAAA0I,OAAkBggC,IAAA1oC,EAAAuG,OAAAE,KAAAQ,EAAAwB,MAAAzI,EAAA0I,OAAkCO,GAAGpI,MAAO,QAAAA,KAAAoI,EAAAjB,UAAAw6B,EAAA3hC,GAA8B,OAAOkH,SAAA/H,EAAAgI,UAAAzH,IAAwBP,EAAA8oC,gBAAA,SAAA7/B,GAA+B,OAAAA,EAAA5J,KAAA4J,EAAAu/B,UAAA,MAAAv/B,EAAA5J,KAAA4J,EAAAlD,IAAA,sBAAmE,IAAAjH,EAAAyB,EAAA,GAAAhB,EAAA8xB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAA6D,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAAU,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,EAAAjJ,GAAgB,GAAAiJ,IAAAjJ,EAAA,SAAkB,IAAAA,EAAA,SAAe,GAAAiJ,EAAAhE,SAAAjF,EAAAiF,OAAA,SAAgC,QAAA1E,EAAA,EAAYA,EAAA0I,EAAAhE,OAAW1E,IAAA,GAAA0I,EAAA1I,KAAAP,EAAAO,GAAA,SAA4B,SAASA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAlB,IAASyB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAT,IAASS,EAAAiH,EAAArH,EAAAI,EAAAuN,EAAA,SAAAtE,EAAAjJ,GAA0B,GAAAiJ,IAAAjJ,EAAA,SAAkB,IAAAA,EAAA,SAAe,IAAAO,EAAAf,OAAAk9B,KAAAzzB,GAAqB,IAAArJ,EAAAW,EAAAf,OAAAk9B,KAAA18B,IAAA,SAAiC,QAAAlB,EAAA,EAAAS,EAAAgB,EAAgBzB,EAAAS,EAAA0F,OAAWnG,IAAA,CAAK,IAAAmI,EAAA1H,EAAAT,GAAW,GAAAmK,EAAAhC,KAAAjH,EAAAiH,GAAA,SAAwB,UAAU,IAAAnI,EAAA,SAAAmK,GAAkB,gBAAAjJ,EAAAO,GAAqB,OAAA0I,EAAAjJ,EAAAO,KAAehB,EAAA,SAAA0J,EAAAjJ,GAAiB,OAAAiJ,IAAAjJ,IAAc,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,4BAAoC,OAAAb,IAASoB,EAAAnB,EAAAY,EAAA,6BAAqC,OAAAwiC,IAASjiC,EAAAnB,EAAAY,EAAA,0BAAkC,OAAAa,IAASN,EAAAnB,EAAAY,EAAA,2BAAmC,OAAAjB,IAASwB,EAAAnB,EAAAY,EAAA,wBAAgC,OAAAwT,IAASjT,EAAAnB,EAAAY,EAAA,4BAAoC,OAAAZ,IAASmB,EAAAnB,EAAAY,EAAA,yBAAiC,OAAAY,IAAW,IAAAhB,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,GAAAhB,EAAAgB,EAAA,GAAA0G,EAAA1G,EAAA,IAAApB,EAAAK,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAAwpC,WAAAviC,KAAA,SAAAyC,GAAmF,OAAAA,EAAA48B,iBAAwB1/B,OAAArH,EAAAM,GAAAojC,EAAAhjC,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAAwpC,WAAAviC,KAAA,SAAAyC,GAAgE,OAAAA,EAAA68B,kBAAyB3/B,OAAArH,EAAAM,GAAAyB,EAAArB,OAAAI,EAAAuF,OAAA3F,EAAAL,EAAAqH,IAAAjH,EAAAypC,kBAAAriC,MAAA,SAAAsC,EAAAjJ,GAAgF,OAAAA,EAAA+H,SAAAkB,KAAuBlD,GAAAkD,KAAMlK,EAAAS,OAAAI,EAAAuF,OAAA3F,EAAAgjC,EAAAh8B,IAAAjH,EAAAypC,kBAAAriC,MAAA,SAAAsC,EAAAjJ,GAAoE,OAAAA,EAAAgI,UAAAiB,KAAwBlD,GAAAkD,KAAMuK,EAAAhU,OAAAI,EAAAsF,IAAA1F,EAAmBuG,GAAA,KAAMsB,OAAAtI,EAAAyH,IAAA3F,EAAA2F,KAAA,SAAAyC,EAAAjJ,EAAAO,GAAsC,OAAAP,EAAA+F,GAAA/F,EAAAO,IAAgBnB,EAAAI,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAAwpC,WAAAviC,KAAA,SAAAyC,GAAoD,OAAAA,EAAA88B,iBAAwB5/B,OAAArH,EAAAM,GAAAwB,EAAApB,OAAAI,EAAAwF,YAAA5F,EAAAD,EAAAykC,QAAAr9B,KAAAxH,EAAAqH,IAAAS,EAAAgiC,WAAAziC,IAAApH,EAAAoH,KAAA,SAAAyC,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAwG,GAAAyB,EAAA,CAAM,IAAAhB,EAAAS,EAAAL,IAAAY,GAAe,GAAA0I,OAAA,IAAA1J,EAAA,KAAAA,GAAAK,EAAA2G,QAAAzH,EAAA,OAAAkB,EAAA8hC,GAAAvhC,EAAA0I,GAAA,WAAgE,OAAAjJ,EAAA+hC,IAAAxhC,EAAA0I,SAAmBA,EAAA,SAAe,SAAAA,EAAAjJ,EAAAO,GAAiB,cAAa,SAAA0I,GAAa,SAAA1I,EAAA0I,GAAc,OAAAA,EAAAigC,QAAAtoC,EAAAmN,GAAAm7B,QAAAxG,EAAA,QAAwC,SAAA9iC,EAAAqJ,GAAc,QAAAjJ,EAAA,KAAAO,EAAA0I,EAAAhE,OAA0B1E,KAAIP,EAAA,GAAAA,EAAAiJ,EAAAkgC,WAAA5oC,GAAwB,OAAAP,IAAA,GAAA6zB,SAAA,IAA2B,SAAA/0B,EAAAmK,EAAAjJ,GAAgB,uBAAAA,GAAA,IAAAA,GAAAuN,EAAAtE,KAAA,IAAAjJ,EAAAiJ,EAAA,IAAAjJ,EAAA,KAA2D,SAAAT,EAAA0J,GAAc,OAAAA,EAAAk/B,KAAA,SAAAl/B,EAAAjJ,GAA4B,OAAAiJ,EAAA,GAAAjJ,EAAA,UAAwB,SAAAiH,EAAAgC,EAAArJ,GAAgB,QAAAqH,KAAA9H,KAAAqjC,GAAA,EAAA3hC,EAAA,EAAA9B,EAAAS,OAAAk9B,KAAAzzB,GAA4CpI,EAAA9B,EAAAkG,OAAWpE,IAAA,CAAK,IAAA2S,EAAAzU,EAAA8B,GAAAzB,EAAA6J,EAAAuK,GAAkB,OAAApU,QAAA,IAAAA,IAAAoU,IAAAxT,EAAAopC,UAAA5G,GAAA,mBAAApjC,GAAAsK,MAAAga,QAAAtkB,GAAA6H,EAAAG,MAAA7G,EAAAiT,EAAAgf,QAAApzB,IAAAD,EAAAiI,MAAAoM,EAAAgf,OAAApzB,KAA+H,OAAOiqC,YAAA,SAAApgC,GAAwB,OAAAA,EAAA8Z,IAAA,SAAA9Z,GAAyB,IAAAjJ,EAAAiJ,EAAA,GAAA1I,EAAA0I,EAAA,GAAkB,OAAAS,MAAAga,QAAAnjB,KAAAwiB,IAAA,SAAA9Z,GAA0C,OAAAnK,EAAAkB,EAAAiJ,KAAcgsB,KAAA,KAASn2B,EAAAkB,EAAAO,KAAU00B,KAAA,KAA9I,CAA0J11B,EAAA0H,IAAAqiC,aAAA1pC,EAAAT,EAAAI,EAAAJ,GAAAoqC,SAAA/G,GAAyC,SAAArjC,EAAA8J,EAAAjJ,GAAgB,OAAAiJ,EAAA0pB,QAAA,QAAA1pB,EAAAigC,QAAAr7B,EAAA7N,KAAA,IAAAiJ,EAAgD,SAAAu5B,EAAAv5B,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAsB,IAAAS,EAAA0H,EAAA1G,IAAAP,GAAAa,EAAAtB,EAAA8pC,YAAAtqC,EAAAQ,EAAA+pC,aAAA91B,EAAAjU,EAAAgqC,SAAA3oC,EAAAC,EAAiE,QAAAb,EAAAmpC,WAAA,IAAyB,IAAAzG,EAAAz5B,EAAAkN,IAAA,IAAAmuB,EAAAtkC,EAAAlB,OAAA,EAAA+B,EAAAoI,EAAAugC,OAAwC3oC,GAAA/B,IAASyO,EAAAm1B,EAAAvsB,IAAA,IAAArI,EAAAjN,EAAA6hC,EAAA8G,KAAAh2B,EAAA,OAAApU,GAAAy0B,SAAA,aAAyDj0B,EAAAwH,MAAAtI,EAAAyO,KAAc,QAAAM,EAAA,EAAA1E,EAAApK,EAAgB8O,EAAA1E,EAAAlE,OAAW4I,IAAA,CAAK,IAAAE,EAAA5E,EAAA0E,GAAWjN,IAAAulC,EAAAp4B,EAAA,IAAAy0B,EAAAE,EAAAyD,EAAAY,EAAAh5B,EAAA,GAAAnO,EAAAd,QAA+B,CAAK,IAAAI,EAAAJ,EAAAK,EAAAa,EAAAlB,GAAAkB,EAAiB,GAAAa,EAAA,CAAM,IAAA0M,EAAAtE,EAAAkN,IAAA,IAAArI,EAAAjN,EAAAoI,EAAAugC,KAAAh2B,EAAA,OAAApU,GAAAy0B,SAAA,aAA6Dj0B,EAAAwH,MAAAlI,EAAAqO,IAAc,QAAAmsB,EAAA,EAAAiK,EAAA5kC,EAAgB26B,EAAAiK,EAAA1+B,OAAWy0B,IAAA,CAAK,IAAAlqB,EAAAm0B,EAAAjK,GAAAyM,EAAA32B,EAAA,GAAAu3B,EAAAv3B,EAAA,GAAyB5O,GAAAulC,EAAA3D,EAAAv5B,EAAAk9B,EAAAY,EAAAnnC,EAAAV,IAAmB,OAAA0B,EAAS,SAAAC,EAAAoI,EAAA1I,EAAAX,EAAAd,EAAAS,GAAsB,QAAA0H,EAAA,IAAAoK,EAAApI,EAAAugC,MAAA3oC,KAAA9B,EAAAyjC,EAAAv7B,EAAA1G,EAAAX,EAAAiB,GAAA2S,EAAA,IAAAvM,EAAAuiC,KAAAzqC,GAAAK,EAAAG,IAAA,IAAAiU,IAAA5S,EAAA,EAAA8hC,EAAA7hC,EAAgFD,EAAA8hC,EAAAz9B,OAAWrE,IAAA,CAAK,IAAAiN,EAAA60B,EAAA9hC,GAAAuI,EAAA0E,EAAA,GAAAE,EAAAF,EAAA,GAAA3O,EAAAJ,EAAAK,EAAAgK,EAAA,IAAAnJ,EAAAypC,OAAArqC,IAAA+J,EAAoD4E,EAAAoI,IAAA,IAAAuI,EAAAxf,EAAA6O,EAAAy7B,UAAA,EAAAzqC,IAAgC,OAAO2qC,MAAAziC,EAAAoB,IAAAtJ,EAAAgH,GAAA3G,GAAoB,SAAAL,EAAAkK,GAAc,QAAAjJ,EAAA,GAAAO,EAAA,EAAiBA,EAAA0I,EAAAhE,OAAW1E,IAAAP,GAAAiJ,EAAA1I,GAAY,OAAAP,EAAS,IAAAwT,EAAA6d,WAAAsY,WAAA,WAAuC,IAAA1gC,EAAAzJ,OAAAoqC,iBAA8BC,wBAAangC,OAAA,SAAAT,EAAAjJ,GAAgCiJ,EAAA4gC,UAAA7pC,IAAc,SAAAiJ,EAAAjJ,GAAgB,QAAAO,KAAAP,IAAAW,eAAAJ,KAAA0I,EAAA1I,GAAAP,EAAAO,KAAiD,gBAAAP,EAAAO,GAAqB,SAAAX,IAAayxB,KAAAyY,YAAA9pC,EAAmBiJ,EAAAjJ,EAAAO,GAAAP,EAAAU,UAAA,OAAAH,EAAAf,OAAAY,OAAAG,IAAAX,EAAAc,UAAAH,EAAAG,UAAA,IAAAd,IAAtP,GAAuUJ,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAX,EAAA,EAAQY,EAAAopC,UAAA,0BAAsC,QAAAxoC,EAAA,SAAA8hC,EAAA,OAAA70B,EAAA,KAAA1E,EAAA,sCAAkE4E,EAAA,SAAA9E,GAAuB,UAAAA,EAAA8gC,eAA0B7qC,GAAA,0VAAAqO,EAAA/N,OAAAY,OAAA,MAAAs5B,EAAA,EAAAiK,GAAA,oCAA+ZjK,EAAAiK,EAAA1+B,OAAWy0B,IAAA,QAAAlqB,EAAAm0B,EAAAjK,GAAAyM,EAAA,EAAAY,EAAA7nC,EAA2BinC,EAAAY,EAAA9hC,OAAWkhC,IAAK54B,EAAAiC,EAAAu3B,EAAAZ,KAAA,EAAanmC,EAAAypC,OAAA,SAAAxgC,GAAqB,OAAAA,EAAAigC,QAAA//B,EAAA,SAA2BnJ,EAAAgqC,UAAAzpC,EAAAP,EAAAiqC,WAAArqC,EAA8B,IAAA+e,GAAOxI,IAAA,aAAgB+zB,OAAA,aAAoBC,OAAA,cAAqB94B,EAAA,WAAc,SAAApI,IAAAjJ,QAAgB,IAAAiJ,MAAArJ,QAAA,IAAAI,MAAA2e,GAAA0S,KAAAmY,KAAAvgC,EAAAooB,KAAA+Y,QAAApqC,EAAAqxB,KAAAgZ,SAAAhZ,KAAAiZ,SAAA,EAAAjZ,KAAAkZ,SAAAlZ,KAAAmZ,UAAAhrC,OAAAY,OAAA,MAAAixB,KAAAoZ,UAAAjrC,OAAAY,OAAA,MAAiL,OAAA6I,EAAAvI,UAAAyV,IAAA,SAAAnW,GAAmC,IAAAO,EAAA8wB,KAAAoZ,UAAAzqC,EAAA+F,KAAA,EAAAnG,EAAAyxB,KAAAmZ,UAAAxqC,EAAA+F,KAAA/F,EAAAgK,QAAgE,GAAAqnB,KAAAoZ,UAAAzqC,EAAA+F,IAAAxF,EAAA,MAAAA,EAAA8wB,KAAAmZ,UAAA5qC,EAAAmG,IAAAnG,EAAAyxB,KAAAkZ,MAAAnjC,KAAAxH,EAAAmG,IAAAsrB,KAAAgZ,MAAAjjC,KAAAxH,EAAA0jC,aAAAjS,KAAAiZ,WAAAjZ,KAAA+Y,QAAAj0B,IAAAvW,EAAAyxB,KAAAkZ,MAAAtlC,OAAA,OAAsK,CAAK,GAAArF,EAAA8qC,kBAAA1qC,EAAA0qC,gBAAA,UAAAxjB,UAAA,mBAAAlnB,EAAAsjC,YAAA,QAAA1jC,EAAA0jC,aAAqH,IAAAxkC,EAAAuyB,KAAAkZ,MAAA5X,QAAA3yB,EAAA+F,IAAAxG,EAAA8xB,KAAAkZ,MAAAtlC,OAAA,EAAAgC,EAAAoqB,KAAAiZ,SAAqE,GAAAxrC,IAAAS,IAAA8xB,KAAAkZ,MAAAI,OAAA7rC,EAAA,GAAAuyB,KAAAkZ,MAAAnjC,KAAApH,EAAA+F,IAAAsrB,KAAAiZ,YAAA1qC,aAAAqJ,GAAAjJ,aAAAiJ,EAAA,CAAyG,IAAA9J,EAAAS,EAAA0qC,SAAiB1qC,EAAA0J,MAAAtJ,GAAAJ,EAAA0qC,WAAAnrC,GAAAkyB,KAAAiZ,WAA2CjZ,KAAAiZ,WAAArjC,IAAAnI,IAAAS,EAAA8xB,KAAAgZ,MAAAM,OAAA7rC,EAAA,EAAAc,EAAA0jC,cAAAjS,KAAAgZ,MAAAM,OAAA7rC,EAAA,GAAAuyB,KAAAgZ,MAAAM,OAAAprC,EAAA,EAAAK,EAAA0jC,cAAAjS,KAAA+Y,QAAAF,OAAAtqC,EAAAd,EAAAS,IAAyJ,OAAAK,GAASqJ,EAAAvI,UAAAypC,OAAA,SAAAnqC,GAAgC,IAAAO,EAAA8wB,KAAAoZ,UAAAzqC,EAAA+F,IAA2B,GAAAxF,EAAA,GAAQ8wB,KAAAoZ,UAAAzqC,EAAA+F,IAAAxF,EAAA,EAAyB,IAAAX,EAAAyxB,KAAAmZ,UAAAxqC,EAAA+F,IAAAjH,EAAAuyB,KAAAkZ,MAAA5X,QAAA/yB,EAAAmG,IAAsD,OAAAxF,SAAA8wB,KAAAoZ,UAAAzqC,EAAA+F,WAAAsrB,KAAAmZ,UAAAxqC,EAAA+F,IAAAsrB,KAAAkZ,MAAAI,OAAA7rC,EAAA,GAAAuyB,KAAAgZ,MAAAM,OAAA7rC,EAAA,GAAAuyB,KAAAiZ,WAAAjZ,KAAA+Y,QAAAD,OAAAvqC,EAAAd,QAAwJ,GAAAc,aAAAqJ,GAAAjJ,aAAAiJ,EAAA,CAAwC,IAAA1J,EAAAK,EAAA0qC,SAAiB1qC,EAAAgrC,QAAA5qC,GAAAJ,EAAA0qC,WAAA/qC,IAAA8xB,KAAAgZ,MAAAM,OAAA7rC,EAAA,EAAAc,EAAA0jC,aAAAjS,KAAAiZ,WAAAjZ,KAAA+Y,QAAAF,OAAAtqC,EAAAd,SAAiHmK,EAAAvI,UAAA4I,MAAA,SAAAL,GAA+B,QAAAjJ,EAAA,EAAAO,EAAA0I,EAAAshC,MAAsBvqC,EAAAO,EAAA0E,OAAWjF,IAAA,CAAK,IAAAJ,EAAAW,EAAAP,GAAWqxB,KAAAlb,IAAAlN,EAAAuhC,UAAA5qC,IAAyB,OAAAyxB,MAAYpoB,EAAAvI,UAAAkqC,QAAA,SAAA3hC,GAAiC,QAAAjJ,EAAA,EAAAO,EAAA0I,EAAAshC,MAAsBvqC,EAAAO,EAAA0E,OAAWjF,IAAA,CAAK,IAAAJ,EAAAW,EAAAP,GAAWqxB,KAAA8Y,OAAAlhC,EAAAuhC,UAAA5qC,IAA4B,OAAAyxB,MAAYpoB,EAAAvI,UAAAsJ,MAAA,WAA8B,WAAAf,EAAAooB,KAAAmY,MAAAlgC,MAAA+nB,OAAoCpoB,EAAnuD,GAAyuDjJ,EAAA6qC,MAAAx5B,EAAU,IAAAqN,EAAA,WAAiB,SAAAzV,IAAAjJ,EAAAO,EAAAX,QAAoB,IAAAW,MAAA,IAAAP,EAAAiJ,SAAA,IAAArJ,MAAA,IAAAyxB,KAAAyZ,SAAA7hC,EAAAooB,KAAAmY,KAAAxpC,EAAAqxB,KAAAtrB,GAAAxF,EAAA8wB,KAAAhpB,IAAAzI,EAA6F,OAAAqJ,EAAAvI,UAAA4iC,UAAA,WAAwC,OAAAjS,KAAAyZ,UAAqB7hC,EAAAvI,UAAAgqC,cAAA,WAAsC,OAAArZ,KAAAhpB,IAAA,IAAAgpB,KAAAyZ,UAAkC7hC,EAAAvI,UAAAsJ,MAAA,WAA8B,WAAAf,EAAAooB,KAAAyZ,SAAAzZ,KAAAmY,KAAAnY,KAAAtrB,GAAAsrB,KAAAhpB,MAAuDY,EAA5V,GAAkWjJ,EAAA+qC,SAAArsB,EAAa,IAAA5Q,EAAA,SAAA7E,GAAkB,SAAAjJ,IAAAO,EAAAX,QAAkB,IAAAA,MAAA,IAAAW,EAAAP,IAAyB,IAAAlB,EAAAmK,EAAAhK,KAAAoyB,KAAA9wB,IAAA8wB,KAA2B,OAAAvyB,EAAA2kC,MAAAzjC,EAAAlB,EAAA0qC,KAAAjpC,EAAAzB,EAAAiH,GAAAnG,EAAAd,EAAmC,OAAA0U,EAAAxT,EAAAiJ,GAAAjJ,EAAAU,UAAA4iC,UAAA,WAA+C,OAAAjS,KAAAgZ,MAAApV,KAAA,SAA8B5D,KAAAoS,MAAA,KAAiBzjC,EAAAU,UAAAgqC,cAAA,WAAsC,OAAArZ,KAAAoS,OAAkBzjC,EAAAU,UAAAsJ,MAAA,WAA8B,WAAAhK,EAAAqxB,KAAAoS,MAAApS,KAAAmY,KAAAnY,KAAAtrB,IAAAuD,MAAA+nB,OAAuDrxB,EAAtW,CAAyWqR,GAAIrR,EAAAgrC,MAAAl9B,EAAU,IAAAw2B,EAAA,SAAAr7B,GAAkB,SAAAjJ,IAAAO,EAAAX,EAAAd,EAAAS,QAAsB,IAAAgB,MAAA,aAAAzB,MAAA,IAAAc,EAAAI,EAAA,IAAAO,SAAA,IAAAhB,MAAA,IAAqE,IAAA0H,EAAAgC,EAAAhK,KAAAoyB,KAAAzxB,IAAAyxB,KAA2B,OAAApqB,EAAAgkC,KAAAjrC,EAAAiH,EAAAw8B,MAAAljC,EAAA0G,EAAAuiC,KAAA5pC,EAAAqH,EAAAlB,GAAAjH,EAAAmI,EAAAoB,IAAA9I,EAAA0H,EAAoD,OAAAuM,EAAAxT,EAAAiJ,GAAAjJ,EAAAU,UAAA4iC,UAAA,WAA+C,OAAAjS,KAAA4Z,KAAA,IAAmB5Z,KAAAoS,MAAA1kC,EAAAsyB,KAAAgZ,OAAA,KAA+BrqC,EAAAU,UAAAgqC,cAAA,WAAsC,OAAArZ,KAAAhpB,IAAA,IAAAgpB,KAAA4Z,KAAA,IAAA5Z,KAAAoS,OAA6CzjC,EAAAU,UAAAsJ,MAAA,WAA8B,WAAAhK,EAAAqxB,KAAA4Z,KAAA5Z,KAAAoS,MAAApS,KAAAmY,KAAAnY,KAAAtrB,GAAAsrB,KAAAhpB,KAAAiB,MAAA+nB,OAA0ErxB,EAAxd,CAA2dqR,GAAIrR,EAAAkrC,KAAA5G,EAAS,IAAAC,EAAA,SAAAhkC,GAAkB,SAAAzB,EAAAkB,EAAAlB,EAAAS,EAAA0H,QAAoB,IAAAjH,MAAAJ,QAAA,IAAAd,WAAA,IAAAmK,IAAA,YAAA1J,MAAA,OAAAH,GAAAy0B,SAAA,KAAwF,IAAA10B,EAAAoB,EAAAtB,KAAAoyB,KAAArxB,EAAAiH,IAAAoqB,KAA6B,OAAAlyB,EAAAqqC,KAAAxpC,EAAAb,EAAAs5B,MAAA35B,EAAAK,EAAA4G,GAAAxG,EAAAJ,EAAmC,OAAAqU,EAAA1U,EAAAyB,GAAAzB,EAAA4B,UAAAyqC,cAAA,SAAAliC,EAAAjJ,GAAsD,IAAAO,EAAAM,EAAAwwB,KAAA,IAAApoB,GAAA,EAAAooB,KAAAoH,MAAAz4B,OAAA,GAAAJ,EAAAW,EAAAmpC,MAAA5qC,EAAAyB,EAAAwF,GAA4D,OAAAsrB,KAAA/nB,MAAA1J,GAAAd,GAAuBA,EAAA4B,UAAA0qC,kBAAA,SAAAniC,EAAAjJ,GAA6C,OAAAqxB,KAAAga,iBAAA,aAAApiC,EAAAjJ,IAA+ClB,EAAA4B,UAAA2qC,iBAAA,SAAApiC,EAAA1I,EAAAX,GAA8C,IAAAd,EAAA+B,EAAAwwB,KAAA,GAAA9wB,GAAA,EAAA8wB,KAAAoH,MAAA74B,OAAA,GAAAL,EAAAT,EAAA4qC,MAAAziC,EAAAnI,EAAAuJ,IAAAlJ,EAAAL,EAAAiH,GAAAy8B,EAAA,IAAA8B,EAAAr7B,EAAA,IAAAjJ,EAAAypC,OAAAtqC,QAAA,EAAAkyB,KAAAmY,UAAA,EAAAviC,GAAwH,OAAAoqB,KAAAlb,IAAAqsB,EAAAl5B,MAAA/J,IAAAJ,GAA8BL,EAAA4B,UAAA4qC,aAAA,SAAAriC,EAAAjJ,GAAwCqxB,KAAA/nB,MAAAzI,EAAAwwB,KAAApoB,EAAAjJ,GAAA,GAAA0pC,QAAiC5qC,EAAA4B,UAAA6qC,YAAA,SAAAtiC,GAAqCooB,KAAA/nB,MAAAzI,EAAAwwB,KAAA,GAAApoB,GAAA,GAAAygC,QAAkC5qC,EAAA4B,UAAA4iC,UAAA,WAAkC,OAAAvkC,EAAAsyB,KAAAgZ,QAAqBvrC,EAAA4B,UAAAgqC,cAAA,WAAsC,OAAArZ,KAAAtrB,IAAejH,EAAA4B,UAAAsJ,MAAA,WAA8B,WAAAlL,EAAAuyB,KAAAmY,KAAAnY,KAAAoH,MAAApH,KAAAtrB,GAAAsrB,KAAA+Y,SAAA9gC,MAAA+nB,OAAoEvyB,EAAr8B,CAAw8BuS,GAAIrR,EAAAwrC,UAAAjH,EAAAvkC,EAAAI,OAAA,SAAA6I,EAAAjJ,EAAAO,GAAuC,WAAAgkC,EAAAt7B,EAAAjJ,OAAA,EAAAO,MAA4BtB,KAAAe,EAAAO,EAAA,MAAgB,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAiH,IAAS1G,EAAAnB,EAAAY,EAAA,eAAuB,OAAAb,IAASoB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAwiC,IAAW,IAAA5iC,EAAAW,EAAA,GAAAzB,GAAAyB,IAAAX,GAAAW,EAAA,IAAAhB,GAAAC,OAAAI,EAAA6jC,MAAAjkC,EAA+CisC,OAAA,QAAAC,cAAA,MAAAC,QAAA,eAAA9D,OAAiE+D,WAAWH,OAAA,EAAAC,cAAA,cAAqCD,OAAA,QAAApE,QAAA,eAAAwE,OAAA,EAAAlE,MAAA7oC,EAAAmI,EAAAugC,SAAA,QAAAkE,cAAA,SAAAI,OAAA,UAAAC,QAAA,OAAAlE,OAAwImE,WAAWN,cAAA,UAAuBO,cAAehF,gBAAA,eAA8BiF,UAAWT,OAAA,EAAAjE,SAAA,QAAAH,QAAA,UAAAH,UAAA,gCAAoFjgC,EAAAzH,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAK,EAAAI,GAAAJ,EAAAK,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAK,EAAAI,GAAoD8nC,QAAA,UAAgB7E,EAAAhjC,OAAAI,EAAA6jC,MAAAjkC,EAAqBmsC,QAAA,eAAAF,OAAA,QAAApE,QAAA,EAAAwE,OAAA,EAAAM,WAAA,cAAAjF,UAAA,OAAAM,SAAA,WAAsH,SAAAv+B,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,EAAAjJ,GAAgBiJ,EAAA5B,OAAAjI,EAAAuH,KAAA/F,EAAA4F,KAAA,SAAAyC,EAAA1I,EAAAX,GAAuC,GAAAW,IAAAP,EAAA,OAAAb,KAAoB8J,GAAIs+B,OAAA3nC,MAAaJ,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,4BAAoC,OAAAwiC,IAASjiC,EAAAnB,EAAAY,EAAA,6BAAqC,OAAAa,IAASN,EAAAnB,EAAAY,EAAA,8BAAsC,OAAAjB,IAASwB,EAAAnB,EAAAY,EAAA,wBAAgC,OAAAwT,IAASjT,EAAAnB,EAAAY,EAAA,0BAAkC,OAAAZ,IAASmB,EAAAnB,EAAAY,EAAA,oBAA4B,OAAAY,IAASL,EAAAnB,EAAAY,EAAA,8BAAsC,OAAA0iC,IAASniC,EAAAnB,EAAAY,EAAA,wBAAgC,OAAA6N,IAAStN,EAAAnB,EAAAY,EAAA,yBAAiC,OAAAmJ,IAAS5I,EAAAnB,EAAAY,EAAA,0BAAkC,OAAA+N,IAAW,IAAAjP,EAAAyB,EAAA,GAAAhB,EAAAgB,EAAA,GAAA0G,EAAA1G,EAAA,GAAApB,EAAAkyB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAA2E,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,GAASu5B,EAAAhjC,OAAAV,EAAAqG,OAAA3F,EAAAyH,EAAAmlC,SAAA5lC,KAAA,SAAAyC,GAAiD,OAAAA,EAAAib,SAAgB/d,OAAA5G,EAAAH,GAAAyB,EAAArB,OAAAV,EAAAqG,OAAA3F,EAAAyH,EAAAolC,UAAA7lC,KAAA,SAAAyC,GAA+D,OAAAA,EAAAib,SAAgB/d,OAAA5G,EAAAH,GAAAL,EAAAS,OAAAV,EAAAqG,OAAA3F,EAAAyH,EAAA8hC,WAAAviC,KAAA,SAAAyC,GAAgE,OAAAA,EAAAib,SAAgB/d,OAAA5G,EAAAH,GAAAoU,EAAAhU,OAAAV,EAAAoG,IAAA1F,EAA+BolC,MAAA,EAAA98B,OAAA,EAAAvB,QAAA,IAA2Bc,OAAAxG,EAAA2F,KAAA,SAAAyC,EAAAjJ,GAA8B,OAAAb,KAAW8J,GAAInB,QAAA9H,EAAAklC,YAAoB79B,OAAAtI,EAAAyH,KAAA,SAAAyC,EAAAjJ,GAA8B,OAAAb,KAAW8J,GAAI1C,SAAAvG,EAAAklC,YAAqB79B,OAAAm7B,EAAAh8B,KAAA,SAAAyC,EAAAjJ,GAA8B,OAAAb,KAAW8J,GAAI27B,OAAA5kC,EAAAklC,YAAmB/+B,OAAA,SAAA8C,EAAAjJ,GAAuB,OAAAA,GAAAiJ,IAAAjJ,EAAA4kC,OAAA37B,EAAA27B,MAAA5kC,EAAAuG,SAAA0C,EAAA1C,QAAAvG,EAAA8H,QAAAmB,EAAAnB,SAAuE1I,EAAAI,OAAAV,EAAAqG,OAAA3F,EAAAyH,EAAAiB,KAAA1B,KAAA,SAAAyC,GAA8C,OAAAA,EAAA07B,IAAA17B,EAAA07B,GAAAG,eAA+B3+B,OAAA5G,EAAAH,GAAAwB,EAAApB,OAAAV,EAAAoG,IAAA1F,CAAA,GAAA6H,OAAAjI,EAAAoH,KAAA,SAAAyC,GAA2D,OAAAA,EAAA,IAAWy5B,EAAAljC,OAAAV,EAAAqG,OAAA3F,EAAAyH,EAAAqlC,aAAA9lC,KAAA,SAAAyC,GAAsD,OAAAA,EAAAi1B,WAAkB/3B,OAAA5G,EAAAH,GAAAyO,EAAArO,OAAAV,EAAAqG,OAAA3F,EAAAgjC,EAAAh8B,KAAA,SAAAyC,GAAqD,OAAAA,EAAAq8B,OAAcn/B,OAAA5G,EAAAH,GAAA+J,EAAA3J,OAAAV,EAAAqG,OAAA3F,EAAAqB,EAAA2F,KAAA,SAAAyC,GAAqD,OAAAA,EAAAq8B,OAAcn/B,OAAA5G,EAAAH,GAAA2O,EAAAvO,OAAAV,EAAAqG,OAAA3F,EAAAT,EAAAyH,KAAA,SAAAyC,GAAqD,OAAAA,EAAAq8B,OAAcn/B,OAAA5G,EAAAH,GAAcQ,EAAA8iC,EAAA,YAAA9iC,EAAAiO,EAAA,QAAAjO,EAAAuJ,EAAA,SAAAvJ,EAAAmO,EAAA,WAAuD,SAAA9E,EAAAjJ,EAAAO,GAAiB,aAAoKA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAiH,IAAS1G,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,IAASyB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAb,IAASa,EAAAZ,EAAA,SAAA6J,GAAkB,OAAvQ,SAAArJ,EAAAqJ,EAAAjJ,GAAgB,QAAAO,KAAA0I,EAAA,mBAAAjJ,EAAAO,GAAA0I,EAAA1I,GAAAP,EAAAO,GAAA0I,EAAA1I,IAAA0I,EAAA1I,IAAA,iBAAA0I,EAAA1I,IAAAP,EAAAO,IAAA,iBAAAP,EAAAO,IAAAX,EAAAqJ,EAAA1I,GAAAP,EAAAO,IAA8H,OAAA0I,EAAyHrJ,CAAAqJ,EAAA7J,IAAe,IAAAN,EAAAS,EAAAgB,EAAA,IAAA0G,GAAiBqe,MAAA,EAAAE,OAAA,EAAAkhB,QAAA,EAAAC,QAAA,EAAApwB,MAAA,IAA8C,SAAAtN,GAAaA,EAAAsjC,QAAA,UAAAtjC,EAAAujC,MAAA,QAAb,CAAiD1tC,WAAY,IAAAK,GAAOwlC,IAAIp+B,QAAQs/B,eAAA,GAAAC,gBAAA,GAAAC,gBAAA,EAAA7hB,QAA+DghB,SAAA,EAAAI,MAAiBvyB,IAAA,GAAAH,KAAA,IAAA0S,MAAA,IAAAE,OAAA,OAAuC1d,OAAQ+8B,SAASvf,MAAA,IAAAE,OAAA,IAAAkhB,QAAA,EAAAC,QAAA,EAAApwB,MAAA,GAAiD2N,QAASghB,SAAA,EAAAI,MAAiBvyB,IAAA,IAAAH,KAAA,IAAA0S,MAAA,IAAAE,OAAA,OAAwCof,MAAO1gB,QAAQghB,SAAA,EAAAI,MAAiBvyB,IAAA,IAAAH,KAAA,EAAA0S,MAAA,IAAAE,OAAA,OAAsC6f,UAAWnH,UAAUnrB,IAAA,EAAAH,KAAA,KAAe7K,aAAay6B,EAAA,SAAAv5B,GAAe,OAAAzJ,OAAAD,EAAA0H,EAAAzH,CAAA,EAAA0kB,OAAA8V,YAAA,GAAA/wB,IAA8CpI,EAAA,SAAAoI,GAAe,OAAAzJ,OAAAD,EAAA0H,EAAAzH,CAAA,EAAA0kB,OAAA6V,WAAA,GAAA9wB,IAA6ClK,EAAA,SAAAkK,GAAe,OAAAW,KAAAkP,IAAAoL,OAAA6V,WAAA,GAAA9wB,IAAwCuK,EAAA,SAAAvK,GAAe,OAAAW,KAAAkP,IAAAoL,OAAA8V,YAAA,GAAA/wB,IAAyC7J,GAAIulC,IAAIp+B,QAAQ2d,QAAQohB,MAAMvyB,IAAAyvB,EAAA5vB,KAAA/R,EAAAykB,MAAAvmB,EAAAymB,OAAAhS,KAAgC1L,OAAQoc,QAAQohB,MAAMvyB,IAAAyvB,EAAA5vB,KAAA/R,EAAAykB,MAAAvmB,EAAAymB,OAAAhS,KAAgCoxB,MAAO1gB,QAAQohB,MAAMvyB,IAAAyvB,EAAA5vB,KAAA/R,EAAAykB,MAAAvmB,EAAAymB,OAAAhS,KAAgC6xB,UAAWnH,UAAUnrB,IAAAyvB,EAAA5vB,KAAA/R,OAAiB,SAAAoI,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAiH,EAAA,WAAe,QAAAgC,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,0BAA4BzlC,EAAA,0JAA2JY,EAAAZ,EAAA,WAAgB,QAAA6J,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,0BAA4BzlC,EAAA,meAAoeY,EAAAiJ,EAAA,WAAgB,QAAAA,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,yBAA2BzlC,EAAA,mNAAoNY,EAAAb,EAAA,WAAgB,QAAA8J,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,2BAA6BzlC,EAAA,0JAA2JY,EAAAmJ,EAAA,WAAgB,QAAAF,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,yBAA2BzlC,EAAA,wBAAyBY,EAAA0e,EAAA,WAAgB,QAAAzV,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,yBAA2BzlC,EAAA,sBAAuBY,EAAA2e,EAAA,WAAgB,QAAA1V,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,+BAAiCzlC,EAAA,qBAAoB,UAAa0f,GAAA,KAAAC,GAAA,KAAAnf,EAAA,IAAA8sC,KAAA,WAAqC1sC,EAAA0iC,EAAA,WAAgB,QAAAz5B,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,0BAA4BzlC,EAAA,8XAA+XY,EAAAlB,EAAA,WAAgB,QAAAmK,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,yBAA2BzlC,EAAA,sWAAuWY,EAAAuN,EAAA,WAAgB,QAAAtE,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,yBAA2BzlC,EAAA,+eAA8e,QAAWA,EAAA,qMAAsMY,EAAAwT,EAAA,WAAgB,QAAAvK,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,cAAcysC,MAAA7sC,EAAAqH,EAAAupB,WAAA,GAAAjxB,GAAAqI,OAAAqB,IAAA47B,QAAA,cAA0D,yBAA2BzlC,EAAA,wJAAuJ,QAAWA,EAAA,kFAAoF,IAAAQ,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,GAAAhB,EAAAC,OAAAI,EAAA2N,EAAA/N,EAAkCmsC,QAAA,eAAArmB,MAAA,QAAAE,OAAA,QAAAimB,OAAA,EAAAkB,YAAA,EAAAC,OAAA,eAAAF,KAAA,eAAAhB,cAAA,SAAA7D,OAAmJoE,cAAcS,KAAA5tC,EAAAmK,OAAa,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAiH,EAAA,SAAAgC,GAAgB,IAAAjJ,EAAAiJ,EAAA4jC,MAAAtsC,EAAA0I,EAAA6jC,QAAAvtC,EAAA0J,EAAA8jC,KAAA9lC,EAAAgC,EAAA5I,IAAAlB,EAAA8J,EAAAwjC,MAAAjK,GAAA,UAAkEiK,MAAAjtC,OAAAI,EAAAkjC,QAAAtjC,CAAAV,EAAAK,KAAA6tC,UAAAzsC,EAAAssC,MAAA7sC,GAAmDT,GAAI,OAAA0H,IAAAu7B,EAAA,GAAAniC,IAAA4G,GAAAu7B,GAA0B,IAAA5iC,EAAAW,EAAA,GAAAzB,GAAAyB,IAAAX,GAAAW,EAAA,MAA4B,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAiH,IAAS1G,EAAAnB,EAAAY,EAAA,eAAuB,OAAAb,IAASoB,EAAAnB,EAAAY,EAAA,eAAuB,OAAAwiC,IAASjiC,EAAAnB,EAAAY,EAAA,eAAuB,OAAAa,IAASN,EAAAnB,EAAAY,EAAA,eAAuB,OAAAjB,IAAW,IAAAa,EAAAW,EAAA,GAAAzB,GAAAyB,IAAAX,GAAAW,EAAA,IAAAhB,EAAA8xB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAA6E,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,GAAShC,EAAAzH,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAK,GAAwBwsC,QAAA,eAAAzN,SAAA,WAAAmJ,QAAA,EAAA4F,WAAA,SAAApF,OAAgFqF,cAAcvB,QAAA,eAAAF,OAAA,QAAAjE,SAAA1oC,EAAAM,EAAA+tC,WAAA,SAAAzB,cAAA,UAA8F0B,OAAA7tC,KAAYT,EAAAqK,GAAMwiC,QAAA,eAAAF,OAAA,EAAAjE,SAAA1oC,EAAAM,EAAA+tC,WAAA,WAAiEE,QAAU1B,QAAA,gBAAuB2B,SAAU3B,QAAA,mBAAyBxsC,EAAAK,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAK,GAAyB++B,SAAA,WAAAyN,QAAA,OAAA4B,cAAA,SAAAlG,QAAA,EAAAmG,WAAA,EAAAC,WAAA,UAAAC,aAAA,UAAA7F,OAAoI8F,aAAazP,SAAA,WAAA5Y,MAAA,GAAAE,OAAA,GAAA1S,OAAA,EAAAD,MAAA,EAAAm0B,aAAA,EAAA8E,OAAA,cAAAK,WAAA,sFAA4LyB,YAAajC,QAAA,OAAA8B,WAAA,SAAAI,UAAA,IAAgDC,kBAAmBpC,cAAA,UAAuBqC,iBAAkBC,SAAA,MAAaxL,EAAAhjC,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAyO,GAAyB0gC,SAAA,OAAA/P,SAAA,WAAA8P,SAAA,EAAA3G,QAAA,EAAAQ,OAAgEqG,QAAQ1G,SAAA,OAAe2G,OAAQtG,OAAOuG,oBAAoBtC,OAAA,UAAAuC,eAAA,eAA8CC,cAAeC,aAAA,MAAAC,cAAA,QAAA9C,cAAA,MAAA+C,UAAA,QAA8EC,cAAeC,UAAA,EAAAC,aAAA,YAAmC/tC,EAAArB,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAqK,GAAyBsiC,OAAA,EAAA5D,OAAgBuF,OAAAtuC,EAAAqK,EAAAkkC,QAAmBwB,YAAA,QAAA/C,OAAA,WAAqCgD,QAASD,YAAA,GAAcE,sBAAuBpD,QAAA,QAAeqD,yCAA0CrD,QAAA,UAAiBsD,2BAA4BtH,MAAA7oC,EAAAmK,MAAYlK,EAAAS,OAAAI,EAAA6jC,MAAAjkC,EAAqBmsC,QAAA,OAAA4B,cAAA,SAAAS,SAAA,EAAAC,SAAA,OAAApG,OAAwEqH,SAASzD,OAAA,EAAA1D,cAAA,OAAAH,WAAA,YAAoD,SAAA3+B,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,wBAAgC,OAAAT,IAASgB,EAAAnB,EAAAY,EAAA,qBAA6B,OAAAiH,IAAS1G,EAAAnB,EAAAY,EAAA,oBAA4B,OAAAb,IAAW,IAAAS,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,IAAAhB,EAAAC,OAAAI,EAAA0F,iBAAA9F,CAAA,KAAAV,EAAAmI,KAAAzH,OAAAI,EAAAsF,IAAA1F,GAAAL,EAAAK,OAAAI,EAAAsF,IAAA1F,IAA8F,SAAAyJ,EAAAjJ,EAAAO,GAAiB0I,EAAArK,QAAA2B,EAAA,IAAAgiC,QAAAt5B,EAAArK,QAAA2jC,QAAAt5B,EAAArK,SAAoD,SAAAqK,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAiH,EAAA,WAAe,IAAAgC,EAAA,WAAiB,QAAAA,EAAA,EAAAjJ,OAAA,EAAqBiJ,EAAA,GAAKA,IAAA,MAAAA,KAAAjJ,EAAA,WAAA4J,KAAAC,SAAAjK,EAAAqJ,GAAAjJ,MAAA,EAAAiJ,IAAA,QAAmE,OAAArJ,EAA9G,GAA0H,OAAAqJ,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,gBAAAA,GAAoD,IAAAjJ,EAAAlB,EAAAyB,EAAA,EAAY,OAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAA,IAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAA,IAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAA,IAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAA,IAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAAP,EAAAiJ,EAAA1I,MAAhE,CAAuP0I,IAAK,QAAArJ,EAAA,IAAA8J,MAAA,IAAA5K,KAAAS,KAAiC0H,EAAA,EAAKA,EAAA,IAAMA,IAAAnI,EAAAmI,MAAA,KAAA4sB,SAAA,IAAAD,OAAA,GAAAr0B,EAAAT,EAAAmI,OAAkD,SAAAgC,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAyiC,MAAA,WAAqB,OAAO16B,YAAWC,aAAaC,QAAQC,UAAUlI,EAAAsJ,MAAA,SAAAL,EAAAjJ,GAAuB,OAAO+H,SAAAnI,KAAaqJ,EAAAlB,SAAA/H,EAAA+H,UAAAC,UAAApI,KAAsCqJ,EAAAjB,UAAAhI,EAAAgI,WAAAC,KAAArI,KAAmCqJ,EAAAhB,KAAAjI,EAAAiI,MAAAC,KAAAtI,KAAyBqJ,EAAAf,KAAAlI,EAAAkI,QAAkB,IAAAtI,EAAAyxB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAsD,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAAU,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,EAAAjJ,GAAgB,gBAAAA,MAAA,KAAAiJ,EAAA8rB,MAAA,QAAAA,MAAA,KAAAwM,OAAA,SAAAt4B,GAAyE,OAAAA,IAASgsB,KAAAj1B,GAAUR,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAmvC,sBAAAvvC,EAAAI,EAAAovC,oBAAA,SAAAnmC,EAAAjJ,GAAgE,IAAAO,EAAA0I,EAAAyzB,OAAA3Z,IAAA,SAAAxiB,GAA+B,IAAAhB,EAAA0J,EAAA1I,GAAW,OAAAf,OAAAigC,OAAAjgC,OAAAV,EAAA2G,iBAAAjG,CAAAD,EAAAK,EAAAW,EAAAP,KAAAuhC,OAAAziC,EAAA0G,YAA8E8C,OAAA,SAAAW,EAAAjJ,GAAuB,OAAAiJ,EAAArB,OAAA5H,QAAwB,OAAAR,OAAAV,EAAA4G,gBAAAlG,CAAAe,IAAqC,IAAAzB,EAAAyB,EAAA,IAAW,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAb,IAAW,IAAAS,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,IAAAhB,GAAAgB,IAAAzB,GAAAyB,EAAA,KAAqCA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAT,EAAA0H,IAAa,IAAAA,EAAA,IAAArH,EAAAqH,GAAe+7B,iBAAA,IAAmB7jC,GAAA8H,EAAAg8B,gBAAAh8B,EAAAi8B,OAAAj8B,EAAAk8B,QAAAl8B,EAAAm8B,kBAAAn8B,EAAAo8B,SAAAp8B,EAAAq8B,UAAAr8B,EAAAs8B,UAAAt8B,EAAAu8B,OAAAv8B,EAAAw8B,QAAmH,SAAAx6B,EAAAjJ,EAAAO,GAAiB,aAA+TA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAlB,IAASkB,EAAAiH,EAAA,WAAiB,QAAAgC,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,OAAAiJ,EAAAs4B,OAAA,SAAAt4B,GAA4B,QAAAA,IAAUgsB,KAAA,MAAYj1B,EAAAuN,EAA7c,SAAA3N,IAAa,QAAAqJ,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,QAAAO,KAAYzB,EAAA,EAAAS,EAAA0J,EAASnK,EAAAS,EAAA0F,OAAWnG,IAAA,CAAK,IAAAmI,EAAA1H,EAAAT,GAAW,SAAAmI,IAAA,IAAAA,EAAA,QAAA9H,KAAA8H,EAAA,CAAmC,IAAAu7B,EAAAv7B,EAAA9H,IAAWqjC,GAAA,IAAAA,KAAA,UAAArjC,GAAAqjC,EAAAjiC,EAAApB,GAAAoB,EAAAsnC,MAAAjoC,EAAAW,EAAAsnC,MAAArF,MAAA,IAAArjC,EAAAwzB,QAAA,UAAAxzB,EAAAwzB,QAAA,UAAApyB,EAAApB,GAAAoB,EAAApB,GAAAS,EAAAW,EAAApB,GAAAqjC,KAAAjiC,EAAApB,GAAAqjC,IAAoI,OAAAjiC,GAA2K,IAAAzB,EAAA,oBAAAihC,sBAAA,SAAA92B,GAA4D,OAAAomC,WAAApmC,IAAqB82B,sBAAAz/B,KAAA4jB,SAAoC,SAAAjb,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,IAAa,QAAAqJ,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,QAAAO,KAAYzB,EAAA,EAAAS,EAAA0J,EAASnK,EAAAS,EAAA0F,OAAWnG,IAAA,CAAK,IAAAmI,EAAA1H,EAAAT,GAAW,SAAAmI,IAAA,IAAAA,EAAA,QAAA9H,KAAA8H,EAAA,CAAmC,IAAAu7B,EAAAv7B,EAAA9H,IAAWqjC,GAAA,IAAAA,KAAA,UAAArjC,GAAAqjC,EAAAjiC,EAAApB,GAAAoB,EAAAsnC,MAAAjoC,EAAAW,EAAAsnC,MAAArF,MAAA,IAAArjC,EAAAwzB,QAAA,UAAAxzB,EAAAwzB,QAAA,UAAApyB,EAAApB,GAAAoB,EAAApB,GAAAS,EAAAW,EAAApB,GAAAqjC,KAAAjiC,EAAApB,GAAAqjC,IAAoI,OAAAjiC,EAASf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAsvC,IAAA,oBAAAvP,sBAAA,SAAA92B,GAA8D,OAAAomC,WAAApmC,IAAqB82B,sBAAAz/B,KAAA4jB,QAAAlkB,EAAA8iC,QAAA,WAAyD,QAAA75B,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,OAAAiJ,EAAAs4B,OAAA,SAAAt4B,GAA4B,QAAAA,IAAUgsB,KAAA,MAAYj1B,EAAA6iC,OAAAjjC,EAAAI,EAAA+iC,MAAA,SAAA95B,GAAgC,QAAAjJ,KAAAO,EAAA,EAAiBA,EAAAyE,UAAAC,OAAmB1E,IAAAP,EAAAO,EAAA,GAAAyE,UAAAzE,GAAwB,IAAqW0G,EAArW1H,KAA+R,OAAtR0J,EAAAxC,MAAAlH,EAAA6H,KAAA6B,EAAAxC,MAAAwC,EAAAsmC,aAAAhwC,EAAA6H,KAAA6B,EAAAsmC,aAAAtmC,EAAAumC,UAAAjwC,EAAA6H,KAAA,eAAAtI,EAAAmK,EAAAumC,UAAA,KAAAvmC,EAAAwmC,UAAAlwC,EAAA6H,KAAA,eAAAtI,EAAAmK,EAAAwmC,UAAA,KAAAxmC,EAAA4kC,WAAAtuC,EAAA6H,KAAA,gBAAAtI,EAAAmK,EAAA4kC,WAAA,KAAA5kC,EAAAymC,WAAAnwC,EAAA6H,KAAA,gBAAAtI,EAAAmK,EAAAymC,WAAA,MAA6R7H,OAAA5gC,KAAWA,EAAA,UAAA1H,EAAA01B,KAAA,UAAAr1B,EAAA4wB,WAAA,EAAAxwB,GAAAiH,KAA2D,IAAAnI,EAAA,SAAAmK,GAAkB,uBAAAA,MAAA,OAAmC,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAiH,IAAW,IAAArH,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,IAAAhB,EAAA,SAAA0J,GAAiC,kBAAkB,OAAAzJ,OAAAI,EAAAR,EAAAI,CAAAwF,UAAA,SAAAiE,GAAyC,OAAAA,GAAA,IAAAA,IAAgB8Z,IAAA,SAAA9Z,GAAkB,uBAAAA,EAAAzJ,OAAAV,EAAAmI,EAAAzH,CAAAyJ,KAAA4qB,aAAqDoB,KAAAhsB,KAAWhC,EAAA1H,EAAA,KAAUA,EAAA,MAAO,SAAA0J,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAlB,IAAW,IAAAc,EAAAW,EAAA,GAAAzB,GAAAU,OAAAI,EAAAuJ,EAAA3J,CAAA,KAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,OAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,MAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,OAAuFA,OAAAI,EAAAuJ,EAAA3J,CAAA,OAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,OAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,MAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,MAAAA,OAAAI,EAAAuJ,EAAA3J,CAAA,SAA8F,SAAAyJ,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAkB,SAAAO,IAAau6B,SAAAnW,oBAAA,YAAA7lB,GAAAg8B,SAAAnW,oBAAA,UAAApkB,GAAAX,IAAA2hC,OAAA,SAAAt4B,GAA6G,OAAAA,IAAA1J,IAAe,SAAAT,EAAAkB,GAAc,QAAAO,EAAA,EAAAzB,EAAAc,EAAgBW,EAAAzB,EAAAmG,OAAW1E,IAAA,CAAK,IAAAiiC,EAAA1jC,EAAAyB,GAAW,GAAAiiC,IAAAjjC,KAAAowC,SAAAnN,GAAA,OAA+Bv5B,GAAG6E,EAAA7G,EAAAjH,EAAAy7B,QAAA1tB,EAAA5O,EAAAa,EAAA07B,UAA4Bz0B,EAAAjH,EAAAy7B,QAAAt8B,EAAAa,EAAA07B,QAA0B,IAAAn8B,EAAA0H,EAAA,EAAA9H,EAAA,EAAc,OAAOywC,YAAA,SAAA3mC,GAAwB1J,EAAA0J,EAAA4mC,cAAAjwC,EAAAwH,KAAA7H,GAAA0H,EAAAgC,EAAAwyB,QAAAt8B,EAAA8J,EAAAyyB,QAAAZ,SAAApW,iBAAA,YAAA5lB,GAAAg8B,SAAApW,iBAAA,UAAAnkB,GAAAP,KAAAiJ,MAA+I,IAAArJ,MAAS,SAAAqJ,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,+BAAuC,OAAAb,IAASoB,EAAAnB,EAAAY,EAAA,0BAAkC,OAAAwiC,IAASjiC,EAAAnB,EAAAY,EAAA,6BAAqC,OAAAa,IAASN,EAAAnB,EAAAY,EAAA,8BAAsC,OAAAjB,IAASwB,EAAAnB,EAAAY,EAAA,6BAAqC,OAAAwT,IAASjT,EAAAnB,EAAAY,EAAA,8BAAsC,OAAAZ,IAAW,IAAAQ,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,GAAAhB,EAAAgB,EAAA,IAAA0G,EAAA1G,EAAA,GAAApB,EAAAK,OAAAI,EAAAuF,OAAA3F,EAAAyH,EAAA8hC,WAAAviC,IAAAjH,EAAAuwC,aAAAtpC,IAAA1H,EAAAixC,WAAAvpC,IAAAjH,EAAAulC,aAAAt+B,KAAA,SAAAyC,EAAAjJ,EAAAO,EAAAX,GAAgJ,OAAO0mC,SAAAr9B,EAAAq9B,SAAA0J,WAAAhwC,EAAAiwC,KAAA1vC,EAAA2jB,OAAAtkB,KAAkD4iC,EAAAhjC,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAA0pC,WAAAziC,IAAAjH,EAAA2wC,iBAAA1pC,KAAA,SAAAyC,EAAAjJ,GAA6E,OAAOipC,WAAAhgC,EAAAi1B,SAAAl+B,KAAyBa,EAAArB,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAA4wC,WAAA3pC,IAAAjH,EAAAulC,aAAAt+B,KAAA,SAAAyC,EAAAjJ,GAAyE,OAAOgwC,WAAA/mC,EAAAib,OAAAlkB,KAAuBjB,EAAAS,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAA6wC,YAAA5pC,IAAAjH,EAAAulC,aAAAt+B,KAAA,SAAAyC,EAAAjJ,GAA0E,OAAOgwC,WAAA/mC,EAAAib,OAAAlkB,KAAuBwT,EAAAhU,OAAAI,EAAAuF,OAAA3F,EAAAV,EAAAuxC,aAAA7pC,IAAA1H,EAAAwxC,YAAA9pC,IAAA1H,EAAAinC,eAAAv/B,IAAAS,EAAA+hC,kBAAAriC,KAAAM,EAAAspC,aAAA/pC,KAAA,SAAAyC,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAiJ,OAAOyH,OAAA0C,EAAAlJ,MAAAC,EAAAwwC,SAAAjwC,EAAAuH,MAAAlI,EAAAsI,KAAApJ,EAAAmK,EAAAlD,OAAkD3G,EAAAI,OAAAI,EAAAuF,OAAA3F,EAAAV,EAAA2xC,cAAAjqC,IAAAS,EAAA+hC,kBAAAriC,MAAA,SAAAsC,EAAAjJ,GAAkF,OAAO6I,QAAAI,EAAAnB,MAAA9H,MAAqB,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,qBAA6B,OAAAwT,IAASjT,EAAAnB,EAAAY,EAAA,6BAAqC,OAAAZ,IAASmB,EAAAnB,EAAAY,EAAA,6BAAqC,OAAAY,IAASL,EAAAnB,EAAAY,EAAA,6BAAqC,OAAA0iC,IAASniC,EAAAnB,EAAAY,EAAA,uBAA+B,OAAA6N,IAAW,IAAAjO,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,GAAAhB,EAAAgB,EAAA,GAAA0G,EAAA1G,EAAA,GAAApB,EAAAoB,EAAA,GAAAiiC,EAAAjiC,EAAA,IAAAM,EAAAN,EAAA,IAAAxB,EAAAsyB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAyG,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,GAASuK,EAAAhU,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAA8sC,UAAA7lC,KAAA,SAAAyC,GAAkD,OAAAA,EAAA47B,SAAArC,EAAArjC,IAAsBgH,OAAA,SAAA8C,EAAAjJ,GAAuB,OAAAA,IAAAR,OAAAV,EAAAyO,EAAA/N,CAAAyJ,EAAAjJ,KAA4BZ,EAAAI,OAAAI,EAAAsF,IAAA1F,CAAA,KAAAoB,EAAApB,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAAuI,MAAAtB,KAAA,SAAAyC,GAAoE,IAAAjJ,KAAS,QAAAO,KAAA0I,EAAAlB,SAAA/H,EAAAO,IAA8BuN,EAAA,IAAAlE,KAAAC,SAAAkE,EAAA,IAAAnE,KAAAC,UAAyC,OAAA7J,IAAS0iC,EAAAljC,OAAAI,EAAAwF,YAAA5F,EAAAD,EAAAgxC,aAAA/pC,IAAApH,EAAAoH,IAAAjH,EAAAypC,kBAAAriC,KAAA/F,EAAA4F,KAAA,SAAAyC,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAwG,SAAAS,IAAa,QAAA0J,KAAYjJ,EAAA,EAAKA,EAAAZ,EAAA6F,OAAWjF,IAAA,CAAK,QAAAT,EAAAH,EAAAY,GAAAb,EAAAS,EAAAmI,SAAAxI,GAAAijC,EAAA1jC,EAAAS,GAAAR,EAAA,EAAAyU,EAAArU,EAAA6I,UAAwDjJ,EAAAyU,EAAAvO,OAAWlG,IAAA,QAAA6B,EAAA4S,EAAAzU,GAAA2jC,EAAA,EAAA70B,EAAAjO,EAAAoI,UAAApH,GAAAioC,OAA+CnG,EAAA70B,EAAA5I,OAAWy9B,IAAA,CAAK,IAAAv5B,EAAA0E,EAAA60B,GAAA30B,EAAAnO,EAAAmI,SAAAoB,EAAAu/B,KAAAF,YAAArpC,EAAAqpC,UAAA,QAAAtpC,EAAAJ,EAAAqK,EAAAu/B,KAAAn7B,EAAA/N,OAAAqB,EAAAoI,EAAAzJ,EAAAN,EAAA4O,EAAA5O,EAAA6O,IAAAy0B,EAAA10B,EAAA00B,EAAAz0B,IAAA2rB,EAAAl6B,OAAAqB,EAAA0M,EAAA/N,CAAA+N,GAAAo2B,EAAAnkC,OAAAqB,EAAAzB,EAAAI,CAAA+N,GAAAiC,EAAAkqB,EAAA3rB,EAAAo4B,EAAAh9B,EAAA1C,OAAAQ,EAAAkf,WAAAxf,KAAA,GAAA6I,EAAA,EAAAA,EAA2LvG,EAAA1J,GAAAC,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA1J,KAAA,KAAAC,OAAAqB,EAAA1B,EAAAK,CAAA2mC,EAAAxC,IAAA16B,EAAAE,EAAAu/B,KAAAlpC,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAAE,EAAAu/B,OAAA,KAAAlpC,OAAAqB,EAAA1B,EAAAK,EAAA,EAAA2mC,EAAAxC,IAAyG,QAAAoD,EAAA/mC,EAAA,EAAc+mC,EAAA3nC,EAAA6F,OAAW8hC,IAAA,CAAK,IAAApoB,EAAAvf,EAAA2nC,GAAA11B,EAAAzR,EAAAmI,SAAA4W,GAAAzf,EAAAJ,EAAA6f,GAAApR,EAAA/N,OAAAqB,EAAAoI,EAAAzJ,EAAAN,EAAA4O,EAAA5O,EAAA6O,IAAAy0B,EAAA10B,EAAA00B,EAAAz0B,IAAA2rB,EAAAl6B,OAAAqB,EAAA0M,EAAA/N,CAAA+N,GAAAo2B,EAAAnkC,OAAAqB,EAAAzB,EAAAI,CAAA+N,GAAA44B,EAAAv8B,KAAAmO,IAAA,IAAA2hB,EAAA,GAA2H,GAAAzwB,EAAA1J,GAAAC,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA1J,KAAA,KAAAC,OAAAqB,EAAA1B,EAAAK,EAAA,EAAA2mC,EAAAxC,IAAA16B,EAAA0V,GAAAnf,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA0V,KAAA,KAAAnf,OAAAqB,EAAA1B,EAAAK,CAAA2mC,EAAAxC,IAAAxkC,EAAAqpC,YAAAn3B,EAAAm3B,UAAA,CAA+H,IAAA9pB,EAAAgb,EAAA,IAAYzwB,EAAA1J,GAAAC,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA1J,KAAA,KAAAC,OAAAqB,EAAA1B,EAAAK,CAAAkf,EAAAilB,IAAA16B,EAAA0V,GAAAnf,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA0V,KAAA,KAAAnf,OAAAqB,EAAA1B,EAAAK,EAAA,EAAAkf,EAAAilB,QAAiG,CAAK,IAAA71B,EAAAlE,KAAAmO,IAAA,IAAA2hB,EAAA,GAAwBzwB,EAAA1J,GAAAC,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA1J,KAAA,KAAAC,OAAAqB,EAAA1B,EAAAK,EAAA,EAAAsO,EAAA61B,IAAA16B,EAAA0V,GAAAnf,OAAAqB,EAAAoG,EAAAzH,CAAAyJ,EAAA0V,KAAA,KAAAnf,OAAAqB,EAAA1B,EAAAK,CAAAsO,EAAA61B,MAAmG,QAAApkC,KAAA0J,EAAA,CAAgB,IAAAk9B,EAAAl9B,EAAA1J,GAAA+kC,EAAA9kC,OAAAqB,EAAA0M,EAAA/N,CAAA2mC,GAA4B,GAAA7B,EAAA/jC,EAAA,GAAU,IAAAgkC,EAAA/kC,OAAAqB,EAAAzB,EAAAI,CAAA2mC,GAAA3B,EAAA1lC,EAAAS,GAAAklC,EAAAjlC,OAAAqB,EAAAoG,EAAAzH,EAAAglC,EAAA12B,EAAA02B,EAAAz2B,GAAAvO,OAAAqB,EAAA1B,EAAAK,CAAA8kC,EAAA/jC,EAAAgkC,IAAAG,EAAAD,EAAA,GAAAiM,EAAAjM,EAAA,GAAsF3lC,EAAAS,IAAMuO,EAAAlE,KAAAiP,MAAA6rB,GAAA32B,EAAAnE,KAAAiP,MAAA63B,MAAyO,QAAAlO,KAAAxiC,EAAA,CAAgB,IAAAjB,EAAAiB,EAAAwiC,GAAAhvB,EAAAzU,KAAA4lC,IAAA5lC,EAAA4lC,GAAA78B,OAAA/I,EAAA4lC,GAAA78B,MAAAo2B,SAAsD1qB,IAAA1U,EAAA0jC,GAAAhvB,GAAYvK,EAAAnK,GAAK,IAAAM,EAAAI,OAAAk9B,KAAA98B,EAAAmI,UAAAnH,EAAAL,EAAkC,OAAAw/B,sBAA/T,SAAA5gC,IAAa,GAAAyB,EAAA,IAAS,IAAAZ,KAAS,QAAAO,KAAAzB,EAAAkB,EAAAO,GAAAzB,EAAAyB,GAAyB,QAAAX,EAAA,GAAaA,EAAA,EAAIA,IAAAL,IAAAqB,IAAY,IAAAqG,GAAA,EAAS,QAAA1G,KAAAzB,EAAA,CAAgB,IAAA0jC,EAAAxiC,EAAAO,GAAAM,EAAA/B,EAAAyB,GAAkBiiC,IAAA3hC,GAAA2hC,EAAA10B,IAAAjN,EAAAiN,GAAA00B,EAAAz0B,IAAAlN,EAAAkN,IAAA9G,GAAA,GAAoCA,IAAAgC,EAAAnK,GAAA8B,EAAA,IAAAyuC,WAAAlwC,EAAA,QAA2J,WAA2CyB,EAAA,KAAOrB,EAAAykC,QAAA38B,OAAAq7B,EAAAl8B,KAAA,SAAAyC,EAAAjJ,GAAsC,IAAAO,KAAS,QAAAX,KAAAI,EAAAO,EAAAX,IAAqB+kC,IAAI78B,OAAOo2B,SAAAl+B,EAAAJ,MAAiBqJ,EAAAw1B,SAAW12B,SAAAxH,MAAe,IAAAsN,EAAArO,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAAypC,kBAAAxiC,IAAArH,EAAA4wC,WAAAvpC,IAAAk8B,EAAAl8B,KAAA,SAAAyC,EAAAjJ,EAAAO,GAAwF,IAAAX,KAAQd,EAAA,EAAAS,KAAAJ,KAAAqjC,KAAoB,QAAA3hC,KAAAoI,EAAAlB,SAAA,CAAyB,IAAAyL,EAAAvK,EAAAlB,SAAAlH,GAAoBjB,EAAA4T,EAAAg1B,WAAA5oC,EAAA4T,EAAAg1B,YAAA1pC,IAAA,IAAuC,IAAAM,EAAAL,KAAUwB,EAAAM,IAAOkF,GAAAyN,EAAAzN,GAAA0mC,MAAA,SAAA7sC,EAAA4T,EAAAg1B,WAAAzE,MAAAvwB,EAAAnU,KAAAsxC,OAAAn9B,EAAAzN,KAAA/F,EAAA+F,KAAwE,MAAAyN,EAAArN,SAAA/G,EAAA+G,QAAA,SAAAqN,EAAAzT,QAAAX,EAAAwxC,SAAA,GAAAzxC,EAAAiI,KAAAhI,GAAsE,QAAAwB,EAAA,EAAA8hC,EAAAlvB,EAAAxL,UAA0BpH,EAAA8hC,EAAAz9B,OAAWrE,IAAA,CAAK,IAAAiN,EAAA60B,EAAA9hC,GAAAuI,EAAAF,EAAAjB,UAAA6F,GAAAE,GAA+BhI,GAAAoD,EAAApD,GAAAgD,MAAAI,EAAAJ,MAAAC,UAAAG,EAAAH,UAAA2nC,OAAAxnC,EAAApD,KAAA/F,EAAA+F,GAAAy5B,IAAAr2B,EAAAw/B,SAAA9iB,KAAA1c,EAAA0/B,OAAA/iB,GAAAjlB,EAAA4rC,MAAArtC,EAAAqtC,OAAgH,GAAAtjC,EAAA0/B,OAAA5jC,OAAA,CAAoB8I,EAAAD,EAAA,EAAAC,IAAA,EAAY,QAAA7O,EAAA,EAAAqO,EAAApE,EAAA0/B,OAAuB3pC,EAAAqO,EAAAtI,OAAW/F,IAAA,CAAK,IAAAw6B,EAAAnsB,EAAArO,GAAAykC,EAAAjK,EAAAgP,IAAAl5B,EAAAkqB,EAAAjzB,KAAA0/B,EAAA5lC,EAAAojC,GAAmC,GAAAwC,EAAA,CAAM,IAAAY,EAAAZ,EAAAr4B,EAAA1O,EAAA0O,EAAA6Q,EAAAwnB,EAAAp4B,EAAA3O,EAAA2O,EAAwByB,IAAAvI,EAAAkf,WAAAxf,OAAAogC,GAAA,EAAApoB,GAAA,GAAA5Q,EAAAD,GAAAi5B,EAAAh5B,KAAA4Q,EAAiD5Q,EAAA8iC,aAAA9iC,EAAA8iC,cAAAlN,IAAA3jC,EAAA+F,GAAAy8B,EAAAp7B,MAAgDye,KAAAsgB,EAAArgB,GAAA/X,EAAA0+B,MAAA,QAAAj9B,IAAAvI,EAAAkf,WAAAxf,KAAA,YAAAkmC,MAAAr9B,EAAAmhC,OAAAvxC,EAAAuxC,QAAA5iC,EAAA4iC,QAAAhN,IAAA3jC,EAAA+F,KAA0G,IAAAsL,EAAAzH,KAAA8E,KAAAX,EAAAD,EAAAC,EAAAD,EAAAC,SAAiCA,EAAAD,EAAA,GAAAC,EAAAD,EAAAuD,EAAAjS,EAAA0O,EAAAC,IAAA,GAAAA,IAAAsD,EAAAjS,EAAA2O,OAAkCA,EAAAD,EAAA1O,EAAA0O,EAAAC,IAAA3O,EAAA2O,EAAA,GAAwBxO,EAAA6H,KAAA2G,GAAAy0B,EAAAp7B,MAAkBye,KAAA9X,EAAA+X,GAAA1mB,EAAAqtC,MAAA,MAAAtjC,EAAAJ,MAAA,aAAA4nC,OAAAvxC,EAAAuxC,QAAA5iC,EAAA4iC,QAAA5iC,EAAA8iC,eAAuF1nC,EAAAw/B,UAAAnG,EAAAp7B,MAAsBye,KAAA9X,EAAA+X,GAAA1mB,EAAAqtC,MAAA,YAA8B,OAAO1kC,SAAA5I,EAAA6I,UAAAzI,EAAAuxC,MAAAtO,KAAgCn7B,OAAAmM,EAAAhN,KAAA,SAAAyC,EAAAjJ,GAA8B,OAAAiJ,EAAA47B,SAAkB/2B,EAAA9N,EAAA0mC,QAAA1mC,EAAAuW,MAAAxI,EAAA/N,EAAA2mC,QAAA3mC,EAAAuW,MAAA+O,MAAAtlB,EAAAslB,MAAAtlB,EAAAuW,MAAAiP,OAAAxlB,EAAAwlB,OAAAxlB,EAAAuW,OAAsFtN,KAAK,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,wBAAgC,OAAAb,IAASoB,EAAAnB,EAAAY,EAAA,sBAA8B,OAAAwiC,IAAW,IAAA5iC,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,GAAAhB,EAAAgB,EAAA,GAAA0G,EAAA1G,EAAA,GAAApB,EAAAK,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAAypC,kBAAAxiC,KAAA,SAAAyC,GAAyF,OAAAzJ,OAAAyH,EAAAihC,iBAAA1oC,CAAAyJ,EAAAlB,YAA8Cy6B,EAAAhjC,OAAAI,EAAAuF,OAAA3F,EAAAD,EAAA6sC,SAAA5lC,IAAArH,EAAAqH,IAAA1H,EAAAuxC,aAAA7pC,KAAA,SAAAyC,EAAAjJ,EAAAO,GAA+E,OAAOmlC,KAAAz8B,EAAAy8B,SAAed,KAAA5kC,EAAA+wC,SAAAxwC,KAAoB2E,KAAOwgC,QAAOd,QAAQmM,SAAA,QAAiB,SAAA9nC,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,IAAa,QAAAqJ,KAAAuK,IAAAvK,KAAsBuK,KAAIpU,GAAA,EAAM,SAAAN,EAAAmK,GAAc,sBAAAA,EAAA,OAAAu5B,IAAAv5B,GAAsC,IAAAS,MAAAga,QAAAza,GAAA,OAAAA,EAA8B,IAAAjJ,EAAAiJ,EAAAo/B,QAAA9nC,EAAA0I,EAAA,GAAuB,uBAAA1I,GAAAmJ,MAAAga,QAAAnjB,QAA+C0I,EAAAo/B,QAAAp/B,EAAAhE,OAAAu9B,IAAAxiC,EAAAO,EAAA0I,EAAA8Z,IAAAjkB,IAAA0jC,IAAAxiC,EAAAO,GAA+Cf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,4BAAoC,OAAAjB,IAASiB,EAAAgxC,qBAAA,SAAA/nC,EAAAjJ,EAAAO,GAAyC,SAAAhB,EAAAgB,EAAAX,GAAgB,iBAAAW,EAAA0I,EAAAkC,IAAAnL,GAA4ByG,KAAAlG,EAAAujC,QAAAlkC,IAAiBqJ,EAAAkC,IAAAnL,EAAAO,QAAa,IAAAA,OAAA,GAAmB,IAAA0G,KAAS,gBAAAjH,EAAAb,EAAAqjC,GAAuB,IAAA5hC,EAAA4hC,EAAAt7B,QAAAw7B,EAAA9hC,EAAAzB,EAAA00B,WAAiC,GAAA5sB,EAAAy7B,GAAA,OAAAz7B,EAAAy7B,GAAoB,IAAA70B,EAAA,SAAA5G,GAAkB,SAAAu7B,IAAa,IAAAxiC,EAAA,OAAAiH,KAAAupB,MAAAa,KAAArsB,YAAAqsB,KAA8C,OAAArxB,EAAAg7B,OAAgBiW,QAAAhoC,EAAAtJ,IAAAiB,IAAiBZ,EAAAu2B,OAAA,WAAqBv2B,EAAAkxC,SAAA,SAAAlxC,GAAuB,OAAAA,EAAAixC,QAAAhoC,EAAAtJ,IAAAiB,GAAAZ,KAA8BA,EAAAmxC,YAAA,YAA0B,SAAAloC,EAAAjJ,GAAewT,EAAAvK,GAAAjJ,EAAAZ,IAAA2gC,sBAAAngC,GAAAR,GAAA,GAAf,CAAyDsjC,EAAA1iC,EAAAu2B,SAAav2B,EAAG,OAAAa,EAAA2hC,EAAAv7B,GAAAu7B,EAAA9hC,UAAA0wC,OAAA,WAA4C,YAAA/f,KAAA2J,MAAAiW,QAAA,OAAAnyC,EAAAK,EAAAkyB,KAAA2J,MAAAiW,QAAA1xC,EAAAS,KAAmEwiC,EAAA9hC,UAAA2wC,kBAAA,WAA0C9wC,GAAAuvB,QAAA4Q,IAAA,qBAAArP,MAAApoB,EAAA64B,GAAAlhC,EAAAywB,KAAA8f,cAAmE3O,EAAA9hC,UAAA4wC,qBAAA,WAA6C/wC,GAAAuvB,QAAA4Q,IAAA,0BAAArP,MAAApoB,EAAA84B,IAAAnhC,EAAAywB,KAAA8f,cAAyE3O,EAA7mB,CAAgnBzjC,GAAI,OAAAkI,EAAAy7B,GAAA70B,MAAiB7N,EAAA0iC,EAAA5jC,EAAO,IAAAS,EAAAgB,EAAA,IAAA0G,EAAA1G,IAAAhB,GAAAJ,EAAAoB,EAAA,IAAAiiC,EAAAjiC,IAAApB,GAAA0B,EAAAwwB,WAAAsY,WAAA,WAAyE,IAAA1gC,EAAAzJ,OAAAoqC,iBAA8BC,wBAAangC,OAAA,SAAAT,EAAAjJ,GAAgCiJ,EAAA4gC,UAAA7pC,IAAc,SAAAiJ,EAAAjJ,GAAgB,QAAAO,KAAAP,IAAAW,eAAAJ,KAAA0I,EAAA1I,GAAAP,EAAAO,KAAiD,gBAAAP,EAAAO,GAAqB,SAAAX,IAAayxB,KAAAyY,YAAA9pC,EAAmBiJ,EAAAjJ,EAAAO,GAAAP,EAAAU,UAAA,OAAAH,EAAAf,OAAAY,OAAAG,IAAAX,EAAAc,UAAAH,EAAAG,UAAA,IAAAd,IAAxR,GAAsWb,EAAA,SAAAkK,GAAiB,SAAAjJ,IAAa,cAAAiJ,KAAAunB,MAAAa,KAAArsB,YAAAqsB,KAA+C,OAAAxwB,EAAAb,EAAAiJ,GAAAjJ,EAA7E,CAA6FiH,KAAAuM,KAAUpU,GAAA,GAAM,SAAA6J,EAAAjJ,EAAAO,GAAiB0I,EAAArK,QAAA2B,EAAA,IAAAgiC,QAAAt5B,EAAArK,QAAA2jC,QAAAt5B,EAAArK,SAAoD,SAAAqK,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASQ,EAAAnB,EAAAY,EAAA,gBAAwB,OAAAwiC,IAASjiC,EAAAnB,EAAAY,EAAA,qBAA6B,OAAAa,IAASN,EAAAnB,EAAAY,EAAA,mBAA2B,OAAAjB,IAAW,IAAAa,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,GAAA0G,EAAA1G,EAAA,IAAApB,EAAAoB,EAAA,IAA2CP,EAAAuiC,QAAA3iC,EAAY,IAAA4iC,EAAA5iC,EAAAiB,GAAW+jC,KAAA9lC,GAAOC,GAAIwyC,WAAAhyC,EAAAiyC,QAAAvqC,EAAAwqC,KAAAtyC,IAA+B,SAAA8J,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,uBAAAA,EAAyBzJ,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAgiC,MAAA,SAAA/4B,GAAsB,IAAAjJ,EAAAuN,GAASkrB,OAAA,EAAA3wB,MAAA,MAAoBmB,GAAA1I,EAAAzB,EAAAmI,EAAA7G,SAAmBG,EAAAggC,SAAA/gC,OAAAD,EAAA6vC,oBAAA5vC,CAAAk6B,IAAAn5B,EAAAs+B,QAAuD,IAAAh+B,EAAArB,OAAAL,EAAA6xC,qBAAAxxC,CAAAe,EAAAiiC,EAAAoB,OAAA18B,QAAAlH,EAAAy4B,OAAAjlB,EAAAhU,OAAAyH,IAAAzH,CAAAqB,GAAAD,EAAAk6B,SAAA4W,cAAA,OAAkH9wC,EAAA+wC,UAAA,2BAAA7W,SAAA8W,KAAAC,YAAAjxC,GAAAxB,EAAA6H,EAAAmqC,OAAA1O,IAAAlvB,GAAA5S,GAAAL,EAAA4K,IAAAq3B,EAAAve,QAAA/c,QAAAtG,GAAoH,IAAA+iC,EAAA,IAAA5kC,EAAAkI,EAAA,mBAAiC6qC,KAAA,WAAgB,OAAAprB,KAAAqrB,UAAAxxC,EAAAZ,IAAAwJ,EAAAjB,KAAAhB,SAAA,cAA0D,OAAAy8B,EAAA7B,GAAA,mBAAA74B,GAAkC,OAAA6mB,QAAA4Q,IAAA,2BAAAz3B,KAAiD06B,EAAA7B,GAAA,iBAAA74B,GAA2B,OAAA6mB,QAAA4Q,IAAA,wCAAAz3B,KAA8D1I,EAAAuhC,GAAA34B,EAAAjB,KAAAhB,QAAAhI,EAAA,SAAA+J,GAAoC,IAAAjJ,EAAAO,EAAAZ,IAAAwJ,EAAA6oC,kBAAA9qC,SAAyClH,GAAAiyC,aAAAC,QAAAtyC,EAAAI,GAAA0mB,KAAAqrB,UAAA9oC,KAAgD,OAAQkpC,QAAA,SAAAlpC,EAAAjJ,GAAsB,IAAAlB,EAAAmK,EAAAw4B,UAAAliC,EAAA0yC,aAAAG,QAAAxyC,EAAAI,IAA+C,GAAAiJ,EAAAw1B,QAAAlxB,KAAiBQ,EAAAR,GAAMlO,KAAAW,KAAOT,EAAA,CAAM,IAAA0H,EAAAyf,KAAAC,MAAApnB,GAAoB0J,EAAAw1B,QAAAx3B,GAAagC,EAAAw1B,QAAA3/B,GAAAihC,sBAAA,WAA8Cx/B,EAAA4K,IAAAq3B,EAAAoB,OAAA18B,SAAwBT,KAAAoH,EAAA5G,EAAA48B,YAAAC,SAA8BC,MAAA/jC,EAAAgkC,QAAA/6B,QAAuBopC,QAAA,WAAoBvX,SAAA8W,KAAAU,YAAA1xC,GAAA+iC,EAAAnO,WAAyCgM,SAAA,WAAqB,OAAAjhC,GAASgyC,WAAA,WAAuB,OAAA3xC,KAAY,IAAA9B,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,IAAA0G,EAAA1G,EAAA,IAAApB,EAAAoB,EAAA,IAAAiiC,EAAAjiC,EAAA,IAAAM,EAAAN,EAAA,IAAAxB,EAAAwB,IAAAM,GAAA2S,EAAAjT,EAAA,IAAAnB,EAAAmB,IAAAiT,GAAA5S,EAAAL,EAAA,IAAAmiC,EAAAniC,IAAAK,GAAAiN,EAAAtN,EAAA,GAAA4I,EAAA5I,EAAA,GAAAwN,EAAAxN,EAAA,IAAArB,EAAAqB,EAAA,IAAAgN,GAAAhN,IAAArB,GAAAmyB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAuL,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAASywB,EAAAn5B,EAAA,KAAU,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAa,IAAAX,EAAAW,EAAA,IAAYA,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAgBP,EAAAiH,EAAArH,EAAMA,EAAAQ,QAAS,SAAA6I,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAI,OAAA,WAAsB,SAAA6I,KAAc,aAAAA,GAAA,iBAAAA,GAAAS,MAAAga,QAAAza,KAAAk9B,EAAA3mC,OAAAV,EAAAmI,EAAAzH,CAAA2mC,EAAAl9B,IAAAk9B,EAA6E,SAAAnmC,EAAAiJ,GAAc,OAAAuG,EAAAtG,GAAAD,IAAAuG,EAAAtG,GAAAD,GAAA/D,IAA4B,SAAA3E,EAAA0I,EAAAjJ,GAAgBmJ,EAAA4E,EAAA9E,GAAAjJ,GAAA,IAAA0iC,IAAkB,SAAAz7B,EAAAjH,GAAc,IAAAO,EAAAf,OAAAI,EAAAomB,aAAAxmB,CAAAQ,GAAgCuN,EAAAhN,EAAAwF,IAAAxF,EAAU,IAAmKhB,EAAnKT,EAAAiP,EAAAxN,EAAAwF,IAAc,gBAAAxF,EAAAR,QAAAQ,EAAA6F,YAAA,IAAAtH,EAAAoG,MAAApG,EAAAoG,IAAA3E,EAAAR,MAAA2e,EAAAne,EAAAwF,KAAA,EAAAu+B,GAAA,GAAAxlC,EAAAqH,OAAA5F,EAAA4F,OAAA5F,EAAA2H,MAAAe,GAAgHlB,UAAAxI,KAAcA,EAAAgB,EAAAwF,IAAAxF,EAAA2H,KAAA3I,KAAmBgB,EAAU,SAAApB,EAAAa,GAAc,IAAAO,EAAAwN,EAAA/N,GAAW,QAAAJ,KAAAW,EAAA0H,KAAAuL,EAAA5T,GAAyB,IAAuFL,EAAvFT,EAAAyO,EAAAvN,GAAWlB,KAAAoJ,MAAAe,GAAclB,UAAAxI,KAAcA,EAAAT,EAAAiH,SAAA,EAAAxG,YAAmBiQ,EAAAtG,GAAAlJ,UAAAuN,EAAAvN,GAAmC,SAAAwiC,EAAAxiC,GAAc,IAA4Yb,EAA5YoB,EAAAf,OAAAI,EAAAqmB,cAAAzmB,CAAAQ,EAAA+mC,GAAAjoC,EAAAyB,EAAAkI,MAAAlJ,EAAAL,EAAAqB,EAAAwF,IAAwT,QAAAkB,KAAjQyyB,EAAAn5B,EAAAwF,IAAAxF,SAAAhB,EAAAigC,IAAAjgC,EAAAkgC,UAAAlgC,EAAAmgC,WAAAngC,EAAAwJ,MAAAxI,EAAAwI,MAAAxJ,EAAAgG,MAAAhF,EAAAgF,MAAA/F,OAAAk9B,KAAAn9B,EAAA0I,MAAAE,QAAA,SAAAc,GAAwH,IAAAjJ,EAAA2jC,EAAA16B,GAAAP,KAAgB,MAAA1I,GAAAlB,EAAAkB,IAAAlB,EAAAkB,KAAAJ,EAAAumB,WAAAxe,aAAA6L,EAAAvK,KAAqDnK,EAAAqJ,QAAA,SAAAc,EAAAjJ,GAA0BiJ,IAAArJ,EAAAumB,WAAAxe,cAAApI,EAAAigC,IAAAx/B,KAA0CT,EAAA0I,KAAA7I,EAAAukC,EAAA18B,IAA4B,OAAA1G,EAAA2H,MAAAe,GAAkBjB,WAAA7I,KAAeA,EAAAoB,EAAAwF,IAAAxF,EAAA2H,KAAA/I,KAAmBoB,EAAU,SAAAM,EAAAb,GAAc,IAAAO,EAAArB,EAAAc,GAA4C,QAAAJ,KAAjCW,EAAAs/B,OAAAt/B,EAAAs/B,cAAAt/B,EAAAs/B,MAAiCt/B,EAAA0H,KAAAuL,EAAA5T,UAAyB4P,EAAAgvB,GAAAx+B,GAAe,IAAyET,EAAzET,EAAA46B,EAAA15B,GAAWlB,KAAAoJ,MAAAe,GAAcjB,WAAAzI,KAAeA,EAAAT,EAAAiH,SAAA,EAAAxG,YAAmBm6B,EAAA15B,GAAoB,SAAAjB,EAAAiB,GAAc,IAAAO,EAAAf,OAAAI,EAAAsmB,UAAA1mB,CAAAQ,GAA6B2jC,EAAApjC,EAAAwF,IAAAxF,EAAAnB,EAAAmB,GAAe,IAAqQ0G,EAArQnI,EAAAI,EAAAqB,EAAAsI,SAAAtJ,EAAAm6B,EAAAn5B,EAAAsI,SAAkC,OAAAtJ,IAAA,IAAAA,EAAAyJ,WAAAxJ,OAAAk9B,KAAA59B,EAAAmJ,MAAAhD,SAAAzF,OAAAk9B,KAAAn9B,EAAAkJ,OAAAxD,OAAA,YAAAgE,GAAoGA,EAAAF,MAAAg3B,sBAAA,WAAyClyB,EAAA5E,MAAK4E,EAAA5E,KAAAc,MAAA2U,EAAAzV,EAAAc,IAAAhE,KAAA,IAAlJ,CAAmLjH,GAAAyB,EAAA2H,MAAAe,GAAehB,MAAAhB,KAAUA,EAAA1G,EAAAwF,IAAAxF,EAAA2H,KAAAjB,KAAmB1G,EAAU,SAAAiT,EAAAxT,GAAc,IAAwUT,EAAxUgB,EAAAojC,EAAA3jC,GAAW,GAAAO,EAAA,CAAM,IAAAX,EAAAV,EAAAqB,EAAAsI,SAAA/J,EAAAiP,EAAAxN,EAAAgG,eAAiC3G,EAAAqI,KAAAjI,UAAAlB,EAAAmJ,KAAAjI,GAAA,MAAAO,EAAAmI,aAAA5J,EAAAmhC,QAAA1/B,EAAAsI,gBAAAjJ,EAAA8/B,QAAAn/B,EAAAmI,aAAA9I,EAAA6/B,OAAAl/B,EAAAmI,QAAA9I,EAAAigC,OAAAjgC,EAAAigC,cAAAjgC,EAAAigC,MAAAjgC,EAAAsgC,KAAA,oBAAmLtgC,EAAAmK,WAAAjL,EAAAqhC,UAAA5/B,EAAAsI,UAAAtI,EAAA2H,MAAAe,GAAwDhB,MAAA1I,KAAUA,EAAAgB,EAAAwF,SAAA,EAAAxG,YAAqBokC,EAAA3jC,GAAkB,SAAAZ,EAAA6J,GAAc,IAAAjJ,EAAAiJ,EAAAJ,QAAAtI,EAAA0I,EAAA1C,OAAAzH,EAAAI,EAAAc,GAAAT,EAAAwO,EAAAxN,GAAA0G,EAAAyyB,EAAA15B,GAAgDT,EAAA0I,KAAAgB,EAAAlD,KAAA,EAAAkB,IAAAnI,EAAAmJ,KAAAgB,EAAAlD,KAAA,QAAAkD,EAAAP,aAAAnJ,EAAA0gC,QAAAjgC,GAAAiH,EAAAwB,OAAA,MAAAxB,EAAAwB,MAAAQ,EAAAP,QAAA5J,EAAA4gC,QAAAz2B,EAAAP,MAAAnJ,EAAA0H,EAAAwB,MAAAQ,EAAAP,QAAA9I,EAAAumB,WAAA3f,MAAAjH,EAAA0gC,QAAAjgC,GAAAlB,QAAAiL,IAAAxK,EAAA,MAAAT,EAAA0gC,KAAA1gC,EAAA4gC,QAAA5gC,EAAA0gC,KAAAjgC,IAAA4gC,UAAAngC,GAAAlB,UAAAS,EAAA4gC,UAAAngC,GAAAlB,EAAAohC,KAAA,SAAAj3B,GAAsRE,EAAA5J,EAAA0J,GAAA,KAAA6E,GAAA40B,OAAsB,SAAA9hC,EAAAZ,GAAc,GAAAA,EAAA+H,SAAA,QAAAxH,KAAAP,EAAA+H,SAAAd,EAAAjH,EAAA+H,SAAAxH,IAAuD,GAAAP,EAAAgI,UAAA,QAAAzH,KAAAP,EAAAgI,UAAAw6B,EAAAxiC,EAAAgI,UAAAzH,IAA0D,GAAAP,EAAAiI,KAAA,QAAA1H,KAAAP,EAAAiI,KAAAlJ,EAAAiB,EAAAiI,KAAA1H,IAA2C0I,EAAAjJ,EAAAkI,MAAU,SAAAw6B,IAAa/jB,GAAAmR,QAAA4Q,IAAA,kCAAAhiB,GAAoD,QAAAzV,EAAAzJ,OAAAk9B,KAAAhe,GAAA1e,EAAA,EAAAO,EAAA0I,EAAiCjJ,EAAAO,EAAA0E,OAAWjF,IAAA,GAAAb,EAAAoB,EAAAP,GAAA0e,EAAAvf,GAA8B,QAAAS,KAAVb,EAAAyQ,EAAAtG,GAAA/J,IAAUghC,UAAAtyB,EAAA9O,EAAAohC,UAAAvgC,IAA2C,IAAAd,KAAS4f,KAAI4lB,GAAA,EAAAx2B,GAAA,EAAW,QAAAvO,EAAA,EAAA0H,EAAAgC,EAAgB1J,EAAA0H,EAAAhC,OAAW1F,IAAA,CAAK,IAAAJ,EAAA8H,EAAA1H,GAA6C,QAAAK,KAAlCb,EAAAyQ,EAAAtG,GAAA/J,IAAA6kB,GAAA/e,OAAA,IAAAoM,EAAAlS,GAAAJ,GAAkCA,EAAAkhC,QAAAnhC,EAAAc,KAAAiO,EAAA9O,EAAAkhC,QAAArgC,IAAAd,EAAAc,IAAA,GAAuD,GAAAkO,GAAA,EAAAw2B,EAAA5B,QAAc,CAAK,IAAAF,EAAAhjC,OAAAk9B,KAAArrB,GAA0B,QAAAxQ,KAALwQ,KAAKmxB,EAAA,QAAAzjC,EAAAyU,EAAA,EAAApU,GAAAL,EAAAyQ,EAAAtG,GAAAs5B,EAAA3hC,KAAAmjB,GAAiDxQ,EAAApU,EAAA6F,OAAWuO,KAAA,EAAApU,EAAAoU,IAAAzU,EAAAmG,KAAoByZ,GAAAmR,QAAA4Q,IAAA,mBAAkC,SAAA7yB,EAAA5E,GAAc,QAAAjJ,GAAA,EAAAO,EAAA,EAAiBA,EAAA0I,EAAAy2B,QAAAz6B,OAAmB1E,IAAA,CAAK,IAAAX,EAAAqJ,EAAAy2B,QAAAn/B,GAAmB,YAAAX,EAAAsF,IAAA,CAAmBlF,GAAA,EAAK,MAAM,GAAAiJ,EAAAw2B,OAAAl/B,GAAAX,EAAAsF,IAAA+D,EAAA1D,MAAA,CAA8B,YAAA3F,EAAAshC,OAAA,CAAsBlhC,GAAA,EAAK,MAAMiJ,EAAAw2B,OAAAl/B,EAAA,GAAAX,EAAAshC,QAAwB,GAAAlhC,EAAA,GAAA2e,GAAAmR,QAAA4Q,IAAA,kBAAAz3B,EAAAlD,IAAAkD,EAAAF,MAAAE,EAAA42B,MAAA52B,EAAA42B,OAAA52B,EAAA42B,KAAAnG,EAAAzwB,EAAAlD,IAAAoB,UAAAqpB,MAAAuW,GAAA99B,EAAAi3B,MAAAt4B,OAAAqB,EAAAw2B,aAAoI,CAAK,IAAA3gC,EAAA46B,EAAAzwB,EAAAlD,IAAAoB,UAAAqpB,MAAAuW,EAAA99B,EAAAw2B,QAA0Cx2B,EAAAc,KAAAZ,EAAAF,EAAAc,IAAAjL,EAAA,MAAAmK,EAAAu2B,MAA+B,SAAAr2B,EAAAF,EAAAjJ,EAAAO,GAAkB,iBAAAP,GAAAiJ,EAAA9C,SAAA8C,EAAA9C,OAAAnG,EAAAiJ,EAAA/D,OAAA+D,EAAAi4B,OAAAj4B,EAAA/D,IAAA+D,EAAA/D,IAAAlF,EAAA0e,EAAAzV,EAAAlD,IAAAxF,EAAA+jC,GAAA,MAA6F,SAAAv2B,EAAA9E,GAAc,OAAAsE,EAAAtE,IAAAhC,GAAgBlB,GAAAkD,IAAKuG,EAAAtG,GAAAD,KAAAuG,EAAAtG,GAAAD,IAAqBlD,GAAAkD,EAAA/D,SAAA,EAAAi7B,aAA4BF,WAAWh4B,QAAQ+b,QAAS,SAAA9kB,EAAA+J,GAAc,OAAAuG,EAAAgvB,GAAAv1B,KAAAuG,EAAAgvB,GAAAv1B,IAA0BlD,GAAAkD,EAAAhB,QAAYi4B,KAAA,eAAqB,IAAA3yB,KAAQmsB,KAAKiK,KAAKn0B,GAAItG,MAAKs1B,OAAO2H,KAAKY,EAAA,KAAApoB,GAAA,EAAAtN,KAAiBqN,KAAK5Q,GAAA,EAAAw2B,GAAA,EAAW,OAAOxF,UAAA73B,EAAAi4B,aAAA//B,EAAAkgC,WAAAmD,EAAA5C,cAAA/+B,EAAAi/B,OAAA/gC,EAAAqgC,UAAA5rB,EAAA+sB,SAAA3/B,EAAAwgC,aAAA,SAAAn4B,GAAiH,IAAAjJ,KAAQO,KAAM,GAAA0I,EAAAlB,SAAA,QAAAnI,KAAAqJ,EAAAlB,SAAA,CAAuC,IAAAjJ,EAAAmK,EAAAlB,SAAAnI,GAAoBd,EAAAiH,KAAA/F,EAAAlB,EAAAiH,KAAA,GAAmB,GAAAkD,EAAAjB,UAAA,QAAApI,KAAAqJ,EAAAjB,UAAA,CAAyC,IAAAzI,EAAA0J,EAAAjB,UAAApI,GAAqBL,EAAAwG,KAAAxF,EAAAhB,EAAAwG,KAAA,GAAmBvG,OAAAk9B,KAAAnvB,GAAAg0B,OAAA,SAAAt4B,GAAkC,OAAAjJ,EAAAiJ,KAAYd,QAAAhJ,GAAAK,OAAAk9B,KAAAhD,GAAA6H,OAAA,SAAAt4B,GAA+C,OAAA1I,EAAA0I,KAAYd,QAAAtH,GAAAD,EAAAqI,IAAkBpB,SAAA,WAAqB,OAAOE,SAAAwF,EAAAvF,UAAA0xB,EAAAzxB,KAAA07B,EAAAz7B,KAAAi+B,IAAsC3E,SAAA,WAAqB,IAAAv4B,KAAS,QAAAjJ,KAAAwP,EAAAtG,GAAAD,EAAAjJ,GAAAwP,EAAAtG,GAAAlJ,GAAAkF,IAAmC,OAAA+D,GAASw1B,QAAAx1B,EAAAw4B,QAAA,WAA8B,OAAA0E,GAASvhB,WAAA,WAAuB,OAAAmiB,GAASrF,WAAA,SAAAz4B,GAAwB89B,EAAA99B,GAAI24B,SAAA,SAAA34B,GAAsB0V,EAAA1V,GAAItJ,IAAAK,EAAAmL,IAAA5K,EAAAg2B,OAAA,SAAAttB,EAAArJ,GAAkCW,EAAA0I,EAAArJ,EAAAI,EAAAiJ,MAAa64B,GAAA,SAAA74B,EAAAjJ,GAAkB+N,EAAA9E,GAAA+a,GAAA5c,KAAApH,IAAgB+hC,IAAA,SAAA94B,EAAAjJ,GAAmB,IAAAO,EAAAwN,EAAA9E,GAAW1I,EAAAyjB,GAAAhkB,EAAAO,EAAAyjB,GAAAud,OAAA,SAAAt4B,GAA+B,OAAAA,IAAAjJ,QAAkBgiC,MAAA,SAAA/4B,GAAmB,IAAAjJ,EAAAd,EAAA+J,GAAW4E,EAAA7N,KAAA+I,OAAA25B,KAAkB7C,KAAA,SAAA52B,GAAkB,IAAAjJ,EAAAd,EAAA+J,GAAWjJ,EAAA6/B,OAAA7/B,EAAA6/B,cAAA7/B,EAAA6/B,OAAiChB,MAAA6D,EAAAvc,WAAA5mB,KAAwBK,EAAAumB,cAAiB,IAAAvmB,EAAAW,EAAA,GAAAzB,EAAAyB,EAAA,IAAAhB,EAAA8xB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAqE,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAAU,SAAApK,OAAAiC,oBAAApC,qBAA0D,aAAa,SAAAujC,SAAAnb,KAAAF,SAAgC,IAAAsb,OAAA,uBAAwBC,QAAA,KAAoBC,QAAAC,KAAAH,OAAApb,KAAAqb,SAAqC,OAAAC,QAAAnjC,KAAA2nB,SAA6B9lB,oBAAAmG,EAAAg7B,UAA+B,SAAAh5B,EAAAjJ,EAAAO,GAAiB,aAA0NP,EAAAiH,EAA7M,SAAArH,EAAAqJ,EAAAjJ,GAAgB,oBAAAiJ,GAAA,iBAAAjJ,IAAA0J,MAAAga,QAAAza,KAAAS,MAAAga,QAAA1jB,IAAAiJ,IAAAjJ,EAAA,CAAwF,IAAAO,EAAAzB,KAAUmK,GAAI,QAAA1J,KAAAS,EAAA,CAAgB,IAAAiH,EAAAgC,EAAA1J,GAAAJ,EAAAa,EAAAT,QAAkB,IAAAJ,EAAAoB,EAAAhB,GAAAK,EAAAqH,EAAA9H,UAAAoB,EAAAhB,GAAmC,OAAAgB,EAAS,OAAAP,GAAe,IAAAlB,EAAAuyB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAsD,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAAU,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,EAAAjJ,GAAgB,YAAAskC,KAAgB9kC,OAAA6R,EAAApK,EAAAzH,CAAA,SAAAyJ,GAAyBjJ,EAAA05B,EAAAnsB,EAAAw3B,KAAAK,YAAAn8B,MAA0BzJ,OAAAsO,EAAAg7B,gBAAAtpC,CAAAyJ,IAAiC,SAAAnK,EAAAmK,GAAc,gBAAAq7B,KAAoB9kC,OAAA6R,EAAApK,EAAAzH,CAAA,SAAAQ,GAAyBiJ,EAAAywB,EAAAnsB,EAAAw3B,KAAAQ,cAAAvlC,MAA+BysC,MAAA,YAAkB,SAAAltC,EAAA0J,EAAAjJ,GAAgB,kBAAkB,OAAAA,EAAA05B,EAAAnsB,EAAAw3B,KAAAC,kBAAA/7B,IAAwC,SAAAhC,EAAAgC,EAAAjJ,EAAAO,GAAkB,IAAAzB,EAAAmK,EAAAggC,WAAAhiC,EAAAgC,EAAAi1B,SAAA/+B,EAAA,SAAA8J,GAA8C,kBAAkB,OAAAjJ,EAAA05B,EAAAnsB,EAAAw3B,KAAAE,kBAAAh8B,KAAyC,iBAAiBwjC,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA,oBAAAqO,EAAA5G,GAAA2oC,YAAArwC,EAAA,WAAAS,GAAAyjC,MAAAa,KAAiFr9B,KAAI,MAAAq9B,GAAWmI,MAAA,qBAA0BjtC,OAAA6R,EAAApK,EAAAzH,CAAA,SAAAyJ,GAAyBjJ,EAAA05B,EAAAnsB,EAAAw3B,KAAAK,YAAAn8B,OAA0B,WAAAzJ,OAAAkjC,EAAAz7B,EAAAzH,EAA4BitC,MAAA3tC,EAAA8lC,MAAAL,EAAAuI,QAAA3tC,EAAA,QAAA4tC,KAAA3tC,EAAA6J,IAAA4jC,MAAA,yBAAwE,KAAArtC,OAAAkjC,EAAAz7B,EAAAzH,EAAsBitC,MAAA3tC,EAAAgJ,OAAAy8B,EAAAuI,QAAA3tC,EAAA,SAAA4tC,KAAA3tC,MAAAytC,MAAA,wBAAyE,KAAArtC,OAAAkjC,EAAAz7B,EAAAzH,EAAsBitC,MAAA3tC,EAAAyH,QAAAg+B,EAAAuI,QAAA3tC,EAAA,UAAA4tC,KAAA3tC,EAAAD,IAAA0tC,MAAA,6BAA+EtsC,EAAAX,EAAAmnC,EAAAgJ,aAAwB,SAAA5wC,EAAA8J,EAAAjJ,EAAAO,GAAkB,IAAAX,EAAAqJ,EAAA+mC,WAAA/oC,EAAAgC,EAAAib,OAA8B,kBAAkBuoB,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA,gBAAAqO,EAAA5E,GAAAw6B,MAAAa,KAAiD1kC,GAAAgwC,YAAArwC,EAAA,OAAAS,KAA4B,SAAAskC,KAAe9kC,OAAA6R,EAAApK,EAAAzH,CAAA,SAAAyJ,GAAyBjJ,EAAA05B,EAAAnsB,EAAAw3B,KAAAK,YAAAn8B,MAA0B7J,EAAA6J,EAAA,SAAAhC,EAAA,iCAAmDwlC,MAAA,QAAY,IAAAjtC,OAAAkjC,EAAAz7B,EAAAzH,EAAmButC,KAAA3tC,EAAA6H,IAAAwlC,MAAAl/B,IAAAs/B,MAAA,eAAAC,QAAA,WAA6D,OAAA9sC,EAAA05B,EAAAnsB,EAAAw3B,KAAAI,aAAA,aAAwC,WAAesH,MAAA5+B,EAAAzO,GAAUmB,EAAArB,EAAA+H,EAAA0X,EAAA6zB,WAAA1zC,EAAAkB,IAA0B,SAAAwiC,EAAAv5B,EAAAjJ,EAAAO,GAAkB,IAAAX,EAAAqJ,EAAA+mC,WAAA/oC,EAAAgC,EAAAib,OAAA/kB,EAAAoB,EAAA4I,EAAAlC,EAAAk/B,EAAAsM,WAAmD,kBAAkBC,IAAA,SAAAzpC,GAAgB,GAAAA,KAAA0pC,cAAA,CAAuB,IAAApyC,EAAA0I,EAAA0pC,cAAA,WAAiC5S,sBAAA,WAAiC//B,EAAA05B,EAAAnsB,EAAAi5B,MAAAK,aAAyBvhB,MAAA/kB,EAAAglB,YAAAC,OAAAjlB,EAAAklB,mBAA+CgnB,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA,iBAAAqO,EAAA5E,GAAAw6B,MAAAa,KAAmD1kC,GAAAgwC,YAAArwC,EAAA,QAAAS,KAA6B,SAAAskC,KAAe9kC,OAAA6R,EAAApK,EAAAzH,CAAA,SAAAyJ,GAAyBjJ,EAAA05B,EAAAnsB,EAAAw3B,KAAAK,YAAAn8B,MAA0B7J,IAAA,UAAA6H,EAAA,kCAAqDwlC,MAAA,QAAYlsC,EAAA4I,EAAAoE,EAAA44B,EAAAtB,SAAA,IAAArlC,OAAAkjC,EAAAz7B,EAAAzH,EAAoCutC,KAAA3tC,EAAAmO,IAAAk/B,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA+N,IAAA,kBAAAs/B,MAAA,8CAAqGrtC,OAAAkjC,EAAAz7B,EAAAzH,EAAeutC,KAAA3tC,EAAA6H,IAAAwlC,MAAAl/B,IAAAs/B,MAAA,eAAAC,QAAA,WAA6D,OAAA9sC,EAAA05B,EAAAnsB,EAAAw3B,KAAAI,aAAA,aAAyChmC,EAAAL,EAAAkB,IAAW,SAAAa,EAAAoI,EAAAjJ,EAAAO,GAAkB,IAAAX,EAAAqJ,EAAA+mC,WAAA/oC,EAAAgC,EAAAgnC,KAAA9wC,EAAA8J,EAAAib,OAAAse,EAAAv5B,EAAAq9B,SAAoD9D,KAAA9jB,EAAAzX,EAAAulC,MAAe,IAAA3rC,EAAAoG,KAAAE,UAAApI,EAAAyjC,IAAA9jB,EAAAzX,EAAAulC,MAAA3rC,EAAAN,EAAAwN,EAAA3O,EAAAoQ,EAAAojC,kBAAAryC,EAAAwN,EAAAR,EAAAiC,EAAAqjC,iBAAAhyC,EAAAN,EAAAwN,EAAA5O,EAAAqQ,EAAAojC,kBAAAryC,EAAAwN,EAAA9G,EAAAuI,EAAAqjC,iBAA+I,kBAAkBpG,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA,kBAAAqO,EAAA5E,GAAAw6B,MAAAa,KAAmD1kC,GAAAgwC,YAAArwC,EAAA,SAAAS,KAA8B,SAAAskC,KAAe9kC,OAAA6R,EAAApK,EAAAzH,CAAA,SAAAyJ,GAAyBjJ,EAAA05B,EAAAnsB,EAAAw3B,KAAAK,YAAAn8B,MAA0B7J,EAAAD,EAAA,WAAAA,EAAA,eAAA0B,EAAA,gCAAqE4rC,MAAA,OAAY,gBAAiBA,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA+N,EAAAtG,EAAA,OAAAu7B,IAAA9jB,EAAAzX,EAAAulC,OAAA,YAAAsG,QAAA,WAA2E,OAAA9yC,EAAA05B,EAAAnsB,EAAAo4B,OAAAU,cAAA3nB,EAAAzX,EAAAulC,SAA8C,oBAAqBC,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA+N,EAAAtG,EAAA,OAAAu7B,IAAA9jB,EAAAzX,EAAAslC,SAAA,YAAAuG,QAAA,WAA6E,OAAA9yC,EAAA05B,EAAAnsB,EAAAo4B,OAAAU,cAAA3nB,EAAAzX,EAAAslC,WAAgD,WAAA/sC,OAAAkjC,EAAAz7B,EAAAzH,EAAyButC,KAAA3tC,EAAA6H,IAAAwlC,MAAAl/B,IAAAs/B,MAAA,eAAAC,QAAA,WAA6D,OAAA9sC,EAAA05B,EAAAnsB,EAAAw3B,KAAAI,aAAA,cAA0CpmC,EAAAD,EAAAkB,IAAW,SAAAjB,EAAAkK,EAAAjJ,EAAAO,GAAkB,IAAAX,EAAAqJ,EAAA27B,KAAArkC,EAAApB,EAAAqQ,EAAAujC,iBAAA,GAAAj0C,EAAAmK,EAAAnB,MAAAvH,EAAAiiC,EAAAhzB,EAAAwjC,kBAAA,GAAAzzC,EAAA0J,EAAA1C,OAAAhG,EAAAM,EAAA2O,EAAAyjC,mBAAA,GAAmH,kBAAkBxG,MAAAjtC,OAAAgU,EAAAvM,EAAAzH,CAAA,iBAAAoB,EAAA4S,IAAwCjT,EAAA0G,EAAAuI,EAAA0jC,cAAAp0C,EAAAS,EAAAK,GAA4BI,EAAAiH,EAAA,SAAAgC,GAAgB,OAAAA,EAAAlK,EAAA4kC,EAAAsF,aAA0B,IAAAz1B,EAAAjT,EAAA,IAAAnB,EAAAmB,EAAA,IAAAK,EAAAL,EAAA,GAAAmiC,EAAAniC,EAAA,IAAAsN,EAAAtN,EAAA,IAAA4I,EAAA5I,EAAA,IAAAwN,EAAAxN,EAAA,IAAArB,EAAAqB,EAAA,IAAAgN,EAAAhN,EAAA,IAAAm5B,EAAAn5B,EAAA,GAAAojC,EAAApjC,EAAA,IAAAiP,EAAAjP,EAAA,IAAA4lC,EAAA5lC,EAAA,IAAAwmC,EAAAxmC,EAAA,GAAAoe,EAAApe,EAAA,IAAA8Q,EAAA9Q,EAAA,IAAAme,EAAAne,EAAA,IAAAuN,EAAAvN,EAAA,GAAA+jC,EAAAjT,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAAkM,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,GAASs7B,EAAA/kC,OAAAgU,EAAAjG,EAAA/N,EAAgBmoC,MAAA/mC,EAAAqI,KAAY,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAb,IAAW,IAAAS,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,IAAA0G,GAAA1G,IAAAhB,GAAA,WAAiD,OAAAA,EAAAa,YAAA,QAA2BjB,EAAA,WAAe,SAAA8J,KAAc,IAAAjJ,EAAAiJ,EAAA+5B,gBAAAziC,EAAA8wB,KAA+BA,KAAA6R,OAAA,SAAAj6B,GAAwBA,IAAA1I,EAAA4yC,MAAAlqC,GAAA,GAAA1I,EAAA6yC,mBAAA,EAAA7yC,EAAA8yC,kBAA4DhiB,KAAA8R,QAAA,SAAAl6B,GAA0B,QAAAjJ,KAAAT,EAAA,EAAiBA,EAAAyF,UAAAC,OAAmB1F,IAAAS,EAAAT,EAAA,GAAAyF,UAAAzF,GAAwB,IAAA0H,EAAAzH,OAAAI,EAAAqH,EAAAzH,CAAAV,EAAAyO,EAAAijB,WAAA,EAAAxwB,IAAA22B,OAA8Cp2B,EAAA+yC,WAAAhI,aAAAriC,EAAAhC,GAAA1G,EAAA8yC,iBAAiDhiB,KAAA+R,kBAAA,WAAmC,IAAAn6B,EAAA1I,EAAAgzC,UAAkBtqC,MAAAuqC,YAAAjzC,EAAA+iC,cAAiCjS,KAAAgS,SAAA,WAA0B,QAAAp6B,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,QAAAJ,EAAAW,EAAA+yC,WAAAx0C,EAAA,EAAAS,EAAA0J,EAA+BnK,EAAAS,EAAA0F,OAAWnG,IAAA,CAAK,IAAAmI,EAAA1H,EAAAT,GAAWc,EAAA0rC,aAAA,aAAArkC,GAA+B1G,EAAA8yC,iBAAkBhiB,KAAAiS,UAAA,WAA2B,OAAA/iC,EAAA4yC,MAAA,IAAA5yC,EAAA+yC,WAAAhQ,aAA4CjS,KAAAkS,UAAA,SAAAt6B,GAA4B,IAAAjJ,EAAAR,OAAAI,EAAA2N,EAAA/N,CAAAyJ,GAAAnK,EAAAkB,EAAAujC,UAAAhkC,EAAAS,EAAAyzC,WAAAxsC,EAAA1G,EAAA+yC,WAAAlI,kBAAAtsC,EAAAS,GAAwF,OAAAgB,EAAA8yC,gBAAApsC,GAA2BoqB,KAAAmS,OAAA,WAAwB,IAAAv6B,EAAAhC,IAAU1G,EAAA+yC,WAAArqC,EAAA1I,EAAAmzC,uBAAAzqC,EAAAqhC,SAAA/pC,EAAA4yC,KAAA,GAAA5yC,EAAA6yC,mBAAA,EAAoF,IAAApzC,EAAAO,EAAAgzC,UAAkBvzC,MAAAwzC,YAAA,KAAsBniB,KAAA4R,gBAAA,SAAAh6B,GAAkC1I,EAAAozC,OAAApzC,EAAAozC,KAAAH,YAAA,IAAAjzC,EAAAozC,KAAA1qC,EAAA1I,EAAA6iC,qBAA+D/R,KAAAoS,MAAA,WAAuB,QAAAx6B,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,IAAAT,EAAAgB,EAAA+yC,WAAArsC,EAAAzH,OAAAI,EAAAqH,EAAAzH,CAAAV,EAAAyO,EAAAijB,WAAA,EAAAvnB,IAAA9J,EAAA8H,EAAA0vB,OAAA6L,EAAAv7B,EAAA2sC,UAAA/yC,EAAA2hC,EAAAjjC,EAAA4rC,cAAAhsC,EAAAqjC,GAAAjjC,EAAA4rC,cAAAhsC,GAA2H,OAAAoB,EAAA8yC,gBAAAxyC,GAA4B,IAAAtB,EAAA0H,IAAUoqB,KAAAwiB,iBAAA7zC,EAAAqxB,KAAAiiB,WAAA/zC,EAAA8xB,KAAAqiB,uBAAAn0C,EAAA+qC,SAAAjZ,KAAAyiB,SAAA,EAAAziB,KAAA+hB,mBAAA,EAAA/hB,KAAA8hB,KAAA,GAAA9hB,KAAAsiB,UAAA,EAAyJ,OAAA1qC,EAAAvI,UAAAqzC,cAAA,SAAA9qC,GAA6C,IAAAjJ,EAAAqxB,KAAWA,KAAAyiB,WAAgB,IAAAvzC,EAAA8wB,KAAAyiB,SAAoBt0C,OAAAV,EAAAK,EAAAK,CAAA,WAAuBe,IAAAP,EAAA8zC,UAAA7qC,OAAsBA,EAAAvI,UAAA6yC,QAAA,WAAgC,GAAAliB,KAAAsiB,KAAA,OAAAtiB,KAAAsiB,KAA8B,GAAAtiB,KAAAwiB,iBAAA,CAA0B,IAAA5qC,EAAA,oBAAAib,QAAkCsvB,YAAA,IAAe1Y,SAAA4W,cAAA,SAAiC,0BAAA5W,mBAAAkZ,KAAAnC,YAAA5oC,GAAAooB,KAAAsiB,KAAA1qC,MAAgFA,EAAAvI,UAAA2yC,cAAA,WAAsC,IAAApqC,EAAAooB,KAAArxB,EAAAqxB,KAAAiiB,WAAAhJ,SAAA/pC,EAAA8wB,KAAAqiB,wBAAoEriB,KAAA+hB,mBAAApzC,IAAAO,KAAA8wB,KAAAqiB,uBAAA1zC,EAAAqxB,KAAA+hB,mBAAA,EAAA/hB,KAAA0iB,cAAA,WAAwH,OAAA9qC,EAAAm6B,wBAAgCn6B,EAA/jE,IAAqkE,SAAAA,EAAAjJ,EAAAO,GAAiB,aAA6OP,EAAAiH,EAAhO,SAAArH,EAAAqJ,GAAc,IAAAjJ,KAAQO,EAAA,GAAM,QAAAhB,KAAA0J,EAAA,CAAgB,IAAAhC,EAAAgC,EAAA1J,GAAW,eAAAA,EAAAS,EAAAlB,EAAAsqC,WAAAniC,OAAkC,aAAA1H,EAAA,CAAqB,IAAAJ,EAAA8H,EAAQ,QAAAu7B,KAAArjC,EAAA,CAAgB,IAAA0B,EAAA1B,EAAAqjC,GAAWxiC,EAAAwiC,GAAA5iC,EAAAiB,GAAA81B,YAAkB,eAAAp3B,EAAAgB,EAAA0G,EAAAjH,EAAAT,GAAA0H,EAAgC,OAAO0vB,OAAA32B,EAAA4zC,UAAArzC,IAAsBP,EAAAuN,EAAA,SAAAtE,GAAsB,IAAAjJ,GAAOyzC,gBAAA,EAAAlQ,cAAgC,QAAAhjC,KAAA0I,EAAA,CAAgB,IAAArJ,EAAAqJ,EAAA1I,GAAW,eAAAA,EAAAP,EAAAyzC,WAAA7zC,EAAAI,EAAAujC,UAAAhjC,GAAAX,EAAiD,OAAAI,GAAU,IAAAlB,EAAAyB,EAAA,IAAYA,IAAAzB,IAAO,SAAAmK,EAAAjJ,GAAe,SAAAO,IAAa,UAAAwkB,MAAA,mCAAmD,SAAAnlB,IAAa,UAAAmlB,MAAA,qCAAqD,SAAAjmB,EAAAmK,GAAc,GAAApI,IAAAwuC,WAAA,OAAAA,WAAApmC,EAAA,GAAyC,IAAApI,IAAAN,IAAAM,IAAAwuC,WAAA,OAAAxuC,EAAAwuC,sBAAApmC,EAAA,GAA+D,IAAI,OAAApI,EAAAoI,EAAA,GAAc,MAAAjJ,GAAS,IAAI,OAAAa,EAAA5B,KAAA,KAAAgK,EAAA,GAAwB,MAAAjJ,GAAS,OAAAa,EAAA5B,KAAAoyB,KAAApoB,EAAA,KAA0B,SAAA1J,IAAamjC,GAAAtjC,IAAAsjC,GAAA,EAAAtjC,EAAA6F,OAAArE,EAAAxB,EAAAwI,OAAAhH,GAAAiN,GAAA,EAAAjN,EAAAqE,QAAAgC,KAAuD,SAAAA,IAAa,IAAAy7B,EAAA,CAAO,IAAAz5B,EAAAnK,EAAAS,GAAWmjC,GAAA,EAAK,QAAA1iC,EAAAY,EAAAqE,OAAmBjF,GAAE,CAAE,IAAAZ,EAAAwB,SAAaiN,EAAA7N,GAAMZ,KAAAyO,GAAAomC,MAAepmC,GAAA,EAAA7N,EAAAY,EAAAqE,OAAgB7F,EAAA,KAAAsjC,GAAA,WAAAz5B,GAAwB,GAAAlK,IAAAm1C,aAAA,OAAAA,aAAAjrC,GAA2C,IAAAlK,IAAAa,IAAAb,IAAAm1C,aAAA,OAAAn1C,EAAAm1C,0BAAAjrC,GAAmE,IAAIlK,EAAAkK,GAAK,MAAAjJ,GAAS,IAAI,OAAAjB,EAAAE,KAAA,KAAAgK,GAAsB,MAAAjJ,GAAS,OAAAjB,EAAAE,KAAAoyB,KAAApoB,KAA3L,CAAmNA,IAAK,SAAA9J,EAAA8J,EAAAjJ,GAAgBqxB,KAAA8iB,IAAAlrC,EAAAooB,KAAA/N,MAAAtjB,EAAwB,SAAAwiC,KAAc,IAAA3hC,EAAA9B,EAAAyU,EAAAvK,EAAArK,YAAuB,WAAY,IAAIiC,EAAA,mBAAAwuC,sBAAA9uC,EAA6C,MAAA0I,GAASpI,EAAAN,EAAI,IAAIxB,EAAA,mBAAAm1C,0BAAAt0C,EAAiD,MAAAqJ,GAASlK,EAAAa,GAAxI,GAAgJ,IAAAR,EAAAwB,KAAA8hC,GAAA,EAAA70B,GAAA,EAAqB2F,EAAA4gC,SAAA,SAAAnrC,GAAuB,IAAAjJ,EAAA,IAAA0J,MAAA1E,UAAAC,OAAA,GAAoC,GAAAD,UAAAC,OAAA,UAAA1E,EAAA,EAAkCA,EAAAyE,UAAAC,OAAmB1E,IAAAP,EAAAO,EAAA,GAAAyE,UAAAzE,GAAwBK,EAAAwG,KAAA,IAAAjI,EAAA8J,EAAAjJ,IAAA,IAAAY,EAAAqE,QAAAy9B,GAAA5jC,EAAAmI,IAAyC9H,EAAAuB,UAAAuzC,IAAA,WAA4B5iB,KAAA8iB,IAAA3jB,MAAA,KAAAa,KAAA/N,QAAgC9P,EAAAq5B,MAAA,UAAAr5B,EAAA6gC,SAAA,EAAA7gC,EAAA8gC,OAAwC9gC,EAAA+gC,QAAA/gC,EAAAghC,QAAA,GAAAhhC,EAAAihC,YAAqCjhC,EAAAsuB,GAAAU,EAAAhvB,EAAAkhC,YAAAlS,EAAAhvB,EAAAmhC,KAAAnS,EAAAhvB,EAAAuuB,IAAAS,EAAAhvB,EAAAohC,eAAApS,EAAAhvB,EAAAqhC,mBAAArS,EAAAhvB,EAAAshC,KAAAtS,EAAAhvB,EAAAuhC,gBAAAvS,EAAAhvB,EAAAwhC,oBAAAxS,EAAAhvB,EAAAyhC,UAAA,SAAAhsC,GAAgK,UAASuK,EAAA0hC,QAAA,SAAAjsC,GAAuB,UAAA8b,MAAA,qCAAoDvR,EAAA2hC,IAAA,WAAkB,WAAU3hC,EAAA4hC,MAAA,SAAAnsC,GAAqB,UAAA8b,MAAA,mCAAkDvR,EAAA6hC,MAAA,WAAoB,WAAU,SAAApsC,EAAAjJ,KAAgB,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAH,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,IAAA0G,EAAA,WAAyC,OAAA1H,EAAAa,YAAA,OAA2BjB,EAAA,WAAc,SAAA8J,KAAc,IAAAjJ,EAAAiJ,EAAA+5B,gBAAAziC,EAAA8wB,KAA+BA,KAAA6R,OAAA,SAAAj6B,GAAwBA,IAAA1I,EAAA4yC,MAAAlqC,GAAA,GAAA1I,EAAA6yC,mBAAA,EAAA7yC,EAAA8yC,kBAA4DhiB,KAAA8R,QAAA,SAAAl6B,GAA0B,QAAAjJ,KAAAT,EAAA,EAAiBA,EAAAyF,UAAAC,OAAmB1F,IAAAS,EAAAT,EAAA,GAAAyF,UAAAzF,GAAwB,IAAA0H,EAAArH,EAAA01C,gBAAAx2C,EAAA+jC,OAAArS,WAAA,EAAAxwB,IAAA22B,OAAyDp2B,EAAA+yC,WAAAhI,aAAAriC,EAAAhC,GAAA1G,EAAA8yC,iBAAiDhiB,KAAA+R,kBAAA,WAAmC,IAAAn6B,EAAA1I,EAAAgzC,UAAkBtqC,MAAAuqC,YAAAjzC,EAAA+iC,cAAiCjS,KAAAgS,SAAA,WAA0B,QAAAp6B,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,QAAAJ,EAAAW,EAAA+yC,WAAAx0C,EAAA,EAAAS,EAAA0J,EAA+BnK,EAAAS,EAAA0F,OAAWnG,IAAA,CAAK,IAAAmI,EAAA1H,EAAAT,GAAWc,EAAA0rC,aAAA,aAAArkC,GAA+B1G,EAAA8yC,iBAAkBhiB,KAAAiS,UAAA,WAA2B,OAAA/iC,EAAA4yC,MAAA,IAAA5yC,EAAA+yC,WAAAhQ,aAA4CjS,KAAAkS,UAAA,SAAAt6B,GAA4B,IAAAjJ,EAAAJ,EAAA21C,iBAAAtsC,GAAAnK,EAAAkB,EAAAujC,UAAAhkC,EAAAS,EAAAyzC,WAAAxsC,EAAA1G,EAAA+yC,WAAAlI,kBAAAtsC,EAAAS,GAA+F,OAAAgB,EAAA8yC,gBAAApsC,GAA2BoqB,KAAAmS,OAAA,WAAwB,IAAAv6B,EAAAhC,IAAU1G,EAAA+yC,WAAArqC,EAAA1I,EAAAmzC,uBAAAzqC,EAAAqhC,SAAA/pC,EAAA4yC,KAAA,GAAA5yC,EAAA6yC,mBAAA,EAAoF,IAAApzC,EAAAO,EAAAgzC,UAAkBvzC,MAAAwzC,YAAA,KAAsBniB,KAAA4R,gBAAA,SAAAh6B,GAAkC1I,EAAAozC,OAAApzC,EAAAozC,KAAAH,YAAA,IAAAjzC,EAAAozC,KAAA1qC,EAAA1I,EAAA6iC,qBAA+D/R,KAAAoS,MAAA,WAAuB,QAAAx6B,KAAAjJ,EAAA,EAAiBA,EAAAgF,UAAAC,OAAmBjF,IAAAiJ,EAAAjJ,GAAAgF,UAAAhF,GAAsB,IAAAT,EAAAgB,EAAA+yC,WAAArsC,EAAArH,EAAA01C,gBAAAx2C,EAAA+jC,OAAArS,WAAA,EAAAvnB,IAAA9J,EAAA8H,EAAA0vB,OAAA6L,EAAAv7B,EAAA2sC,UAAA/yC,EAAA2hC,EAAAjjC,EAAA4rC,cAAAhsC,EAAAqjC,GAAAjjC,EAAA4rC,cAAAhsC,GAAsI,OAAAoB,EAAA8yC,gBAAAxyC,GAA4B,IAAAtB,EAAA0H,IAAUoqB,KAAAwiB,iBAAA7zC,EAAAqxB,KAAAiiB,WAAA/zC,EAAA8xB,KAAAqiB,uBAAAn0C,EAAA+qC,SAAAjZ,KAAAyiB,SAAA,EAAAziB,KAAA+hB,mBAAA,EAAA/hB,KAAA8hB,KAAA,GAAA9hB,KAAAsiB,UAAA,EAAyJ,OAAA1qC,EAAAvI,UAAAqzC,cAAA,SAAA9qC,GAA6C,IAAAjJ,EAAAqxB,KAAWA,KAAAyiB,WAAgB,IAAAvzC,EAAA8wB,KAAAyiB,SAAoBh1C,EAAAwwC,IAAA,WAAiB/uC,IAAAP,EAAA8zC,UAAA7qC,OAAsBA,EAAAvI,UAAA6yC,QAAA,WAAgC,GAAAliB,KAAAsiB,KAAA,OAAAtiB,KAAAsiB,KAA8B,GAAAtiB,KAAAwiB,iBAAA,CAA0B,IAAA5qC,EAAA,oBAAAib,QAAkCsvB,YAAA,IAAe1Y,SAAA4W,cAAA,SAAiC,0BAAA5W,mBAAAkZ,KAAAnC,YAAA5oC,GAAAooB,KAAAsiB,KAAA1qC,MAAgFA,EAAAvI,UAAA2yC,cAAA,WAAsC,IAAApqC,EAAAooB,KAAArxB,EAAAqxB,KAAAiiB,WAAAhJ,SAAA/pC,EAAA8wB,KAAAqiB,wBAAoEriB,KAAA+hB,mBAAApzC,IAAAO,KAAA8wB,KAAAqiB,uBAAA1zC,EAAAqxB,KAAA+hB,mBAAA,EAAA/hB,KAAA0iB,cAAA,WAAwH,OAAA9qC,EAAAm6B,wBAAgCn6B,EAArlE,GAA2lEjJ,EAAA2iC,UAAAxjC,GAAc,SAAA8J,EAAAjJ,EAAAO,GAAiB,aAA6Of,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAjB,EAAAyB,EAAA,IAAYP,EAAAs1C,gBAA7R,SAAA11C,EAAAqJ,GAAc,IAAAjJ,KAAQO,EAAA,GAAM,QAAAhB,KAAA0J,EAAA,CAAgB,IAAAhC,EAAAgC,EAAA1J,GAAW,eAAAA,EAAAS,EAAAlB,EAAAsqC,WAAAniC,OAAkC,aAAA1H,EAAA,CAAqB,IAAAJ,EAAA8H,EAAQ,QAAAu7B,KAAArjC,EAAA,CAAgB,IAAA0B,EAAA1B,EAAAqjC,GAAWxiC,EAAAwiC,GAAA5iC,EAAAiB,GAAA81B,YAAkB,eAAAp3B,EAAAgB,EAAA0G,EAAAjH,EAAAT,GAAA0H,EAAgC,OAAO0vB,OAAA32B,EAAA4zC,UAAArzC,IAAmFP,EAAAu1C,iBAAA,SAAAtsC,GAAmD,IAAAjJ,GAAOyzC,gBAAA,EAAAlQ,cAAgC,QAAAhjC,KAAA0I,EAAA,CAAgB,IAAArJ,EAAAqJ,EAAA1I,GAAW,eAAAA,EAAAP,EAAAyzC,WAAA7zC,EAAAI,EAAAujC,UAAAhjC,GAAAX,EAAiD,OAAAI,IAAU,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,KAAW,SAAAkJ,EAAAjJ,EAAAO,GAAiB,aAAa,IAAAX,EAAAW,EAAA,IAAYA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAJ,EAAAqH,KAAa,SAAAgC,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAA,IAAAA,EAAA,IAAY,IAAAX,EAAAW,EAAA,IAAYA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAJ,EAAAqH,IAAa1G,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,KAA8B,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAA,IAAK,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAJ,IAASW,EAAAnB,EAAAY,EAAA,eAAuB,OAAAlB,IAAW,IAAAc,EAAA,SAAAqJ,EAAAjJ,GAAoB,OAAA0J,MAAAhJ,UAAA6gC,OAAAtiC,KAAAgK,EAAAjJ,IAAwClB,EAAA,SAAAmK,EAAAjJ,GAAiB,OAAA0J,MAAAhJ,UAAAqiB,IAAA9jB,KAAAgK,EAAAjJ,KAAsC,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,OAAA1J,EAAAi2C,KAAAvsC,EAAA4qB,YAAA,GAA+BtzB,EAAAnB,EAAAY,EAAA,eAAqB,OAAAiH,IAASjH,EAAAb,EAAA,SAAA8J,GAAkB,uBAAAA,IAAA,IAAAwsC,WAAAxsC,IAA6CjJ,EAAAiJ,EAAA,SAAAA,GAAiB,OAAArJ,EAAA,IAAAqJ,GAAA,KAAoBjJ,EAAAZ,EAAAQ,EAAAI,EAAAuN,EAAA,SAAAtE,GAAuB,UAAAA,QAAA,IAAAA,EAAA,CAAyB,IAAAjJ,GAAAiJ,EAAS,OAAAjJ,KAAAiJ,EAAA,KAAAA,IAAsBjJ,EAAAmJ,EAAA,SAAAF,GAAiB,IAAAjJ,EAAAlB,EAAA02C,KAAAvsC,GAAgB,GAAAjJ,KAAAiF,OAAA,OAAAjF,EAAA,IAAA4H,OAAA5H,EAAA,GAAA+0B,MAAA,OAAoD/0B,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAmB,OAAAiJ,EAAA,IAAAS,MAAAhJ,UAAAu0B,KAAAh2B,KAAAe,EAAA,UAAmD,IAAAlB,EAAA,kDAAAS,EAAA,sBAA6E0H,EAAA,SAAAgC,GAAiB,gBAAAjJ,GAAmB,OAAAA,EAAAiJ,KAAa,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAkB,OAAA4J,KAAAmP,MAAA9P,EAAAjJ,OAA0B,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAA,GAAK,IAAAX,EAAAW,EAAA,IAAYX,EAAAqH,EAAArH,EAAAqH,EAAArH,EAAAqH,GAAY,SAAAgC,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,OAAAuK,EAAAvK,IAAA,SAAAA,GAAyB,IAAAjJ,EAAAiJ,EAAAysC,MAAA,oCAAkD,GAAA11C,EAAA,CAAa,IAAAO,EAAAP,EAAA,GAAAJ,EAAA+1C,SAAA,IAAAp1C,EAAA0E,OAAA1E,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAuE,WAAAm5B,EAAAvwB,EAAAvJ,GAAA,OAAAA,GAAA,UAAAA,EAAA,OAA/J,CAA6MqJ,IAAA,SAAAA,GAAiB,IAAAjJ,EAAAR,OAAAkjC,EAAA5jC,EAAAU,CAAAyJ,GAAqB,GAAAjJ,IAAA,IAAAA,EAAAiF,QAAA,IAAAjF,EAAAiF,QAAA,CAAyC,IAAA1E,EAAAX,EAAAI,EAAA,GAAAlB,EAAA,SAAAc,EAAAL,EAAA,SAAAK,EAAAqH,EAAA,QAAArH,EAAAT,EAAAI,GAAAT,EAA0D,GAAAmI,GAAAnI,EAAAyB,EAAA4I,MAAY,CAAK,WAAAvJ,IAAAL,EAAA,UAAAwlB,MAAA,4BAA6DxkB,EAAAwN,EAAI,IAAAy0B,EAAAiT,WAAAz1C,EAAA,IAAAa,EAAAoG,GAAAnI,EAAA22C,WAAAz1C,EAAA,IAAAR,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,EAAA,IAAAjB,EAAAkI,GAAAnI,EAAA22C,WAAAz1C,EAAA,IAAAR,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,EAAA,IAAAwT,EAAArU,EAAAs2C,WAAAz1C,EAAA,MAAkI,WAAA05B,EAAAn5B,EAAAiiC,EAAA3hC,EAAA9B,EAAAyU,EAAArU,IAA7V,CAAuX8J,IAAAuK,EAAA,OAAc,SAAA1U,EAAAmK,EAAAjJ,EAAAO,GAAkB,WAAAm5B,EAAAvwB,EAAAF,EAAAjJ,EAAAO,EAAA,MAA2B,SAAAhB,EAAA0J,EAAAjJ,EAAAO,EAAAX,GAAoB,WAAA85B,EAAAvwB,EAAAF,EAAAjJ,EAAAO,EAAAf,OAAAkjC,EAAAvjC,EAAAK,CAAAI,IAAA,GAAwC,SAAAqH,EAAAgC,GAAc,IAAAjJ,EAAA4J,KAAAmP,MAAA9P,GAAoB,OAAAjJ,EAAA,WAAAA,EAAA6zB,SAAA,IAA+E,SAAA2O,EAAAv5B,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,GAA0B,OAAAgC,IAAAjJ,EAAA,IAAA05B,EAAAzwB,EAAA1I,EAAAX,EAAAd,EAAAS,EAAA0H,GAAA/H,EAAA+J,EAAAjJ,GAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,GAAkD,SAAApG,EAAAoI,EAAAjJ,EAAAO,EAAAX,GAAoB,IAAAiO,EAAA,OAAA5E,GAAA,EAAAjJ,GAAA,EAAAO,GAAA,EAAAX,GAAA,GAAkC,IAAAd,EAAA,IAAA2K,aAAA,GAA0B,OAAA3K,EAAA,GAAAmK,GAAA,EAAAnK,EAAA,GAAAkB,GAAA,EAAAlB,EAAA,GAAAyB,GAAA,EAAAzB,EAAA,GAAAc,GAAA,EAAAd,EAAiD,SAAAC,EAAAkK,EAAAjJ,EAAAO,GAAkB,IAAAX,EAAA2N,EAAAtE,GAAAjJ,GAAc,OAAAO,EAAA,IAAAA,EAAAX,IAAAW,EAAqB,SAAAiT,EAAAvK,GAAc,OAAA06B,EAAA16B,SAAA,EAAoBjJ,EAAAiH,EAAA1H,EAAM,IAAAH,EAAAwB,EAAA8hC,EAAAniC,EAAA,GAAAsN,EAAA,oBAAApE,aAAAN,EAAA,EAAA4E,EAAA,EAAA7O,IAAAE,MAAiE+J,EAAA4E,GAAA,SAAA9E,EAAAjJ,EAAAO,EAAAX,EAAAd,GAA4B,IAAAS,EAAA0H,EAAAgC,EAAA,IAAA9J,EAAAa,EAAA,IAAAwiC,EAAAjiC,EAAA,IAAAM,EAAA+I,KAAAkP,IAAA7R,EAAA9H,EAAAqjC,GAAAzjC,EAAA6K,KAAAmO,IAAA9Q,EAAA9H,EAAAqjC,GAAAhvB,GAAA3S,EAAA9B,GAAA,EAAAK,EAAAL,EAAA8B,EAAqL,OAAnGtB,EAAAR,IAAA8B,EAAA,EAAAoG,IAAAlI,GAAAI,EAAAqjC,GAAApjC,EAAAD,IAAAJ,EAAA,GAAAyjC,EAAAv7B,GAAA7H,EAAAojC,IAAAzjC,EAAA,GAAAkI,EAAA9H,GAAAC,EAAA,GAAAG,EAAAqK,KAAAkP,IAAA,GAAAvZ,EAAA,UAAAA,GAAA,KAAmG,IAAAm6B,EAAA3rB,EAAAxO,EAAAR,IAAA8B,EAAA,EAAA2S,GAAA,GAAApU,GAAAL,EAAA8B,GAAAzB,GAAA,EAAAL,EAAA8B,GAAA2S,EAAA5T,EAAAd,IAA4DM,EAAA2O,EAAA5E,GAAA,SAAAF,EAAAjJ,EAAAO,EAAAX,EAAAd,GAA4B,IAAAS,EAAA0J,EAAA,IAAAhC,EAAAjH,EAAAb,EAAAoB,EAAoB,OAAA0G,EAAA,WAAAyyB,EAAAvwB,EAAA0E,EAAA,IAAA1O,EAAA0O,IAAAjO,EAAAd,GAAyC,QAAA0jC,EAAArjC,EAAA,GAAAA,GAAA,EAAA8H,GAAA9H,EAAA8H,EAAA9H,EAAA8H,EAAApG,EAAA,EAAA1B,EAAAqjC,EAAAzjC,EAAA,EAAAyU,EAAA,EAAApU,EAAA,EAAAwB,EAAA,EAAuDA,EAAA,EAAIA,IAAA,CAAK,IAAA8hC,EAAAnjC,EAAA,MAAAqB,EAAA,GAAmB8hC,EAAA,GAAAA,MAAA,GAAAA,IAAkB,IAAA70B,OAAA,EAAaA,EAAA,EAAA60B,EAAA,EAAA7hC,EAAA,GAAA2hC,EAAA3hC,GAAA6hC,EAAA,EAAAA,EAAA,EAAAF,EAAA,EAAAE,EAAA,EAAA7hC,GAAA2hC,EAAA3hC,IAAA,IAAA6hC,GAAA,EAAA7hC,EAAAgN,GAAA,QAAAjN,EAAA7B,EAAA8O,EAAA,IAAAjN,EAAA4S,EAAA3F,EAAAzO,EAAAyO,EAAqF,WAAA6rB,EAAAvwB,EAAApK,EAAAyU,EAAApU,EAAAQ,EAAAd,IAA0BM,GAAAmO,IAAA3M,MAAWuI,GAAAtI,EAAA,eAAAD,EAAAmN,GAAAlN,EAAA,WAAAD,GAAA84B,EAAA,WAAyD,SAAAzwB,IAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,GAAwB8xB,KAAAukB,QAAA3sC,EAAAooB,KAAAwkB,UAAAt2C,EAAA8xB,KAAAykB,QAAAj1C,EAAA9B,EAAAkK,EAAA,EAAAjJ,GAAAjB,EAAAkK,EAAA,EAAA1I,GAAAxB,EAAAkK,EAAA,EAAArJ,GAAAb,EAAAkK,EAAA,EAAAnK,IAAoF,OAAAmK,EAAA8sC,cAAA,SAAA9sC,EAAAjJ,GAAqC,IAAAO,EAAAP,EAAA41C,QAAAh2C,EAAAI,EAAA81C,QAAAh3C,EAAAkB,EAAA61C,UAA0C,OAAAt1C,IAAA0I,EAAAjJ,EAAAd,EAAAqB,EAAA0I,GAAArJ,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAd,IAA6CmK,EAAAvI,UAAAmzB,SAAA,WAAiC,IAAA5qB,EAAAjJ,EAAAO,EAAA8wB,KAAAukB,QAAAh2C,EAAAyxB,KAAAykB,QAAAh3C,EAAAuyB,KAAAwkB,UAAuD,GAAAt1C,IAAA4I,EAAAF,EAAAnK,EAAA,aAAAkB,GAAA4J,KAAAmP,MAAAnZ,EAAA,IAAAgK,KAAAmP,MAAAnZ,EAAA,IAAAgK,KAAAmP,MAAAnZ,EAAA,SAAiF,CAAK,GAAAW,IAAAwN,EAAA,UAAAgX,MAAA,wBAAiD9b,EAAAnK,EAAA,aAAAkB,GAAA4J,KAAAmP,MAAAnZ,EAAA,IAAAJ,OAAAkjC,EAAAlvB,EAAAhU,QAAAkjC,EAAAhkB,EAAAlf,CAAAI,EAAA,SAAAJ,OAAAkjC,EAAAlvB,EAAAhU,QAAAkjC,EAAAhkB,EAAAlf,CAAAI,EAAA,UAA4G,OAAAd,GAAAkB,EAAAoH,KAAA5H,OAAAkjC,EAAAz5B,EAAAzJ,QAAAkjC,EAAAhkB,EAAAlf,CAAAI,EAAA,UAAAJ,OAAAkjC,EAAAz7B,EAAAzH,CAAAyJ,EAAAjJ,IAAsEiJ,EAAAvI,UAAAs1C,YAAA,WAAoC,IAAAh2C,EAAAiJ,EAAA8sC,cAAA5sC,EAAAkoB,MAAAykB,QAAsC,WAAA7uC,EAAAjH,EAAA,IAAAiH,EAAAjH,EAAA,IAAAiH,EAAAjH,EAAA,KAAAmlB,eAAkDlc,EAAAvI,UAAAu1C,MAAA,WAA8B,IAAAhtC,EAAAooB,KAAAykB,QAAmB,OAAAtT,EAAAnR,KAAAukB,QAAA7nC,EAAA9E,EAAA,GAAAA,EAAA,GAAAA,EAAA,UAA6CA,EAAAvI,UAAAw1C,OAAA,WAA+B,IAAAjtC,EAAAooB,KAAAykB,QAAmB,OAAAtT,EAAAnR,KAAAukB,QAAA7nC,EAAA9E,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAAgDA,EAAAvI,UAAAy1C,MAAA,WAA8B,IAAAltC,EAAAooB,KAAAykB,QAAmB,OAAAtT,EAAAnR,KAAAukB,QAAAzsC,EAAAF,EAAA,GAAAA,EAAA,GAAAA,EAAA,UAA6CA,EAAAvI,UAAA01C,OAAA,WAA+B,IAAAntC,EAAAooB,KAAAykB,QAAmB,OAAAtT,EAAAnR,KAAAukB,QAAAzsC,EAAAF,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAAgDA,EAAAvI,UAAA21C,IAAA,WAA4B,OAAAhlB,KAAAukB,UAAAzsC,EAAAkoB,UAAA8kB,SAAAL,QAAA,IAAsD7sC,EAAAvI,UAAA41C,MAAA,WAA8B,OAAAjlB,KAAAukB,UAAAzsC,EAAAkoB,UAAA8kB,SAAAL,QAAA,IAAsD7sC,EAAAvI,UAAA61C,KAAA,WAA6B,OAAAllB,KAAAukB,UAAAzsC,EAAAkoB,UAAA8kB,SAAAL,QAAA,IAAsD7sC,EAAAvI,UAAA81C,IAAA,WAA4B,OAAAnlB,KAAAukB,UAAA7nC,EAAAsjB,UAAA4kB,SAAAH,QAAA,IAAsD7sC,EAAAvI,UAAA+1C,WAAA,WAAmC,OAAAplB,KAAAukB,UAAA7nC,EAAAsjB,UAAA4kB,SAAAH,QAAA,IAAsD7sC,EAAAvI,UAAAg2C,UAAA,WAAkC,OAAArlB,KAAAukB,UAAA7nC,EAAAsjB,UAAA4kB,SAAAH,QAAA,IAAsD7sC,EAAAvI,UAAAi2C,MAAA,WAA8B,OAAAtlB,KAAAykB,QAAA,IAAuB7sC,EAAAvI,UAAAk2C,QAAA,WAAgC,OAAAvlB,KAAAslB,SAAoB1tC,EAAAvI,UAAAkL,OAAA,WAA+B,IAAA5L,EAAAiJ,EAAA8sC,cAAA5sC,EAAAkoB,MAAAykB,QAAsC,OAAA7sC,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAAE,EAAA,IAAAnJ,EAAA,OAAAA,EAAA,OAAAA,EAAA,GAAAqxB,KAAAykB,QAAA,GAAAzkB,KAAAwkB,aAAwG5sC,EAAAvI,UAAAm2C,QAAA,SAAA72C,EAAAO,GAAmC,IAAAX,EAAAqJ,EAAA8sC,cAAAhoC,EAAAsjB,MAAAykB,QAAAh3C,EAAAyO,EAAAQ,GAAA,GAAAxO,EAAAK,EAAA,IAAAW,EAAAzB,EAAAc,EAAA,GAAAd,GAAAU,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,GAAmF,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAA8E,EAAAnO,EAAA,GAAAA,EAAA,GAAAL,EAAA8xB,KAAAykB,QAAA,GAAAzkB,KAAAwkB,aAAyF5sC,EAAAvI,UAAAo2C,OAAA,SAAA92C,EAAAO,GAAkC,IAAAX,EAAAqJ,EAAA8sC,cAAAhoC,EAAAsjB,MAAAykB,QAAAh3C,EAAAc,EAAA,IAAAW,EAAAX,EAAA,GAAA2N,EAAAQ,GAAA,IAAAvO,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,GAA6E,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAA8E,EAAAnO,EAAA,GAAAA,EAAA,GAAAd,EAAAuyB,KAAAykB,QAAA,GAAAzkB,KAAAwkB,aAAyF5sC,EAAAvI,UAAAq2C,SAAA,SAAA/2C,EAAAO,GAAoC,IAAAX,EAAAqJ,EAAA8sC,cAAAhoC,EAAAsjB,MAAAykB,QAAAh3C,EAAAyO,EAAAQ,GAAA,GAAAxO,EAAAK,EAAA,IAAAW,EAAAzB,EAAAc,EAAA,GAAAd,GAAAU,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,GAAmF,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAA8E,EAAAnO,EAAA,GAAAL,EAAAK,EAAA,GAAAyxB,KAAAykB,QAAA,GAAAzkB,KAAAwkB,aAAyF5sC,EAAAvI,UAAAs2C,WAAA,SAAAh3C,EAAAO,GAAsC,IAAAX,EAAAqJ,EAAA8sC,cAAAhoC,EAAAsjB,MAAAykB,QAAAh3C,EAAAyO,EAAAQ,GAAA,GAAAxO,EAAAK,EAAA,IAAAW,EAAAX,EAAA,GAAAd,GAAAU,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,GAAiF,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAA8E,EAAAnO,EAAA,GAAAL,EAAAK,EAAA,GAAAyxB,KAAAykB,QAAA,GAAAzkB,KAAAwkB,aAAyF5sC,EAAAvI,UAAAu2C,UAAA,WAAkC,OAAA5lB,KAAA2lB,WAAA,IAA0B/tC,EAAAvI,UAAAw2C,KAAA,SAAAl3C,GAA8B,IAAAO,EAAA8wB,KAAAykB,QAAAl2C,EAAAb,EAAAoK,EAAA,EAAA3J,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,IAA2C,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAAooB,KAAAukB,QAAAr1C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAX,GAAA,KAA6EqJ,EAAAvI,UAAAy2C,QAAA,SAAAn3C,EAAAO,GAAmC,IAAAX,EAAAyxB,KAAAykB,QAAAh3C,EAAAC,EAAAoK,EAAA,EAAAvJ,EAAA,IAAAW,EAAAX,EAAA,MAAAJ,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,IAA2D,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAAooB,KAAAukB,QAAAh2C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAd,GAAA,KAA6EmK,EAAAvI,UAAA02C,OAAA,SAAAp3C,EAAAO,GAAkC,IAAAX,EAAAyxB,KAAAykB,QAAAh3C,EAAAC,EAAAoK,EAAA,EAAAvJ,EAAA,IAAAW,EAAAX,EAAA,MAAAJ,OAAAkjC,EAAAvjC,EAAAK,CAAAQ,IAA2D,OAAAiJ,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAAooB,KAAAukB,QAAAh2C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAd,GAAA,KAA6EmK,EAAAvI,UAAA22C,IAAA,SAAAr3C,EAAAO,GAA+B,IAAAzB,EAAA,SAAAmK,GAAkB,OAAAA,aAAAywB,EAAAzwB,EAAArJ,EAAAqJ,GAAlB,CAA+CjJ,GAAAT,EAAA0J,EAAA8sC,cAAA5sC,EAAAkoB,MAAAykB,QAAA7uC,EAAAgC,EAAA8sC,cAAA5sC,EAAArK,GAAAg3C,QAAA32C,OAAA,IAAAoB,EAAA,GAAAA,EAAAiiC,EAAA,EAAArjC,EAAA,EAAA0B,EAAA+I,KAAAiM,IAAAtW,EAAA,GAAA0H,EAAA,IAAAlI,IAAAyjC,EAAA3hC,IAAA,EAAA2hC,KAAA3hC,IAAA,EAAA2hC,EAAA3hC,IAAA,KAAA2S,EAAA,EAAAzU,EAAAK,EAAA,IAAA6J,EAAAE,EAAAS,KAAAmP,MAAAxZ,EAAA,GAAAR,EAAAkI,EAAA,GAAAuM,GAAA5J,KAAAmP,MAAAxZ,EAAA,GAAAR,EAAAkI,EAAA,GAAAuM,GAAA5J,KAAAmP,MAAAxZ,EAAA,GAAAR,EAAAkI,EAAA,GAAAuM,GAAAjU,EAAA,GAAAJ,EAAA8H,EAAA,MAAA9H,GAAAkyB,KAAAwkB,WAAA/2C,EAAA+2C,WAAoS,OAAA5sC,EAAA8sC,cAAA1kB,KAAAukB,QAAAx2C,IAAuC6J,EAAAvI,UAAA42C,KAAA,SAAAruC,GAA8B,OAAAk9B,EAAAkR,IAAAhmB,KAAApoB,IAAqBA,EAAAvI,UAAA40B,MAAA,SAAArsB,GAA+B,OAAAuG,EAAA6nC,IAAAhmB,KAAApoB,IAAqBA,EAAAvI,UAAA62C,KAAA,SAAAv3C,GAA8B,IAAAO,EAAA0I,EAAA8sC,cAAAhoC,EAAAsjB,MAAAykB,QAAsC,OAAA7sC,EAAA8sC,cAAA1kB,KAAAukB,QAAA,IAAA3sC,EAAA8E,EAA30J,SAAA9E,GAAc,QAAAA,EAAA,SAAAA,EAAA,SAA6zJ9J,CAAAoB,EAAA,GAAAP,GAAAO,EAAA,GAAAA,EAAA,GAAA8wB,KAAAykB,QAAA,GAAAzkB,KAAAwkB,aAAiG5sC,EAAn8H,GAAs8H06B,GAAM6T,UAAA14C,EAAA,aAAA24C,aAAA34C,EAAA,aAAA44C,KAAA54C,EAAA,WAAA64C,WAAA74C,EAAA,aAAA84C,MAAA94C,EAAA,aAAA+4C,MAAA/4C,EAAA,aAAAg5C,OAAAh5C,EAAA,aAAAi5C,MAAAj5C,EAAA,OAAAk5C,eAAAl5C,EAAA,aAAAy3C,KAAAz3C,EAAA,SAAAm5C,WAAAn5C,EAAA,YAAAo5C,MAAAp5C,EAAA,WAAAq5C,UAAAr5C,EAAA,YAAAs5C,UAAAt5C,EAAA,YAAAu5C,WAAAv5C,EAAA,WAAAw5C,UAAAx5C,EAAA,YAAAy5C,MAAAz5C,EAAA,YAAA05C,eAAA15C,EAAA,aAAA25C,SAAA35C,EAAA,aAAA45C,QAAA55C,EAAA,WAAA65C,KAAA75C,EAAA,WAAA85C,SAAA95C,EAAA,SAAA+5C,SAAA/5C,EAAA,WAAAg6C,cAAAh6C,EAAA,YAAAi6C,SAAAj6C,EAAA,aAAAk6C,UAAAl6C,EAAA,SAAAm6C,SAAAn6C,EAAA,aAAAo6C,UAAAp6C,EAAA,aAAAq6C,YAAAr6C,EAAA,WAAAs6C,eAAAt6C,EAAA,WAAAu6C,WAAAv6C,EAAA,WAAAw6C,WAAAx6C,EAAA,YAAAy6C,QAAAz6C,EAAA,SAAA06C,WAAA16C,EAAA,aAAA26C,aAAA36C,EAAA,aAAA46C,cAAA56C,EAAA,WAAA66C,cAAA76C,EAAA,UAAA86C,cAAA96C,EAAA,UAAA+6C,cAAA/6C,EAAA,WAAAg7C,WAAAh7C,EAAA,WAAAi7C,SAAAj7C,EAAA,YAAAk7C,YAAAl7C,EAAA,WAAAm7C,QAAAn7C,EAAA,aAAAo7C,QAAAp7C,EAAA,aAAAq7C,WAAAr7C,EAAA,YAAAs7C,UAAAt7C,EAAA,WAAAu7C,YAAAv7C,EAAA,aAAAw7C,YAAAx7C,EAAA,WAAAy7C,QAAAz7C,EAAA,WAAA07C,UAAA17C,EAAA,aAAA27C,WAAA37C,EAAA,aAAA47C,KAAA57C,EAAA,WAAA67C,UAAA77C,EAAA,YAAA87C,KAAA97C,EAAA,aAAAw3C,MAAAx3C,EAAA,SAAA+7C,YAAA/7C,EAAA,YAAAg8C,KAAAh8C,EAAA,aAAAi8C,SAAAj8C,EAAA,aAAAk8C,QAAAl8C,EAAA,aAAAm8C,UAAAn8C,EAAA,WAAAo8C,OAAAp8C,EAAA,UAAAq8C,MAAAr8C,EAAA,aAAAs8C,MAAAt8C,EAAA,aAAAu8C,SAAAv8C,EAAA,aAAAw8C,cAAAx8C,EAAA,aAAAy8C,UAAAz8C,EAAA,WAAA08C,aAAA18C,EAAA,aAAA28C,UAAA38C,EAAA,aAAA48C,WAAA58C,EAAA,aAAA68C,UAAA78C,EAAA,aAAA88C,qBAAA98C,EAAA,aAAA+8C,UAAA/8C,EAAA,aAAAg9C,WAAAh9C,EAAA,aAAAi9C,UAAAj9C,EAAA,aAAAk9C,UAAAl9C,EAAA,aAAAm9C,YAAAn9C,EAAA,aAAAo9C,cAAAp9C,EAAA,YAAAq9C,aAAAr9C,EAAA,aAAAs9C,eAAAt9C,EAAA,aAAAu9C,eAAAv9C,EAAA,aAAAw9C,eAAAx9C,EAAA,aAAAy9C,YAAAz9C,EAAA,aAAA09C,KAAA19C,EAAA,SAAA29C,UAAA39C,EAAA,WAAA49C,MAAA59C,EAAA,aAAA69C,OAAA79C,EAAA,SAAA89C,iBAAA99C,EAAA,aAAA+9C,WAAA/9C,EAAA,SAAAg+C,aAAAh+C,EAAA,YAAAi+C,aAAAj+C,EAAA,aAAAk+C,eAAAl+C,EAAA,YAAAm+C,gBAAAn+C,EAAA,aAAAo+C,kBAAAp+C,EAAA,WAAAq+C,gBAAAr+C,EAAA,YAAAs+C,gBAAAt+C,EAAA,YAAAu+C,aAAAv+C,EAAA,WAAAw+C,UAAAx+C,EAAA,aAAAy+C,UAAAz+C,EAAA,aAAA0+C,SAAA1+C,EAAA,aAAA2+C,YAAA3+C,EAAA,aAAA4+C,KAAA5+C,EAAA,SAAA6+C,QAAA7+C,EAAA,aAAA8+C,MAAA9+C,EAAA,WAAA++C,UAAA/+C,EAAA,YAAAg/C,OAAAh/C,EAAA,WAAAi/C,OAAAj/C,EAAA,WAAAk/C,cAAAl/C,EAAA,YAAAu3C,IAAAv3C,EAAA,SAAAm/C,OAAAn/C,EAAA,aAAAo/C,KAAAp/C,EAAA,WAAAq/C,YAAA5+C,EAAA,SAAA6+C,MAAAt/C,EAAA,aAAAu/C,OAAAv/C,EAAA,YAA6pF0Q,GAAAm0B,EAAA6T,UAAA7T,EAAA8T,aAAA9T,EAAA+T,KAAA/T,EAAAgU,WAAAhU,EAAAiU,MAAAjU,EAAAkU,MAAAlU,EAAAmU,OAAAnU,EAAAoU,OAAA5R,GAAAxC,EAAAqU,eAAArU,EAAA4S,KAAA5S,EAAAsU,WAAAtU,EAAAuU,MAAAvU,EAAAwU,UAAAxU,EAAAyU,UAAAzU,EAAA0U,WAAA1U,EAAA2U,UAAA3U,EAAA4U,MAAA5U,EAAA6U,eAAA7U,EAAA8U,SAAA9U,EAAA+U,QAAA/U,EAAAgV,KAAAhV,EAAAiV,SAAAjV,EAAAkV,SAAAlV,EAAAmV,cAAAnV,EAAAoV,SAAApV,EAAAqV,UAAArV,EAAAsV,SAAAtV,EAAAuV,UAAAvV,EAAAwV,YAAAxV,EAAAyV,eAAAzV,EAAA0V,WAAA1V,EAAA2V,WAAA3V,EAAA4V,QAAA5V,EAAA6V,WAAA7V,EAAA8V,aAAA9V,EAAA+V,cAAA/V,EAAAgW,cAAAhW,EAAAiW,cAAAjW,EAAAkW,cAAAlW,EAAAmW,WAAAnW,EAAAoW,SAAApW,EAAAqW,YAAArW,EAAAsW,QAAAtW,EAAAuW,QAAAvW,EAAAwW,WAAAxW,EAAAyW,UAAAzW,EAAA0W,YAAA1W,EAAA2W,YAAA3W,EAAA4W,QAAA5W,EAAA6W,UAAA7W,EAAA8W,WAAA9W,EAAA+W,KAAA/W,EAAAgX,UAAAhX,EAAAiX,KAAAjX,EAAA2S,MAAA3S,EAAAkX,YAAAlX,EAAAmX,KAAAnX,EAAAoX,SAAApX,EAAAqX,QAAArX,EAAAsX,UAAAtX,EAAAuX,OAAAvX,EAAAwX,MAAAxX,EAAAyX,MAAAzX,EAAA0X,SAAA1X,EAAA2X,cAAA3X,EAAA4X,UAAA5X,EAAA6X,aAAA7X,EAAA8X,UAAA9X,EAAA+X,WAAA/X,EAAAgY,UAAAhY,EAAAiY,qBAAAjY,EAAAkY,UAAAlY,EAAAmY,WAAAnY,EAAAoY,UAAApY,EAAAqY,UAAArY,EAAAsY,YAAAtY,EAAAuY,cAAAvY,EAAAwY,aAAAxY,EAAAyY,eAAAzY,EAAA0Y,eAAA1Y,EAAA2Y,eAAA3Y,EAAA4Y,YAAA5Y,EAAA6Y,KAAA7Y,EAAA8Y,UAAA9Y,EAAA+Y,MAAA/Y,EAAAgZ,OAAAhZ,EAAAiZ,iBAAAjZ,EAAAkZ,WAAAlZ,EAAAmZ,aAAAnZ,EAAAoZ,aAAApZ,EAAAqZ,eAAArZ,EAAAsZ,gBAAAtZ,EAAAuZ,kBAAAvZ,EAAAwZ,gBAAAxZ,EAAAyZ,gBAAAzZ,EAAA0Z,aAAA1Z,EAAA2Z,UAAA3Z,EAAA4Z,UAAA5Z,EAAA6Z,SAAA7Z,EAAA8Z,YAAA9Z,EAAA+Z,KAAA/Z,EAAAga,QAAAha,EAAAia,MAAAja,EAAAka,UAAAla,EAAAma,OAAAna,EAAAoa,OAAApa,EAAAqa,cAAAra,EAAA0S,IAAA1S,EAAAsa,OAAAta,EAAAua,KAAAva,EAAAwa,YAAAxa,EAAAya,OAAm2Cza,EAAA0a,QAAS,SAAAp1C,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAA,IAAK,SAAA0I,EAAAjJ,EAAAO,GAAiB,cAAa,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAA,IAAK,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAuN,EAAA,SAAAtE,EAAAjJ,GAAkB,wBAAwByG,KAAA,QAAA1G,MAAAkJ,EAAAsN,MAAAuC,IAAA,GAAAf,IAAA,EAAAumC,KAAA,GAAAC,SAAA,SAAAt1C,GAAqE,OAAAjJ,EAAAT,EAAAgO,EAAAi5B,MAAAI,aAAA39B,EAAA8M,OAAAhW,QAAgDy+C,YAAA,SAAAv1C,GAAyB,OAAAA,EAAAw1C,uBAA+Bz+C,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAmB,IAAAiJ,EAAA,kBAAwBwjC,MAAA7sC,EAAAqH,IAAY,IAAA1G,EAAA0I,EAAAlB,SAAAy6B,EAAAv5B,EAAAjB,UAAAnH,EAAAoI,EAAA6nC,MAAA/xC,EAAAkK,EAAA47B,QAAArxB,OAAA,IAAAzU,KAAoEA,EAAG,kBAAkB0tC,MAAA7sC,EAAAqH,IAAU,MAAA9H,GAAWmmB,MAAA,OAAAE,OAAA,OAAAzf,GAAA,WAAA8+B,QAAArxB,EAAA1F,EAAA,KAAA0F,EAAAzF,EAAA,KAAAyF,EAAA8R,MAAA,KAAA9R,EAAAgS,QAAyFhmB,OAAAyH,IAAAzH,CAAA,SAAAyJ,GAAyB,OAAAjJ,EAAAT,EAAAgO,EAAAi5B,MAAAC,cAAAx9B,IAAoC,SAAAA,GAAaA,GAAA,IAAAA,EAAAuyB,QAAAvyB,EAAA8M,SAAA9M,EAAA4mC,eAAA7vC,EAAAT,EAAAgO,EAAAo4B,OAAAM,sBAAgFyY,cAAA,SAAAz1C,GAA0B,OAAAA,EAAA4yB,qBAA2Bj0B,OAAA/G,EAAAkiB,IAAA,SAAA9Z,GAA4B,eAAe8L,GAAA9L,EAAA4c,KAAA/X,EAAAmH,GAAAhM,EAAA4c,KAAA9X,EAAA0B,GAAAxG,EAAA6c,GAAAhY,EAAA4B,GAAAzG,EAAA6c,GAAA/X,EAAA0+B,MAAAjtC,OAAAV,EAAAgkC,QAAAtjC,CAAAyJ,EAAAwjC,MAAAxjC,EAAA0nC,QAAA,cAAkGnO,EAAAzf,IAAA,SAAA9Z,GAAoB,iBAAiBwjC,MAAAjtC,OAAAV,EAAAgkC,QAAAtjC,CAAAyJ,EAAAwjC,MAAAxjC,EAAA0nC,QAAA,UAAAgO,UAAA,aAAA11C,EAAA6E,EAAA,KAAA7E,EAAA8E,EAAA,IAAA6hC,YAAA,WAAmH,OAAA5vC,EAAAT,EAAAgO,EAAAo4B,OAAAK,mBAAA/8B,EAAAlD,KAA6C+Y,GAAA,EAAAC,GAAA,EAAAnf,EAAAqJ,EAAAD,UAAA,KAAA6jC,MAAA5jC,EAAAlD,OAA2CxF,EAAAwiB,IAAA,SAAA9Z,GAAoB,WAAA9J,GAAcy/C,WAAA31C,EAAAlD,GAAA44C,UAAA,aAAA11C,EAAA6E,EAAA,KAAA7E,EAAA8E,EAAA,IAAA8+B,MAAA5jC,EAAAlD,GAAA0mC,MAAAjtC,OAAAV,EAAAgkC,QAAAtjC,CAAAyJ,EAAAwjC,MAAAxjC,EAAA0nC,QAAA,WAAuHnxC,OAAAyH,IAAAzH,CAAA,SAAAe,GAAyB,OAAAP,EAAAT,EAAAgO,EAAAi5B,MAAAM,sBAAyC9E,MAAA/4B,EAAA1D,MAAAhF,KAAkB,WAAY,OAAAP,EAAAT,EAAAgO,EAAAo4B,OAAAC,kBAAA38B,EAAAlD,QAA4C,QAAY+H,GAAA,GAAAC,GAAA,GAAAuX,MAAA,GAAAE,OAAA,GAAAinB,MAAAxjC,EAAA9C,OAAA,eAA0D,QAAW04C,cAAA,SAAA/wC,EAAA,EAAAC,EAAA,IAAgC9E,EAAA86B,OAAA96B,EAAA2nC,UAAA,UAAgC9xB,GAAA,EAAAC,GAAA,EAAAnf,EAAA,EAAA6sC,MAAA,kBAAsC,IAAA7sC,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,GAAAhB,GAAAgB,IAAAzB,GAAAyB,EAAA,IAAA0G,EAAA1G,EAAA,IAAApB,EAAAkyB,WAAAvsB,UAAAtF,OAAAuF,QAAA,SAAAkE,GAA6F,QAAAjJ,EAAAO,EAAA,EAAAX,EAAAoF,UAAAC,OAAiC1E,EAAAX,EAAIW,IAAoB,QAAAzB,KAAfkB,EAAAgF,UAAAzE,GAAef,OAAAkB,UAAAC,eAAA1B,KAAAe,EAAAlB,KAAAmK,EAAAnK,GAAAkB,EAAAlB,IAAsE,OAAAmK,IAAU,SAAAA,EAAAjJ,EAAAO,GAAiB,aAAaA,EAAAnB,EAAAY,EAAA,eAAqB,OAAAT,IAAW,IAAAK,EAAAW,EAAA,GAAAzB,GAAAyB,IAAAX,GAAAW,EAAA,IAAAhB,EAAAC,OAAAI,EAAA6jC,MAAAjkC,CAAAV,EAAAyO,GAAkD2wB,SAAA,WAAA8P,SAAA,EAAAnG,OAAsCiX,SAAS5gB,SAAA,WAAAqD,OAAA,0CAAoEwd,UAAWrS,KAAA,QAAAE,OAAA,QAAAoS,WAAA,UAAgDC,UAAWrS,OAAA,WAAA/E,OAAyBqX,YAAYtS,OAAA,QAAcuS,QAASxS,YAAA,GAAcyS,cAAeC,gBAAA,QAAuBC,YAAa1S,OAAA,QAAAD,YAAA,GAA6B4S,UAAW5S,YAAA,GAAc6S,eAAgBH,gBAAA,WAA0BI,UAAW5X,OAAO6X,YAAY/S,YAAA,EAAA0S,gBAAA,UAAuCM,mBAAoBjT,KAAA,aAAiBkT,0BAA2BlT,KAAA,cAAAE,OAAA,YAAAD,YAAA,GAAoDkT,oBAAqBnT,KAAA,aAAiBoT,2BAA4BpT,KAAA,eAAmBqT,uBAAwBrT,KAAA,WAAesT,sBAAuBpT,OAAA,WAAiBqT,mBAAoBvT,KAAA,aAAiBwT,0BAA2BxT,KAAA,YAAAE,OAAA,YAAAD,YAAA,GAAkDwT,oBAAqBzT,KAAA,aAAiB0T,2BAA4B1T,KAAA,aAAiB2T,uBAAwB3T,KAAA,aAAiB4T,sBAAuB1T,OAAA,aAAmB2T,mBAAoB7T,KAAA,kBAAsB8T,0BAA2B9T,KAAA,YAAAE,OAAA,iBAAAD,YAAA,GAAuD8T,oBAAqB/T,KAAA,kBAAsBgU,2BAA4BhU,KAAA,aAAiBiU,uBAAwBjU,KAAA,iBAAqBkU,sBAAuBhU,OAAA,iBAAuBiU,mBAAoBnU,KAAA,UAAcoU,0BAA2BpU,KAAA,UAAAE,OAAA,SAAAD,YAAA,GAA6CoU,oBAAqBrU,KAAA,UAAcsU,2BAA4BtU,KAAA,WAAeuU,uBAAwBvU,KAAA,UAAcwU,sBAAuBtU,OAAA,UAAgBuU,mBAAoBzU,KAAA,QAAY0U,0BAA2B1U,KAAA,gBAAAE,OAAA,OAAAD,YAAA,GAAiD0U,oBAAqB3U,KAAA,QAAY4U,2BAA4B5U,KAAA,SAAa6U,uBAAwB7U,KAAA,iBAAqB8U,sBAAuB5U,OAAA,iBAAuB6U,mBAAoB/U,KAAA,iBAAqBgV,0BAA2BhV,KAAA,gBAAAE,OAAA,gBAAAD,YAAA,GAA0DgV,oBAAqBjV,KAAA,iBAAqBkV,2BAA4BlV,KAAA,iBAAqBmV,uBAAwBnV,KAAA,iBAAqBoV,sBAAuBlV,OAAA,iBAAuBmV,mBAAoBrV,KAAA,UAAcsV,0BAA2BtV,KAAA,WAAAE,OAAA,SAAAD,YAAA,GAA8CsV,oBAAqBvV,KAAA,UAAcwV,2BAA4BxV,KAAA,YAAgByV,uBAAwBzV,KAAA,eAAmB0V,sBAAuBxV,OAAA,mBAAyB,SAAA3jC,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,EAAAjJ,GAAgB,IAAAO,GAAA,OAAckjC,MAAA,oBAA0B,OAAAljC,EAAA6G,KAAA5H,OAAAD,EAAA0H,EAAAzH,EAA2BstC,QAAA,WAAmB,OAAA9sC,EAAAwiC,EAAAv7B,EAAAi9B,YAAAj7B,EAAAlD,KAA+BgnC,KAAAjuC,EAAAqK,IAAA0jC,MAAA,iBAAgC5jC,EAAAF,OAAAxI,EAAA6G,KAAA5H,OAAAD,EAAA0H,EAAAzH,EAAgCstC,QAAA,WAAmB,OAAA9sC,EAAAwiC,EAAAv7B,EAAAk9B,aAAAl7B,EAAAlD,KAAgCgnC,KAAAjuC,EAAA4f,IAAAmuB,MAAA,wBAAuCtsC,EAAKP,EAAAuN,EAAA,SAAAtE,EAAAjJ,GAAkB,IAAAO,EAAA0I,EAAA1C,OAAA3G,EAAAqJ,EAAAlJ,MAAAc,EAAAoI,EAAAunC,SAAAzxC,GAAyCgB,MAAAH,GAAQ4T,GAAA,OAAWiwB,MAAA,oBAA0B,OAAA5iC,GAAA2S,EAAApM,MAAA,UAA4BqlC,MAAAxlC,IAAA5G,IAAA,WAAAysC,QAAA,WAA4C,OAAA9sC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAS,qBAAA,KAA6C,QAAA5mC,OAAAD,EAAA0H,EAAAzH,EAAsBa,IAAA,eAAAE,EAAAwF,GAAA+mC,QAAA,WAA2C,OAAA9sC,EAAAwiC,EAAAv7B,EAAAo9B,eAAA9jC,EAAAwF,KAAkCgnC,KAAAjuC,MAAA+tC,MAAA,0BAAyCtsC,EAAAR,OAAAyT,EAAApM,KAAA5H,OAAAD,EAAA0H,EAAAzH,EAAgCa,IAAA,aAAAE,EAAAwF,GAAA+mC,QAAA,WAAyC,OAAA9sC,EAAAwiC,EAAAv7B,EAAAm9B,aAAA7jC,EAAAwF,KAAgCgnC,KAAAjuC,EAAA4jC,IAAAmK,MAAA,yBAAuCr5B,EAAApM,MAAA,UAAsBqlC,MAAAxlC,IAAA6lC,QAAA,WAA6B,OAAA9sC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAS,qBAAA,KAA6C,qBAAsBqG,MAAAxlC,IAAA5G,IAAA,YAAAE,EAAAwF,GAAA+mC,QAAA,WAAkD,IAAA7jC,EAAAyd,KAAAC,MAAA5nB,EAAAgB,OAA0BC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAO,WAAAj9B,KAA4B,qBAAsBwjC,MAAAttC,EAAAoO,IAAU,OAASk/B,MAAAttC,EAAAC,EAAAiB,IAAAE,EAAAwF,GAAAlF,GAAqB,SAAAoI,EAAAjJ,EAAAO,GAAiB,IAAAX,EAAA,GAAS,SAAAqJ,EAAA,IAAerJ,EAAA8mB,KAAAqrB,UAAA9oC,EAAA,WAA8B,MAAAA,GAASrJ,EAAA,UAAAqJ,EAAAo5C,QAAsB,sBAAsBC,iBAAAtiD,EAAAuiD,QAAA,SAAAt5C,GAAuC,OAAA1I,EAAAR,MAAAkJ,EAAA8M,OAAAy9B,cAAqC5zC,IAAxM,CAA6MA,EAAAiB,EAAA9B,IAAAwB,EAAAwF,IAAAyN,IAAkBxT,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAmB,SAAAO,EAAA0I,GAAc,IAAAjJ,GAAA,IAAAiJ,EAAA4/B,OAAAtH,OAAA,SAAAt4B,GAAuC,OAAAA,EAAAxC,OAAA1H,EAAAonB,WAAAxe,cAAyCob,IAAA,SAAA9Z,GAAkB,IAAAjJ,EAAAa,EAAAkH,SAAAkB,EAAAy/B,KAAwB,OAAA1oC,EAAAwoC,YAAA5oC,EAAA4oC,UAAAxoC,EAAAX,KAAAW,EAAAwoC,UAAA,IAAAxoC,EAAAX,MAAA,KAAA4J,EAAAxC,OAA4EwuB,KAAA,WAAkB,OAAAhsB,EAAAD,WAAAhJ,EAAAwiD,QAAA,KAAAv5C,EAAAF,OAAA/I,EAAAwiD,QAAA,KAAAxiD,EAAAi1B,KAAA,IAAsE,IAAAr1B,EAAAqJ,EAAA1C,OAAA1F,EAAAoI,EAAAnB,MAAA0L,EAAAvK,EAAAf,KAAkC,IAAAtI,EAAAmG,GAAA,kBAA2B0mC,MAAAttC,EAAAoO,IAAU,OAASk/B,MAAAttC,EAAAC,KAAa,IAAAA,GAAAQ,EAAAoI,eAAA+a,IAAA,SAAA9Z,GAAwC,OAAApI,EAAAmH,UAAAiB,KAAsBrI,EAAAxB,EAAAmiC,OAAA,SAAAt4B,GAAyB,OAAAA,EAAA0/B,WAAkBjG,EAAAtjC,EAAAmiC,OAAA,SAAAt4B,GAAyB,OAAAA,EAAA0/B,WAAkB96B,EAAA2F,EAAAkT,KAAAqrB,UAAAv+B,EAAA,cAAqC,kBAAkBi5B,MAAAttC,EAAAoO,IAAU,OAASk/B,MAAAttC,EAAAC,IAAU,kCAAAQ,EAAAP,QAAA,8BAAAO,EAAA4oC,YAAA5nC,EAAAqE,OAAA,iCAAA2C,OAAAhH,EAAAmiB,IAAA,SAAA9Z,GAA6J,iBAAiB6pC,QAAA,WAAmB,OAAA9yC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAK,mBAAA/8B,EAAAlD,MAA8CxF,EAAA0I,SAAQy5B,EAAAz9B,OAAA,mCAAA2C,OAAA86B,EAAA3f,IAAA,SAAA9Z,GAAyE,iBAAiB6pC,QAAA,WAAmB,OAAA9yC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAK,mBAAA/8B,EAAAlD,MAA8CxF,EAAA0I,UAAQrJ,EAAAG,QAAA,wBAAAP,OAAAD,EAAA0H,EAAAzH,EAAoDstC,QAAA,WAAmB,OAAA9sC,EAAAwiC,EAAAv7B,EAAAm9B,aAAAxkC,EAAAmG,KAAgCgnC,KAAAjuC,EAAA4jC,IAAAmK,MAAA,wBAAuCjtC,EAAAG,QAAA,cAAA2mB,KAAAqrB,UAAAnyC,EAAAG,MAAA,aAAAyT,IAAA,+BAAkGi5B,MAAAxlC,IAAA6lC,QAAA,WAA6B,IAAA7jC,EAAAyd,KAAAC,MAAA9Y,GAAoB7N,EAAAwiC,EAAAj1B,EAAAo4B,OAAAY,WAAwBxgC,GAAAnG,EAAAmG,GAAAhG,MAAAkJ,MAAmB,SAAAuK,IAAA,eAA6B8uC,iBAAA,EAAAC,QAAA,SAAAt5C,GAAuC,OAAA4E,EAAA5E,EAAA8M,OAAAy9B,cAA+B3lC,MAAA,OAAc41B,MAAA,mBAAwBjkC,OAAAD,EAAA0H,EAAAzH,EAAca,IAAA,eAAAT,EAAAmG,GAAA+mC,QAAA,WAA2C,OAAA9sC,EAAAwiC,EAAAv7B,EAAAo9B,eAAAzkC,EAAAmG,KAAkCgnC,KAAAjuC,MAAA+tC,MAAA,4BAA6C7sC,EAAAZ,EAAA,SAAA6J,EAAAjJ,GAAmB,IAAAO,EAAA0I,EAAAJ,QAAgB,kBAAkB4jC,MAAAttC,EAAAoO,IAAU,OAASk/B,MAAAttC,EAAAC,IAAU,cAAAmB,EAAA4G,UAAA0sB,cAAAj0B,EAAAW,EAAAP,KAAkDA,EAAAb,EAAA,SAAA8J,EAAAjJ,GAAmB,IAAAO,EAAA0I,EAAAJ,QAAA/J,EAAAmK,EAAAnB,MAAAvI,EAAAgB,EAAAooC,SAAA,WAAApoC,EAAAwI,MAAA,wBAAkF,OAAAxI,EAAAyI,YAAAzJ,GAAA,cAAAgB,EAAAgF,QAAAhG,EAAA,SAAAA,IAAA,WAA0EktC,MAAAttC,EAAAoO,IAAU,OAASk/B,MAAAttC,EAAAC,IAAU,kCAAAG,KAAA,iCAA0EuzC,QAAA,WAAmB,OAAA9yC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAC,kBAAArlC,EAAAqoC,UAAiDppC,OAAAqB,EAAAioC,gBAAAtpC,CAAAV,EAAAiJ,SAAAxH,EAAAqoC,aAAA,4BAAAhhC,OAAArH,EAAAsoC,OAAAtH,OAAA,SAAAt4B,GAAoH,OAAAA,EAAAxC,OAAA1H,EAAAonB,WAAAxe,cAAyCob,IAAA,SAAA9Z,GAAkB,iBAAiB6pC,QAAA,WAAmB,OAAA9yC,EAAAwiC,EAAAj1B,EAAAo4B,OAAAC,kBAAA38B,EAAAy/B,OAA8ClpC,OAAAqB,EAAAioC,gBAAAtpC,CAAAV,EAAAiJ,SAAAkB,EAAAy/B,MAAA,OAAAz/B,EAAAxC,aAA8D7G,EAAAW,EAAAP,KAAe,IAAAlB,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,IAAA0G,EAAA1G,EAAA,IAAApB,EAAAoB,EAAA,IAAAiiC,EAAAjiC,EAAA,GAAAM,EAAAN,EAAA,GAAAxB,EAAAwB,EAAA,IAAyD,SAAA0I,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,EAAAjJ,EAAAO,EAAAzB,EAAAS,GAAsB,GAAAS,EAAAuoC,WAAA,CAAiB,IAAA/0B,EAAAxT,EAAAuoC,WAAAnpC,GAAA,QAA8BqtC,MAAA,mBAAwBjtC,OAAAL,EAAA8H,EAAAzH,EAAcutC,KAAA9lC,EAAAnI,IAAA2tC,MAAAjK,EAAAj1B,EAAAu/B,QAAA,WAAwC,OAAAhuC,EAAA+B,EAAAoG,EAAAo9B,eAAA7wB,EAAAzN,KAAkC8mC,MAAA,0BAAiC,MAAAr5B,EAAAzT,OAAAX,EAAAgI,KAAA5H,OAAAL,EAAA8H,EAAAzH,EAAmCitC,MAAAjK,EAAAj1B,EAAAu/B,QAAA,WAA6B,OAAAhuC,EAAA+B,EAAAoG,EAAAm9B,aAAA5wB,EAAAzN,KAAgCgnC,KAAA9lC,EAAAy7B,IAAAmK,MAAA,wBAA0C,IAAAjsC,EAAA,cAAoB,OAAAL,IAAAiT,EAAAzN,KAAAnF,GAAA,2BAAgD6rC,MAAA7rC,EAAAksC,QAAA,WAA2B,OAAAhuC,EAAA+B,EAAA0M,EAAAo4B,OAAAC,kBAAApyB,EAAAzN,MAA6C,MAAAyN,EAAAzT,MAAAkH,EAAA0X,IAAA1X,EAAAyX,IAAA,IAAAzV,EAAA,IAAA7J,IAAyC,IAAAsjC,GAAA,aAAoBoK,QAAA,WAAmB,OAAAhuC,EAAA+B,EAAA0M,EAAAi4B,KAAAC,aAAAzlC,EAAAsoC,YAA4CrhC,EAAAuM,EAAAjU,EAAAS,EAAAsoC,UAAA,GAAAvpC,GAAA,IAAAkK,IAAiC,IAAA1J,EAAAS,EAAAsoC,UAAA,CAAmB,IAAAz6B,GAAA,MAAa,QAAA1E,KAAAnJ,EAAA,aAAAmJ,GAAA0E,EAAAzG,KAAAxH,EAAAuJ,EAAAnJ,EAAAmJ,GAAA5I,EAAAzB,EAAAS,IAAuDmjC,EAAAt7B,KAAAyG,GAAU,OAAA60B,EAAS1iC,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAkB,IAAAO,EAAA0I,EAAAy8B,KAAAnmC,EAAA0J,EAAA27B,KAAA39B,EAAAgC,EAAA8nC,SAAA5xC,GAAA,MAA4CstC,MAAA3tC,EAAAK,IAAY,GAAAI,EAAA,CAAM,IAAAijC,EAAAhjC,OAAAk9B,KAAAn9B,GAAAwjB,IAAA,SAAA9Z,GAAqC,OAAArJ,EAAAqJ,EAAA1J,EAAA0J,GAAAhC,EAAAlB,GAAA/F,EAAAO,KAA4BpB,EAAAiI,KAAAopB,MAAArxB,EAAAqjC,GAAkB,OAAArjC,GAAU,IAAAL,EAAAyB,EAAA,IAAAhB,EAAAgB,EAAA,GAAA0G,GAAA1G,IAAAhB,GAAAgB,EAAA,KAAApB,EAAAoB,EAAA,IAAAiiC,EAAAjiC,EAAA,IAAAM,EAAAN,EAAA,GAAAxB,EAAAS,OAAAD,EAAAkkC,MAAAjkC,EAA8Em/C,UAAA,mBAA4B,SAAA11C,EAAAjJ,EAAAO,GAAiB,aAAiMP,EAAAiH,EAApL,SAAAgC,GAAc,SAAAjJ,IAAaiJ,GAAGqc,MAAApB,OAAA6V,WAAAvU,OAAAtB,OAAA8V,cAAoD,OAAA9V,OAAAQ,iBAAA,SAAA1kB,OAAA,WAA0DkkB,OAAAS,oBAAA,SAAA3kB,MAA8C,SAAAiJ,EAAAjJ,EAAAO,GAAiB,aAAaP,EAAAiH,EAAA,SAAAgC,EAAAjJ,EAAAO,GAAoB,OAAAqJ,KAAAmO,IAAA9O,EAAAW,KAAAkP,IAAAvY,EAAAP,KAAkC4J,KAAAE,IAAQ,SAAAb,EAAAjJ,EAAAO,GAAiB,aAAa0I,EAAArK,QAAA,SAAAqK,EAAAjJ,EAAAO,GAA0B,GAAAP,IAAAO,EAAA,SAAkB,IAAAX,EAAAd,EAAA4K,MAAAga,QAAA1jB,GAAAT,EAAAmK,MAAAga,QAAAnjB,GAA4C,GAAAzB,GAAAS,EAAA,CAAS,GAAAS,EAAAiF,QAAA1E,EAAA0E,OAAA,SAA+B,IAAArF,EAAA,EAAQA,EAAAI,EAAAiF,OAAWrF,IAAA,IAAAqJ,EAAAjJ,EAAAJ,GAAAW,EAAAX,IAAA,SAA8B,SAAS,GAAAd,GAAAS,EAAA,SAAiB,GAAAS,GAAAO,GAAA,iBAAAP,GAAA,iBAAAO,EAAA,CAAiD,IAAA0G,EAAAzH,OAAAk9B,KAAA18B,GAAqB,GAAAiH,EAAAhC,SAAAzF,OAAAk9B,KAAAn8B,GAAA0E,OAAA,SAA6C,IAAA9F,EAAAa,aAAAukB,KAAAie,EAAAjiC,aAAAgkB,KAA4C,GAAAplB,GAAAqjC,EAAA,OAAAxiC,EAAAyiD,WAAAliD,EAAAkiD,UAAwC,GAAAtjD,GAAAqjC,EAAA,SAAiB,IAAA3hC,EAAAb,aAAA0iD,OAAA3jD,EAAAwB,aAAAmiD,OAAgD,GAAA7hD,GAAA9B,EAAA,OAAAiB,EAAA6zB,YAAAtzB,EAAAszB,WAA0C,GAAAhzB,GAAA9B,EAAA,SAAiB,IAAAa,EAAA,EAAQA,EAAAqH,EAAAhC,OAAWrF,IAAA,IAAAJ,OAAAkB,UAAAC,eAAA1B,KAAAsB,EAAA0G,EAAArH,IAAA,SAA8D,IAAAA,EAAA,EAAQA,EAAAqH,EAAAhC,OAAWrF,IAAA,IAAAqJ,EAAAjJ,EAAAiH,EAAArH,IAAAW,EAAA0G,EAAArH,KAAA,SAAoC,SAAS,WAAU,SAAAqJ,EAAAjJ,EAAAO,GAAiB,aAAkF,SAAAzB,EAAAmK,GAAc,QAAAjJ,EAAA,EAAAO,EAAA,EAAgBA,EAAA0I,EAAAhE,OAAW1E,IAAA,CAAK,IAAAX,EAAAqJ,EAAA1I,GAAWP,GAAAJ,IAAO,OAAAgK,KAAA8E,KAAA1O,GAAoBA,EAAAiH,EAAA,SAAAgC,EAAAjJ,GAAkB,QAAAO,KAAAX,EAAA,EAAiBA,EAAAqJ,EAAAhE,OAAWrF,IAAAW,EAAAX,GAAAqJ,EAAArJ,GAAAI,EAAAJ,GAAmB,OAAAW,GAASP,EAAAiJ,EAAA,SAAAA,EAAAjJ,GAAmB,QAAAO,KAAAX,EAAA,EAAiBA,EAAAqJ,EAAAhE,OAAWrF,IAAAW,EAAAX,GAAAqJ,EAAArJ,GAAAI,EAAAJ,GAAmB,OAAAW,GAASP,EAAAb,EAA9S,SAAA8J,EAAAjJ,GAAgB,QAAAO,KAAAX,EAAA,EAAiBA,EAAAI,EAAAiF,OAAWrF,IAAAW,EAAAX,GAAAI,EAAAJ,GAAAqJ,EAAgB,OAAA1I,GAAkPP,EAAAuN,EAAAzO,EAAAkB,EAAAZ,EAAA,SAAA6J,GAA6B,gBAAAA,EAAAjJ,GAAqB,QAAAO,KAAAX,EAAA,EAAiBA,EAAAI,EAAAiF,OAAWrF,IAAAW,EAAAX,GAAAI,EAAAJ,GAAAqJ,EAAgB,OAAA1I,EAAjE,CAA0EzB,EAAAmK,OAAU1I,EAAA,GAAA0G,GAAO,SAAAgC,EAAAjJ,EAAAO,GAAiB0I,EAAArK,QAAA2B,EAAA,IAAAgiC,QAAAt5B,EAAArK,QAAA2jC,QAAAt5B,EAAArK,SAAoD,SAAAqK,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,OAAAhC,EAAAgC,IAAA1J,EAAA0J,GAAkB,SAAAnK,EAAAmK,GAAc,yBAAAA,EAA2B,SAAA1J,EAAA0J,GAAc,cAAAA,EAAgB,SAAAhC,EAAAgC,GAAc,gBAAAA,EAAkB,SAAA9J,EAAA8J,GAAc,MAAAA,MAAAy5B,GAAA,IAAA3d,MAAA,kBAAA9b,GAA8C,SAAAu5B,EAAAv5B,EAAAjJ,GAAgB,IAAAO,KAAS,GAAA0I,EAAA,QAAArJ,KAAAqJ,EAAA1I,EAAAX,GAAAqJ,EAAArJ,GAA8B,GAAAI,EAAA,QAAAlB,KAAAkB,EAAAO,EAAAzB,GAAAkB,EAAAlB,GAA8B,OAAAyB,EAAS,SAAAM,IAAawwB,KAAA4jB,aAA6iB,SAAAzhC,EAAAvK,EAAAjJ,EAAAO,GAAkB,IAAA0I,EAAA05C,WAAA,CAAkB,GAAA3iD,IAAAiJ,EAAA25C,aAAA,CAAuB35C,EAAA45C,kBAAA,EAAsB,IAAAhiD,EAAAoI,EAAA65C,cAAA/jD,EAAAkK,EAAA+xB,MAAAxnB,EAAAgvB,EAAAzjC,EAAA8B,GAAA6hC,EAAAz5B,EAAA85C,MAAA55C,EAAAF,EAAA2d,QAA+D3d,EAAA65C,cAAA,KAAqB,IAAA/0C,EAAA7O,EAAA+J,EAAA+5C,iBAAAjkD,EAAAyU,EAAAkvB,IAAAv5B,EAAAnJ,GAAA,GAAAuN,GAAA,EAAgD,YAAAtE,GAAe,OAAA1J,EAAA0J,KAAA,IAAAA,IAAA,IAAAA,GAAAhC,EAAAgC,GAAf,CAAiD/J,GAAA6O,EAAA3O,EAAA6jD,YAAA,gBAA+B,GAAA/jD,IAAA0B,EAAAmN,EAAA9E,EAAAi6C,WAAA31C,GAAA,OAAkC,YAAAtE,GAAoB,IAAAjJ,SAAAiJ,EAAe,iBAAAjJ,GAAA,WAAAA,EAAnC,CAAoEd,GAAA6O,EAAA3O,EAAA6jD,YAAA,YAAA/jD,OAAmC,CAAK,GAAA2O,EAAA3O,GAAA,OAAAC,IAAmB4O,EAAA7O,EAAI,IAAAw6B,EAAAzwB,EAAAi6C,WAAAvf,EAAA16B,EAAAk6C,OAAA3zC,EAAAkqB,EAAA0pB,KAAA1pB,EAAA0pB,IAAAC,aAAA3pB,EAAA0pB,IAAAzf,EAAAyf,KAAuE,MAAAr1C,EAAAu1C,QAAAv1C,EAAAw1C,YAAA5f,GAAA16B,EAAAi6C,WAAAn1C,EAAAR,EAAA,CAAmD,IAAA44B,EAAMvmC,EAAAqJ,EAAAu6C,mBAAArd,EAAAl9B,EAAAu6C,mBAAArd,EAAAvmC,EAAAumC,GAAAl9B,EAAAw6C,cAAAjhB,EAAAr5B,EAAAg9B,GAA4E,IAAAY,EAAA99B,EAAAy6C,WAAmB,GAAAtkD,EAAAukD,eAAAjqB,EAAA3rB,EAAAyB,EAAAu3B,EAAAZ,EAAAl9B,EAAA26C,QAAA,GAAA36C,EAAA05C,WAAA,OAA+D5b,EAAA8c,UAAAjkD,EAAAqJ,EAAA66C,qBAAA76C,EAAA66C,mBAAAphB,EAAA3jC,EAAAoK,GAAA5J,EAAAH,EAAA2kD,QAAAC,cAAA5kD,EAAA2kD,QAAAC,YAAArgB,GAAoH,IAAAhlB,EAAAglB,EAAAyf,IAAAr1C,EAAAq1C,IAAkB,IAAAhkD,EAAA2kD,QAAAE,oBAAA7kD,EAAA8kD,oBAAA/4C,IAAAlC,EAAA8E,EAAAq1C,MAAqExjD,EAAA+jC,IAAA4f,eAAoB,GAAA5f,EAAA2f,OAAA,IAAA3f,EAAAyf,IAAAzkC,QAA2B1V,EAAA+xB,MAAA/xB,EAAA65C,cAAA75C,EAAA65C,cAAA,KAAkDhkD,EAAAyB,MAAAtB,KAAAgK,IAAiBzJ,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAX,EAAAmB,EAAA,IAAAK,EAAA,SAAA8hC,EAAA,qFAAA70B,EAAAnE,MAAAga,QAA8H7iB,EAAAH,UAAAg0C,YAAA,SAAAzrC,GAAoCooB,KAAA4jB,UAAA7tC,KAAA6B,IAAuBpI,EAAAH,UAAAmjD,QAAA,WAAgC,QAAA56C,EAAAjJ,EAAAqxB,KAAA4jB,UAA2BhsC,EAAAjJ,EAAAqoC,SAAYp/B,KAAM,IAAAE,EAAA,IAAAg7C,IAAAp2C,EAAAq2C,QAAAC,UAAAnlD,EAAA,SAAA+J,EAAAjJ,GAAkDqxB,KAAA2J,MAAA,KAAA3J,KAAAuxB,cAAA,EAAAvxB,KAAAizB,gBAAA,EAAAjzB,KAAAwxB,kBAAA,EAAAxxB,KAAAyxB,cAAA,KAAAzxB,KAAA6xB,WAAA,KAAA7xB,KAAA8xB,OAAA,KAAA9xB,KAAAsxB,YAAA,EAAAtxB,KAAAqyB,WAAA,KAAAryB,KAAAoyB,cAAA,KAAApyB,KAAAuyB,QAAA,EAAAvyB,KAAAkzB,WAAA,EAAAlzB,KAAA0xB,MAAA95C,GAAA7J,EAAAolD,UAAAnzB,KAAAzK,QAAA5mB,GAAAZ,EAAAolD,WAA2StlD,EAAAwB,UAAA+jD,YAAA,SAAAx7C,GAAoCooB,KAAAsxB,YAAAnvC,EAAA6d,MAAA,EAAApoB,IAA8B/J,EAAAwB,UAAAwwC,SAAA,SAAAjoC,EAAAjJ,GAAoCqxB,KAAAsxB,aAAAtxB,KAAAizB,eAAAnlD,IAA1zE,SAAA8J,EAAAjJ,EAAAO,GAAkBzB,EAAAkB,SAAAiJ,EAAA+xB,MAAA/xB,EAAA85C,MAAA95C,EAAA2d,UAAuC,IAAArnB,EAAA0J,EAAA65C,cAAsB,GAAAljD,EAAAL,GAAA0J,EAAA65C,cAAA9iD,OAA0B,QAAAiH,KAAAjH,EAAAT,EAAA0H,GAAAjH,EAAAiH,GAA8BgC,EAAA45C,kBAAA55C,EAAA25C,cAAA35C,EAAA45C,kBAAA,EAAA/jD,EAAAyB,IAAA0I,EAAA25C,cAAA35C,EAAAy6C,WAAAhP,YAAAn0C,EAAAD,KAAA2I,OAAAs7C,UAAA,SAAAt7C,EAAAjJ,EAAAO,GAAiJ,IAAAzB,EAAAqK,EAAAxJ,IAAAsJ,QAAe,IAAAnK,SAAAqK,EAAAgC,IAAAlC,EAAAnK,GAAAiP,EAAA22C,KAAA,WAA+Cv7C,EAAAw7C,OAAA17C,KAAAs7C,WAAA,EAAA/wC,EAAAvK,GAA4H,EAA5H,WAA4C,QAAAjJ,EAAA,EAAAO,EAAAzB,EAAAmG,OAAuBjF,EAAAO,EAAIP,IAAAlB,EAAAkB,GAAAf,KAAAgK,KAAiBA,EAAAs7C,WAAA,KAAiB3kD,EAAAW,IAAAzB,EAAAsI,KAAA7G,GAAxT,CAA2U0I,EAAA,EAAA1I,IAAA0I,EAAA45C,kBAAA,EAAA55C,EAAAs7C,WAAA,EAAA/wC,EAAAvK,GAAA,EAAA1I,GAAA0I,EAAAs7C,WAAA,GAAw2DxlD,CAAAsyB,KAAApoB,EAAAjJ,KAAuDd,EAAAwB,UAAAsiD,iBAAA,SAAA/5C,EAAAjJ,EAAAO,EAAAzB,EAAAS,EAAA0H,EAAApG,GAAsD,QAAAwwB,KAAAsxB,YAAAxjD,IAAAoB,IAAAzB,OAAAM,EAAAolD,WAAAv7C,IAAAjJ,GAAAiH,EAAA,CAA+D,GAAA1G,IAAAzB,OAAAM,EAAAolD,UAAA,CAA2B,IAAA5kD,EAAAyxB,KAAAuzB,6BAAA/jD,EAAA,CAA2C,GAAAwwB,KAAAuxB,cAAA,EAAAvxB,KAAAuzB,0BAAA9lD,EAAAS,GAAA8xB,KAAAsxB,WAAA,OAAA/hD,EAAqFywB,KAAAuxB,cAAA,EAAqBvxB,KAAAwxB,mBAAA7iD,EAAAwiC,EAAAxiC,EAAAqxB,KAAAyxB,eAAAzxB,KAAAwxB,kBAAA,EAAAxxB,KAAAyxB,cAAA,MAAoG,GAAA77C,GAAArH,EAAAyxB,KAAAwzB,wBAAAxzB,KAAAwzB,uBAAAxzB,KAAAwzB,sBAAA/lD,EAAAkB,EAAAT,GAAA,CAAoGK,EAAAyxB,KAAAyzB,uBAAAzzB,KAAAizB,gBAAA,EAAAjzB,KAAAyzB,oBAAAhmD,EAAAkB,EAAAT,GAAA8xB,KAAAizB,gBAAA,GAAAjzB,KAAA0xB,MAAAjkD,EAAAuyB,KAAA2J,MAAAh7B,EAAAqxB,KAAAzK,QAAArnB,EAAAH,EAAA2kD,QAAAgB,cAAA3lD,EAAA2kD,QAAAgB,aAAA1zB,MAA2M,IAAAtyB,EAAAsyB,KAAA+f,OAAAtyC,EAAAkB,EAAAT,GAAyB,OAAAH,EAAA2kD,QAAAiB,aAAA5lD,EAAA2kD,QAAAiB,YAAA3zB,MAAAtyB,EAA4DsyB,KAAA0xB,MAAAjkD,EAAAuyB,KAAA2J,MAAAh7B,EAAAqxB,KAAAzK,QAAArnB,EAAyC,OAAAqB,GAAS1B,EAAAwB,UAAA0wC,OAAA,SAAAnoC,EAAAjJ,EAAAO,KAAqCP,EAAAuiC,QAAArjC,GAAa,SAAA+J,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,IAAAjJ,SAAAiJ,EAAe,iBAAAjJ,GAAA,WAAAA,EAAiC,SAAAlB,EAAAmK,GAAc,OAAAlK,EAAAkK,IAAApI,EAAAoI,GAAkB,SAAA1J,EAAA0J,GAAc,OAAApI,EAAAoI,KAAA,IAAAA,GAAA,SAAAA,GAAiC,WAAAA,EAAjC,CAA8CA,IAAAlK,EAAAkK,GAAU,SAAAhC,EAAAgC,GAAc,yBAAAA,EAA2B,SAAA9J,EAAA8J,GAAc,uBAAAA,EAAyB,SAAAu5B,EAAAv5B,GAAc,uBAAAA,EAAyB,SAAApI,EAAAoI,GAAc,cAAAA,EAAgB,SAAAlK,EAAAkK,GAAc,gBAAAA,EAAkB,SAAAuK,EAAAvK,GAAc,uBAAAA,EAAyB,SAAA7J,EAAA6J,GAAc,MAAAA,MAAAg8C,IAAA,IAAAlgC,MAAA,kBAAA9b,GAA+C,SAAArI,EAAAqI,EAAAjJ,GAAgB,IAAAO,KAAS,GAAA0I,EAAA,QAAArJ,KAAAqJ,EAAA1I,EAAAX,GAAAqJ,EAAArJ,GAA8B,GAAAI,EAAA,QAAAlB,KAAAkB,EAAAO,EAAAzB,GAAAkB,EAAAlB,GAA8B,OAAAyB,EAAS,SAAAmiC,IAAarR,KAAA4jB,aAAkB,SAAApnC,EAAA5E,EAAAjJ,EAAAO,EAAAX,GAAoB,IAAAd,EAAAomD,GAAAvlD,IAAAsJ,GAAgB,GAAA1I,EAAAzB,QAAaqmD,MAAA,IAAAhB,IAAAiB,SAAA,OAA4BA,SAAA,SAAAn8C,EAAAjJ,GAAyB,IAAAO,EAAA,SAAA0I,GAAkB,IAAA1I,EAAAP,EAAAmlD,MAAA56B,KAAmB,GAAAhqB,EAAA,GAAQ0I,EAAAw1C,gBAAA1wC,EAAoB,IAAAnO,GAAOwjD,IAAAtoB,UAAc,IAAIt7B,OAAAC,eAAAwJ,EAAA,iBAAyCq5B,cAAA,EAAA3iC,IAAA,WAA+B,OAAAC,EAAAwjD,OAAgB,MAAAn6C,KAAU,SAAAA,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,GAA+B,IAAR,IAAA0H,EAAAjH,EAAaJ,EAAA,GAAI,CAAE,GAAAd,GAAAmI,EAAAo+C,SAAA,OAAwB,IAAAlmD,EAAAoB,EAAAZ,IAAAsH,GAAe,GAAA9H,IAAAS,IAAAL,EAAA6jD,IAAAn8C,EAAA9H,EAAAklB,MAAAllB,EAAAklB,MAAAllB,EAAAouB,KAAAtkB,GAAA9J,EAAA8J,KAAAq8C,cAAA,OAAyE,WAAAr+C,IAAAo8C,YAAA,QAA1J,CAA6Lp6C,IAAA8M,OAAA/V,EAAAmlD,MAAA5kD,EAAA,UAAA0I,EAAAxC,KAAA7G,KAA4C,OAAAk7B,SAAApW,iBAAAvb,EAAAF,GAAA1I,KAA9b,CAAye0I,EAAAnK,GAAAomD,GAAA/5C,IAAAlC,EAAAnK,IAAAkB,GAAAulD,IAAA,YAAAt8C,GAAA,SAAAA,GAAqDA,EAAA6jC,QAAA5tC,EAArD,CAAiEU,GAAAd,EAAAqmD,MAAAh6C,IAAAvL,EAAAW,QAAqB,GAAAzB,EAAA,CAAW,IAAAS,EAAAT,EAAAqmD,MAAc5lD,EAAAolD,OAAA/kD,IAAA,IAAAL,EAAAgrB,OAAAuQ,SAAAnW,oBAAAxb,EAAAF,GAAAnK,EAAAsmD,UAAAF,GAAAP,OAAA17C,KAAuF,SAAAE,EAAAF,GAAc,OAAAA,EAAA2qB,OAAA,GAAAmW,cAAiC,SAAAh8B,IAAasjB,KAAAi0B,cAAA,EAAAj0B,KAAAm0B,2BAAqD,SAAAtmD,KAAc,SAAAqO,EAAAtE,GAAc,mBAAAA,GAAA,UAAAA,EAAkC,SAAAywB,EAAAzwB,GAAc,IAAAjJ,EAAAqxB,KAAAo0B,MAAAllD,EAAAP,EAAA+iD,OAAA2C,GAAA9lD,EAAAI,EAAAojD,IAAAtkD,EAAAyB,EAAAR,MAAiD,GAAAQ,EAAAgiD,QAAA,CAAc,IAAAhjD,EAAAgB,EAAAgiD,QAAgBhjD,EAAA8kB,MAAA9kB,EAAA8kB,MAAA9kB,EAAAguB,KAAAtkB,GAAA1J,EAAA0J,QAA+B1I,EAAAolD,SAAAplD,EAAAolD,QAAA18C,GAA6B,IAAAhC,EAAAoqB,KAAAo0B,MAAA1C,OAAA2C,GAA2B5mD,IAAAmI,EAAAlH,OAAAomC,EAAAl/B,EAAArH,GAAoB,SAAA+jC,EAAA16B,GAAc,IAAAjJ,GAAAqxB,KAAAo0B,MAAA1C,OAAA2C,IAAAE,SAAsC5lD,EAAAqkB,MAAArkB,EAAAqkB,MAAArkB,EAAAutB,KAAAtkB,GAAAjJ,EAAAiJ,GAA+B,SAAAuG,EAAAvG,GAAcA,EAAAw1C,kBAAoB,IAAAz+C,EAAAqxB,KAAAo0B,MAAAllD,EAAAP,EAAA+iD,OAAA2C,GAAA9lD,EAAAI,EAAAojD,IAAuC,GAAA7iD,EAAAuyC,QAAA,CAAc,IAAAh0C,EAAAyB,EAAAuyC,QAAgBh0C,EAAAulB,MAAAvlB,EAAAulB,MAAAvlB,EAAAyuB,KAAAtkB,GAAAnK,EAAAmK,QAA+B1I,EAAAusC,SAAAvsC,EAAAusC,QAAA7jC,GAA6Bk9B,EAAA9U,KAAAo0B,MAAA1C,OAAA2C,GAAA9lD,GAA0B,SAAAumC,EAAAl9B,EAAAjJ,GAAgB,IAAAO,EAAA0I,EAAAxC,KAAA7G,EAAAqJ,EAAAlJ,MAAAR,EAAA0J,EAAA48C,QAAA5+C,EAAAgC,EAAA68C,SAAA3mD,EAAA8J,EAAA88C,aAAAvjB,GAAA1jC,EAAAc,GAAyEW,OAAAP,EAAAyG,MAAAzG,EAAAgmD,aAAA,OAAAzlD,GAAA0G,OAAAjH,EAAA8lD,WAAA9lD,EAAA8lD,SAAA7+C,GAAAnI,EAAAK,IAAAqjC,IAAAxiC,EAAA+lD,aAAA5mD,EAAA,IAAAoO,EAAAhN,IAAAiiC,IAAAxiC,EAAAD,MAAAH,GAAAd,EAAAS,KAAAS,EAAA6lD,QAAAtmD,IAAAijC,GAAAxiC,EAAAD,QAAAH,GAAAI,EAAA+lD,aAAAnmD,EAAAI,EAAAD,MAAAH,GAAAd,EAAAS,KAAAS,EAAA6lD,QAAAtmD,GAAmN,SAAAwnC,EAAA99B,EAAAjJ,GAAgB,gBAAAiJ,EAAAxC,KAAA,CAAwB,IAAAlG,EAAA0I,EAAAg9C,SAAiB,GAAAC,GAAA3lD,GAAA,QAAAX,EAAA,EAAAd,EAAAyB,EAAA0E,OAAgCrF,EAAAd,EAAIc,IAAA+e,EAAApe,EAAAX,GAAAI,QAAcmmD,GAAA5lD,IAAAoe,EAAApe,EAAAP,QAAmB2e,EAAA1V,EAAAjJ,GAAY,SAAA2e,EAAA1V,EAAAjJ,GAAgB,IAAAO,EAAA0I,EAAA85C,OAAA2C,GAAA9lD,EAAAqJ,EAAAm6C,IAA0BxjD,EAAAG,MAAAQ,EAAAR,MAAAmmD,GAAAlmD,KAAA,IAAAA,EAAA2yB,QAAApyB,EAAAR,QAAAQ,EAAAR,QAAAC,EAAAJ,EAAAmxC,UAAA,EAAAjyC,EAAAkB,IAAAlB,EAAAyB,EAAAwwC,YAAAnxC,EAAAmxC,SAAAxwC,EAAAwwC,WAAA,GAA2H,SAAA1/B,EAAApI,GAAc,IAAAjJ,EAAAqxB,KAAAo0B,MAAAllD,EAAAP,EAAA+iD,OAAA2C,GAAA9lD,EAAAI,EAAAojD,IAAAtkD,EAAAyB,EAAAR,MAAiD,GAAAQ,EAAAqlD,SAAA,CAAe,IAAArmD,EAAAgB,EAAAqlD,SAAiBrmD,EAAA8kB,MAAA9kB,EAAA8kB,MAAA9kB,EAAAguB,KAAAtkB,GAAA1J,EAAA0J,QAA+B1I,EAAAg+C,UAAAh+C,EAAAg+C,SAAAt1C,GAA+B,IAAAhC,EAAAoqB,KAAAo0B,MAAAtmD,EAAA8H,EAAA87C,OAAA2C,GAA+B5mD,IAAAK,EAAAY,OAAA2e,EAAAzX,EAAArH,EAAAT,GAAA,GAAyB,SAAAuf,EAAAzV,EAAAjJ,EAAAO,EAAAX,GAAoBW,EAAAulD,WAAA9lD,EAAA8lD,WAAA9lD,EAAA8lD,SAAAvlD,EAAAulD,UAAiD,IAAA7+C,EAAAgC,EAAAg9C,SAAiB,IAAA1mD,EAAA0H,GAAA,CAAU,IAAA9H,EAAAoB,EAAAR,MAAc,GAAAH,GAAAd,EAAAK,OAAAoB,EAAAwlD,cAAAG,GAAAj/C,GAAA,QAAAu7B,EAAA,EAAA3hC,EAAAoG,EAAAhC,OAA4Du9B,EAAA3hC,EAAI2hC,IAAAuE,EAAA9/B,EAAAu7B,GAAArjC,QAAcgnD,GAAAl/C,IAAA8/B,EAAA9/B,EAAA9H,IAAoB,SAAA2O,EAAA7E,GAAc,IAAAjJ,GAAAqxB,KAAAo0B,MAAA1C,OAAA2C,IAAAE,SAAsC5lD,EAAAqkB,MAAArkB,EAAAqkB,MAAArkB,EAAAutB,KAAAtkB,GAAAjJ,EAAAiJ,GAA+B,SAAAq7B,EAAAr7B,GAAc,IAAAjJ,EAAAqxB,KAAAo0B,MAAAllD,EAAAP,EAAA+iD,OAAA2C,GAAA9lD,EAAAW,EAAAR,MAAyC,GAAAQ,EAAAgiD,QAAA,CAAc,IAAAzjD,EAAAyB,EAAAgiD,QAAgBzjD,EAAAulB,MAAAvlB,EAAAulB,MAAAvlB,EAAAyuB,KAAAtkB,GAAAnK,EAAAmK,QAA+B1I,EAAAolD,SAAAplD,EAAAolD,QAAA18C,GAA6B,IAAA1J,EAAA8xB,KAAAo0B,MAAiB7lD,KAAAL,EAAAwjD,OAAA2C,IAAA3lD,OAAAwkC,EAAAhlC,EAAAS,EAAAojD,KAAA,GAAuC,SAAA7e,EAAAt7B,EAAAjJ,EAAAO,GAAkB,IAAAX,EAAAqJ,EAAAlJ,MAAAR,EAAAS,EAAAD,MAAwB,GAAAjB,EAAAc,IAAS,GAAAW,EAAA,CAAM,IAAA0G,EAAAgC,EAAA88C,aAAqBjnD,EAAAmI,GAAA,KAAA1H,IAAAS,EAAA+lD,aAAA,GAAA/lD,EAAAD,MAAA,IAAAkH,IAAA1H,IAAAS,EAAA+lD,aAAA9+C,EAAAjH,EAAAD,MAAAkH,SAAiF1H,IAAAK,IAAAI,EAAA+lD,aAAAnmD,EAAAI,EAAAD,MAAAH,GAAyC,SAAA4kC,EAAAv7B,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,IAAwB,IAAA0J,GAAA,WAAAA,EAAAjJ,EAAAO,EAAAX,EAAAd,GAA8BqnC,EAAA5lC,EAAAP,GAAAlB,IAAAkB,EAAAylD,MAAAx8C,EAAArJ,IAAA2N,EAAAhN,EAAAkG,OAAAzG,EAAA8sC,QAAAt9B,EAAAxP,EAAA8sC,QAAAsZ,SAAA,IAAApmD,EAAA2lD,QAAAjsB,EAAA15B,EAAA2lD,QAAAS,SAAA,GAAA7lD,EAAAqlD,WAAA5lD,EAAAu+C,SAAA5a,EAAA3jC,EAAAu+C,SAAA6H,SAAA,KAA9B,CAA0LpmD,EAAAO,EAAAX,EAAAd,EAAAS,IAAA,KAAA0J,GAAA,WAAAA,EAAAjJ,EAAAO,EAAAX,EAAAd,GAA2C4f,EAAAzV,EAAAjJ,EAAAO,EAAAX,GAAAd,IAAAkB,EAAAylD,MAAAx8C,EAAArJ,IAAAI,EAAAu+C,SAAAltC,EAAArR,EAAAu+C,SAAA6H,SAAA,IAA3C,CAA6GpmD,EAAAO,EAAAX,EAAAd,EAAAS,IAAA,KAAA0J,GAAA,YAAAA,EAAAjJ,EAAAO,EAAAX,EAAAd,GAA4CylC,EAAAhkC,EAAAP,EAAAJ,GAAAd,IAAAkB,EAAAylD,MAAAx8C,EAAArJ,IAAAI,EAAA2lD,QAAArhB,EAAAtkC,EAAA2lD,QAAAS,SAAA,EAAA7lD,EAAAqlD,WAAA5lD,EAAAu+C,SAAAzwC,EAAA9N,EAAAu+C,SAAA6H,SAAA,KAA5C,CAA2JpmD,EAAAO,EAAAX,EAAAd,EAAAS,GAAY,SAAAklC,EAAAx7B,GAAc,OAAAA,EAAAxC,MAAA8G,EAAAtE,EAAAxC,OAAA3H,EAAAmK,EAAA48C,UAAA/mD,EAAAmK,EAAAlJ,OAAmD,SAAA2kC,EAAAz7B,EAAAjJ,EAAAO,EAAA0G,EAAA9H,GAAsB,IAAAqjC,EAAAv5B,EAAAg9C,SAAAlnD,EAAAkK,EAAA85C,MAAA3jD,EAAA6J,EAAA0oC,UAAA/wC,EAAAqI,EAAAq6C,MAAA5gB,EAAAz5B,EAAAypC,IAA2D,GAAAvzC,MAAA,IAAAyB,GAAA,MAAAZ,EAAAqmD,UAAArmD,EAAAsmD,QAAAvc,gBAAA9gC,EAAAxC,KAAA,CAAoE,IAAAoH,EAAA04C,EAAAt9C,EAAA,KAAA1I,EAAA0G,EAAA9H,GAAsB,OAAA8J,EAAAm6C,IAAAv1C,EAAA24C,GAAAxmD,EAAAqjD,WAAAx1C,EAAA7N,GAAA6N,EAAsC,GAAA5E,EAAAm6C,IAAApjD,EAAAT,EAAAijC,GAAA,OAAAxiC,EAAAymD,YAAA,SAAAx9C,EAAAjJ,GAAmD,OAAA0mD,QAAA1mD,KAAA2mD,yBAAA3mD,EAAA2mD,wBAAAC,QAAAC,GAAA59C,EAAAjJ,EAAA2mD,wBAAAC,SAAnD,CAA0K5mD,EAAAjB,KAAAiB,EAAAwzC,YAAA,aAAAvqC,EAAAjJ,EAAAO,EAAAzB,EAAAS,IAA8C,SAAA0J,GAAa,QAAAjJ,EAAAiJ,EAAAw9C,WAAuBzmD,GAAE,OAAAA,EAAAqmD,SAAA,SAAArmD,EAAAutB,KAAA,CAAoC,IAAAhtB,EAAAu6B,SAAAgsB,eAAA,IAAkC79C,EAAA89C,aAAAxmD,EAAAP,OAAAgnD,gBAAoC,CAAK,IAAApnD,EAAAI,EAAAinD,gBAAwBh+C,EAAAqpC,YAAAtyC,KAAAJ,GAAAqJ,EAAAw9C,gBAAmCzmD,IAAAgnD,YAAhN,CAAqOhnD,GAAI,IAAAiH,EAAAjH,EAAAymD,WAAmB,GAAA7mD,EAAAqJ,GAAApI,EAAAoG,IAAA,IAAAA,EAAAo/C,SAAA,KAAAp9C,EAAAjJ,EAAA6xC,YAAA/W,SAAAgsB,eAAA,KAAA9mD,EAAAwzC,YAAAvqC,EAAAhC,EAAAigD,YAAAj+C,IAAAhC,EAAAigD,UAAAj+C,GAAApI,EAAAoG,SAAA+/C,kBAAwJ,GAAAd,GAAAj9C,GAAA,QAAA9J,EAAA,EAAAqjC,EAAAv5B,EAAAhE,OAAqC9F,EAAAqjC,EAAIrjC,IAAA,CAAK,IAAAJ,EAAAkK,EAAA9J,GAAW,IAAA0B,EAAA9B,IAAAyU,EAAAzU,GAAA,GAAA8B,EAAAoG,GAAAkgD,EAAApoD,EAAAiB,EAAAO,EAAAzB,EAAAS,OAAoC,CAAK,IAAAH,EAAA6H,EAAA+/C,YAAoBtW,EAAA3xC,EAAAkI,EAAA1G,EAAAzB,EAAAS,GAAA0H,EAAA7H,QAAkByB,EAAAoG,GAAAkgD,EAAAl+C,EAAAjJ,EAAAO,EAAAzB,EAAAS,IAAAmxC,EAAAznC,EAAAhC,EAAA1G,EAAAzB,EAAAS,GAAA0H,IAAA+/C,aAAsD,KAAK//C,GAAE,CAAE,IAAArG,EAAAqG,EAAA+/C,YAAoBhnD,EAAAsyC,YAAArrC,KAAArG,GAA7pB,CAAmrB4hC,EAAAxiC,EAAAO,EAAA0G,EAAA9H,GAAAJ,EAAA,CAAe,IAAAoK,GAAA,EAAA4E,GAAA,KAAAnN,GAAA,EAAkC,QAAA1B,KAAZ6O,IAAA5E,EAAAs7B,EAAA1lC,IAAYA,EAAAqoD,EAAAloD,EAAA,KAAAH,EAAAG,GAAAc,EAAAb,EAAAgK,GAAoC4E,GAAAy2B,EAAA5jC,EAAAqI,EAAAjJ,EAAAjB,GAAA,EAAAoK,GAAmB,OAAArK,EAAAM,GAAA,KAAAY,EAAA2xC,WAAA3xC,EAAAqnD,gBAAA,SAAAloD,EAAAa,EAAAgmD,aAAA,QAAA5mD,GAAAY,EAAA2xC,UAAAvyC,EAAAsjC,GAAA4kB,GAAAtnD,EAAA0iC,EAAAniC,GAAAP,EAAkH,SAAA0wC,EAAAznC,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAsB,IAAAS,EAAA0J,EAAAq6C,MAAc,GAAA/jD,EAAA,SAAA0J,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,GAA2B,IAAA0H,EAAAgC,EAAAxC,KAAAtH,EAAA8J,EAAAypC,IAAAlQ,EAAAv5B,EAAA85C,OAAA2C,GAAmC,GAAAnmD,EAAA,CAAM,IAAAsB,EAAAb,EAAAunD,eAAAC,GAAAzoD,EAAA0oD,GAAAx+C,EAAAhC,EAAAu7B,EAAA5iC,EAAAiB,EAAAN,GAAAiT,EAAAzU,EAAAmkD,WAA2DnkD,EAAAokD,OAAAl6C,EAAAynC,EAAAl9B,EAAAxT,EAAAO,EAAAxB,EAAA0kD,cAAA5iD,GAAAoI,EAAAm6C,IAAA5vC,EAAA4vC,IAAAsE,EAAAz+C,EAAA9J,EAAAJ,EAAAwB,GAAAxB,EAAAwlD,WAAA,EAAAoD,GAAA1D,oBAAA2D,GAAAz8C,IAAApM,EAAAiB,OAA+G,CAAK,IAAAZ,EAAAyoD,GAAA5+C,EAAAhC,EAAAu7B,EAAA5iC,GAAkB8wC,EAAAtxC,EAAAY,EAAAO,EAAAX,EAAAd,GAAAmK,EAAAg9C,SAAA7mD,EAAA6J,EAAAm6C,IAAAhkD,EAAAgkD,IAAA0E,EAAAtlB,EAAArjC,EAAAa,EAAAO,IAArQ,CAAuT0I,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAA,EAAAS,GAAA,QAAAA,EAAAmlC,EAAAz7B,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAA,EAAAS,EAAA,SAAA0J,EAAAjJ,GAA0D,OAAAA,EAAAqmD,SAAA,CAAmB,IAAA9lD,EAAAwnD,EAAA9+C,EAAA,MAAgB,OAAAA,EAAAm6C,IAAA7iD,EAAAimD,GAAAxmD,EAAAqjD,WAAA9iD,EAAAP,GAAAO,EAAsC,IAAAX,EAAAqJ,EAAAg9C,SAAiBjmD,EAAAknD,YAAAtnD,IAAAI,EAAAknD,UAAAtnD,GAAAqJ,EAAAm6C,IAAApjD,EAApJ,CAA6LiJ,EAAAjJ,GAAA,KAAAT,EAAA,SAAA0J,EAAAjJ,GAA2BiJ,EAAAm6C,IAAApjD,EAA3B,CAAmCiJ,EAAAjJ,GAAAZ,IAAU,SAAA4oD,EAAA/+C,EAAAjJ,EAAAO,EAAAX,EAAAT,GAAsB,IAAAqjC,EAAAv5B,EAAAq6C,MAAAlkD,EAAA6J,EAAAm6C,IAAsB,MAAA5gB,EAAA,CAAS,IAAA5hC,EAAAqI,EAAAg9C,SAAAvjB,GAAA,EAAAF,GAAA,EAAA30B,EAAA5E,EAAA85C,OAAA2C,GAAAv8C,EAAAF,EAAAypC,IAAiDvzC,IAAAujC,EAAA9hC,EAAA+hD,aAAA9hD,EAAA8mD,GAAAM,gBAAAN,GAAAM,cAAAh/C,GAAAlK,EAAA6B,EAAA0wC,uBAAA1wC,EAAA0wC,uBAAAnoC,IAAAhK,GAAAgK,EAAA,MAAAvI,EAAA+hD,YAAA,EAAAgF,GAAA1D,oBAAA2D,GAAAjD,OAAA/jD,GAAAonD,EAAApnD,EAAAsiD,WAAA,KAAAtiD,EAAA8iD,YAAA,EAAAvkD,KAAAL,EAAAqK,IAAArK,EAAAqK,EAAA++C,yBAAA/+C,EAAA++C,uBAAA9oD,EAAAyO,GAAAm6C,EAAApnD,EAAA,KAAAL,GAAA,EAAApB,KAAAwoD,GAAAQ,mBAAAzlB,IAAA1iC,GAAAJ,IAAA,SAAAqJ,GAA+V,IAAAjJ,EAAAiJ,EAAAypC,IAAY,IAAA1yC,OAAAooD,sBAAApoD,EAAAkoD,wBAAAloD,EAAAqoD,qBAAAroD,EAAAsoD,uBAAAtoD,EAAAuoD,sBAAA,CAAoI,IAAAhoD,EAAA0I,EAAAxC,KAAA7G,EAAAqJ,EAAA5I,IAAAvB,EAAA0pD,GAAA7oD,IAAAY,GAAiC,GAAAxB,EAAAD,QAAa2pD,MAAA,IAAAtE,IAAAuE,aAA0BF,GAAAr9C,IAAA5K,EAAAzB,IAAA+B,EAAAjB,GAAAd,EAAA4pD,SAAAthD,KAAA6B,OAAsC,CAAK,IAAA1J,EAAAT,EAAA2pD,MAAA9oD,IAAAC,GAAqBb,EAAAQ,UAAAT,EAAA2pD,MAAAt9C,IAAAvL,EAAAL,MAAA6H,KAAA6B,KAAvnB,CAAiqBA,QAAI,QAAAu5B,EAAA,CAAgB,IAAAz0B,EAAA9E,EAAAypC,IAAAxzC,EAAA+J,EAAA85C,OAAsB5jD,GAAA8H,EAAA8G,MAAA,MAAkB,IAAAR,EAAAtE,EAAAg9C,SAAiB,IAAAnnD,EAAAyO,GAAA,GAAA24C,GAAA34C,GAAA,QAAAmsB,EAAA,EAAAiK,EAAAp2B,EAAAtI,OAAyCy0B,EAAAiK,EAAIjK,IAAA,CAAK,IAAAlqB,EAAAjC,EAAAmsB,IAAWn6B,EAAAiQ,IAAAgE,EAAAhE,IAAAw4C,EAAAx4C,EAAA,KAAAjP,GAAA,EAAApB,QAA8BqU,EAAAjG,IAAAy6C,EAAAz6C,EAAA,KAAAhN,GAAA,EAAApB,GAA4B,IAAA0B,EAAA3B,GAAA,QAAAinC,KAAAjnC,EAAA,OAAAA,EAAAinC,IAAAwiB,EAAAxiB,KAAAn4B,EAAAm4B,EAAAjnC,EAAAinC,GAAA,KAAA/mC,GAAAF,EAAAinC,GAAA,MAAwEwhB,GAAAQ,mBAAAnoD,GAAAJ,IAAA,SAAAqJ,GAAyC,IAAAjJ,EAAAiJ,EAAAxC,KAAAlG,EAAA0I,EAAA5I,IAAAT,EAAAgpD,GAAAjpD,IAAAK,GAAiC,GAAAjB,EAAAa,QAAa6oD,MAAA,IAAAtE,IAAAuE,aAA0BE,GAAAz9C,IAAAnL,EAAAJ,IAAAiB,EAAAN,GAAAX,EAAA8oD,SAAAthD,KAAA6B,OAAsC,CAAK,IAAAnK,EAAAc,EAAA6oD,MAAA9oD,IAAAY,GAAqBxB,EAAAD,UAAAc,EAAA6oD,MAAAt9C,IAAA5K,EAAAzB,MAAAsI,KAAA6B,IAAjL,CAA0NA,GAAIpI,EAAAb,IAAA,SAAAiJ,EAAAjJ,GAAoBiJ,EAAAqpC,YAAAtyC,GAApB,CAAqCA,EAAAZ,GAAM,SAAAypD,EAAA5/C,GAAc0+C,GAAA1D,oBAAA7kD,IAA2B,IAAAY,EAAAiJ,KAAAo9C,SAAAp9C,EAAA,KAA2B,OAAA2+C,GAAAjoD,IAAAsJ,IAAAjJ,EAAoB,SAAA8oD,EAAA7/C,EAAAjJ,GAAgB,GAAA+oD,KAAA/oD,GAAAZ,IAAA6J,IAAA+/C,GAAA,CAAuB,IAAAzoD,EAAA,SAAA0I,GAAkB,QAAAjJ,EAAA,EAAAO,EAAA0oD,GAAAhkD,OAAwBjF,EAAAO,EAAIP,IAAA,CAAK,IAAAJ,EAAAqpD,GAAAjpD,GAAY,GAAAJ,EAAAwjD,MAAAn6C,EAAA,OAAArJ,EAAsB,YAArF,CAAiGI,GAAI,GAAAa,EAAAN,GAAA,CAAS,IAAAX,EAAA,IAAA8iC,EAAYnjC,EAAA0J,OAAAm6C,MAAAn6C,EAAAigD,GAAAjgD,IAAA,SAAAA,EAAAjJ,EAAAO,GAAwC,IAAAM,EAAAb,GAAA,CAAU,IAAAJ,EAAAI,EAAAymD,WAAmB,IAAA5lD,EAAAjB,GAAA,CAAU,IAAA8wC,EAAAznC,EAAArJ,EAAAW,EAAAmlD,IAAA,GAAA9lD,EAAAI,EAAAymD,WAAkC7mD,IAAAonD,aAAgBhnD,EAAAsyC,YAAA1yC,GAAkB,UAAU,SAA7J,CAAsKqJ,EAAAjJ,EAAAJ,IAAAunD,EAAAl+C,EAAAjJ,EAAAJ,EAAA8lD,IAAA,GAAAnlD,EAAA,SAAA0I,EAAAjJ,EAAAO,GAA0C,IAAAX,GAAOwjD,IAAAn6C,EAAAkgD,MAAAnpD,EAAAopD,UAAA7oD,GAA2B,OAAA0oD,GAAA7hD,KAAAxH,KAA5E,CAAgGI,EAAAiJ,EAAArJ,KAAAikD,eAAqB,CAAK,IAAA58C,EAAA1G,EAAA6oD,UAAkBniD,EAAAguC,aAAAn2C,EAAAmK,IAAA++C,EAAAznD,EAAA4oD,MAAAnpD,EAAAiH,GAAA,eAAAgC,GAAsD,QAAAjJ,EAAA,EAAAO,EAAA0oD,GAAAhkD,OAAwBjF,EAAAO,EAAIP,IAAA,GAAAipD,GAAAjpD,KAAAiJ,EAAA,YAAAggD,GAAAte,OAAA3qC,EAAA,GAAlF,CAA8HO,KAAA0I,EAAAm6C,MAAAn6C,EAAAigD,GAAAjgD,IAAAogD,EAAA9oD,EAAA4oD,MAAAlgD,EAAAjJ,EAAAiH,EAAAy+C,IAAA,OAAAnlD,EAAA4oD,MAAAlgD,EAAAhC,EAAA48C,UAAwE,GAAAtjD,EAAA,CAAM,IAAApB,EAAAoB,EAAA4oD,MAAc,GAAAhqD,GAAA,GAAAA,EAAAmkD,MAAA,OAAAnkD,EAAA8mD,WAAqC,SAAAqD,EAAArgD,GAAc,gBAAAjJ,EAAAO,GAAqB0I,MAAAjJ,GAAA8oD,EAAAvoD,EAAA0I,IAAiB,SAAAogD,EAAApgD,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,GAA0B,GAAAgC,IAAAjJ,EAAA,CAAU,IAAAb,EAAA8J,EAAAq6C,MAAA9gB,EAAAxiC,EAAAsjD,MAAwB,MAAA9gB,EAAA,CAAS,IAAA3hC,GAAA,EAAA2hC,GAAA,EAAc,GAAArjC,EAAAoqD,EAAAtgD,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAAsB,EAAAoG,GAAAuiD,GAAAjpD,EAAAkpD,EAAAzpD,EAAA,KAAAJ,EAAAd,EAAAS,EAAAsB,GAAAoI,EAAArJ,EAAAqH,QAAsD,KAAAu7B,EAAA,KAAArjC,EAAAuqD,EAAAzgD,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,GAAAuiD,GAAAjpD,EAAAgmD,EAAAvmD,EAAA,KAAAJ,EAAAd,EAAAS,GAAA0J,EAAArJ,EAAAqH,GAAA,EAAAu7B,EAAA,EAAArjC,EAAA,SAAA8J,EAAAjJ,GAAsF,IAAAO,EAAAP,EAAAimD,SAAArmD,EAAAqJ,EAAAm6C,IAAyBpjD,EAAAojD,IAAAxjD,EAAAqJ,EAAAg9C,WAAA1lD,IAAAX,EAAAsnD,UAAA3mD,GAA/G,CAAuJ0I,EAAAjJ,GAAAwpD,GAAAjpD,EAAAwnD,EAAA/nD,EAAA,MAAAiJ,EAAArJ,EAAAqH,GAAA,KAAAu7B,EAAA,KAAArjC,EAAA,SAAA8J,EAAAjJ,GAAwDA,EAAAojD,IAAAn6C,EAAAm6C,IAAxD,CAAoEn6C,EAAAjJ,GAAAwpD,GAAAjpD,EAAAgP,EAAAvP,EAAA,MAAAiJ,EAAArJ,EAAAqH,GAAA,SAAAgC,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,GAAoDuiD,GAAAjpD,EAAA4mD,EAAAnnD,EAAA,KAAAJ,EAAAd,EAAAS,GAAA0J,EAAArJ,EAAAqH,GAApD,CAAgFgC,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,IAAiB,SAAA0iD,EAAA1gD,EAAAjJ,EAAAO,EAAAX,GAAoBumD,GAAAl9C,GAAA++C,EAAA/+C,EAAAjJ,EAAAO,GAAA,EAAAX,GAAAsmD,GAAAj9C,GAAA2gD,GAAA5pD,EAAAiJ,EAAA1I,EAAAX,GAAAI,EAAAwzC,YAAA,GAAuD,SAAAkW,EAAAzgD,EAAAjJ,EAAAO,EAAA0G,EAAA9H,EAAAqjC,EAAAhvB,GAA0B,IAAApU,EAAAY,EAAAyG,KAAa,GAAAwC,EAAAxC,OAAArH,EAAAyqD,GAAA5gD,EAAAjJ,EAAAO,EAAA0G,EAAA9H,EAAAqjC,EAAAhvB,OAAgC,CAAK,IAAA5S,EAAAqI,EAAAm6C,IAAA1gB,EAAAz5B,EAAA85C,MAAA55C,EAAAnJ,EAAA+iD,MAAAh1C,EAAA9E,EAAAg9C,SAAA/mD,EAAAc,EAAAimD,SAAA14C,EAAAtE,EAAAq6C,MAAA5pB,EAAA15B,EAAAsjD,MAAA3f,EAAA3jC,EAAA0yC,IAAAljC,EAAAvG,EAAA0oC,UAAAxL,EAAAnmC,EAAA2xC,UAA0sF,GAAxlF3xC,EAAAojD,IAAAxiD,EAAA4hC,MAAA,IAAA9I,GAAA,EAAA3rB,IAAA7O,GAAiC,SAAA+J,EAAAjJ,EAAAO,EAAA0G,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,EAAAwB,GAA6B,IAAA8hC,GAAA,EAAA70B,GAAA,EAA4c,GAA9b,GAAA7N,EAAA0iC,GAAA,MAAAz5B,GAAA,OAAAjJ,GAAA,GAAA6N,GAAA,EAAA60B,GAAA,GAAAnjC,EAAA0H,GAAA0iD,EAAAppD,EAAApB,EAAAqjC,EAAA5hC,GAAArB,EAAAgB,GAAAX,EAAAqH,GAAA6iD,GAAA3qD,EAAA8H,GAAAi/C,GAAAj/C,GAAA8iD,EAAA9iD,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,GAAA+nD,EAAAlgD,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,GAAAQ,EAAAqH,GAAArH,EAAAW,GAAA,SAAA0I,EAAAjJ,GAAmI,IAAAO,EAAA0I,EAAAw9C,WAAmB5lD,EAAAN,GAAAupD,GAAA7gD,EAAAjJ,GAAAO,EAAA2mD,UAAAlnD,EAAtJ,CAAiLb,EAAA8H,IAAA0iD,EAAAppD,EAAApB,EAAAqjC,EAAA5hC,GAAAkpD,GAAA3qD,EAAA8H,IAAAi/C,GAAAj/C,GAAAi/C,GAAA3lD,IAAAmiC,GAAA,WAAAz5B,EAAAjJ,GAA2D,OAAAA,EAAAiF,OAAA,IAAAnG,EAAAkB,EAAA,MAAAlB,EAAAkB,EAAA,GAAAK,MAAA4I,EAAAhE,OAAA,IAAAnG,EAAAmK,EAAA,MAAAnK,EAAAmK,EAAA,GAAA5I,KAA3D,CAAyIE,EAAA0G,KAAA4G,GAAA,KAAA87C,EAAAppD,EAAApB,EAAAqjC,EAAA5hC,GAAAmpD,EAAA9iD,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,IAAA8mD,GAAA3lD,IAAAqpD,GAAAzqD,EAAAoB,EAAAiiC,EAAA5hC,GAAAumD,EAAAlgD,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,IAAA+mD,GAAAl/C,KAAAk/C,GAAA5lD,GAAA8oD,EAAA9oD,EAAA0G,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,EAAAwB,IAAA+oD,EAAAppD,EAAApB,EAAAqjC,EAAA5hC,GAAAumD,EAAAlgD,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,KAAoIsjC,EAAA,CAAM,IAAAv5B,EAAA5I,EAAA0E,OAAA8I,EAAA9G,EAAAhC,OAA0B,IAAAkE,EAAA4E,EAAA,GAAAg8C,EAAA9iD,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,GAAA,IAAA2O,EAAA67C,GAAAzqD,EAAAoB,EAAAiiC,EAAA5hC,GAAAiN,EAAA,SAAA5E,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,EAAA9H,EAAAqjC,GAAwE,IAAAhvB,EAAApU,EAAAwB,EAAA8hC,EAAA70B,EAAA1E,EAAA4E,EAAA7O,EAAAC,EAAA,EAAAoO,EAAAi1B,EAAA,EAAA9I,EAAA,EAAAiK,EAAA,EAAAn0B,EAAAvG,EAAAywB,GAAAyM,EAAAnmC,EAAA2jC,GAAAoD,EAAA99B,EAAA/J,GAAAyf,EAAA3e,EAAAuN,GAAkE44B,EAAAid,MAAApjD,EAAA2jC,GAAAwC,EAAA+iB,GAAA/iB,IAAsBxnB,EAAAykC,MAAApjD,EAAAuN,GAAAoR,EAAAuqC,GAAAvqC,IAAsB1V,EAAA,CAAG,KAAKuG,EAAAnP,MAAA8lC,EAAA9lC,KAAc,CAAE,GAAAgpD,EAAA75C,EAAA22B,EAAA5lC,EAAAX,EAAAd,EAAAS,EAAA0H,GAAA08B,MAAAjK,EAAAx6B,GAAAykC,EAAAp2B,EAAA,MAAAtE,EAA6CuG,EAAAvG,EAAAywB,IAAAyM,EAAAnmC,EAAA2jC,IAAAyf,MAAApjD,EAAA2jC,GAAAwC,EAAA+iB,GAAA/iB,IAAoC,KAAKY,EAAA1mC,MAAAse,EAAAte,KAAc,CAAE,GAAAgpD,EAAAtiB,EAAApoB,EAAApe,EAAAX,EAAAd,EAAAS,EAAA0H,GAAAsG,IAAAmsB,IAAAx6B,GAAAykC,EAAAp2B,EAAA,MAAAtE,EAA6C89B,EAAA99B,EAAA/J,IAAAyf,EAAA3e,EAAAuN,IAAA61C,MAAApjD,EAAAuN,GAAAoR,EAAAuqC,GAAAvqC,KAAqC,GAAA+a,EAAAx6B,GAAQ,GAAAykC,GAAAp2B,EAAA,IAAAM,GAAA1E,EAAAoE,EAAA,GAAAi1B,EAAAxiC,EAAAmJ,GAAAi6C,IAAA,KAAsCzf,GAAAp2B,IAAKQ,EAAA/N,EAAA2jC,IAAAyf,MAAApjD,EAAA2jC,GAAA51B,EAAAm7C,GAAAn7C,IAAA41B,IAAAqmB,GAAAzpD,EAAA4mD,EAAAp5C,EAAA,KAAAnO,EAAAd,EAAAS,GAAAsO,QAA0D,GAAA81B,EAAAp2B,EAAA,KAAiBmsB,GAAAx6B,GAAK8oD,EAAA/+C,EAAAywB,KAAAn5B,EAAAX,GAAA,EAAAqH,OAAoB,CAAK,IAAAoK,EAAAnS,EAAAw6B,EAAA,EAAAhb,EAAAnR,EAAAo2B,EAAA,EAAA71B,EAAA,IAAApE,MAAAgV,GAAmC,IAAAlL,EAAA,EAAQA,EAAAkL,EAAIlL,IAAA1F,EAAA0F,IAAA,EAAY,IAAA8wB,GAAA,EAAAC,EAAA,EAAAC,EAAA,EAAiB,GAAA9lB,GAAA,GAAArN,EAAAqN,GAAA,IAAkB,IAAAlL,EAAAkmB,EAAQlmB,GAAAtU,EAAKsU,IAAA,GAAA5S,EAAAqI,EAAAuK,GAAAgxB,EAAA9lB,EAAA,IAAAtf,EAAAukC,EAA0BvkC,GAAAmO,EAAKnO,IAAA,GAAAsjC,EAAA1iC,EAAAZ,GAAAwB,EAAAP,MAAAqiC,EAAAriC,IAAA,CAA6ByN,EAAA1O,EAAAukC,GAAAnwB,EAAA+wB,EAAAnlC,EAAAklC,GAAA,EAAAC,EAAAnlC,EAAAsjC,EAAA0gB,MAAApjD,EAAAZ,GAAAsjC,EAAAwmB,GAAAxmB,IAAA2mB,EAAAzoD,EAAA8hC,EAAAniC,EAAAX,EAAAd,EAAAS,EAAA0H,GAAAu9B,IAAAv7B,EAAAuK,GAAA,KAA2E,WAAO,CAAK,IAAAixB,EAAA,IAAA0f,IAAc,IAAA3wC,EAAAmwB,EAAQnwB,GAAAjG,EAAKiG,IAAAixB,EAAAt5B,IAAAnL,EAAAwT,GAAAnT,IAAAmT,GAAsB,IAAAA,EAAAkmB,EAAQlmB,GAAAtU,EAAKsU,IAAA5S,EAAAqI,EAAAuK,GAAAgxB,EAAA9lB,IAAA3f,EAAAK,EAAAqlC,EAAA9kC,IAAAiB,EAAAP,QAAAqiC,EAAA1iC,EAAAZ,GAAA0O,EAAA1O,EAAAukC,GAAAnwB,EAAA+wB,EAAAnlC,EAAAklC,GAAA,EAAAC,EAAAnlC,EAAAsjC,EAAA0gB,MAAApjD,EAAAZ,GAAAsjC,EAAAwmB,GAAAxmB,IAAA2mB,EAAAzoD,EAAA8hC,EAAAniC,EAAAX,EAAAd,EAAAS,EAAA0H,GAAAu9B,IAAAv7B,EAAAuK,GAAA,OAAyH,GAAAnC,IAAAlS,GAAA,IAAAqlC,EAAA,IAAAolB,GAAArpD,EAAA0I,EAAArJ,EAAAqH,GAAgC08B,EAAAjlB,IAAI3Q,EAAA/N,EAAA2jC,IAAAyf,MAAApjD,EAAA2jC,GAAA51B,EAAAm7C,GAAAn7C,IAAA41B,IAAAqmB,GAAAzpD,EAAA4mD,EAAAp5C,EAAA,KAAAnO,EAAAd,EAAAS,GAAA,UAA6D,CAAK,IAAAiU,EAAAnC,EAAAmzB,EAAUhxB,EAAA,GAAI3S,EAAAD,EAAAqI,EAAAywB,QAAAsuB,EAAApnD,EAAAL,EAAAX,GAAA,EAAAqH,GAAAuM,KAAkC,GAAA8wB,EAAA,CAAM,IAAAI,EAAA,SAAAz7B,GAAkB,IAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,EAAAgC,EAAAm/B,MAAA,GAAAjpC,GAAA,GAAAqjC,EAAAv5B,EAAAhE,OAA4C,IAAAjF,EAAA,EAAQA,EAAAwiC,EAAIxiC,IAAA,CAAK,IAAAa,EAAAoI,EAAAjJ,GAAW,QAAAa,EAAA,CAAW,GAAAN,EAAApB,IAAA8F,OAAA,GAAAgE,EAAA1I,GAAAM,EAAA,CAA2BoG,EAAAjH,GAAAO,EAAApB,EAAAiI,KAAApH,GAAiB,SAAS,IAAAJ,EAAA,EAAAd,EAAAK,EAAA8F,OAAA,EAAqBrF,EAAAd,GAAImK,EAAA9J,EAAAI,GAAAK,EAAAd,GAAA,MAAA+B,EAAAjB,EAAAL,EAAA,EAAAT,EAAAS,EAA+BsB,EAAAoI,EAAA9J,EAAAS,QAAA,IAAAqH,EAAAjH,GAAAb,EAAAS,EAAA,IAAAT,EAAAS,GAAAI,IAA4D,IAApBJ,EAAAT,EAAA8F,OAAAnG,EAAAK,EAAAS,EAAA,GAAyBA,KAAA,GAAOT,EAAAS,GAAAd,IAAAmI,EAAAnI,GAAe,OAAAK,EAAzS,CAAkT2O,GAAI,IAAA1O,EAAAslC,EAAAz/B,OAAA,EAAAuO,EAAAkL,EAAA,EAAuBlL,GAAA,EAAKA,KAAA,IAAA1F,EAAA0F,KAAAzF,EAAA/N,EAAAukC,EAAA/wB,EAAAmwB,IAAAyf,MAAApjD,EAAAukC,GAAAx2B,EAAAm7C,GAAAn7C,IAAA5E,EAAAo7B,EAAA,EAAAylB,GAAAzpD,EAAA4mD,EAAAp5C,EAAA,KAAAnO,EAAAd,EAAAS,GAAA4J,EAAAq5B,EAAAxiC,EAAAmJ,GAAAi6C,IAAA,OAAAhkD,EAAA,GAAAoU,IAAAkxB,EAAAtlC,IAAA2O,EAAA/N,EAAAukC,EAAA/wB,EAAAmwB,GAAAx6B,EAAAo7B,EAAA,EAAAylB,GAAAzpD,EAAAwN,EAAAq1C,IAAAj6C,EAAAq5B,EAAAxiC,EAAAmJ,GAAAi6C,IAAA,OAAAhkD,SAAkK,GAAAolC,IAAA9lB,EAAA,IAAAlL,EAAAkL,EAAA,EAAwBlL,GAAA,EAAKA,KAAA,IAAA1F,EAAA0F,MAAAzF,EAAA/N,EAAAukC,EAAA/wB,EAAAmwB,IAAAyf,MAAApjD,EAAAukC,GAAAx2B,EAAAm7C,GAAAn7C,IAAA5E,EAAAo7B,EAAA,EAAAylB,GAAAzpD,EAAA4mD,EAAAp5C,EAAA,KAAAnO,EAAAd,EAAAS,GAAA4J,EAAAq5B,EAAAxiC,EAAAmJ,GAAAi6C,IAAA,SAApoD,CAAsuD7iD,EAAA0G,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,EAAAwB,EAAAuI,EAAA4E,GAAA,SAAA9E,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,EAAA9H,EAAAqjC,GAAgD,QAAA3hC,EAAA1B,EAAAqjC,IAAArjC,EAAAJ,EAAA,EAAsBA,EAAA8B,EAAI9B,IAAA,CAAK,IAAAyU,EAAAxT,EAAAjB,GAAWyU,EAAA4vC,MAAA5vC,EAAAxT,EAAAjB,GAAAmqD,GAAA11C,IAAA61C,EAAApgD,EAAAlK,GAAAyU,EAAAjT,EAAAX,EAAAd,EAAAS,EAAA0H,GAA0C,GAAA9H,EAAAqjC,EAAA,IAAAzjC,EAAA8B,EAAe9B,EAAAyjC,EAAIzjC,IAAA,CAAK,IAAAK,EAAAY,EAAAjB,GAAWK,EAAAgkD,MAAAhkD,EAAAY,EAAAjB,GAAAmqD,GAAA9pD,IAAA6qD,GAAA1pD,EAAA4mD,EAAA/nD,EAAA,KAAAQ,EAAAd,EAAAS,SAA4C,GAAAJ,EAAAqjC,EAAA,IAAAzjC,EAAA8B,EAAoB9B,EAAAI,EAAIJ,IAAAipD,EAAA/+C,EAAAlK,GAAAwB,EAAAX,GAAA,EAAAqH,GAA3O,CAAgQ1G,EAAA0G,EAAA9H,EAAAqjC,EAAAhvB,EAAApU,EAAAwB,EAAAuI,EAAA4E,IAA/+E,CAAogFR,EAAAmsB,EAAA3rB,EAAA7O,EAAA0B,EAAAqG,EAAA9H,GAAA,IAAAqjC,GAAA,kBAAAxiC,EAAAyG,KAAA+M,GAAmDkvB,IAAAv5B,EAAA,CAAU,IAAA49B,EAAArE,GAAAgjB,GAAA/mC,EAAAxV,GAAAu8C,GAAAr0C,GAAA,EAAyB,GAAAsN,IAAA+mC,GAAA,CAAW,IAAAhnC,GAAA,KAAAgb,GAAA,EAA6B,QAAA5rB,KAAZ4Q,IAAArN,EAAAozB,EAAA9lB,IAAYA,EAAA,CAAgB,IAAA2lB,EAAA3lB,EAAA7Q,GAAWs5C,EAAAt5C,EAAAi5B,EAAAj5B,GAAAw2B,EAAA1jC,EAAA4hC,EAAAnxB,GAAkBqN,GAAA8lB,EAAA9K,EAAA15B,EAAAY,EAAA+d,EAAAnL,EAAAnC,GAAkB,GAAA01B,IAAA2e,GAAA,QAAAnhB,KAAAwC,EAAAjoC,EAAA6f,EAAA4lB,MAAAzlC,EAAAioC,EAAAxC,KAAA,SAAAt7B,EAAAjJ,EAAAO,EAAAX,GAA8D,UAAAqJ,EAAA1I,EAAAR,MAAA,KAAAH,EAAA,kBAAAqJ,EAAA1I,EAAA8mD,gBAAA,SAAAsB,EAAA1/C,GAAA4E,EAAA5E,EAAAjJ,EAAA,KAAAO,KAAA8mD,gBAAAp+C,GAA9D,CAAgLs7B,EAAAwC,EAAAxC,GAAA3jC,EAAA84B,GAAalqB,IAAA22B,IAAArnC,EAAAqnC,GAAAvlC,EAAAymD,gBAAA,SAAA7kB,EAAA5hC,EAAAolD,aAAA,QAAA7f,GAAAvlC,EAAA+wC,UAAAxL,GAAAxC,IAAA16B,EAAAypC,MAAA/O,GAAAnwB,IAAA8zC,GAAA1mD,EAAA+iC,EAAA18B,IAAiH,SAAAsiD,EAAAtgD,EAAAjJ,EAAAO,EAAA0G,EAAA9H,EAAAqjC,EAAAE,EAAA70B,GAA4B,IAAA1E,EAAAF,EAAAxC,KAAAsH,EAAA/N,EAAAyG,KAAAvH,EAAA+J,EAAA5I,IAAAkN,EAAAvN,EAAAK,IAAsC,GAAA8I,IAAA4E,GAAA7O,IAAAqO,EAAA,OAAAs8C,GAAA5gD,EAAAjJ,EAAAO,EAAA0G,EAAA9H,EAAAqjC,EAAA30B,IAAA,EAA4C,IAAA6rB,EAAA15B,EAAA+iD,OAAA2C,GAAkB,GAAAhjB,EAAA,CAAM,IAAAiB,EAAA16B,EAAAg9C,SAAiB,GAAAtiB,EAAA4gB,WAAA,EAAA5gB,EAAAgf,WAAA,CAAgC,GAAA9hD,EAAAN,GAAA,SAAiBimD,GAAAjmD,EAAAkpD,EAAAzpD,EAAA,KAAAiH,EAAA9H,EAAAqjC,GAAA,EAAAxiC,EAAAsjD,OAAA,GAAAr6C,EAAAm6C,SAA0C,CAAK,IAAA5zC,GAAAzQ,EAAA4kC,EAAAmgB,oBAAA3d,EAAAxC,EAAA3I,MAAA+L,EAAAv3B,EAAA5O,EAAAulC,EAAA,MAAAA,EAAAxnB,EAAAglB,EAAAof,MAAmE/iD,EAAAimD,SAAAtiB,IAAAigB,OAAAphB,EAAwB,IAAAnxB,EAAAsyB,EAAAuf,WAAAxkC,EAAAilB,EAAAqf,iBAAAjc,EAAAZ,EAAAxnB,EAAA+a,EAAAv6B,GAAA,MAAyD,GAAAwkC,EAAAgf,WAAA,SAAyB,IAAA70C,EAAAw2B,GAAA,EAAWxlC,EAAA6kC,EAAA6f,mBAAA11C,EAAA61B,EAAA6f,mBAAA11C,EAAAhP,EAAAgP,GAAA3O,EAAAyB,EAAAzB,EAAA2O,GAAA61B,EAAA8f,cAAA31C,EAAAvO,EAAAmf,KAAAwrC,KAAAxrC,IAAAsqC,IAAAtqC,EAAArN,EAAAizB,GAAA,GAAA1kC,EAAA8e,KAAAyrC,GAAAzrC,EAAA,MAAAwnC,GAAAxnC,GAAAtf,IAAAoU,EAAAkL,KAAA7d,EAAA6d,EAAA0kC,OAAA1kC,EAAAwqC,GAAAxqC,KAAA,GAAAA,EAAA4kC,MAAA5kC,EAAA6kC,YAAAvjD,EAAA,GAAAqR,EAAAiyC,QAAAjyC,EAAAkyC,YAAAvjD,GAAA2jC,EAAAuf,WAAAxkC,EAAAilB,EAAAwf,OAAAnjD,EAAAskC,IAAA+kB,EAAAh4C,EAAAqN,EAAAne,EAAA0G,EAAA6G,EAAA00B,EAAA30B,GAAA2B,GAAAm0B,EAAAmgB,oBAAAngB,EAAAmgB,mBAAAnlC,EAAAooB,GAAAlmC,EAAA8mD,GAAA3D,cAAA2D,GAAA3D,YAAAhkD,GAAA2nD,GAAA1D,oBAAA2D,GAAAz8C,IAAAw4B,EAAAjlB,EAAA0kC,MAAApjD,EAAAojD,IAAA1kC,EAAA0kC,IAA0Zzf,EAAA4gB,WAAA,MAAe,CAAK,IAAAhgB,GAAA,EAAAC,EAAAv7B,EAAA85C,MAAAte,EAAAzkC,EAAA0yC,IAAAhO,GAAA5lC,EAAA2lC,GAAAiM,EAAAznC,EAAAg9C,SAAA+B,EAAAtX,EAAoD1wC,EAAAojD,IAAAn6C,EAAAm6C,IAAApjD,EAAAimD,SAAAvV,EAAAxxC,IAAAqO,EAAAg3B,GAAA,EAAAG,IAAA5lC,EAAA2lC,EAAA2lB,2BAAA7lB,EAAAE,EAAA2lB,wBAAA5lB,EAAA9K,KAAA,IAAA6K,IAAAG,IAAA5lC,EAAA2lC,EAAA6jB,wBAAA7jB,EAAA6jB,sBAAA9jB,EAAA9K,GAAAn6B,EAAAyoD,EAAAj6C,EAAA2rB,EAAAv6B,IAAA6oD,EAAAkC,KAAAtqD,EAAAooD,QAAAgB,GAAAhB,EAAAmC,GAAAnC,EAAA,MAAA9B,GAAA8B,GAAA5oD,IAAAoU,EAAAw0C,KAAAnnD,EAAAmnD,EAAA5E,OAAA4E,EAAAkB,GAAAlB,SAAAgB,KAAAK,EAAA3Y,EAAAsX,EAAAznD,EAAA0G,EAAA9H,EAAAqjC,EAAA30B,GAAA7N,EAAAimD,SAAA+B,EAAAtjB,IAAA5lC,EAAA2lC,EAAA8jB,uBAAA9jB,EAAA8jB,qBAAA/jB,EAAA9K,GAAA15B,EAAAojD,IAAA4E,EAAA5E,MAAA,GAAA4E,EAAA1E,MAAA0E,EAAAzE,YAAAvjD,EAAA,GAAA0wC,EAAA4S,QAAA5S,EAAA6S,YAAAvjD,GAA2a,SAAS,SAAA2oD,EAAA1/C,GAAc,YAAAA,EAAA,UAAAA,EAAA,GAA6B,SAAAm+C,EAAAn+C,EAAAjJ,EAAAO,EAAAX,EAAAL,EAAA0H,GAAwB,GAAAjH,IAAAO,EAAA,CAAU,GAAA8pD,GAAAC,IAAArhD,IAAAhC,GAAA,UAAAgC,EAAA,OAAoC,GAAAshD,GAAAD,IAAArhD,GAAArJ,EAAAqJ,EAAA,cAAAA,IAAA8gC,cAAA9gC,KAAA1I,OAAwD,GAAAiqD,GAAAF,IAAArhD,GAAA,CAAmB,IAAApI,EAAA/B,EAAAyB,GAAA,GAAAA,EAAgBX,EAAAqJ,KAAApI,IAAAjB,EAAAqJ,GAAApI,QAAmB,GAAA8nD,EAAA1/C,GAAA+E,EAAA/E,EAAAjJ,EAAAO,EAAAX,QAAwB,GAAAd,EAAAyB,GAAAX,EAAAynD,gBAAAp+C,QAAkC,aAAAA,GAAA,SAAAA,EAAAjJ,EAAAO,GAAqC,IAAAX,EAAAL,EAAA0H,EAAA1G,EAAAkjC,MAAkB,GAAAtkC,EAAAa,GAAAiH,EAAAwjD,QAAAzqD,OAAiC,GAAAlB,EAAAmK,IAAA9J,EAAA8J,GAAA,IAAArJ,KAAAI,EAAAT,EAAAS,EAAAJ,GAAAqH,EAAArH,IAAA4iC,EAAAjjC,IAAAmrD,GAAAJ,IAAA1qD,GAAAL,IAAA,SAA+D,CAAK,IAAAK,KAAAI,GAAAT,EAAAS,EAAAJ,MAAAqJ,EAAArJ,KAAAqH,EAAArH,IAAA4iC,EAAAjjC,IAAAmrD,GAAAJ,IAAA1qD,GAAAL,IAAA,MAA6D,IAAAK,KAAAqJ,EAAAnK,EAAAkB,EAAAJ,MAAAqH,EAAArH,GAAA,KAAzN,CAAwPI,EAAAO,EAAAX,QAAQ,+BAAAqJ,EAAA,CAAuC,IAAAlK,EAAAiB,KAAA4mD,OAAApzC,EAAAjT,KAAAqmD,OAAgC7nD,IAAAyU,IAAA1U,EAAA0U,IAAAqzC,GAAAjnD,EAAA4T,KAAA5T,EAAA+qD,UAAAn3C,SAAwCjU,GAAAqrD,GAAAN,IAAArhD,GAAArJ,EAAAirD,eAAAD,GAAAjrD,IAAAsJ,KAAA1I,GAAAX,EAAAomD,aAAA/8C,EAAA1I,IAAuE,SAAAyN,EAAA/E,EAAAjJ,EAAAO,EAAAX,GAAoB,GAAAI,IAAAO,EAAA,GAAAuqD,GAAAR,IAAArhD,GAAA4E,EAAA5E,EAAAjJ,EAAAO,EAAAX,OAAiC,CAAK,IAAAL,EAAA0J,EAAA8gC,cAAA5qC,EAAAS,EAAAL,GAA6B,GAAAJ,KAAAinD,QAAA,OAAuB,GAAAn/C,EAAA1G,IAAAzB,EAAAyB,GAAAX,EAAAL,GAAAgB,MAAqB,CAAK,IAAAiiC,EAAAjiC,EAAA8jB,MAAcme,GAAAv7B,EAAAu7B,GAAA5iC,EAAAL,GAAA,SAAA0J,GAAyBu5B,EAAAjiC,EAAAgtB,KAAAtkB,IAAY7J,MAAO,SAAA+nD,EAAAl+C,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAsB,IAAAS,EAAA0J,EAAAq6C,MAAc,YAAA/jD,EAAAgnD,EAAAt9C,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAA,GAAAS,EAAAkqD,EAAAxgD,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAA,EAAAS,GAAA,QAAAA,EAAAgQ,EAAAtG,EAAAjJ,GAAA,EAAAT,EAAAwoD,EAAA9+C,EAAAjJ,QAAAZ,IAAuF,SAAA2oD,EAAA9+C,EAAAjJ,GAAgB,IAAAO,EAAAu6B,SAAAgsB,eAAA79C,EAAAg9C,UAA0C,OAAAh9C,EAAAm6C,IAAA7iD,EAAAM,EAAAb,IAAAiqD,GAAAjqD,EAAAO,KAA+B,SAAAgP,EAAAtG,EAAAjJ,GAAgB,IAAAO,EAAAu6B,SAAAgsB,eAAA,IAAkC,OAAA79C,EAAAm6C,IAAA7iD,EAAAM,EAAAb,IAAAiqD,GAAAjqD,EAAAO,KAA+B,SAAAgmD,EAAAt9C,EAAAjJ,EAAAO,EAAAzB,EAAAmI,GAAsB,IAAA9H,EAAM,GAAAwoD,GAAAQ,mBAAiNtnD,EAAjN1B,EAAA,SAAA8J,EAAAjJ,EAAAO,EAAAX,GAA6C,IAAAd,EAAAmK,EAAAxC,KAAAlH,EAAAqpD,GAAAjpD,IAAAb,GAAyB,IAAAC,EAAAQ,GAAA,CAAU,IAAA0H,EAAAgC,EAAA5I,IAAAlB,EAAA,OAAA8H,EAAA1H,EAAAmpD,SAAAnpD,EAAAkpD,MAAA9oD,IAAAsH,GAAiD,IAAAlI,EAAAI,GAAA,CAAU,IAAAqjC,EAAArjC,EAAA6oC,MAAc,IAAAjpC,EAAAyjC,GAAA,OAAAknB,EAAAlnB,EAAAv5B,EAAA,KAAAjJ,EAAAO,EAAAX,GAAA,GAAAqJ,EAAAm6C,KAA4C,YAArM,CAAiNn6C,EAAA1I,EAAAzB,EAAAmI,IAAA,OAAApG,EAAAb,IAAAiqD,GAAAjqD,EAAAb,KAAwC,IAAAqjC,EAAAv5B,EAAAq6C,MAAcr8C,MAAA,IAAAu7B,GAAA,EAAArjC,EAAA,SAAA8J,EAAAjJ,GAA+B,OAAA86B,SAAA4W,cAAAzoC,GAA/B,CAAqGA,EAAAxC,MAAW,IAAA+M,EAAAvK,EAAAg9C,SAAA7mD,EAAA6J,EAAA85C,MAAAniD,EAAAqI,EAAA0oC,UAAAjP,EAAAz5B,EAAAypC,IAAiD,GAAAzpC,EAAAm6C,IAAAjkD,GAAAI,EAAAiU,GAAA,GAAA5T,EAAA4T,GAAAs2C,GAAA3qD,EAAAqU,OAAiC,CAAK,IAAA3F,GAAA,IAAA5G,GAAA,kBAAAgC,EAAAxC,KAAuCy/C,GAAA1yC,GAAAu2C,EAAAv2C,EAAArU,EAAAoB,EAAAzB,EAAA+O,GAAAs4C,GAAA3yC,IAAA2zC,EAAA3zC,EAAArU,EAAAoB,EAAAzB,EAAA+O,GAAuC,IAAAhN,EAAAzB,GAAA,CAAU,IAAA+J,GAAA,EAAA4E,GAAA,KAAAy0B,GAAA,EAAkC,QAAAtjC,KAAZ6O,IAAA5E,EAAAs7B,EAAArlC,IAAYA,EAAAgoD,EAAAloD,EAAA,KAAAE,EAAAF,GAAAC,EAAA8H,EAAAkC,GAAoC4E,GAAAy2B,EAAAhC,EAAAv5B,EAAA9J,EAAAC,GAAA,EAAA+J,GAAmB,cAAAvI,IAAAqG,EAAA9H,EAAA6mD,aAAA,QAAAplD,GAAAzB,EAAAwyC,UAAA/wC,GAAAC,EAAA6hC,IAAA4kB,GAAAnoD,EAAAujC,EAAAniC,GAAAM,EAAAb,IAAAiqD,GAAAjqD,EAAAb,KAA6F,SAAA4qD,EAAA9gD,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAsB,QAAAmI,EAAA,EAAA9H,EAAA8J,EAAAhE,OAAuBgC,EAAA9H,EAAI8H,IAAA,CAAK,IAAAu7B,EAAAv5B,EAAAhC,GAAW1H,EAAAijC,OAAA4gB,MAAAn6C,EAAAhC,GAAAu7B,EAAA0mB,GAAA1mB,IAAA2kB,EAAAl+C,EAAAhC,GAAAjH,EAAAO,EAAAX,EAAAd,KAA+C,SAAA2qD,EAAAxgD,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,GAAwB,IAAA0H,EAAM,GAAA0gD,GAAAQ,mBAAiOtnD,EAAjOoG,EAAA,SAAAgC,EAAAjJ,EAAAO,EAAAX,GAA6C,IAAAd,EAAAmK,EAAAxC,KAAAlH,EAAAipD,GAAA7oD,IAAAb,GAAyB,IAAAC,EAAAQ,GAAA,CAAU,IAAA0H,EAAAgC,EAAA5I,IAAAlB,EAAA,OAAA8H,EAAA1H,EAAAmpD,SAAAnpD,EAAAkpD,MAAA9oD,IAAAsH,GAAiD,IAAAlI,EAAAI,GAAA,CAAU,IAAAqjC,EAAArjC,EAAA6oC,MAAc,IAAAjpC,EAAAyjC,KAAA+mB,EAAA/mB,EAAAv5B,EAAA,KAAAjJ,EAAAO,EAAAX,GAAA,EAAAqJ,EAAAq6C,OAAA,aAAAr6C,EAAAm6C,KAA4D,YAArN,CAAiOn6C,EAAA1I,EAAAX,EAAAd,IAAA,OAAA+B,EAAAb,IAAAiqD,GAAAjqD,EAAAiH,KAAwC,IAAA9H,EAAA8J,EAAAxC,KAAA+7B,EAAAv5B,EAAA85C,OAAA2C,GAAAlyC,EAAAvK,EAAAypC,IAAmC,GAAAnzC,EAAA,CAAM,IAAAH,EAAAqoD,GAAAx+C,EAAA9J,EAAAqjC,EAAA5iC,EAAAd,EAAAyB,GAAAK,EAAAxB,EAAA8jD,WAAqC9jD,EAAA+jD,OAAAl6C,IAAAm6C,IAAAn8C,EAAAkgD,EAAAvmD,EAAA,KAAAL,EAAAnB,EAAAqkD,cAAA3kD,GAAA+B,EAAAb,IAAAiqD,GAAAjqD,EAAAiH,GAAAygD,EAAAz+C,EAAAuK,EAAApU,EAAAmB,GAAAnB,EAAAmlD,WAAA,EAAAoD,GAAA1D,oBAAA2D,GAAAz8C,IAAA/L,EAAA6H,OAA4H,CAAK,IAAAy7B,EAAAmlB,GAAA5+C,EAAA9J,EAAAqjC,EAAA5iC,GAAkBqJ,EAAAm6C,IAAAn8C,EAAAkgD,EAAAzkB,EAAA,KAAAniC,EAAAX,EAAAd,GAAAmK,EAAAg9C,SAAAvjB,EAAAolB,EAAAtlB,EAAAhvB,EAAAvM,EAAA1G,GAAAM,EAAAb,IAAAiqD,GAAAjqD,EAAAiH,GAA8D,OAAAA,EAAS,SAAAygD,EAAAz+C,EAAAjJ,EAAAO,EAAAX,GAAoBI,IAAAiH,EAAAjH,KAAAO,GAAAnB,KAAmB,IAAAN,GAAAC,EAAAwB,EAAA8wC,mBAAA9xC,EAAAooD,GAAAoD,YAA8CjsD,GAAA+B,EAAAtB,IAAAK,EAAA80C,YAAA,WAAmCn0C,EAAAgkD,WAAA,EAAAhlD,KAAA0J,GAAAnK,GAAAyB,EAAA8wC,oBAAA9wC,EAAAgkD,WAAA,IAAiE,SAAAuD,EAAA7+C,EAAAjJ,EAAAO,EAAAX,GAAoBI,IAAAlB,EAAAkB,EAAAooD,uBAAApoD,EAAAooD,qBAAAn/C,GAAAnK,EAAAkB,EAAAqoD,sBAAAzoD,EAAA80C,YAAA,WAA4G,OAAA10C,EAAAqoD,oBAAA9nD,EAAA0I,MAAqC,SAAAq+C,GAAAr+C,EAAAjJ,EAAAO,GAAmB,GAAA0G,EAAAjH,GAAAO,EAAAm0C,YAAA,WAAiC,OAAA10C,EAAAiJ,SAAc,CAAK,GAAA1J,EAAAS,GAAA,OAAeZ,KAAK,SAAAqoD,GAAAx+C,EAAAjJ,EAAAO,EAAA0G,EAAA9H,EAAAqjC,GAAyBzjC,EAAAkI,OAAAy+C,IAAa,IAAgX33C,EAAhXyF,EAAA,IAAAxT,EAAAO,EAAA0G,GAAiB,GAAAgC,EAAAg9C,SAAAzyC,IAAA8wC,gBAAA,EAAA9wC,EAAAoT,QAAA3f,EAAAuM,EAAAuvC,QAAA2C,KAAAlyC,EAAAuvC,MAAAxiD,GAAAiT,EAAAkwC,WAAAlhB,EAAAhvB,EAAAmvC,YAAA,EAAAnvC,EAAAowC,OAAAzkD,GAAAL,EAAA0U,EAAAw3C,oBAAA,CAA8I,GAAAx3C,EAAAovC,cAAA,EAAApvC,EAAAw3C,qBAAAx3C,EAAAqvC,iBAAA,CAAgE,IAAAngB,EAAAlvB,EAAAwnB,MAAAntB,EAAA2F,EAAAsvC,cAAgC,UAAApgB,EAAAlvB,EAAAwnB,MAAAntB,OAAsB,QAAA1E,KAAA0E,EAAA60B,EAAAv5B,GAAA0E,EAAA1E,GAA8BqK,EAAAqvC,kBAAA,EAAArvC,EAAAsvC,cAAA,KAA2CtvC,EAAAovC,cAAA,EAAwB9jD,EAAA0U,EAAAgwC,mBAAAz1C,EAAAyF,EAAAgwC,mBAAA1kD,EAAAiP,GAAAyF,EAAAiwC,cAAAx8C,EAAAuM,EAAAiwC,cAAA7iD,EAAAqG,EAAA8G,GAAAlN,EAAA8mD,GAAA5C,eAAA4C,GAAA5C,aAAAvxC,GAAmI,IAAAtU,EAAAsU,EAAA49B,OAAA7wC,EAAAiT,EAAAwnB,MAAA/zB,GAA4B,OAAApG,EAAA8mD,GAAA3C,cAAA2C,GAAA3C,YAAAxxC,GAAA0yC,GAAAhnD,GAAAE,IAAAG,EAAAL,KAAAgrD,KAAAtqD,EAAAV,KAAAirD,GAAAjrD,EAAA,OAAAA,EAAAkkD,MAAAlkD,EAAAgqD,GAAAhqD,IAAA,GAAAA,EAAAokD,QAAApkD,EAAAqkD,YAAAt6C,IAAAuK,EAAA0vC,WAAAhkD,EAAAsU,EAAsJ,SAAAg2C,GAAAvgD,EAAAjJ,EAAAO,EAAAX,EAAAd,GAAuBkpD,EAAAznD,EAAA,KAAAX,GAAA,EAAAd,GAAA0nD,GAAAv9C,EAAAjJ,EAAAO,EAAA6iD,KAA+B,SAAAyE,GAAA5+C,EAAAjJ,EAAAO,EAAAzB,GAAqB,IAAAmI,EAAAjH,EAAAO,EAAAzB,GAAa,OAAAonD,GAAAj/C,GAAA7H,IAAAG,EAAA0H,KAAAijD,KAAAtqD,EAAAqH,KAAAkjD,GAAAljD,EAAA,OAAAA,EAAAm8C,MAAAn8C,EAAAiiD,GAAAjiD,IAAA,GAAAA,EAAAq8C,QAAAr8C,EAAAs8C,YAAAt6C,IAAAhC,EAAkG,SAAA6iD,GAAA7gD,EAAAjJ,GAAiB,KAAAA,EAAAiJ,EAAAuqC,YAAAxzC,EAAAiJ,EAAA4oC,YAAA/W,SAAAgsB,eAAA,KAAkE,SAAAmD,GAAAhhD,EAAAjJ,GAAiBiJ,EAAA4oC,YAAA7xC,GAAiB,SAAAgqD,GAAA/gD,EAAAjJ,EAAAO,GAAmBzB,EAAAyB,GAAA0pD,GAAAhhD,EAAAjJ,GAAAiJ,EAAAgiD,aAAAjrD,EAAAO,GAAiC,SAAAspD,GAAA5gD,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,GAA2B+gD,EAAA/+C,EAAA,KAAArJ,GAAA,EAAAqH,GAAiB,IAAA9H,EAAAgoD,EAAAnnD,EAAA,KAAAJ,EAAAd,EAAAS,GAAsBS,EAAAojD,IAAAjkD,EAAAqnD,GAAAjmD,EAAApB,EAAA8J,EAAAm6C,KAAsB,SAAAoD,GAAAv9C,EAAAjJ,EAAAO,GAAmB0I,MAAA1I,EAAA8iD,YAAAp6C,EAAA89C,aAAA/mD,EAAAO,GAAwC,SAAAqpD,GAAA3gD,EAAAjJ,EAAAO,EAAAX,KAAqB+nD,GAAAQ,kBAAAR,GAAAQ,mBAAAvoD,IAAA,SAAAqJ,EAAAjJ,EAAAO,EAAAX,GAAmE,QAAAd,EAAA,EAAAmI,EAAAjH,EAAAiF,OAAuBnG,EAAAmI,EAAInI,IAAA,CAAK,IAAAK,EAAAa,EAAAlB,GAAWS,EAAAJ,IAAA6oD,EAAA7oD,EAAqB,KAArBoB,GAAA,EAAAX,IAA9G,CAAmI,EAAAI,EAAAO,EAAAX,GAAAqJ,EAAAuqC,YAAA,GAA8B,SAAAqT,GAAA59C,EAAAjJ,GAAiB,IAAAO,EAAAu6B,SAAA4W,cAAA,KAAkC,OAAAnxC,EAAAoqD,UAAA3qD,EAAAO,EAAAoqD,YAAA1hD,EAAA0hD,UAA+C,SAAAO,GAAAjiD,EAAAjJ,EAAAO,EAAAX,EAAAd,EAAAS,EAAA0H,EAAA9H,GAA6B,GAAA8J,MAAA,SAAAA,GAAqB,OAAAlK,EAAAkK,EAAAvI,aAAA3B,EAAAkK,EAAAvI,UAAA0wC,QAArB,CAAmEpxC,GAAA,KAAS,IAAAwiC,GAAOyjB,cAAA,IAAArmD,EAAA,KAAAA,EAAA+xC,eAAA,IAAApxC,EAAA,KAAAA,EAAA6iD,IAAA,KAAAE,MAAAr6C,EAAA5I,SAAA,IAAAd,EAAA,KAAAA,EAAAwjD,WAAA,IAAAjkD,EAAA,KAAAA,EAAA4zC,SAAA,IAAAzrC,EAAA,KAAAA,EAAAR,KAAAzG,GAAoJ,WAAAb,GAAAgsD,GAAA3oB,GAAA,OAAAmlB,GAAA1E,aAAA0E,GAAA1E,YAAAzgB,KAA+D,SAAA0mB,GAAAjgD,GAAe,IAAAjJ,EAAAO,EAAA0I,EAAAq6C,MAAgB,MAAA/iD,EAAA,CAAS,IAAAzB,EAAAmI,EAAAgC,EAAA85C,MAAgB,GAAAliD,EAAAoG,GAAAnI,EAAA4mD,QAAuB,QAAAvmD,KAALL,KAAKmI,EAAAnI,EAAAK,GAAA8H,EAAA9H,GAAyB,IAAAqjC,GAAAxiC,EAAAkrD,GAAA3qD,EAAA0I,EAAAxC,KAAA,UAAA3H,EAAAmK,EAAA5I,IAAA4I,EAAAypC,KAAA,IAAAqQ,MAAAhkD,EAAAyjC,EAAAyjB,SAAqE,GAAAlnD,EAAA,GAAAmnD,GAAAnnD,GAAA,CAAe,IAAAyU,EAAAzU,EAAAkG,OAAe,GAAAuO,EAAA,GAAQ,QAAApU,KAAAwB,EAAA,EAAiBA,EAAA4S,EAAI5S,IAAA,CAAK,IAAA8hC,EAAA3jC,EAAA6B,GAAWhB,EAAA8iC,GAAAtjC,EAAAgI,KAAAs7B,IAAAnjC,EAAAmjC,IAAAyjB,GAAAzjB,IAAAtjC,EAAAgI,KAAA8hD,GAAAxmB,IAA2CF,EAAAyjB,SAAA7mD,QAAc+mD,GAAApnD,KAAAyjC,EAAAyjB,SAAAiD,GAAAnqD,IAA+BiB,EAAAimD,SAAA,UAAgB,QAAA1lD,EAAA,CAAgB,IAAAsN,EAAA1E,EAAAF,EAAAg9C,SAAAl4C,EAAA9E,EAAA85C,MAA6B,UAAAh1C,EAAAF,EAAA63C,QAA2B,QAAAxmD,KAAL2O,KAAKE,EAAAF,EAAA3O,GAAA6O,EAAA7O,GAAyBc,EAAAkrD,GAAA3qD,EAAA0I,EAAAxC,KAAAwC,EAAA0oC,UAAAxoC,EAAA0E,EAAA5E,EAAA5I,IAAA4I,EAAAypC,KAAAvpC,QAA8C,EAAA5I,IAAAP,EAAAmqD,GAAAlhD,EAAAg9C,SAAAh9C,EAAA5I,MAAmC,OAAAL,EAAS,SAAAorD,GAAAniD,EAAAjJ,GAAiB,QAAAO,KAAAzB,EAAAkG,UAAAC,OAAA,EAAkCnG,KAAA,GAAOyB,EAAAzB,GAAAkG,UAAAlG,EAAA,GAAqB,IAAmF0jC,EAAnFv7B,EAAA1G,EAAApB,EAAAoB,EAAA0E,OAAyF,GAAtE9F,EAAA,IAAAJ,EAAAwB,EAAA,MAAAP,UAAwB,IAAAb,IAAA8H,EAAA1G,EAAA,IAAAxB,EAAAkI,KAAAjH,EAAAimD,SAAAh/C,IAA8Ci/C,GAAAj9C,GAAA,CAAU,QAAApI,KAAA2S,EAAA,EAAApU,EAAA6J,EAAAhE,OAA4BuO,EAAApU,EAAIoU,IAAA3S,EAAAuG,KAAA8hD,GAAAjgD,EAAAuK,KAAqBgvB,EAAA3hC,MAAI,CAAK,IAAA6hC,EAAAz5B,EAAAq6C,MAAAz1C,EAAA5E,EAAA0oC,UAAAxoC,EAAAF,EAAA5I,IAAA0N,EAAA9E,EAAAypC,IAA4C,GAAA1yC,MAAAW,eAAA,eAAAkN,EAAA7N,EAAA2xC,WAAA3xC,EAAAW,eAAA,SAAAoN,EAAA/N,EAAA0yC,KAAA1yC,EAAAW,eAAA,SAAAwI,EAAAnJ,EAAAK,MAAA,GAAAqiC,EAAA,CAAmI,IAAAxjC,GAAAsjC,EAAA0oB,GAAAxoB,EAAAz5B,EAAAxC,KAAAoH,EAAA,KAAA5E,EAAA85C,OAAA/iD,EAAAY,EAAAqI,EAAA85C,MAAA/iD,GAAA0lD,GAAAv8C,EAAA4E,GAAA,IAAAg1C,MAAsE,GAAA7jD,EAAA,CAAM,IAAAqO,EAAArO,EAAA+mD,SAAiB,GAAA14C,EAAA,GAAA24C,GAAA34C,GAAA,CAAe,IAAAmsB,EAAAnsB,EAAAtI,OAAe,GAAAy0B,EAAA,GAAQ,QAAAiK,KAAAn0B,EAAA,EAAiBA,EAAAkqB,EAAIlqB,IAAA,CAAK,IAAA22B,EAAA54B,EAAAiC,GAAW5P,EAAAumC,GAAAxC,EAAAv8B,KAAA++B,IAAA5mC,EAAA4mC,IAAAggB,GAAAhgB,IAAAxC,EAAAv8B,KAAA8hD,GAAA/iB,IAA2CjnC,EAAA+mD,SAAAtiB,QAAcwiB,GAAA54C,KAAArO,EAAA+mD,SAAAiD,GAAA37C,IAA+Bi1B,EAAAyjB,SAAA,UAAgB,KAAAvjB,GAAAz7B,EAAAjH,IAAAjB,EAAAiB,EAAAimD,UAAAjmD,EAAAimD,SAAAh9C,EAAAg9C,SAAAzjB,EAAA0oB,GAAAxoB,EAAAz5B,EAAAxC,KAAAoH,EAAA5G,EAAAgC,EAAA85C,OAAA/iD,EAAAY,EAAAqI,EAAA85C,MAAA/iD,GAAA0lD,GAAAv8C,EAAA4E,GAAA,MAAA20B,IAAAF,EAAA2nB,GAAAlhD,EAAAg9C,SAAA98C,IAAuI,OAAAq5B,EAAS,SAAA0nB,KAAc,OAAAgB,GAAA,WAAqB,SAAAf,GAAAlhD,EAAAjJ,GAAiB,OAAAkrD,GAAA,YAAAjiD,EAAA,KAAAjJ,GAAgC,SAAAmmD,GAAAl9C,GAAe,QAAAA,EAAAq6C,MAAgB,SAAA+H,GAAApiD,EAAAjJ,GAAiB,OAAAA,EAAAK,IAAA4I,EAAAjJ,EAAiB,SAAAsrD,GAAAriD,EAAAjJ,GAAiB,OAAAwiC,EAAAv5B,OAAA,IAAAA,GAAApI,EAAAb,EAAAK,MAAA,MAAAL,EAAAK,IAAA,GAAAgrD,GAAApiD,EAAAjJ,KAA0D,SAAAurD,GAAAtiD,EAAAjJ,GAAiB,OAAAA,EAAAK,IAAA4I,EAAAjJ,EAAAK,IAAAL,EAAuB,SAAAgnB,GAAA/d,EAAAjJ,EAAAO,EAAAzB,GAAqB,QAAAmI,EAAAgC,EAAAhE,OAAmB1E,EAAA0G,EAAI1G,IAAA,CAAK,IAAApB,EAAA8J,EAAA1I,GAAAiiC,EAAA1jC,EAAA,IAAAyB,EAAqBhB,EAAAJ,KAAA+mD,GAAA/mD,GAAA6nB,GAAA7nB,EAAAa,EAAA,EAAAwiC,IAAA5iC,EAAAT,KAAAgrD,GAAAhrD,EAAA,OAAAgnD,GAAAhnD,MAAAikD,KAAAjkD,EAAAkB,KAAA,MAAAlB,EAAAkB,IAAA,MAAAlB,EAAA+pD,GAAA/pD,MAAA0B,EAAA1B,EAAAkB,MAAA,MAAAlB,EAAAkB,IAAA,GAAAgrD,GAAA7oB,EAAArjC,GAAAosD,GAAAzsD,EAAAK,GAAAa,EAAAoH,KAAAjI,MAAqJ,SAAAqsD,GAAAviD,GAAe,OAAAi9C,GAAAj9C,GAAA,SAAAA,GAAyB,IAAAjJ,GAAM,IAAAiJ,EAAA8+C,EAAA9+C,IAAAm/B,QAAAn/B,EAAA8+C,GAAA,EAA4B,QAAAxnD,EAAA,EAAAzB,EAAAmK,EAAAhE,OAAuB1E,EAAAzB,EAAIyB,IAAA,CAAK,IAAA0G,EAAAgC,EAAA1I,GAAW,GAAAhB,EAAA0H,IAAAi/C,GAAAj/C,GAAA,CAAgB,IAAA9H,GAAAa,GAAAiJ,GAAAm/B,MAAA,EAAA7nC,GAAwB,OAAAymB,GAAA/d,EAAA9J,EAAAoB,EAAA,IAAApB,EAAsBS,EAAAqH,IAAAjH,MAAAiJ,EAAAm/B,MAAA,EAAA7nC,IAAAP,EAAAoH,KAAAkkD,GAAA/qD,EAAA4pD,GAAAljD,EAAA,SAAAk/C,GAAAl/C,IAAA,OAAAA,EAAAm8C,KAAAviD,EAAAoG,EAAA5G,MAAA,OAAA4G,EAAAq8C,QAAAtjD,MAAAiJ,EAAAm/B,MAAA,EAAA7nC,IAAAP,EAAAoH,KAAAkkD,GAAA/qD,EAAA2oD,GAAAjiD,MAAAjH,KAAAoH,KAAAkkD,GAAA/qD,EAAA2oD,GAAAjiD,KAAoK,OAAAjH,GAAAiJ,EAAxU,CAAoVA,GAAAk9C,GAAAl9C,IAAA,OAAAA,EAAAm6C,IAAA8F,GAAAjgD,KAAgC,SAAAwiD,GAAAxiD,GAAe,cAAAA,EAAA,cAAAA,EAAA,eAAAA,EAAA,kBAAAA,EAAA,eAAAA,EAAA,MAA4F,SAAAkiD,GAAAliD,GAAe,IAAAjJ,EAAAiJ,EAAA85C,MAAAxiD,EAAA0I,EAAAg9C,SAA2B,MAAAh9C,EAAAq6C,MAAA,CAAe,IAAA1jD,EAAAqJ,EAAAxC,KAAAQ,EAAArH,EAAA8rD,aAA8B,IAAA5sD,EAAAmI,GAAA,GAAAjH,EAAA,QAAAwiC,KAAAv7B,EAAAlI,EAAAiB,EAAAwiC,MAAAxiC,EAAAwiC,GAAAv7B,EAAAu7B,SAAkDxiC,EAAAiJ,EAAA85C,MAAA97C,EAAiB9H,EAAAS,KAAAqJ,EAAAq6C,MAAAmI,GAAA7rD,GAAAI,KAAAimD,WAAAh9C,EAAAg9C,SAAAjmD,EAAAimD,SAAA1lD,EAAAP,EAAAimD,WAA0EjmD,IAAA,SAAAiJ,EAAAjJ,EAAAO,GAAqB,KAAA0I,EAAAq6C,QAAAxkD,EAAAyB,IAAAP,EAAAW,eAAA,cAAAsI,EAAAg9C,SAAAjmD,EAAAimD,UAAAjmD,EAAAW,eAAA,eAAAsI,EAAA0oC,UAAA3xC,EAAA2xC,WAAA,YAAA3xC,EAAA2xC,YAAA3xC,EAAAW,eAAA,SAAAsI,EAAAypC,IAAA1yC,EAAA0yC,WAAA1yC,EAAA0yC,KAAA1yC,EAAAW,eAAA,SAAAsI,EAAA5I,IAAAL,EAAAK,WAAAL,EAAAK,KAArB,CAA2R4I,EAAAjJ,EAAAO,GAAAhB,EAAAS,EAAAimD,YAAAjmD,EAAAimD,SAAAuF,GAAAxrD,EAAAimD,YAAA1mD,EAAAgB,KAAA0I,EAAAg9C,SAAAuF,GAAAjrD,IAA6E,SAAAorD,GAAA1iD,EAAAjJ,GAAiB,OAAAiH,EAAAjH,IAAautB,KAAAtkB,EAAAob,MAAArkB,GAAe,KAAMR,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAipD,GAAA,SAAA/D,GAAA,qFAAA2G,KAAA,oBAAA1nC,gBAAA4W,UAAAorB,GAAAx8C,MAAAga,QAA4Kgf,EAAAhiC,UAAAg0C,YAAA,SAAAzrC,GAAoCooB,KAAA4jB,UAAA7tC,KAAA6B,IAAuBy5B,EAAAhiC,UAAAmjD,QAAA,WAAgC,QAAA56C,EAAAjJ,EAAAqxB,KAAA4jB,UAA2BhsC,EAAAjJ,EAAAqoC,SAAYp/B,KAAM,IAAA0+C,IAAQoD,WAAA,KAAA/F,YAAA,KAAAhB,YAAA,KAAAe,aAAA,KAAAkD,cAAA,KAAAhF,YAAA,KAAAgB,oBAAA,EAAAkE,kBAAA,EAAA0D,UAA2JC,GAAA,+BAAAC,GAAA,uCAAAvE,GAAA,6BAAAgD,GAAA,IAAAwB,IAAwHxB,GAAAr0C,IAAA,UAAAq0C,GAAAr0C,IAAA,kBAA0C,IAAAo0C,GAAA,IAAAyB,IAAezB,GAAAp0C,IAAA,SAAAo0C,GAAAp0C,IAAA,UAAAo0C,GAAAp0C,IAAA,QAAAo0C,GAAAp0C,IAAA,QAAAo0C,GAAAp0C,IAAA,WAAAo0C,GAAAp0C,IAAA,WAAAo0C,GAAAp0C,IAAA,WAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,mBAAAo0C,GAAAp0C,IAAA,cAAAo0C,GAAAp0C,IAAA,UAAAo0C,GAAAp0C,IAAA,aAAAo0C,GAAAp0C,IAAA,YAAAo0C,GAAAp0C,IAAA,iBAAyX,IAAAy0C,GAAA,IAAAzG,IAAeyG,GAAAz/C,IAAA,aAAA2gD,IAAAlB,GAAAz/C,IAAA,gBAAA2gD,IAAAlB,GAAAz/C,IAAA,gBAAA2gD,IAAAlB,GAAAz/C,IAAA,aAAA2gD,IAAAlB,GAAAz/C,IAAA,aAAA2gD,IAAAlB,GAAAz/C,IAAA,cAAA2gD,IAAAlB,GAAAz/C,IAAA,aAAA2gD,IAAAlB,GAAAz/C,IAAA,WAAA4gD,IAAAnB,GAAAz/C,IAAA,WAAA4gD,IAAAnB,GAAAz/C,IAAA,YAAA4gD,IAAkP,IAAArB,GAAA,IAAAsB,IAAetB,GAAAv0C,IAAA,2BAAAu0C,GAAAv0C,IAAA,qBAAAu0C,GAAAv0C,IAAA,oBAAAu0C,GAAAv0C,IAAA,oBAAAu0C,GAAAv0C,IAAA,WAAAu0C,GAAAv0C,IAAA,gBAAAu0C,GAAAv0C,IAAA,mBAAAu0C,GAAAv0C,IAAA,eAAAu0C,GAAAv0C,IAAA,QAAAu0C,GAAAv0C,IAAA,YAAAu0C,GAAAv0C,IAAA,gBAAAu0C,GAAAv0C,IAAA,cAAAu0C,GAAAv0C,IAAA,gBAAAu0C,GAAAv0C,IAAA,aAAAu0C,GAAAv0C,IAAA,WAAAu0C,GAAAv0C,IAAA,cAAAu0C,GAAAv0C,IAAA,cAAAu0C,GAAAv0C,IAAA,aAAAu0C,GAAAv0C,IAAA,cAAAu0C,GAAAv0C,IAAA,WAAAu0C,GAAAv0C,IAAA,SAAAu0C,GAAAv0C,IAAA,WAAAu0C,GAAAv0C,IAAA,WAAAu0C,GAAAv0C,IAAA,UAAAu0C,GAAAv0C,IAAA,UAAAu0C,GAAAv0C,IAAA,QAAAu0C,GAAAv0C,IAAA,eAAAu0C,GAAAv0C,IAAA,gBAAAu0C,GAAAv0C,IAAA,eAAAu0C,GAAAv0C,IAAA,mBAAAu0C,GAAAv0C,IAAA,oBAAAu0C,GAAAv0C,IAAA,oBAAAu0C,GAAAv0C,IAAA,iBAAAu0C,GAAAv0C,IAAA,eAAmuB,IAAAk0C,GAAA,IAAA2B,IAAe3B,GAAAl0C,IAAA,YAAAk0C,GAAAl0C,IAAA,gBAAAk0C,GAAAl0C,IAAA,gBAAAk0C,GAAAl0C,IAAA,OAAAk0C,GAAAl0C,IAAA,OAAAk0C,GAAAl0C,IAAA,WAAAk0C,GAAAl0C,IAAA,YAAkI,IAAA20C,GAAA,IAAAkB,IAAelB,GAAA30C,IAAA,WAAA20C,GAAA30C,IAAA,eAAA20C,GAAA30C,IAAA,aAAA20C,GAAA30C,IAAA,eAAA20C,GAAA30C,IAAA,YAAA20C,GAAA30C,IAAA,cAAA20C,GAAA30C,IAAA,aAAA20C,GAAA30C,IAAA,WAAA20C,GAAA30C,IAAA,cAAqL,IAAAovC,GAAAqG,MAAAK,UAAAC,UAAA,mBAAAC,KAAAF,UAAAC,UAAAhH,GAAA,IAAAf,IAAAqE,GAAA,IAAArE,IAAAyE,GAAA,IAAAzE,IAAAyD,GAAA,IAAAzD,IAAA8E,GAAAtB,GAAAkE,MAAA9C,GAAA6C,GAAA9wB,SAAA8W,KAAA,KAAA8T,MAAmK0G,IAAK5H,UAAAkB,GAAA2G,MAAArD,GAAAsD,WAAAlB,GAAAmB,eAAAjD,EAAArG,YAAAiI,GAAAsB,YAAA3D,EAAA4D,wBAAAhB,GAAAvH,oBAAA0D,GAAA8E,0BAAAhC,GAAAiC,mBAAAxB,GAAAxH,eAAA0F,EAAAuD,UAAAjB,GAAA5H,QAAA4D,GAAAvW,OAAA0X,EAAAtU,QAAA,UAA2Px0C,EAAAuiC,QAAA6pB,GAAApsD,EAAAwkD,UAAAkB,GAAA1lD,EAAAqsD,MAAArD,GAAAhpD,EAAAssD,WAAAlB,GAAAprD,EAAAusD,eAAAjD,EAAAtpD,EAAAijD,YAAAiI,GAAAlrD,EAAAwsD,YAAA3D,EAAA7oD,EAAAysD,wBAAAhB,GAAAzrD,EAAAkkD,oBAAA0D,GAAA5nD,EAAA0sD,0BAAAhC,GAAA1qD,EAAA2sD,mBAAAxB,GAAAnrD,EAAA2jD,eAAA0F,EAAArpD,EAAA4sD,UAAAjB,GAAA3rD,EAAA+jD,QAAA4D,GAAA3nD,EAAAoxC,OAAA0X,EAAA9oD,EAAAw0C,QAAA,UAAqS,SAAAvrC,EAAAjJ,EAAAO,GAAiB,aAAa,SAAAX,EAAAqJ,GAAc,OAAA1J,EAAA0J,IAAAnK,EAAAmK,GAAkB,SAAAnK,EAAAmK,GAAc,cAAAA,EAAgB,SAAA1J,EAAA0J,GAAc,gBAAAA,EAAkB,SAAAhC,IAAaoqB,KAAA4jB,aAAkBz1C,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAAW,IAAAZ,EAAAoB,EAAA,IAAY0G,EAAAvG,UAAAg0C,YAAA,SAAAzrC,GAAoCooB,KAAA4jB,UAAA7tC,KAAA6B,IAAuBhC,EAAAvG,UAAAmjD,QAAA,WAAgC,QAAA56C,EAAAjJ,EAAAqxB,KAAA4jB,UAA2BhsC,EAAAjJ,EAAAqoC,SAAYp/B,KAAM,IAAAu5B,EAAA,IAAAwpB,IAAcxpB,EAAArsB,IAAA,wBAAAqsB,EAAArsB,IAAA,uBAAAqsB,EAAArsB,IAAA,0BAAAqsB,EAAArsB,IAAA,2BAAAqsB,EAAArsB,IAAA,yBAAAqsB,EAAArsB,IAAA,wBAAAnW,EAAAuiC,QAAA,SAAAt5B,EAAAjJ,GAAiN,QAAAO,KAAA0G,EAAAjC,UAAAC,OAAA,EAAkCgC,KAAA,GAAO1G,EAAA0G,GAAAjC,UAAAiC,EAAA,GAAqB,YAAAgC,GAAe,OAAAnK,EAAAmK,KAAA,IAAAA,IAAA,IAAAA,GAAA1J,EAAA0J,GAAf,CAAiDA,IAAA,iBAAAA,EAAA,UAAA8b,MAAA,mIAA2K,IAAAlkB,EAAA9B,EAAAwB,EAAAiT,EAAA,KAAApU,EAAA,KAAAwB,EAAA,KAAA8hC,EAAA,EAAmC,GAAAniC,IAAA,IAAAA,EAAA0E,OAAAlG,EAAAwB,EAAA,OAAAA,EAAA0E,SAAAlG,OAAA,qBAAAkK,GAAyE,GAAAy5B,EAAAvjC,EAAAstD,wBAAAxjD,IAAArJ,EAAAI,GAA8C,QAAA6N,KAALhN,KAAKb,EAAA,cAAA6N,GAAA,UAAAA,EAAAjN,EAAAZ,EAAA6N,GAAA,QAAAA,EAAAzO,EAAAY,EAAAK,IAAA,aAAAwN,GAAAtO,EAAAR,KAAAiB,EAAAimD,SAAA,QAAAp4C,EAAA2F,EAAAxT,EAAA0yC,IAAA7xC,EAAAgN,GAAA7N,EAAA6N,QAAoI,GAAA60B,EAAA,GAAAnjC,EAAAR,KAAAiB,UAA4BA,EAAAimD,SAAAlnD,IAAA,OAAAa,EAAAI,GAAmC,QAAAmJ,KAALtI,KAAKb,EAAAwiC,EAAA8nB,IAAAnhD,IAAAqK,UAAiCA,EAAArK,GAAAnJ,EAAAmJ,IAAA,QAAAA,EAAA/J,EAAAY,EAAAK,IAAAQ,EAAAsI,GAAAnJ,EAAAmJ,GAAyC,OAAAhK,EAAA8jD,YAAAvgB,EAAAz5B,EAAArI,EAAA7B,EAAA8B,EAAAzB,EAAAoU,KAAqC,SAAAvK,EAAAjJ,EAAAO,GAAiB,IAAAX,EAAAd,EAAAS,EAAyBT,GAAAmK,EAAA1I,EAAA,IAAAA,EAAA,IAAAA,EAAA,eAAAhB,EAAA,mBAAAK,EAA2F,SAAAqJ,EAAAjJ,EAAAO,EAAAX,GAAqB,aAAa,SAAAd,EAAAmK,GAAc,OAAAA,KAAA/I,WAAA+I,GAA0Bs5B,QAAAt5B,GAAW,SAAA1J,EAAA0J,EAAAjJ,GAAgB,IAAAO,EAAA,kBAAA0I,EAA0B,GAAAjJ,EAAA6sD,aAAAtsD,GAAA,OAAAP,EAAA8sD,aAAAvsD,GAA8C,IAAA0G,EAAAnI,EAAAkB,GAAAb,EAAAL,EAAAyB,GAAAiiC,EAAA1jC,EAAAc,GAAAiB,EAAA,mBAAAhB,QAAA,iBAAAA,OAAAktD,SAAA,SAAA9jD,GAAmG,cAAAA,GAAgB,SAAAA,GAAa,OAAAA,GAAA,mBAAApJ,QAAAoJ,EAAA6gC,cAAAjqC,QAAAoJ,IAAApJ,OAAAa,UAAA,gBAAAuI,GAAoGlK,EAAA,WAAc,SAAAkK,IAAAjJ,GAAgB,QAAAO,EAAA,EAAYA,EAAAP,EAAAiF,OAAW1E,IAAA,CAAK,IAAAX,EAAAI,EAAAO,GAAWX,EAAAF,WAAAE,EAAAF,aAAA,EAAAE,EAAA0iC,cAAA,YAAA1iC,MAAAotD,UAAA,GAAAxtD,OAAAC,eAAAwJ,EAAArJ,EAAAS,IAAAT,IAA+G,gBAAAI,EAAAO,EAAAX,GAAuB,OAAAW,GAAA0I,EAAAjJ,EAAAU,UAAAH,GAAAX,GAAAqJ,EAAAjJ,EAAAJ,GAAAI,GAA3M,GAAmPwT,EAAA,SAAAvK,GAAiB,SAAAjJ,EAAAiJ,EAAA1I,IAAgB,SAAA0I,EAAAjJ,GAAe,KAAAiJ,aAAAjJ,GAAA,UAAAknB,UAAA,qCAAf,CAA6FmK,KAAArxB,GAAS,IAAAJ,EAAA,SAAAqJ,EAAAjJ,GAAoB,IAAAiJ,EAAA,UAAAgkD,eAAA,6DAA4F,OAAAjtD,GAAA,iBAAAA,GAAA,mBAAAA,EAAAiJ,EAAAjJ,EAAhH,CAAuKqxB,MAAArxB,EAAA6pC,WAAArqC,OAAA0tD,eAAAltD,IAAAf,KAAAoyB,OAA0D,OAAAzxB,EAAAutD,eAAA5sD,GAAAX,EAAAwtD,YAAAnkD,GAAArJ,EAA8C,gBAAAqJ,EAAAjJ,GAAqB,sBAAAA,GAAA,OAAAA,EAAA,UAAAknB,UAAA,kEAAAlnB,GAA2HiJ,EAAAvI,UAAAlB,OAAAY,OAAAJ,KAAAU,WAA0CopC,aAAa/pC,MAAAkJ,EAAAvJ,YAAA,EAAAstD,UAAA,EAAA1qB,cAAA,KAAmDtiC,IAAAR,OAAAoqC,eAAApqC,OAAAoqC,eAAA3gC,EAAAjJ,GAAAiJ,EAAA4gC,UAAA7pC,GAA1P,CAAgUA,EAAAb,EAAAojC,SAAAxjC,EAAAiB,IAAoBK,IAAA,iBAAAN,MAAA,WAAsC,IAAAkJ,EAAAjE,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,MAAgEqsB,KAAAuS,OAAA,mBAAA36B,EAAA26B,OAAA36B,EAAA26B,OAAAvS,KAAAg8B,cAAAh8B,KAAAtb,OAAA,mBAAA9M,EAAA8M,OAAA9M,EAAA8M,OAAAsb,KAAAi8B,cAAAj8B,KAAAygB,KAAA,mBAAA7oC,EAAA6oC,KAAA7oC,EAAA6oC,KAAAzgB,KAAAk8B,YAAAl8B,KAAAm8B,UAAA,WAAA3sD,EAAAoI,EAAAukD,WAAAvkD,EAAAukD,UAAA1yB,SAAA8W,QAA0QvxC,IAAA,cAAAN,MAAA,SAAAkJ,GAAoC,IAAAjJ,EAAAqxB,KAAWA,KAAAo8B,UAAA,EAAAjrB,EAAAD,SAAAt5B,EAAA,iBAAAA,GAAkD,OAAAjJ,EAAA8yC,QAAA7pC,QAAyB5I,IAAA,UAAAN,MAAA,SAAAkJ,GAAgC,IAAAjJ,EAAAiJ,EAAAykD,gBAAAzkD,EAAA4mC,cAAwCxe,KAAAs8B,kBAAAt8B,KAAAs8B,gBAAA,MAAAt8B,KAAAs8B,gBAAA,IAAA1mD,EAAAs7B,SAAsFqB,OAAAvS,KAAAuS,OAAA5jC,GAAA+V,OAAAsb,KAAAtb,OAAA/V,GAAA8xC,KAAAzgB,KAAAygB,KAAA9xC,GAAAwtD,UAAAn8B,KAAAm8B,UAAA3J,QAAA7jD,EAAA4tD,QAAAv8B,UAAmHhxB,IAAA,gBAAAN,MAAA,SAAAkJ,GAAsC,OAAA1J,EAAA,SAAA0J,MAAwB5I,IAAA,gBAAAN,MAAA,SAAAkJ,GAAsC,IAAAjJ,EAAAT,EAAA,SAAA0J,GAAoB,GAAAjJ,EAAA,OAAA86B,SAAA6X,cAAA3yC,MAAyCK,IAAA,cAAAN,MAAA,SAAAkJ,GAAoC,OAAA1J,EAAA,OAAA0J,MAAsB5I,IAAA,UAAAN,MAAA,WAA+BsxB,KAAAo8B,SAAAj4B,UAAAnE,KAAAs8B,kBAAAt8B,KAAAs8B,gBAAAn4B,UAAAnE,KAAAs8B,gBAAA,WAA8GttD,IAAA,cAAAN,MAAA,WAAmC,IAAAkJ,EAAAjE,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,kBAAAhF,EAAA,iBAAAiJ,QAAA1I,IAAAu6B,SAAA+yB,sBAA0I,OAAA7tD,EAAAmI,QAAA,SAAAc,GAA6B1I,OAAAu6B,SAAA+yB,sBAAA5kD,KAAyC1I,MAAKP,EAArkE,GAA6kEiJ,EAAArK,QAAA4U,IAA5yF5T,EAAA4wB,MAAAxwB,EAAAlB,GAAAc,KAAAqJ,EAAArK,QAAAW,IAA0zF,SAAA0J,EAAAjJ,EAAAO,GAAiB,IAAAX,EAAAd,EAAAS,EAAyBT,GAAAmK,EAAA1I,EAAA,eAAAhB,EAAA,mBAAAK,EAA+E,SAAAqJ,EAAAjJ,GAAiB,aAAa,IAAAO,EAAA,SAAA0I,GAAkB,OAAAA,KAAA/I,WAAA+I,GAA0Bs5B,QAAAt5B,GAA5C,CAAuDjJ,GAAAJ,EAAA,mBAAAC,QAAA,iBAAAA,OAAAktD,SAAA,SAAA9jD,GAA8E,cAAAA,GAAgB,SAAAA,GAAa,OAAAA,GAAA,mBAAApJ,QAAAoJ,EAAA6gC,cAAAjqC,QAAAoJ,IAAApJ,OAAAa,UAAA,gBAAAuI,GAAoGnK,EAAA,WAAc,SAAAmK,IAAAjJ,GAAgB,QAAAO,EAAA,EAAYA,EAAAP,EAAAiF,OAAW1E,IAAA,CAAK,IAAAX,EAAAI,EAAAO,GAAWX,EAAAF,WAAAE,EAAAF,aAAA,EAAAE,EAAA0iC,cAAA,YAAA1iC,MAAAotD,UAAA,GAAAxtD,OAAAC,eAAAwJ,EAAArJ,EAAAS,IAAAT,IAA+G,gBAAAI,EAAAO,EAAAX,GAAuB,OAAAW,GAAA0I,EAAAjJ,EAAAU,UAAAH,GAAAX,GAAAqJ,EAAAjJ,EAAAJ,GAAAI,GAA3M,GAAmPT,EAAA,WAAgB,SAAA0J,EAAAjJ,IAAc,SAAAiJ,EAAAjJ,GAAe,KAAAiJ,aAAAjJ,GAAA,UAAAknB,UAAA,qCAAf,CAA6FmK,KAAApoB,GAAAooB,KAAA87B,eAAAntD,GAAAqxB,KAAAy8B,gBAAqD,OAAAhvD,EAAAmK,IAAa5I,IAAA,iBAAAN,MAAA,WAAsC,IAAAkJ,EAAAjE,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,MAAgEqsB,KAAAuS,OAAA36B,EAAA26B,OAAAvS,KAAAm8B,UAAAvkD,EAAAukD,UAAAn8B,KAAAu8B,QAAA3kD,EAAA2kD,QAAAv8B,KAAAtb,OAAA9M,EAAA8M,OAAAsb,KAAAygB,KAAA7oC,EAAA6oC,KAAAzgB,KAAAwyB,QAAA56C,EAAA46C,QAAAxyB,KAAA08B,aAAA,MAA4J1tD,IAAA,gBAAAN,MAAA,WAAqCsxB,KAAAygB,KAAAzgB,KAAA28B,aAAA38B,KAAAtb,QAAAsb,KAAA48B,kBAAgE5tD,IAAA,aAAAN,MAAA,WAAkC,IAAAkJ,EAAAooB,KAAArxB,EAAA,OAAA86B,SAAAozB,gBAAApB,aAAA,OAAiEz7B,KAAA88B,aAAA98B,KAAA+8B,oBAAA,WAAsD,OAAAnlD,EAAAklD,cAAsB98B,KAAAg9B,YAAAh9B,KAAAm8B,UAAA9oC,iBAAA,QAAA2M,KAAA+8B,uBAAA,EAAA/8B,KAAAi9B,SAAAxzB,SAAA4W,cAAA,YAAArgB,KAAAi9B,SAAA7qB,MAAA+D,SAAA,OAAAnW,KAAAi9B,SAAA7qB,MAAAoI,OAAA,IAAAxa,KAAAi9B,SAAA7qB,MAAA4D,QAAA,IAAAhW,KAAAi9B,SAAA7qB,MAAAgI,OAAA,IAAApa,KAAAi9B,SAAA7qB,MAAAvF,SAAA,WAAA7M,KAAAi9B,SAAA7qB,MAAAzjC,EAAA,0BAAmW,IAAAJ,EAAAskB,OAAAqqC,aAAAzzB,SAAAozB,gBAAAM,UAA6Dn9B,KAAAi9B,SAAA7qB,MAAA1wB,IAAAnT,EAAA,KAAAyxB,KAAAi9B,SAAAtI,aAAA,eAAA30B,KAAAi9B,SAAAvuD,MAAAsxB,KAAAygB,KAAAzgB,KAAAm8B,UAAA3b,YAAAxgB,KAAAi9B,UAAAj9B,KAAA08B,cAAA,EAAAxtD,EAAAgiC,SAAAlR,KAAAi9B,UAAAj9B,KAAAo9B,cAAmNpuD,IAAA,aAAAN,MAAA,WAAkCsxB,KAAAg9B,cAAAh9B,KAAAm8B,UAAA7oC,oBAAA,QAAA0M,KAAA+8B,qBAAA/8B,KAAAg9B,YAAA,KAAAh9B,KAAA+8B,oBAAA,MAAA/8B,KAAAi9B,WAAAj9B,KAAAm8B,UAAAlb,YAAAjhB,KAAAi9B,UAAAj9B,KAAAi9B,SAAA,SAA8NjuD,IAAA,eAAAN,MAAA,WAAoCsxB,KAAA08B,cAAA,EAAAxtD,EAAAgiC,SAAAlR,KAAAtb,QAAAsb,KAAAo9B,cAAgEpuD,IAAA,WAAAN,MAAA,WAAgC,IAAAkJ,OAAA,EAAa,IAAIA,EAAA6xB,SAAA4zB,YAAAr9B,KAAAuS,QAAoC,MAAA5jC,GAASiJ,GAAA,EAAKooB,KAAAs9B,aAAA1lD,MAAwB5I,IAAA,eAAAN,MAAA,SAAAkJ,GAAqCooB,KAAAu8B,QAAA9Y,KAAA7rC,EAAA,mBAAuC26B,OAAAvS,KAAAuS,OAAAkO,KAAAzgB,KAAA08B,aAAAlK,QAAAxyB,KAAAwyB,QAAA+K,eAAAv9B,KAAAu9B,eAAAtuD,KAAA+wB,WAAkHhxB,IAAA,iBAAAN,MAAA,WAAsCsxB,KAAAwyB,SAAAxyB,KAAAwyB,QAAAgL,QAAA3qC,OAAA4qC,eAAAC,qBAA8E1uD,IAAA,UAAAN,MAAA,WAA+BsxB,KAAA88B,gBAAqB9tD,IAAA,SAAA8K,IAAA,WAA4B,IAAAlC,EAAAjE,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,UAAoE,GAAAqsB,KAAA29B,QAAA/lD,EAAA,SAAAooB,KAAA29B,SAAA,QAAA39B,KAAA29B,QAAA,UAAAjqC,MAAA,uDAAoIplB,IAAA,WAAgB,OAAA0xB,KAAA29B,WAAuB3uD,IAAA,SAAA8K,IAAA,SAAAlC,GAA6B,YAAAA,EAAA,CAAe,IAAAA,GAAA,qBAAAA,EAAA,YAAArJ,EAAAqJ,KAAA,IAAAA,EAAAo9C,SAAA,UAAAthC,MAAA,+CAA+H,YAAAsM,KAAAuS,QAAA36B,EAAA4jD,aAAA,sBAAA9nC,MAAA,qFAAyJ,WAAAsM,KAAAuS,SAAA36B,EAAA4jD,aAAA,aAAA5jD,EAAA4jD,aAAA,uBAAA9nC,MAAA,0GAA2MsM,KAAA49B,QAAAhmD,IAAgBtJ,IAAA,WAAgB,OAAA0xB,KAAA49B,YAAqBhmD,EAA19F,GAAk+FA,EAAArK,QAAAW,IAAxkHK,EAAA4wB,MAAAxwB,EAAAlB,GAAAc,KAAAqJ,EAAArK,QAAAW,IAAslH,SAAA0J,EAAAjJ,GAAeiJ,EAAArK,QAAA,SAAAqK,GAAsB,IAAAjJ,EAAM,cAAAiJ,EAAAimD,SAAAjmD,EAAA4lD,QAAA7uD,EAAAiJ,EAAAlJ,WAA6C,aAAAkJ,EAAAimD,UAAA,aAAAjmD,EAAAimD,SAAA,CAAuD,IAAA3uD,EAAA0I,EAAA4jD,aAAA,YAAiCtsD,GAAA0I,EAAA+8C,aAAA,eAAA/8C,EAAAkmD,SAAAlmD,EAAAmmD,kBAAA,EAAAnmD,EAAAlJ,MAAAkF,QAAA1E,GAAA0I,EAAAo+C,gBAAA,YAAArnD,EAAAiJ,EAAAlJ,UAA6H,CAAKkJ,EAAA4jD,aAAA,oBAAA5jD,EAAA4lD,QAA6C,IAAAjvD,EAAAskB,OAAA4qC,eAAAhwD,EAAAg8B,SAAAu0B,cAAqDvwD,EAAAwwD,mBAAArmD,GAAArJ,EAAAmvD,kBAAAnvD,EAAA2vD,SAAAzwD,GAAAkB,EAAAJ,EAAAi0B,WAAyE,OAAA7zB,IAAU,SAAAiJ,EAAAjJ,GAAe,SAAAO,KAAcA,EAAAG,WAAaohC,GAAA,SAAA74B,EAAAjJ,EAAAO,GAAmB,IAAAX,EAAAyxB,KAAApoB,IAAAooB,KAAApoB,MAA0B,OAAArJ,EAAAqJ,KAAArJ,EAAAqJ,QAAA7B,MAA8BJ,GAAAhH,EAAA2hC,IAAAphC,IAAW8wB,MAAOsjB,KAAA,SAAA1rC,EAAAjJ,EAAAO,GAAsB,SAAAX,IAAad,EAAAijC,IAAA94B,EAAArJ,GAAAI,EAAAwwB,MAAAjwB,EAAAyE,WAAgC,IAAAlG,EAAAuyB,KAAW,OAAAzxB,EAAA85B,EAAA15B,EAAAqxB,KAAAyQ,GAAA74B,EAAArJ,EAAAW,IAA4Bu0C,KAAA,SAAA7rC,GAA2G,IAAzF,IAAAjJ,KAAAooC,MAAAnpC,KAAA+F,UAAA,GAAAzE,IAAA8wB,KAAApoB,IAAAooB,KAAApoB,OAAuDA,QAAAm/B,QAAAxoC,EAAA,EAAAd,EAAAyB,EAAA0E,OAAwCrF,EAAAd,EAAIc,IAAAW,EAAAX,GAAAoH,GAAAwpB,MAAAjwB,EAAAX,GAAA+hC,IAAA3hC,GAA8B,OAAAqxB,MAAY0Q,IAAA,SAAA94B,EAAAjJ,GAAmB,IAAAO,EAAA8wB,KAAApoB,IAAAooB,KAAApoB,MAAwBrJ,EAAAW,EAAA0I,GAAAnK,KAAc,GAAAc,GAAAI,EAAA,QAAAT,EAAA,EAAA0H,EAAArH,EAAAqF,OAA+B1F,EAAA0H,EAAI1H,IAAAK,EAAAL,GAAAyH,KAAAhH,GAAAJ,EAAAL,GAAAyH,GAAA0yB,IAAA15B,GAAAlB,EAAAsI,KAAAxH,EAAAL,IAA6C,OAAAT,EAAAmG,OAAA1E,EAAA0I,GAAAnK,SAAAyB,EAAA0I,GAAAooB,OAAyCpoB,EAAArK,QAAA2B,GAAa,SAAA0I,EAAAjJ,EAAAO,GAAiB,IAAAX,EAAAW,EAAA,IAAAzB,EAAAyB,EAAA,IAAoB0I,EAAArK,QAAA,SAAAqK,EAAAjJ,EAAAO,GAA0B,IAAA0I,IAAAjJ,IAAAO,EAAA,UAAAwkB,MAAA,8BAA4D,IAAAnlB,EAAA4vD,OAAAxvD,GAAA,UAAAknB,UAAA,oCAAwE,IAAAtnB,EAAAoH,GAAAzG,GAAA,UAAA2mB,UAAA,qCAAqE,GAAAtnB,EAAAqwC,KAAAhnC,GAAA,gBAAAA,EAAAjJ,EAAAO,GAAoC,OAAA0I,EAAAyb,iBAAA1kB,EAAAO,IAAgCi1B,QAAA,WAAmBvsB,EAAA0b,oBAAA3kB,EAAAO,KAAvF,CAAoH0I,EAAAjJ,EAAAO,GAAQ,GAAAX,EAAA6vD,SAAAxmD,GAAA,gBAAAA,EAAAjJ,EAAAO,GAAwC,OAAAmJ,MAAAhJ,UAAAyH,QAAAlJ,KAAAgK,EAAA,SAAAA,GAAkDA,EAAAyb,iBAAA1kB,EAAAO,MAA2Bi1B,QAAA,WAAmB9rB,MAAAhJ,UAAAyH,QAAAlJ,KAAAgK,EAAA,SAAAA,GAA2CA,EAAA0b,oBAAA3kB,EAAAO,OAAnL,CAAkN0I,EAAAjJ,EAAAO,GAAQ,GAAAX,EAAA4vD,OAAAvmD,GAAA,gBAAAA,EAAAjJ,EAAAO,GAAsC,OAAAzB,EAAAg8B,SAAA8W,KAAA3oC,EAAAjJ,EAAAO,GAAtC,CAAoE0I,EAAAjJ,EAAAO,GAAQ,UAAA2mB,UAAA,+EAAkG,SAAAje,EAAAjJ,GAAeA,EAAAiwC,KAAA,SAAAhnC,GAAmB,gBAAAA,gBAAAymD,aAAA,IAAAzmD,EAAAo9C,UAA4DrmD,EAAAyvD,SAAA,SAAAxmD,GAAwB,IAAA1I,EAAAf,OAAAkB,UAAAmzB,SAAA50B,KAAAgK,GAAwC,gBAAAA,IAAA,sBAAA1I,GAAA,4BAAAA,IAAA,WAAA0I,IAAA,IAAAA,EAAAhE,QAAAjF,EAAAiwC,KAAAhnC,EAAA,MAAwHjJ,EAAAwvD,OAAA,SAAAvmD,GAAsB,uBAAAA,gBAAA0mD,QAA8C3vD,EAAAgH,GAAA,SAAAiC,GAAkB,4BAAAzJ,OAAAkB,UAAAmzB,SAAA50B,KAAAgK,KAA+D,SAAAA,EAAAjJ,EAAAO,GAAiB,IAAAX,EAAAW,EAAA,IAAY0I,EAAArK,QAAA,SAAAqK,EAAAjJ,EAAAO,EAAAzB,EAAAS,GAA8B,IAAA0H,EAAA,SAAAgC,EAAAjJ,EAAAO,EAAAzB,GAAwB,gBAAAyB,GAAmBA,EAAAmtD,eAAA9tD,EAAAW,EAAAwV,OAAA/V,GAAAO,EAAAmtD,gBAAA5uD,EAAAG,KAAAgK,EAAA1I,KAA8DiwB,MAAAa,KAAArsB,WAAuB,OAAAiE,EAAAyb,iBAAAnkB,EAAA0G,EAAA1H,IAAkCi2B,QAAA,WAAmBvsB,EAAA0b,oBAAApkB,EAAA0G,EAAA1H,OAAgC,SAAA0J,EAAAjJ,GAAuB,uBAAA4vD,kBAAAlvD,UAAAmvD,QAAA,CAA4D,IAAAjwD,EAAAgwD,QAAAlvD,UAAwBd,EAAAiwD,QAAAjwD,EAAAkwD,iBAAAlwD,EAAAmwD,oBAAAnwD,EAAAowD,mBAAApwD,EAAAqwD,kBAAArwD,EAAAswD,sBAAoHjnD,EAAArK,QAAA,SAAAqK,EAAAjJ,GAAwB,KAAKiJ,GAA7O,IAA6OA,EAAAo9C,UAAkB,CAAE,sBAAAp9C,EAAA4mD,SAAA5mD,EAAA4mD,QAAA7vD,GAAA,OAAAiJ,EAAuDA,IAAAo6C,cAAiB,SAAAp6C,EAAAjJ,EAAAO,IAAiB,SAAAP,GAAa,SAAAO,EAAA0I,GAAc,IAAAjJ,SAAAiJ,EAAe,QAAAA,IAAA,UAAAjJ,GAAA,YAAAA,GAAwC,SAAAJ,EAAAqJ,GAAc,oBAAAA,EAAA,OAAAA,EAA+B,YAAAA,GAAe,uBAAAA,QAAA,iBAAAA,GAAA4E,EAAA5O,KAAAgK,IAAAhC,EAAf,CAA+EgC,GAAA,OAAA1J,EAAa,GAAAgB,EAAA0I,GAAA,CAAS,IAAAjJ,EAAA,mBAAAiJ,EAAAknD,QAAAlnD,EAAAknD,UAAAlnD,EAAiDA,EAAA1I,EAAAP,KAAA,GAAAA,EAAc,oBAAAiJ,EAAA,WAAAA,OAAwCA,IAAAigC,QAAA/pC,EAAA,IAAkB,IAAAS,EAAAiB,EAAAsrD,KAAAljD,GAAgB,OAAArJ,GAAAb,EAAAotD,KAAAljD,GAAAuK,EAAAvK,EAAAm/B,MAAA,GAAAxoC,EAAA,KAAA4iC,EAAA2pB,KAAAljD,GAAA1J,GAAA0J,EAAuD,IAAA1J,EAAA6wD,IAAAnpD,EAAA,kBAAA9H,EAAA,aAAAqjC,EAAA,qBAAA3hC,EAAA,aAAA9B,EAAA,cAAAyU,EAAAmiC,SAAAv2C,EAAA,iBAAAY,QAAAR,iBAAAQ,EAAAY,EAAA,iBAAAyvD,iBAAA7wD,iBAAA6wD,KAAA3tB,EAAAtjC,GAAAwB,GAAA0vD,SAAA,cAAAA,GAAAziD,EAAArO,OAAAkB,UAAAmzB,SAAA1qB,EAAAS,KAAAmO,IAAAhK,EAAAnE,KAAAkP,IAAA5Z,EAAA,WAA+U,OAAAwjC,EAAAne,KAAAC,OAAqBvb,EAAArK,QAAA,SAAAqK,EAAAjJ,EAAAT,GAA0B,SAAA0H,EAAAjH,GAAc,IAAAO,EAAAiT,EAAA5T,EAAAR,EAAY,OAAAoU,EAAApU,OAAA,EAAAs6B,EAAA15B,EAAA0iC,EAAAz5B,EAAAunB,MAAA5wB,EAAAW,GAAqC,SAAApB,EAAA8J,GAAc,IAAA1I,EAAA0I,EAAAsE,EAAU,gBAAAA,GAAAhN,GAAAP,GAAAO,EAAA,GAAAiP,GAAAvG,EAAAywB,GAAA94B,EAAwC,SAAA4hC,IAAa,IAAAv5B,EAAA/J,IAAU,GAAAC,EAAA8J,GAAA,OAAApI,EAAAoI,GAAoB4E,EAAAwhC,WAAA7M,EAAA,SAAAjiC,GAA2B,IAAAX,EAAAI,GAAAiJ,EAAAsE,GAAc,OAAAiC,EAAAzB,EAAAnO,EAAAgB,GAAAqI,EAAAywB,IAAA95B,EAAzC,IAAqE,SAAAiB,EAAAoI,GAAc,OAAA4E,OAAA,EAAAs4B,GAAA3yB,EAAAvM,EAAAgC,IAAAuK,EAAApU,OAAA,EAAAsjC,GAAyC,SAAA3jC,IAAa,IAAAkK,EAAA/J,IAAAqB,EAAApB,EAAA8J,GAAiB,GAAAuK,EAAAxO,UAAA5F,EAAAiyB,KAAA9jB,EAAAtE,EAAA1I,EAAA,CAA6B,YAAAsN,EAAA,gBAAA5E,GAAiC,OAAAywB,EAAAzwB,EAAA4E,EAAAwhC,WAAA7M,EAAAxiC,GAAA2jC,EAAA18B,EAAAgC,GAAAy5B,EAAjC,CAAuEn1B,GAAI,GAAAiC,EAAA,OAAA3B,EAAAwhC,WAAA7M,EAAAxiC,GAAAiH,EAAAsG,GAAmC,gBAAAM,MAAAwhC,WAAA7M,EAAAxiC,IAAA0iC,EAAyC,IAAAlvB,EAAApU,EAAAwB,EAAA8hC,EAAA70B,EAAAN,EAAAmsB,EAAA,EAAAiK,GAAA,EAAAn0B,GAAA,EAAA22B,GAAA,EAAmC,sBAAAl9B,EAAA,UAAAie,UAAz5B,uBAAw8B,OAAAlnB,EAAAJ,EAAAI,IAAA,EAAAO,EAAAhB,KAAAokC,IAAApkC,EAAAgxD,QAAA3vD,GAAA4O,EAAA,YAAAjQ,GAAA4J,EAAAvJ,EAAAL,EAAAixD,UAAA,EAAAxwD,GAAAY,EAAAulC,EAAA,aAAA5mC,MAAAkxD,SAAAtqB,GAAApnC,EAAA2xD,OAAA,gBAAsI,IAAA7iD,GAAAqmC,aAAArmC,GAAA6rB,EAAA,EAAAlmB,EAAAjG,EAAAnO,EAAAyO,OAAA,GAA+C9O,EAAA8/B,MAAA,WAAoB,gBAAAhxB,EAAA60B,EAAA7hC,EAAA3B,MAA2BH,KAAIE,KAAAe,EAAAO,EAAA,MAAgB,SAAA0I,EAAAjJ,GAAe,IAAAO,EAAMA,EAAA,WAAa,OAAA8wB,KAAb,GAA4B,IAAI9wB,KAAA+vD,SAAA,cAAAA,KAAA,EAAAjuB,MAAA,QAAiD,MAAAp5B,GAAS,iBAAAib,SAAA3jB,EAAA2jB,QAAoCjb,EAAArK,QAAA2B,GAAY,SAAA0I,EAAAjJ,EAAAO,GAAiB,SAAAX,EAAAqJ,GAAc,OAAA1I,EAAAzB,EAAAmK,IAAe,SAAAnK,EAAAmK,GAAc,IAAAjJ,EAAAT,EAAA0J,GAAW,KAAAjJ,EAAA,aAAA+kB,MAAA,uBAAA9b,EAAA,MAAyD,OAAAjJ,EAAS,IAAAT,GAAOoxD,cAAA,GAAAC,oBAAA,EAAAC,kBAAA,EAAAC,mBAAA,GAAAC,iBAAA,GAAAC,kBAAA,GAAAC,mBAAA,IAAiJrxD,EAAA88B,KAAA,WAAkB,OAAAl9B,OAAAk9B,KAAAn9B,IAAsBK,EAAAykD,QAAAvlD,EAAAmK,EAAArK,QAAAgB,IAAAmG,GAAA,IAAiC,SAAAkD,EAAAjJ,EAAAO,GAAiB,aAAaf,OAAAC,eAAAO,EAAA,cAAsCD,OAAA,IAASC,EAAAI,OAAA,SAAA6I,GAAuB,SAAAjJ,EAAAiJ,GAAc,kBAAkB,QAAAjJ,KAAAqxB,KAAA,mBAAAA,KAAArxB,GAAAiJ,IAAAooB,KAAArxB,GAAAiJ,MAA+D,SAAA1I,KAAc,IAAAX,EAAAqJ,EAAApB,WAAA/I,EAAAc,EAAAmI,SAAAxI,EAAAK,EAAAqI,KAAAhB,EAAArH,EAAAoI,UAAuD,OAAAxI,OAAAk9B,KAAA59B,GAAAwJ,OAAA,SAAA/H,EAAAX,GAA2C,IAAAT,EAAA,SAAA8J,EAAA1I,GAAoB,gBAAAA,UAAwBX,EAAAm1B,MAAA,KAAAzsB,OAAA,SAAAW,EAAA1I,GAAoC,OAAA0I,EAAA1I,GAAA0I,EAAA1I,KAAmB6F,MAAApG,EAAA,SAAAkxD,MAAAlxD,EAAA,SAAAmxD,QAAAnxD,EAAA,aAAwDO,GAA3J,CAA+J,EAAAA,GAAAiiC,EAAA1jC,EAAAc,GAAAiB,EAAArB,OAAAk9B,KAAAn9B,GAAAwjB,IAAA,SAAA9Z,GAA8C,OAAA1J,EAAA0J,KAAYs4B,OAAA,SAAAt4B,GAAqB,OAAAA,EAAA1C,SAAA3G,IAAAqJ,EAAAP,OAA6Bqa,IAAA,SAAA9Z,GAAkB,OAAAA,EAAAJ,UAAmB,OAAA1J,EAAA4G,GAAAnG,EAAAJ,OAAAC,eAAAN,EAAA,OAA6CQ,IAAA,WAAe,OAAAsJ,EAAAtJ,IAAAC,IAAgBuL,IAAA,SAAAnL,GAAiB,OAAAiJ,EAAAkC,IAAAvL,EAAAI,MAAmBb,EAAAo3B,OAAA,SAAAv2B,GAAuBiJ,EAAAstB,OAAA32B,EAAAI,IAAcb,EAAAiH,MAAA,WAAoB,MAAAo8B,EAAAziC,OAAAkJ,EAAAkC,IAAAvL,EAAA4iC,EAAAziC,QAAgCZ,EAAA+xD,MAAA,WAAoBjoD,EAAA64B,GAAAliC,EAAA,SAAAqJ,GAAmB,OAAA6mB,QAAA4Q,IAAA9gC,EAAAqJ,MAA0B9J,EAAAgyD,QAAA,WAAsBloD,EAAA84B,IAAAniC,IAAST,EAAAmH,WAAazF,EAAAsH,QAAA,SAAAnI,GAAuB,IAAAO,EAAAP,EAAA+0B,MAAA,KAAAiT,MAAyBznC,IAAApB,EAAAmH,QAAA/F,IAAkByhC,MAAA,WAAiB/4B,EAAA+4B,MAAAhiC,KAAYiH,EAAAjH,GAAA+I,QAAA5J,EAAAmH,QAAA/F,GAAAs/B,KAAA,WAA2C52B,EAAA42B,KAAA7/B,QAAaO,GAAIA,GAAI,OAAAA,GAAUg2B,OAAA,WAAkB,QAAAttB,KAAAooB,KAAA,WAAApoB,UAAAooB,KAAApoB,GAA+C1I,EAAA8wB,aAA585HrxB,iCCAzD,SAAAI,EAAAgxD,GACP,SAAAC,EAAAhyD,GACA,kBACA,QAAAgB,KAAAgxB,KACA,mBAAAA,KAAAhxB,GAAAhB,IACAgyB,KAAAhxB,GAAAhB,MAcA,SAAAiyD,EAAAC,GACA,IAAAzpD,EAAAspD,EAAAvpD,WACAE,EAAAD,EAAAC,SAAAE,EAAAH,EAAAG,KAAAD,EAAAF,EAAAE,UACA,OAAAxI,OAAAk9B,KAAA30B,GACAO,OAAA,SAAAqb,EAAA+kB,GACA,IAAAz/B,EAdA,SAAAuoD,EAAAD,GAGA,YAFA,IAAAA,IAA8BA,MAC9BC,EAAAz8B,MAAA,KACAzsB,OAAA,SAAAqb,EAAAtkB,GAAkD,OAAAskB,EAAAtkB,GAAAskB,EAAAtkB,KAClD+G,MAAAirD,EAAA,SACAH,MAAAG,EAAA,SACAF,QAAAE,EAAA,aACYE,GAOZE,CAAA/oB,EAAA/kB,GACApd,EAAAwB,EAAA2gC,GACAgpB,EAAAlyD,OAAAk9B,KAAAz0B,GACA8a,IAAA,SAAApE,GAAmC,OAAA1W,EAAA0W,KACnC4iB,OAAA,SAAAt6B,GAAsC,OAAAA,EAAAV,SAAAmiC,IAAAzhC,EAAAyB,OACtCqa,IAAA,SAAA9b,GAAmC,OAAAA,EAAA4B,UAgCnC,OA/BAI,EAAAlD,GAAA2iC,EACAlpC,OAAAC,eAAAwJ,EAAA,OACAtJ,IAAA,WAAkC,OAAAyxD,EAAAzxD,IAAA+oC,IAClCv9B,IAAA,SAAA0C,GAAmC,OAAAujD,EAAAjmD,IAAAu9B,EAAA76B,MAEnC5E,EAAAstB,OAAA,SAAAvvB,GACAoqD,EAAA76B,OAAAmS,EAAA1hC,IAEAiC,EAAA7C,MAAA,WACA,MAAAG,EAAAxG,OACAqxD,EAAAjmD,IAAAu9B,EAAAniC,EAAAxG,QAGAkJ,EAAAioD,MAAA,WACAE,EAAAtvB,GAAA4G,EAAA,SAAA76B,GAA2C,OAAAiiB,QAAA4Q,IAAAgI,EAAA76B,MAE3C5E,EAAAkoD,QAAA,WACAC,EAAArvB,IAAA2G,IAEAz/B,EAAA3C,WACAorD,EAAAvpD,QAAA,SAAAvH,GACA,IAAAvB,EAAAuB,EAAAm0B,MAAA,KAAAiT,MACA3oC,IACA4J,EAAA3C,QAAAjH,IACA2iC,MAAA,WAA4CovB,EAAApvB,MAAAphC,KAE5CoH,EAAApH,GAAAmI,QACAE,EAAA3C,QAAAjH,GAAAwgC,KAAA,WAA4DuxB,EAAAvxB,KAAAj/B,QAI5D+iB,GACS4tC,GAYT,OAAAD,GATA/6B,OAAA,WACA,QAAAl2B,KAAAgxB,KACA,WAAAhxB,UACAgxB,KAAAhxB,GAGAixD,EAAAjgC,oBCnEO,SAASsgC,EAAYP,EAAMQ,GACjCR,EAAKhwB,aCAC,SAAAwwB,EAAAC,GACP,IAAA9pD,EAAA6pD,EAAAl1B,OACA3Z,IAAA,SAAA/c,GACA,IAAAnH,EAAA+yD,EAAA5rD,GACA,OAAAxG,OAAAigC,OAA6BjgC,OAAAsyD,EAAA,EAAAtyD,CAAgBX,EARtC,SAAAmH,EAAA+rD,GAEP,YADA,IAAAA,IAA+BA,EAAA,KAC/B/rD,EAAA+uB,MAAA,QAAAA,MAAA,KAAAwM,OAAA,SAAA1zB,GAA8D,OAAAA,IAAYonB,KAAA88B,GAM7B5iB,CAAAnpC,EAAA6rD,KAC7CtwB,OAAoBuwB,EAAA,KAEpBxpD,OAAA,SAAA4a,EAAAha,GAAoC,OAAAga,EAAAtb,OAAAsB,QACpC,OAAW1J,OAAAsyD,EAAA,EAAAtyD,CAAeuI,GDRPqnC,CAAoBwiB,IACtC1tC,OAAiB,SAAI9jB,EAAgBgxD,GANtC1yD,EAAAU,EAAA0B,EAAA,sBAAA6wD,kCEAAjzD,EAAAkB,EAAAkB,GAAApC,EAAAU,EAAA0B,EAAA,gCAAAkxD,IAAAtzD,EAAAU,EAAA0B,EAAA,oCAAAmxD,IAAAvzD,EAAAU,EAAA0B,EAAA,4BAAAoxD,IAAAxzD,EAAAU,EAAA0B,EAAA,kCAAAqxD,IAAAzzD,EAAAU,EAAA0B,EAAA,kCAAAsxD,IAAA1zD,EAAAU,EAAA0B,EAAA,yBAAAuxD,IAAA3zD,EAAAU,EAAA0B,EAAA,kCAAAwxD,IAAA5zD,EAAAU,EAAA0B,EAAA,+BAAAyxD,IAAA7zD,EAAAU,EAAA0B,EAAA,mCAAA0xD,IAAA9zD,EAAAU,EAAA0B,EAAA,oCAAA2xD,IAAA,IAAAx5B,EAAAv6B,EAAA,GAAAg0D,EAAAh0D,EAAA,GAAA89B,EAAA99B,EAAA,IAAA06B,EAAA16B,EAAA,IAMO,MAAMszD,EAAcxyD,OAAAy5B,EAAA,EAAAz5B,EAAK,GAAK,GAAK,GAAK,IAElCyyD,EAAkBzyD,OAAAy5B,EAAA,EAAAz5B,CAAY,KAAM,KAChD,MAAMQ,EAAI0yD,EAAA,EAAKtyD,SAGf,OAFAsyD,EAAA,EAAK7jD,QAAQ7O,EAAGA,EAAG4J,KAAKE,GAAK,GAC7B4oD,EAAA,EAAKn8C,MAAMvW,EAAGA,GAAI,GAAI,GAAI,KACnBA,IAIKkyD,EAAU1yD,OAAAy5B,EAAA,EAAAz5B,EAAI,GACd2yD,EAAgB3yD,OAAAy5B,EAAA,EAAAz5B,CAAI,MAEpB4yD,EAAgB5yD,OAAAy5B,EAAA,EAAAz5B,CAAe,IAAVoK,KAAKE,IACtCzC,OACC6qD,EAAQvrD,KAAMwrD,EAAcxrD,KAAM61B,EAAA,KAAKh2B,KACxC,CAACmsD,EAAKT,EAASU,EAAOn2B,IAASy1B,EAAUS,EAAMC,EAAQn2B,EAAOk2B,GAGlDN,EAAO7yD,OAAAy5B,EAAA,EAAAz5B,CAAI,GACvB6H,OAAOm1B,EAAA,KAAKh2B,IAAK0rD,EAAQvrD,MAAO,CAAC3G,EAAGy8B,EAAMy1B,IAAYA,EAAUlyD,EAAIy8B,EAAOz8B,GAC3EmG,OAAOizB,EAAA,GAEKk5B,EAAgB9yD,OAAAy5B,EAAA,EAAAz5B,EAAK,EAAG,IAAK,IACzC6H,OAAOgrD,EAAK7rD,KAAM,CAACqsD,EAAK7yD,KACxB6yD,EAAI,IAA2B,IAArBjpD,KAAK+E,IAAI3O,EAAI,KAChB6yD,IAGKN,EAAa/yD,OAAAy5B,EAAA,EAAAz5B,EAAK,EAAK,EAAK,EAAK,IACjCgzD,EAAiBhzD,OAAAy5B,EAAA,EAAAz5B,EAAK,EAAK,EAAK,GAAK,IAErCizD,EAAkBjzD,OAAAy5B,EAAA,EAAAz5B,EAAKkzD,EAAA,EAAKtyD,SAAUsyD,EAAA,EAAKtyD,WACvDiH,OACC+qD,EAAc5rD,IAAK8rD,EAAc9rD,KAClC,CAACssD,EAAMH,EAAKE,KACXH,EAAA,EAAK1jD,gBAAgB8jD,EAAK,GAAID,GAC9BH,EAAA,EAAK7jD,QAAQikD,EAAK,GAAIA,EAAK,GAAIH,GAC/BD,EAAA,EAAK7jD,QAAQikD,EAAK,GAAIA,EAAK,GAAIlpD,KAAKE,IAC7BgpD,kGC7CTp0D,EAAAU,EAAA0B,EAAA,6BAAAiyD,IAAAr0D,EAAAU,EAAA0B,EAAA,yBAAAkyD,IAAAt0D,EAAAU,EAAA0B,EAAA,yBAAAmyD,IAAAv0D,EAAAU,EAAA0B,EAAA,6BAAAoyD,IAAAx0D,EAAAU,EAAA0B,EAAA,yBAAAqyD,IAAAz0D,EAAAU,EAAA0B,EAAA,wCAAAsyD,IAAA10D,EAAAU,EAAA0B,EAAA,gCAAAuyD,IAAA30D,EAAAU,EAAA0B,EAAA,8BAAAwyD,IAAA50D,EAAAU,EAAA0B,EAAA,8BAAAyyD,IAAA70D,EAAAU,EAAA0B,EAAA,gCAAA0yD,IAAA90D,EAAAU,EAAA0B,EAAA,6BAAA2yD,IAAA/0D,EAAAU,EAAA0B,EAAA,8BAAA4yD,IAAAh1D,EAAAU,EAAA0B,EAAA,+BAAA6yD,IAQO,MACNz1B,SAAQ60B,EAAEa,KAAIZ,EAAEa,KAAIZ,EAAEa,SAAQZ,EAAEtyC,KAAIuyC,GCW9B,WACP,IAAAj1B,EAAmB1+B,OAAAsyD,EAAA,EAAAtyD,CAAIu0D,EAAA,EAAI7pD,WAAA,QAC3B2pD,EAAer0D,OAAAsyD,EAAA,EAAAtyD,CAAG,GAClBo0D,EAAep0D,OAAAsyD,EAAA,EAAAtyD,CAAG,GAClBs0D,EAAmBt0D,OAAAsyD,EAAA,EAAAtyD,EACnBo0D,KAAcG,EAAA,EAAI3zD,SAClByzD,KAAcE,EAAA,EAAI3zD,WAElBiH,OAAAwsD,EAAArtD,KAAA,SAAA6pD,EAAAwD,GAEA,OADQE,EAAA,EAAI3kD,cAAAihD,EAAAwD,QACZxD,IAEAhpD,OAAAusD,EAAAptD,KAAA,SAAA6pD,EAAAuD,GAEA,OADQG,EAAA,EAAI5kD,cAAAkhD,EAAAuD,QACZvD,IAUA,OAAYnyB,WAAA41B,WAAAlzC,KARGphB,OAAAsyD,EAAA,EAAAtyD,CAAIu0D,EAAA,EAAI3zD,UACvBiH,OAAAysD,EAAAttD,IAAA03B,EAAA13B,KAAA,SAAA6pD,EAAAyD,EAAA51B,GAKA,OAJQ61B,EAAA,EAAI/kD,gBAAAqhD,EAAAnyB,GACJ61B,EAAA,EAAIzmD,SAAA+iD,IAAAyD,EAAAD,MACJE,EAAA,EAAIzmD,SAAA+iD,IAAAyD,EAAAF,MACJG,EAAA,EAAInoD,OAAAykD,KACZA,IAEYwD,OAAAD,QDlCRI,GAGJjB,EAAS7tD,IAAI+uD,EAAA,EAAK/pD,WAAW,GAAI,GAAI,IACrC8oD,EAAK9tD,IAAI,GACT+tD,EAAK/tD,IAAI,GAGF,MACNgvD,oBAAmBd,EAAE//C,YAAWggD,GCjB1B,SAAA55B,GACP,IAAAy6B,EAA8B10D,OAAAsyD,EAAA,EAAAtyD,EAC9BwT,KAAA,GACAC,IAAA,IACAK,KAAA,GAAA1J,KAAAE,GACAyJ,OAAA,IAEAlM,OAAAoyB,EAAAjzB,KAAA,SAAA6pD,EAAA/pC,GACA,IAAAhB,EAAAgB,EAAAhB,MAAAE,EAAAc,EAAAd,OAEA,OADA6qC,EAAA98C,OAAA+R,EAAAE,EACA6qC,IAIA,OACA6D,sBAAA7gD,YAHsB7T,OAAAsyD,EAAA,EAAAtyD,CAAIu0D,EAAA,EAAI3zD,UAC9BiH,OAAA6sD,EAAA1tD,KAAA,SAAA6pD,EAAAxvD,GAA8D,OAAQkzD,EAAA,EAAI1gD,YAAAg9C,EAAAxvD,EAAAyS,KAAAzS,EAAA0S,OAAA1S,EAAAmS,KAAAnS,EAAAoS,QDKtEkhD,CAA2B56B,EAAA,YAG/B65B,EAAoBrsD,UAAUlG,GAAKrB,OAAAuF,UAAMlE,GAAGyS,KAAgB,GAAV1J,KAAKE,MAGhD,MAAMwpD,EAAY9zD,OAAAsyD,EAAA,EAAAtyD,CAAI,KAEhB+zD,EAAY/zD,OAAAsyD,EAAA,EAAAtyD,CAAI,MAGhBg0D,EAAiCh0D,OAAAsyD,EAAA,EAAAtyD,EAC5C40D,EAAA,KAAKztD,KAAM2sD,EAAU3sD,KAAMytD,EAAA,KAAK5tD,KACjC,CAACgzB,EAAMkD,EAAMk2B,EAAOl5B,KACdgD,KACDA,EAAK7Y,EAAA,EAAKwwC,KAAO33B,EAAK7Y,EAAA,EAAKylC,KAC9B9vB,EAAKo5B,IAEFl2B,EAAK7Y,EAAA,EAAKywC,OAAS53B,EAAK7Y,EAAA,EAAKxS,KAChCmoB,GAAMo5B,MAMIa,EAA8Bj0D,OAAAsyD,EAAA,EAAAtyD,EACzC40D,EAAA,KAAKztD,KAAM2sD,EAAU3sD,KAAMytD,EAAA,KAAK5tD,KACjC,CAACgzB,EAAMkD,EAAMk2B,KAEPl2B,KACDA,EAAK7Y,EAAA,EAAK8W,OAAS+B,EAAK7Y,EAAA,EAAK6gB,KAChClL,EAAKo5B,IAEFl2B,EAAK7Y,EAAA,EAAKgX,QAAU6B,EAAK7Y,EAAA,EAAKwlC,KACjC7vB,GAAMo5B,MAMIc,EAAYl0D,OAAAsyD,EAAA,EAAAtyD,EACvB40D,EAAA,MAAM5tD,KAAMtH,KACZ4O,EAAG5O,EAAE+7B,KAAKntB,EACVC,EAAG7O,EAAE+7B,KAAKltB,KAKC4lD,EAAan0D,OAAAsyD,EAAA,EAAAtyD,CAAMk0D,EAAW,CAACnzD,EAAGhB,MAC9CuO,EAAW,IAARvN,EAAEuN,EAAUvN,EAAEuN,EAAIvO,EAAEuO,EAAIvN,EAAEuN,EAC7BC,EAAW,IAARxN,EAAEwN,EAAUxN,EAAEwN,EAAIxO,EAAEwO,EAAIxN,EAAEwN,KAE7B5H,OAAO80B,MAAWA,IAASA,EAAKntB,IAAKmtB,EAAKltB,IAG3CilD,EAAK3rD,OACHssD,EAAWntD,IAAK+sD,EAAU5sD,MAC3B,CAACgsD,EAAK13B,EAAM23B,IAAUD,EAAM13B,EAAKltB,EAAI6kD,GAItCK,EAAK5rD,OACHssD,EAAWntD,IAAK+sD,EAAU5sD,MAC3B,CAACgsD,EAAK13B,EAAM23B,IAAUD,EAAM13B,EAAKntB,EAAI8kD,GAGtCG,EAAS1rD,OACPosD,EAASjtD,IAAK0sD,EAASvsD,MACxB,CAACksD,EAAKjgD,EAAMkhD,KACX,MAAMjmD,EAAIomD,EAAA,EAAK/pD,WAAW4pD,EAASD,KAAK,GAAIC,EAASD,KAAK,GAAIC,EAASD,KAAK,IAC5E,OAAOI,EAAA,EAAK99C,IAAI08C,EAAKA,EAAKoB,EAAA,EAAK19C,MAAM1I,EAAGA,GAAI+E,MAI9CmgD,EAAS1rD,OACPmsD,EAAYhtD,IAAK0sD,EAASvsD,MAC3B,CAACksD,EAAK0B,EAAST,KACd,MAAMjmD,EAAIomD,EAAA,EAAK/pD,WAAW4pD,EAASD,KAAK,GAAIC,EAASD,KAAK,GAAIC,EAASD,KAAK,KAC5E,OAAOI,EAAA,EAAK99C,IAAI08C,EAAKA,EAAKoB,EAAA,EAAK19C,MAAM1I,EAAGA,GAAI0mD,sCElGvC,SAAAC,EAAAzwC,GACP,IACA0wC,EADAC,GAAA,EAUA,OADA30B,sBAPA,SAAA40B,EAAAC,GACAF,IACA3wC,EAAA6wC,GAAAH,GAAAG,IACAH,EAAAG,EACA70B,sBAAA40B,MAIA,WACAD,GAAA,GAZAh2D,EAAAU,EAAA0B,EAAA,sBAAA0zD,kCCAA91D,EAAAkB,EAAAkB,GAAApC,EAAAU,EAAA0B,EAAA,4BAAA+zD,IAAAn2D,EAAAU,EAAA0B,EAAA,8BAAAg0D,IAAA,IAAA77B,EAAAv6B,EAAA,GAAAq2D,EAAAr2D,EAAA,IAAAs2D,EAAAt2D,EAAA6B,EAAAw0D,GAAAE,EAAAv2D,EAAA,IAAAw2D,EAAAx2D,EAAA6B,EAAA00D,GAAAE,EAAAz2D,EAAA,IAAA02D,EAAA12D,EAAA6B,EAAA40D,GAOO,MAAMN,EAAUr1D,OAAAy5B,EAAA,EAAAz5B,EACtB+iB,KAAAyyC,IAAMxyC,KAAA0yC,MACS9uD,QAGH0uD,EAAYt1D,OAAAy5B,EAAA,EAAAz5B,CAAI41D,EAAAnuD,GAAOb,yCCZpC1H,EAAAkB,EAAAkB,GAAApC,EAAAU,EAAA0B,EAAA,0BAAAiiD,IAAArkD,EAAAU,EAAA0B,EAAA,6BAAAu0D,IAAA,IAAAC,EAAA52D,EAAA,IAAA62D,EAAA72D,EAAA,GAIO,MAAMqkD,EAAQvjD,OAAA+1D,EAAA,EAAA/1D,EACnB8lB,MAAO,GACPE,OAAQ,GACRgwC,KAAM,EACNC,KAAM,IAIKJ,EAAW71D,OAAA+1D,EAAA,EAAA/1D,EACrBujD,EAAMv8C,KACPu8C,GAASvjD,OAAA81D,EAAA,EAAA91D,CAAMujD,EAAMz9B,MAAOy9B,EAAMv9B,OAAQu9B,EAAMyS,KAAMzS,EAAM0S,mECd9D52D,EAAAD,QAAA,sbCAAC,EAAAD,QAAA,uUCAAC,EAAAD,QAAA,wgJCAA,IAAAmkB,GACA2yC,cAAA,GACA/E,cAAA,GACAgF,wBAAA,GACAC,eAAA,GACAC,gBAAA,GACAC,uBAAA,GACAC,aAAA,IAIA,SAAAC,EAAAC,GACA,IAAAlwD,EAAAmwD,EAAAD,GACA,OAAAv3D,EAAAqH,GAEA,SAAAmwD,EAAAD,GACA,IAAAlwD,EAAAgd,EAAAkzC,GACA,KAAAlwD,EAAA,IACA,IAAAkD,EAAA,IAAA8b,MAAA,uBAAAkxC,EAAA,KAEA,MADAhtD,EAAA6d,KAAA,mBACA7d,EAEA,OAAAlD,EAEAiwD,EAAAt5B,KAAA,WACA,OAAAl9B,OAAAk9B,KAAA3Z,IAEAizC,EAAA3R,QAAA6R,EACAr3D,EAAAD,QAAAo3D,EACAA,EAAAjwD,GAAA,iCC7BArH,EAAAkB,EAAAkB,GAAApC,EAAAU,EAAA0B,EAAA,8BAAAq1D,IAAAz3D,EAAAU,EAAA0B,EAAA,6BAAAs1D,IAAA13D,EAAAU,EAAA0B,EAAA,0BAAAu1D,IAAA33D,EAAAU,EAAA0B,EAAA,gCAAAw1D,IAAA53D,EAAAU,EAAA0B,EAAA,4BAAAopB,IAAAxrB,EAAAU,EAAA0B,EAAA,iCAAAy1D,IAAA73D,EAAAU,EAAA0B,EAAA,gCAAA01D,IAAA93D,EAAAU,EAAA0B,EAAA,iCAAAs0B,IAAA12B,EAAAU,EAAA0B,EAAA,+BAAA21D,IAAA/3D,EAAAU,EAAA0B,EAAA,+BAAA41D,IAAA,IAAAz9B,EAAAv6B,EAAA,GAAA69B,EAAA79B,EAAA,IAAAi4D,EAAAj4D,EAAA,IAAAk4D,EAAAl4D,EAAA,IAAAm4D,EAAAn4D,EAAA,IAAAo4D,EAAAp4D,EAAA,IAAAq4D,EAAAr4D,EAAA,GAAAs4D,EAAAt4D,EAAA,IAAAu4D,EAAAv4D,EAAA,IAcO,MAAMy3D,EAAY32D,OAAA+8B,EAAA,EAAA/8B,CAAem3D,EAAA,QAASG,EAAA,UAKpCV,EAAW52D,OAAA+8B,EAAA,EAAA/8B,CAAgBm3D,EAAA,QAASM,EAAA,SAKpCZ,EAAQ72D,OAAAy5B,EAAA,EAAAz5B,IAAuCg6B,IAC3D,MAAM09B,EAAM,IAAIC,MAChBD,EAAIE,OAAS,KAAM59B,EAAK09B,IACxBA,EAAIpiC,IAAM,aAIEwhC,EAAc92D,OAAAy5B,EAAA,EAAAz5B,EAC1B8hB,UAAW,uBACXC,UAAW,WAEXla,OAAOgvD,EAAM7vD,KAAM,CAAC6wD,EAAKH,IAAQ13D,OAAAuF,UAC9BsyD,GACHzhC,MAAOshC,KAIKhtC,EAAU1qB,OAAA+8B,EAAA,EAAA/8B,CAAsBm3D,EAAA,QAASL,GAKzCC,EAAe/2D,OAAA+8B,EAAA,EAAA/8B,CAAiBm3D,EAAA,SAC5CtvD,OACC2vD,EAAA,gBAAgBxwD,IAAKwwD,EAAA,YAAYxwD,IAAK4vD,EAAS5vD,IAAK2vD,EAAU3vD,KAC/D,CAAC8vB,EAAQqoB,EAAWhX,EAAOrS,EAAOD,IAASiB,EAAOC,QACjDlB,OAAMC,QACNC,UACCopB,YACAhX,YAMU6uB,EAAch3D,OAAA+8B,EAAA,EAAA/8B,CAAiBm3D,EAAA,SAC3CtvD,OACC2vD,EAAA,gBAAgBrwD,KAAMqwD,EAAA,WAAWxwD,IAAKwwD,EAAA,eAAexwD,IAAK4vD,EAAS5vD,IAAK2vD,EAAU3vD,IAAKmwD,EAAA,GAAGnwD,KAC3F,CAAC8vB,GAASghC,EAAUC,GAAU5vB,EAAO6vB,EAAWliC,EAAOD,EAAM7T,IAAO8U,EAAOC,QAC1ElB,OAAMC,QACNC,WACCopB,UAAW2Y,EACX3vB,UAGAgX,UAAW4Y,EACX5vB,MAAO6vB,IAERpiC,cACC1T,QAASF,EAAGi2C,eAQFriC,EAAe51B,OAAAy5B,EAAA,EAAAz5B,EAC1Bm3D,EAAA,GAAGnwD,KACJgb,KACCwP,UAAWxxB,OAAAu3D,EAAA,EAAAv3D,CAAUgiB,EAAI,QAAS,YAKvBi1C,EAAaj3D,OAAA+8B,EAAA,EAAA/8B,CAAuBm3D,EAAA,SAChDtvD,OAECsvD,EAAA,GAAGnwD,IACHgwD,EAAYhwD,IACZ+vD,EAAa/vD,IACbqwD,EAAA,KAAYlwD,KACZkwD,EAAA,YAAmBlwD,KACnByuB,EAAa5uB,KAEd,CAAC6wB,EAAO7V,EAAIk2C,EAAOC,EAAQ/2C,EAAMg3C,EAAYvnC,IAAagH,EAAMd,QAC/DL,UAAU,EACV1H,eACChS,MAAO,EACP/V,KAAM+a,EAAGngB,OAEVg1B,UAAWqhC,EAAOC,GAClBviC,aAAc/E,EACdkF,UACC3U,OAAMg3C,cAEPv2C,KAAM,gBACNC,UAAW,UACXC,UAAW,aAKAm1C,EAAal3D,OAAA+8B,EAAA,EAAA/8B,CAAsBm3D,EAAA,SAC9CtvD,OACAovD,EAAWjwD,IACXqwD,EAAA,SAAgBlwD,KAChBqwD,EAAA,gBAAgBrwD,KAChBkwD,EAAA,KAAYlwD,KACZgwD,EAAA,GAAGnwD,IACH0jB,EAAQ1jB,IACRywD,EAAA,UAAUzwD,KACR,CAAC6wB,EAAOwgC,EAAOC,EAAaC,EAAWn3C,EAAMY,EAAI61C,EAAK70C,IAAS6U,EAAMd,QACvE/T,OACA+S,UACCuiC,cACAE,SAAUD,EAAU,GACpBn3C,OACAy2C,IAAKA,EAAIntC,UACT+tC,UAAWJ,EAAM3tC,QAAQ,GACzB0T,QAASi6B,EAAM3tC,QAAQ,GACvB2T,IAAKg6B,EAAM3tC,QAAQ,GACnBguC,OAAQL,EAAM3tC,QAAQ,IAEvBkL,cACC7E,SAAU/O,EAAGG,YACbD,QAASF,EAAG22C,OACZnnC,UAAWxxB,OAAAu3D,EAAA,EAAAv3D,CAAUgiB,EAAI,aAM5Bm1C,EAAA,QAAQtvD,OACNovD,EAAW9vD,KAAM+vD,EAAW/vD,KAAMiwD,EAAA,KAAYpwD,KAC/C,CAAC5F,EAAGi3D,EAAOH,IAAU92D,EAAEw3D,QAAQP,EAAOH,iFCjJhC,MAAMtG,EAAOptB,EAAA,IAEPq0B,EAAQC,EAAA,GAAYt2B,OAAQl6B,MAAAywD,IAEtCr0C,OAAqB,KAAIktC,EACzBltC,OAAsB,MAAIm0C,cCL7B,MAAMzG,EAAelzD,EAAA,IAGrB0yD,EAAKxvB,UAAS,GAEdpiC,OAAAg5D,EAAA,EAAAh5D,CAAW4xD,EAAMQ,GAEjByG,EAAMlmB,QAAQif,EAAM,cAEpB/hB,WAAW,WACT+hB,EAAKxvB,UAAS,IACb","file":"experiments/area-light/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 92);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nexport function empty() {\n    return {\n        entities: {},\n        processes: {},\n        arcs: {},\n        meta: {}\n    };\n}\nexport function merge(g1, g2) {\n    return {\n        entities: __assign({}, g1.entities, g2.entities),\n        processes: __assign({}, g1.processes, g2.processes),\n        arcs: __assign({}, g1.arcs, g2.arcs),\n        meta: __assign({}, g1.meta, g2.meta)\n    };\n}\n//# sourceMappingURL=graph-utils.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport * as graphs from './graph-utils';\nimport { PORT_TYPES, createEntity, createProcess, createArc } from '../runtime-types';\nimport { v4 } from 'tvs-libs/dist/lib/utils/uuid';\nvar streamNameSuffix = 'Stream';\nvar reactionNameSuffix = 'Reaction';\nfunction mergePath(id, path) {\n    return path ? path + '.' + id : id;\n}\nfunction createEntityRef(spec) {\n    var value = spec.value;\n    var id = v4();\n    var ns;\n    var accept;\n    var reset;\n    var streams = [];\n    var entity = {};\n    entity.HOT = {\n        entity: entity,\n        type: PORT_TYPES.HOT\n    };\n    entity.COLD = {\n        entity: entity,\n        type: PORT_TYPES.COLD\n    };\n    entity.id = function (_id, _ns) {\n        id = mergePath(_id, _ns);\n        ns = _ns;\n        return entity;\n    };\n    entity.val = function (_value) {\n        value = _value;\n        return entity;\n    };\n    entity.updateVal = function (fn) {\n        value = fn(value);\n        return entity;\n    };\n    entity.accept = function (a) {\n        accept = a;\n        return entity;\n    };\n    entity.reset = function () {\n        reset = true;\n        return entity;\n    };\n    entity.getId = function () { return id; };\n    if (spec.procedure) {\n        streams.push(spec);\n    }\n    entity.react = function (dependencies, procedure, processId) {\n        var spec = getStreamSpec(dependencies, procedure, processId);\n        spec.pidSuffix = reactionNameSuffix;\n        var deps = spec.dependencies;\n        spec.dependencies = [{ entity: entity, type: PORT_TYPES.ACCUMULATOR }];\n        if (deps && deps.length) {\n            spec.dependencies = spec.dependencies.concat(deps);\n        }\n        streams.push(spec);\n        return entity;\n    };\n    entity.getGraph = function () {\n        var graph = graphs.empty();\n        graph.entities[id] = createEntity({ id: id, value: value, accept: accept, reset: reset });\n        streams.forEach(function (streamSpec) {\n            var deps = streamSpec.dependencies;\n            var pid = streamSpec.processId ?\n                mergePath(streamSpec.processId, ns) :\n                id + streamSpec.pidSuffix + (deps && deps.length\n                    ? ':' + (deps.reduce(function (name, dep) {\n                        var depId = dep.entity.getId();\n                        if (depId === id) {\n                            return name;\n                        }\n                        return name + ':' + depId;\n                    }, ''))\n                    : '');\n            var ports = [];\n            if (deps) {\n                deps.forEach(function (port, portId) {\n                    ports[portId] = port.type;\n                    if (port.type !== PORT_TYPES.ACCUMULATOR) {\n                        var arc_1 = createArc({\n                            process: pid,\n                            entity: port.entity.getId(),\n                            port: portId\n                        });\n                        graph.arcs[arc_1.id] = arc_1;\n                    }\n                });\n            }\n            var arc = createArc({ process: pid, entity: id });\n            graph.arcs[arc.id] = arc;\n            graph.processes[pid] = createProcess({\n                id: pid,\n                ports: ports,\n                procedure: streamSpec.procedure,\n                async: streamSpec.async,\n                autostart: streamSpec.autostart,\n                delta: streamSpec.delta\n            });\n        });\n        return graph;\n    };\n    return entity;\n}\nexport function val(value) {\n    return createEntityRef({ value: value });\n}\nfunction getStreamSpec(dependencies, procedure, processId) {\n    var spec = {\n        procedure: procedure\n    };\n    if (dependencies != null && dependencies.length) {\n        spec.dependencies = dependencies;\n    }\n    if (typeof processId === 'string') {\n        spec.processId = processId;\n    }\n    else {\n        spec.pidSuffix = streamNameSuffix;\n    }\n    return spec;\n}\nexport var stream = (function (dependencies, procedure, processId) {\n    return createEntityRef(getStreamSpec(dependencies, procedure, processId));\n});\nexport var asyncStream = (function (dependencies, procedure, processId) {\n    return createEntityRef(__assign({}, getStreamSpec(dependencies, procedure, processId), { async: true }));\n});\nexport var streamStart = (function (dependencies, procedure, processId) {\n    return createEntityRef(__assign({}, getStreamSpec(dependencies, procedure, processId), { autostart: true }));\n});\nexport var asyncStreamStart = (function (dependencies, procedure, processId) {\n    return createEntityRef(__assign({}, getStreamSpec(dependencies, procedure, processId), { async: true, autostart: true }));\n});\nexport var delta = function (entity, procedure, processId) { return createEntityRef(__assign({}, getStreamSpec([entity.HOT], procedure, processId), { delta: true })); };\nexport function isEntity(e) {\n    return e &&\n        typeof e.id === 'function' &&\n        typeof e.getGraph === 'function' &&\n        e.HOT && e.COLD;\n}\nexport function resolveEntityIds(entities, path) {\n    for (var id in entities) {\n        var e = entities[id];\n        if (isEntity(e)) {\n            e.id(id, path);\n        }\n    }\n    return entities;\n}\nexport function getGraphFromAll(entities) {\n    var es = [];\n    for (var id in entities) {\n        var e = entities[id];\n        if (isEntity(e)) {\n            es.push(e);\n        }\n    }\n    return es.reduce(function (g, e) { return graphs.merge(g, e.getGraph()); }, graphs.empty());\n}\n//# sourceMappingURL=entity-reference.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","export function getContext(canvas, contextAttributes) {\n    const gl = canvas.getContext('webgl', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","import { v4 } from 'tvs-libs/dist/lib/utils/uuid';\nimport { evaluate } from './utils/code-evaluator';\nexport function createEntity(_a) {\n    var _b = _a.id, id = _b === void 0 ? v4() : _b, value = _a.value, json = _a.json, accept = _a.accept, reset = _a.reset, meta = _a.meta;\n    if (value === undefined && json) {\n        value = JSON.parse(json);\n    }\n    return {\n        id: id,\n        value: value,\n        accept: accept,\n        reset: reset,\n        meta: meta\n    };\n}\nexport function createProcess(_a, context) {\n    var _b = _a.id, id = _b === void 0 ? v4() : _b, _c = _a.ports, ports = _c === void 0 ? [] : _c, procedure = _a.procedure, code = _a.code, _d = _a.autostart, autostart = _d === void 0 ? false : _d, _e = _a.async, async = _e === void 0 ? false : _e, _f = _a.delta, delta = _f === void 0 ? false : _f, meta = _a.meta;\n    if (procedure == null && code != null) {\n        procedure = evaluate(code, context);\n    }\n    if (procedure == null) {\n        throw TypeError('Process must have procedure or code set');\n    }\n    if (delta && !ports.length) {\n        ports.push(PORT_TYPES.HOT);\n    }\n    return {\n        id: id,\n        ports: ports,\n        procedure: procedure,\n        autostart: autostart,\n        async: async,\n        delta: delta,\n        meta: meta\n    };\n}\nexport function createArc(_a) {\n    var id = _a.id, entity = _a.entity, process = _a.process, port = _a.port, meta = _a.meta;\n    if (entity == null) {\n        throw TypeError('no entity specified in arc ' + id);\n    }\n    if (process == null) {\n        throw TypeError('no process specified in arc ' + id);\n    }\n    if (id == null) {\n        if (port == null) {\n            id = process + '->' + entity;\n        }\n        else {\n            id = entity + '->' + process + '::' + port;\n        }\n    }\n    return {\n        id: id,\n        entity: entity,\n        process: process,\n        port: port,\n        meta: meta\n    };\n}\nexport var PORT_TYPES = {\n    COLD: 'COLD',\n    HOT: 'HOT',\n    ACCUMULATOR: 'ACCUMULATOR'\n};\n//# sourceMappingURL=runtime-types.js.map","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n        this.program = gl.createProgram();\n        this.frag = gl.createShader(gl.FRAGMENT_SHADER);\n        this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nimport { Painter } from './painter';\nimport { defaultTextureSettings, defaultShaders } from './asset-lib';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        if (data.asset) {\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n        }\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), data.doubleBuffered ? 2 : 1);\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag, vert: defaultShaders.basicEffect.vert });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' }\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n        this.result.shade.update(defaultShaders.basicEffect);\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) { return new Form(this.gl, id); }\n    createShade(id) { return new Shade(this.gl, id); }\n    createSketch(id) { return new Sketch(id); }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade')\n        });\n    }\n    createStaticLayer(id) { return new StaticLayer(this.gl, id); }\n    createDrawingLayer(id) { return new DrawingLayer(this.gl, id); }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings, uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        const i = layer.targets.length - 1;\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else if (layer.targets.length === 2) {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","import { asyncStreamStart, stream, asyncStream } from 'tvs-flow/dist/lib/utils/entity-reference';\nimport { getContext } from 'tvs-painter/dist/lib/utils/context';\nimport { Painter } from 'tvs-painter/dist/lib/painter';\nimport { unequal } from 'tvs-libs/dist/lib/utils/predicates';\nexport function createBodyCanvas() {\n    var canvas = asyncStreamStart(null, function (send) {\n        var canvas = document.createElement('canvas');\n        document.body.appendChild(canvas);\n        send(canvas);\n        return function () {\n            document.body.removeChild(canvas);\n        };\n    });\n    return { canvas: canvas };\n}\nexport function setupPainter(canvas, windowSizeEntity, painterSettings) {\n    var gl = stream([canvas.HOT], getContext);\n    var painter = asyncStream([gl.HOT], function (send, gl) {\n        var p = new Painter(gl);\n        send(p);\n        return p.destroy;\n    })\n        .accept(unequal);\n    var canvasSize = stream([canvas.HOT, windowSizeEntity.HOT], function (canvas) { return ({\n        width: canvas.clientWidth,\n        height: canvas.clientHeight\n    }); });\n    painter.react([canvasSize.HOT], function (p, _) { return p.resize(); }, 'updateSize');\n    if (painterSettings) {\n        painter.react([painterSettings.HOT], function (p, s) { return p.updateDrawSettings(s); });\n    }\n    return { painter: painter, gl: gl, canvasSize: canvasSize };\n}\nexport function makeShadeEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var shade = painter.createShade();\n        send(shade);\n        return shade.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\nexport function makeFormEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var form = painter.createForm();\n        send(form);\n        return form.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\nexport function makeSketchEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var sketch = painter.createSketch();\n        send(sketch);\n        return sketch.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\nexport function makeFlatSketchEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var sketch = painter.createFlatSketch();\n        send(sketch);\n        return sketch.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\nexport function makeStaticLayerEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var layer = painter.createStaticLayer();\n        send(layer);\n        return layer.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\nexport function makeDrawingLayerEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var layer = painter.createDrawingLayer();\n        send(layer);\n        return layer.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\nexport function makeEffectLayerEntity(painter, data) {\n    var entity = asyncStream([painter.HOT], function (send, painter) {\n        var layer = painter.createEffectLayer();\n        send(layer);\n        return layer.destroy;\n    });\n    if (data) {\n        entity.react([data.HOT], function (entity, data) { return entity.update(data); });\n    }\n    return entity;\n}\n//# sourceMappingURL=flow-painter-utils.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","const _rnds = new Array(16);\nfunction _rng() {\n    for (let i = 0, r; i < 16; i++) {\n        if ((i & 0x03) === 0) {\n            r = Math.random() * 0x100000000;\n            _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n        }\n    }\n    return _rnds;\n}\nconst _byteToHex = [];\nconst _hexToByte = {};\nfor (let i = 0; i < 256; i++) {\n    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    _hexToByte[_byteToHex[i]] = i;\n}\nfunction unparse(buf) {\n    const bth = _byteToHex;\n    let i = 0;\n    return bth[buf[i++]] + bth[buf[i++]] +\n        bth[buf[i++]] + bth[buf[i++]] + '-' +\n        bth[buf[i++]] + bth[buf[i++]] + '-' +\n        bth[buf[i++]] + bth[buf[i++]] + '-' +\n        bth[buf[i++]] + bth[buf[i++]] + '-' +\n        bth[buf[i++]] + bth[buf[i++]] +\n        bth[buf[i++]] + bth[buf[i++]] +\n        bth[buf[i++]] + bth[buf[i++]];\n}\nexport function v4() {\n    const rnds = _rng();\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    return unparse(rnds);\n}\n//# sourceMappingURL=uuid.js.map","import { val } from 'tvs-flow/dist/lib/utils/entity-reference'\nimport { setupPainter } from 'tvs-utils/dist/lib/vr/flow-painter-utils'\nimport { DrawSettings } from 'tvs-painter/dist/lib'\nimport { canvas, windowSize } from './events'\n\n\nexport const settings = val<DrawSettings>({\n\tclearColor: [0, 0, 0, 1]\n}).reset()\n\n\nexport const {painter, gl, canvasSize} =\n\tsetupPainter(canvas, windowSize, settings)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { asyncStreamStart, EntityRef, asyncStream, streamStart } from 'tvs-flow/dist/lib/utils/entity-reference'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { mouse as getMouse, MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize as getWindowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { animateWithTPF } from 'tvs-libs/dist/lib/events/animation'\n\n\nexport const canvas = streamStart(null,\n\t() => document.getElementById('canvas') as HTMLCanvasElement || undefined\n)\n\nexport const tick = asyncStreamStart(null, animateWithTPF)\n\nexport const windowSize = asyncStreamStart(null, getWindowSize)\n\nexport const mouse: EntityRef<MouseState> = asyncStream([canvas.HOT],\n\t(send, canvas) => getMouse({element: canvas, enableRightButton: true}, send)\n)\n\nexport const keys = asyncStreamStart(null, keyboard)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - (iy / gridY);\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new ((vertices.length / 3) > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = (ix + 1) + gridX1 * (iy + 1);\n            const d = (ix + 1) + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            'position': {\n                buffer: vertices\n            },\n            'normal': {\n                buffer: normals\n            },\n            'uv': {\n                buffer: uvs\n            }\n        },\n        elements: {\n            buffer: indices\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length\n    };\n}\n//# sourceMappingURL=plane.js.map","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { createEntity, createProcess, PORT_TYPES, createArc } from './runtime-types';\nimport { deepmerge } from 'tvs-libs/dist/lib/utils/object';\nexport function create() {\n    var entities = {};\n    var processes = {};\n    var arcs = {};\n    var engine = {\n        es: {},\n        ps: {}\n    };\n    var meta = {};\n    var context = null;\n    var debug = false;\n    function getGraph() {\n        return { entities: entities, processes: processes, arcs: arcs, meta: meta };\n    }\n    function getState() {\n        var state = {};\n        for (var eId in engine.es) {\n            state[eId] = engine.es[eId].val;\n        }\n        return state;\n    }\n    function getContext() {\n        return context;\n    }\n    function setContext(ctx) {\n        context = ctx;\n    }\n    function getMeta() {\n        return meta;\n    }\n    function setMeta(newMeta) {\n        if (newMeta != null && typeof newMeta === 'object' && !(Array.isArray(newMeta))) {\n            meta = deepmerge(meta, newMeta);\n        }\n        return meta;\n    }\n    function setDebug(isDebug) {\n        debug = isDebug;\n    }\n    function get(id) {\n        return engine.es[id] && engine.es[id].val;\n    }\n    function set(id, value) {\n        if (setVal(engineE(id), value, true)) {\n            flush();\n        }\n    }\n    function update(id, fn) {\n        set(id, fn(get(id)));\n    }\n    function on(id, cb) {\n        var eE = engineE(id);\n        eE.cb.push(cb);\n    }\n    function off(id, cb) {\n        var eE = engineE(id);\n        if (cb) {\n            eE.cb = eE.cb.filter(function (c) { return c !== cb; });\n        }\n        else {\n            eE.cb = [];\n        }\n    }\n    function addEntity(spec) {\n        var e = createEntity(spec);\n        entities[e.id] = e;\n        var eE = engineE(e.id);\n        if (e.value !== undefined && (e.reset || eE.val === undefined)) {\n            eE.val = e.value;\n            activatedEntities[e.id] = false;\n            processGraph = true;\n        }\n        eE.accept = e.accept;\n        e.meta && setMeta({\n            entities: (_a = {},\n                _a[e.id] = e.meta,\n                _a)\n        });\n        return e;\n        var _a;\n    }\n    function removeEntity(id) {\n        var eE = engineE(id);\n        for (var aId in eE.arcs) {\n            removeArc(aId);\n        }\n        var e = entities[id];\n        if (e && e.meta) {\n            setMeta({\n                entities: (_a = {},\n                    _a[e.id] = undefined,\n                    _a)\n            });\n        }\n        delete engine.es[id];\n        delete entities[id];\n        var _a;\n    }\n    function addProcess(spec) {\n        var p = createProcess(spec, context);\n        var ports = p.ports;\n        var eP = engineP(p.id);\n        processes[p.id] = p;\n        delete eP.acc;\n        eP.values = [];\n        eP.sources = [];\n        eP.async = p.async;\n        eP.delta = p.delta;\n        Object.keys(eP.arcs).forEach(function (aId) {\n            var port = arcs[aId].port;\n            if (port != null &&\n                (!ports[port] || ports[port] === PORT_TYPES.ACCUMULATOR)) {\n                removeArc(aId);\n            }\n        });\n        ports.forEach(function (port, i) {\n            if (port === PORT_TYPES.ACCUMULATOR) {\n                eP.acc = i;\n            }\n        });\n        for (var aId in eP.arcs) {\n            updateArc(arcs[aId]);\n        }\n        p.meta && setMeta({\n            processes: (_a = {},\n                _a[p.id] = p.meta,\n                _a)\n        });\n        return p;\n        var _a;\n    }\n    function removeProcess(id) {\n        var eP = engineP(id);\n        if (eP.stop) {\n            eP.stop();\n            delete eP.stop;\n        }\n        for (var aId in eP.arcs) {\n            removeArc(aId);\n        }\n        delete engine.ps[id];\n        var p = processes[id];\n        if (p && p.meta) {\n            setMeta({\n                processes: (_a = {},\n                    _a[p.id] = undefined,\n                    _a)\n            });\n        }\n        delete processes[id];\n        var _a;\n    }\n    function addArc(spec) {\n        var arc = createArc(spec);\n        arcs[arc.id] = arc;\n        updateArc(arc);\n        var eP = engineP(arc.process), p = processes[arc.process];\n        if (p && p.autostart === true &&\n            Object.keys(eP.arcs).length === Object.keys(p.ports).length + 1) {\n            autostart(eP);\n        }\n        arc.meta && setMeta({\n            arcs: (_a = {},\n                _a[arc.id] = arc.meta,\n                _a)\n        });\n        return arc;\n        var _a;\n    }\n    function removeArc(id) {\n        var arc = arcs[id];\n        if (arc) {\n            var eP = engineP(arc.process), eE = engineE(arc.entity);\n            delete eP.arcs[id];\n            delete eE.arcs[id];\n            if (arc.port != null) {\n                delete eE.effects[arc.process];\n                delete eP.sources[arc.port];\n                delete eP.values[arc.port];\n            }\n            else {\n                if (eP.stop) {\n                    eP.stop();\n                    delete eP.stop;\n                }\n                eP.sink = function () { };\n                delete eP.out;\n                delete eE.reactions[arc.process];\n            }\n            arc.meta && setMeta({\n                arcs: (_a = {},\n                    _a[arc.id] = undefined,\n                    _a)\n            });\n        }\n        delete arcs[id];\n        var _a;\n    }\n    function updateArc(arc) {\n        var pId = arc.process, eId = arc.entity, eP = engineP(pId), eE = engineE(eId), p = processes[pId];\n        eE.arcs[arc.id] = true;\n        if (p) {\n            eP.arcs[arc.id] = true;\n            if (arc.port != null) {\n                delete eE.effects[pId];\n                if (p.ports && p.ports[arc.port] != null) {\n                    eP.sources[arc.port] = eE;\n                    if (p.ports[arc.port] === PORT_TYPES.HOT) {\n                        eE.effects[pId] = eP;\n                    }\n                }\n            }\n            else {\n                eP.out = eE;\n                if (eP.acc != null) {\n                    eP.sources[eP.acc] = eE;\n                    eE.reactions[pId] = eP;\n                }\n                else {\n                    delete eE.reactions[pId];\n                }\n                eP.sink = function (value) {\n                    if (setVal(eE, value, true) && !blockFlush) {\n                        flush();\n                    }\n                };\n            }\n        }\n    }\n    function addGraph(graphSpec) {\n        if (graphSpec.entities) {\n            for (var i in graphSpec.entities) {\n                addEntity(graphSpec.entities[i]);\n            }\n        }\n        if (graphSpec.processes) {\n            for (var i in graphSpec.processes) {\n                addProcess(graphSpec.processes[i]);\n            }\n        }\n        if (graphSpec.arcs) {\n            for (var i in graphSpec.arcs) {\n                addArc(graphSpec.arcs[i]);\n            }\n        }\n        setMeta(graphSpec.meta);\n    }\n    function replaceGraph(graphSpec) {\n        var newEntityIds = {};\n        var newProcessIds = {};\n        if (graphSpec.entities) {\n            for (var i in graphSpec.entities) {\n                var e = graphSpec.entities[i];\n                if (e.id) {\n                    newEntityIds[e.id] = true;\n                }\n            }\n        }\n        if (graphSpec.processes) {\n            for (var i in graphSpec.processes) {\n                var p = graphSpec.processes[i];\n                if (p.id) {\n                    newProcessIds[p.id] = true;\n                }\n            }\n        }\n        Object.keys(entities)\n            .filter(function (id) { return !newEntityIds[id]; })\n            .forEach(removeEntity);\n        Object.keys(processes)\n            .filter(function (id) { return !newProcessIds[id]; })\n            .forEach(removeProcess);\n        addGraph(graphSpec);\n    }\n    var callbacksWaiting = {};\n    var activatedEntities = {};\n    var blockFlush = false;\n    var processGraph = false;\n    function flush() {\n        if (debug) {\n            console.log('flushing graph recursively with', activatedEntities);\n        }\n        var activeEIds = Object.keys(activatedEntities);\n        for (var _i = 0, activeEIds_1 = activeEIds; _i < activeEIds_1.length; _i++) {\n            var eId = activeEIds_1[_i];\n            if (activatedEntities[eId]) {\n                var eE = engine.es[eId];\n                for (var p in eE.reactions) {\n                    execute(eE.reactions[p]);\n                }\n            }\n        }\n        var calledProcesses = {};\n        activatedEntities = {};\n        processGraph = false;\n        blockFlush = true;\n        for (var _a = 0, activeEIds_2 = activeEIds; _a < activeEIds_2.length; _a++) {\n            var eId = activeEIds_2[_a];\n            var eE = engine.es[eId];\n            if (eE.cb.length > 0) {\n                callbacksWaiting[eId] = eE;\n            }\n            for (var p in eE.effects) {\n                if (!calledProcesses[p]) {\n                    execute(eE.effects[p]);\n                    calledProcesses[p] = true;\n                }\n            }\n        }\n        blockFlush = false;\n        if (processGraph) {\n            flush();\n        }\n        else {\n            var cbs = Object.keys(callbacksWaiting);\n            callbacksWaiting = {};\n            for (var i in cbs) {\n                var eE = engine.es[cbs[i]];\n                for (var _b = 0, _c = eE.cb; _b < _c.length; _b++) {\n                    var cb = _c[_b];\n                    cb(eE.val);\n                }\n            }\n            if (debug) {\n                console.log('flush finished');\n            }\n        }\n    }\n    function execute(eP) {\n        var complete = true;\n        for (var portId = 0; portId < eP.sources.length; portId++) {\n            var src = eP.sources[portId];\n            if (src.val === undefined) {\n                complete = false;\n                break;\n            }\n            else {\n                eP.values[portId] = src.val;\n                if (eP.delta) {\n                    if (src.oldVal === undefined) {\n                        complete = false;\n                        break;\n                    }\n                    else {\n                        eP.values[portId + 1] = src.oldVal;\n                    }\n                }\n            }\n        }\n        if (complete) {\n            if (debug) {\n                console.log('running process', eP.id);\n            }\n            if (eP.async) {\n                if (eP.stop) {\n                    eP.stop();\n                }\n                eP.stop = processes[eP.id].procedure.apply(context, [eP.sink].concat(eP.values));\n            }\n            else {\n                var val = processes[eP.id].procedure.apply(context, eP.values);\n                if (eP.out) {\n                    setVal(eP.out, val, eP.acc == null);\n                }\n            }\n        }\n    }\n    function setVal(eE, val, runReactions) {\n        if (val !== undefined && (!eE.accept || eE.accept(val, eE.val))) {\n            eE.oldVal = eE.val;\n            eE.val = val;\n            activatedEntities[eE.id] = runReactions;\n            processGraph = true;\n            return true;\n        }\n        return false;\n    }\n    function autostart(eP) {\n        if (eP.async) {\n            requestAnimationFrame(function () {\n                execute(eP);\n            });\n        }\n        else {\n            execute(eP);\n            if (eP.out) {\n                activatedEntities[eP.out.id] = false;\n            }\n        }\n    }\n    function start(processId) {\n        var eP = engineP(processId);\n        execute(eP);\n        if (!eP.async) {\n            flush();\n        }\n    }\n    function stop(processId) {\n        var eP = engineP(processId);\n        if (eP.stop) {\n            eP.stop();\n            delete eP.stop;\n        }\n    }\n    function engineE(id) {\n        if (!entities[id]) {\n            addEntity({ id: id });\n        }\n        return engine.es[id] || (engine.es[id] = {\n            id: id,\n            val: undefined,\n            reactions: {},\n            effects: {},\n            arcs: {},\n            cb: []\n        });\n    }\n    function engineP(id) {\n        return engine.ps[id] || (engine.ps[id] = {\n            id: id,\n            arcs: {},\n            sink: function () { }\n        });\n    }\n    return {\n        addEntity: addEntity,\n        removeEntity: removeEntity,\n        addProcess: addProcess,\n        removeProcess: removeProcess,\n        addArc: addArc,\n        removeArc: removeArc,\n        addGraph: addGraph,\n        replaceGraph: replaceGraph,\n        getGraph: getGraph,\n        getState: getState,\n        setMeta: setMeta,\n        getMeta: getMeta,\n        getContext: getContext,\n        setContext: setContext,\n        setDebug: setDebug,\n        get: get,\n        set: set,\n        update: update,\n        on: on,\n        off: off,\n        start: start,\n        stop: stop,\n        flush: flush,\n        PORT_TYPES: __assign({}, PORT_TYPES)\n    };\n}\n//# sourceMappingURL=runtime.js.map","export function evaluate(code, context) {\n    var prefix = '(function(){ return ';\n    var postfix = '})';\n    var factory = eval(prefix + code + postfix);\n    return factory.call(context);\n}\n//# sourceMappingURL=code-evaluator.js.map","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.tvsFlowTools=t():e.tvsFlowTools=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=33)}([function(e,t,n){\"use strict\";function r(e,t){return t?t+\".\"+e:e}function i(e){var t,n,i,a=e.value,l=Object(s.a)(),f=[],p={};return p.HOT={entity:p,type:u.PORT_TYPES.HOT},p.COLD={entity:p,type:u.PORT_TYPES.COLD},p.id=function(e,n){return l=r(e,n),t=n,p},p.val=function(e){return a=e,p},p.updateVal=function(e){return a=e(a),p},p.accept=function(e){return n=e,p},p.reset=function(){return i=!0,p},p.getId=function(){return l},e.procedure&&f.push(e),p.react=function(e,t,n){var r=o(e,t,n);r.pidSuffix=d;var i=r.dependencies;return r.dependencies=[{entity:p,type:u.PORT_TYPES.ACCUMULATOR}],i&&i.length&&(r.dependencies=r.dependencies.concat(i)),f.push(r),p},p.getGraph=function(){var e=c.empty();return e.entities[l]=Object(u.createEntity)({id:l,value:a,accept:n,reset:i}),f.forEach(function(n){var i=n.dependencies,o=n.processId?r(n.processId,t):l+n.pidSuffix+(i&&i.length?\":\"+i.reduce(function(e,t){var n=t.entity.getId();return n===l?e:e+\":\"+n},\"\"):\"\"),a=[];i&&i.forEach(function(t,n){if(a[n]=t.type,t.type!==u.PORT_TYPES.ACCUMULATOR){var r=Object(u.createArc)({process:o,entity:t.entity.getId(),port:n});e.arcs[r.id]=r}});var c=Object(u.createArc)({process:o,entity:l});e.arcs[c.id]=c,e.processes[o]=Object(u.createProcess)({id:o,ports:a,procedure:n.procedure,async:n.async,autostart:n.autostart,delta:n.delta})}),e},p}function o(e,t,n){var r={procedure:t};return null!=e&&e.length&&(r.dependencies=e),\"string\"==typeof n?r.processId=n:r.pidSuffix=f,r}function a(e){return e&&\"function\"==typeof e.id&&\"function\"==typeof e.getGraph&&e.HOT&&e.COLD}Object.defineProperty(t,\"__esModule\",{value:!0}),t.val=function(e){return i({value:e})},n.d(t,\"stream\",function(){return p}),n.d(t,\"asyncStream\",function(){return h}),n.d(t,\"streamStart\",function(){return v}),n.d(t,\"asyncStreamStart\",function(){return g}),n.d(t,\"delta\",function(){return y}),t.isEntity=a,t.resolveEntityIds=function(e,t){for(var n in e){var r=e[n];a(r)&&r.id(n,t)}return e},t.getGraphFromAll=function(e){var t=[];for(var n in e){var r=e[n];a(r)&&t.push(r)}return t.reduce(function(e,t){return c.merge(e,t.getGraph())},c.empty())};var c=n(20),u=n(4),s=n(19),l=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},f=\"Stream\",d=\"Reaction\",p=function(e,t,n){return i(o(e,t,n))},h=function(e,t,n){return i(l({},o(e,t,n),{async:!0}))},v=function(e,t,n){return i(l({},o(e,t,n),{autostart:!0}))},g=function(e,t,n){return i(l({},o(e,t,n),{async:!0,autostart:!0}))},y=function(e,t,n){return i(l({},o([e.HOT],t,n),{delta:!0}))}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(44);t.TypeStyle=r.TypeStyle;var i=n(46);t.types=i;var o=n(24);t.extend=o.extend,t.classes=o.classes,t.media=o.media;var a=new r.TypeStyle({autoGenerateTag:!0});t.setStylesTarget=a.setStylesTarget,t.cssRaw=a.cssRaw,t.cssRule=a.cssRule,t.forceRenderStyles=a.forceRenderStyles,t.fontFace=a.fontFace,t.getStyles=a.getStyles,t.keyframes=a.keyframes,t.reinit=a.reinit,t.style=a.style,t.createTypeStyle=function(e){var t=new r.TypeStyle({autoGenerateTag:!1});return e&&t.setStylesTarget(e),t}},function(e,t,n){\"use strict\";var r=n(50);n.d(t,\"d\",function(){return r.a}),n.d(t,\"h\",function(){return r.b});var i=n(51);n.d(t,\"a\",function(){return i.a}),n.d(t,\"b\",function(){return i.b}),n.d(t,\"c\",function(){return i.c}),n.d(t,\"e\",function(){return i.d}),n.d(t,\"f\",function(){return i.e}),n.d(t,\"g\",function(){return i.f}),n.d(t,\"i\",function(){return i.g});var o=n(52);n.d(t,\"j\",function(){return o.a})},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"runtimes\",function(){return f}),n.d(t,\"selectedRuntimeId\",function(){return d}),n.d(t,\"runtime\",function(){return p}),n.d(t,\"meta\",function(){return h}),n.d(t,\"metaGraph\",function(){return v}),n.d(t,\"metaTree\",function(){return g}),n.d(t,\"metaEntity\",function(){return y}),n.d(t,\"metaEntities\",function(){return m}),n.d(t,\"metaControls\",function(){return b}),n.d(t,\"graph\",function(){return _}),n.d(t,\"enhancedGraphData\",function(){return O});var r=n(0),i=n(17),o=n(8),a=n(5),c=n(13),u=n(7),s=n(64),l=(n.n(s),this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}),f=Object(r.val)({}).react([i.action.HOT],function(e,t){if(t.type===a.a.SET_RUNTIME)return l({},e,(n={},n[t.payload.label]=t.payload.runtime,n));var n}),d=Object(r.val)(\"\").react([f.HOT],function(e,t){return e||Object.keys(t)[0]}).react([i.action.HOT],function(e,t){if(t.type===a.a.SELECT_ACTIVE_RUNTIME)return t.payload}),p=Object(r.stream)([f.COLD,d.HOT],function(e,t){return e[t]}).react([i.action.HOT],function(e,t){var n=t.type,r=t.payload;switch(n){case a.a.PROCESS_RUN:return void e.start(r);case a.a.PROCESS_STOP:return void e.stop(r);case a.a.ENTITY_RESET:return void e.set(r,e.getGraph().entities[r].value);case a.a.ENTITY_INSPECT:return void console.log(r,e.get(r))}}),h=Object(r.stream)([p.HOT],function(e){return e.getMeta()}).react([i.action.HOT,p.COLD],function(e,t,n){var r=t.type,i=t.payload,o=n,u=e.ui,s=u&&u.graph,l=u&&u.tree,f=u&&u.entity,d=s&&s.viewBox,p=u&&u.activeWindow;switch(r){case a.b.MAIN.SET_ACTIVE_WINDOW:return o.setMeta({ui:{activeWindow:i}});case a.b.MAIN.UPDATE_VISIBILITY:var h=u&&u[i],v=h&&h.window&&h.window.visible;return o.setMeta({ui:(j={activeWindow:i},j[i]={window:{visible:!v}},j)});case a.b.MAIN.CLOSE_WINDOW:return o.setMeta({ui:(x={},x[i]={window:{visible:!1}},x)});case a.b.MAIN.MOVE_WINDOW:if(p){var g=u&&u[p];if(g&&g.position){var y=g.position.top-i.y,m=g.position.left-i.x;return o.setMeta(Object(c.d)({ui:{controls:{position:{top:y,left:m}}}}))}if(g){var b=g.window&&g.window.area;if(b){var _=b.top-i.y,m=b.left-i.x;return o.setMeta(Object(c.d)({ui:(I={},I[p]={window:{area:{top:_,left:m}}},I)}))}}}break;case a.b.MAIN.RESIZE_WINDOW:var O=p&&u&&u[p]&&u[p].window&&u[p].window.area;if(O)return o.setMeta(Object(c.d)({ui:(C={},C[p]={window:{area:{width:O.width-i.x,height:O.height-i.y}}},C)}));break;case a.b.TREE.TOGGLE_LEVEL:var w=l&&l.fold||{};return o.setMeta({ui:{tree:{fold:(M={},M[i]=!w[i],M)}}});case a.b.ENTITY.SET_ACTIVE_ENTITY:return o.setMeta({ui:{entity:{activeEntityId:i,activeProcessId:\"\",watchingEntity:!0}}});case a.b.ENTITY.SET_ACTIVE_PROCESS:return o.setMeta({ui:{entity:{activeProcessId:i,activeEntityId:\"\",watchingEntity:!1}}});case a.b.ENTITY.RESET_ACTIVE_NODE:return o.setMeta({ui:{entity:{activeEntityId:\"\",activeProcessId:\"\",watchingEntity:!1}}});case a.b.ENTITY.SAVE_VALUE:var T=f&&f.activeEntityId;return T&&o.set(T,i),o.setMeta({ui:{entity:{watchingEntity:!0}}});case a.b.ENTITY.WATCH_ACTIVE_ENTITY:return o.setMeta({ui:{entity:{watchingEntity:i}}});case a.b.ENTITY.SET_VIEW_MODE:return o.setMeta({ui:{entity:{viewMode:i}}});case a.b.ENTITY.SAVE_META:return o.setMeta({entities:(N={},N[i.id]=i.value,N)});case a.b.GRAPH.MOVE_VIEWPORT:return o.setMeta({ui:{graph:{viewBox:{offsetX:(d&&d.offsetX||0)+i.x,offsetY:(d&&d.offsetY||0)+i.y}}}});case a.b.GRAPH.UPDATE_SCALE:return o.setMeta({ui:{graph:{viewBox:{scale:i}}}});case a.b.GRAPH.UPDATE_SIZE:if(i.width&&i.height)return o.setMeta({ui:{graph:{viewBox:{width:i.width,height:i.height}}}});return;case a.b.GRAPH.MOVE_ENTITY_POSITION:if(f&&f.activeEntityId){var E=e.entities&&e.entities[f.activeEntityId],k=E&&E.ui&&E.ui.graph&&E.ui.graph.position||i.start,S=s&&s.viewBox&&s.viewBox.scale||1;if(k)return o.setMeta({entities:(A={},A[f.activeEntityId]={ui:{graph:{position:{x:k.x-i.delta.x*S,y:k.y-i.delta.y*S}}}},A)})}}var j,x,I,C,M,N,A}).react([p.COLD,i.windowSize.HOT],function(e,t,n){return t.setMeta(Object(c.d)(e))}),v=Object(r.stream)([h.HOT],function(e){return e&&e.ui&&e.ui.graph}).accept(o.d),g=Object(r.stream)([h.HOT],function(e){return e&&e.ui&&e.ui.tree}).accept(o.d),y=Object(r.stream)([h.HOT],function(e){return e&&e.ui&&e.ui.entity}).accept(o.d),m=Object(r.stream)([h.HOT],function(e){return e&&e.entities}).accept(Object(o.c)(s)),b=Object(r.stream)([h.HOT],function(e){return e&&e.ui&&e.ui.controls}).accept(o.d),_=Object(r.stream)([p.HOT],function(e){return e.getGraph()}),O=Object(r.stream)([_.HOT],u.processGraph)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createEntity=function(e){var t=e.id,n=void 0===t?Object(r.a)():t,i=e.value,o=e.json,a=e.accept,c=e.reset,u=e.meta;return void 0===i&&o&&(i=JSON.parse(o)),{id:n,value:i,accept:a,reset:c,meta:u}},t.createProcess=function(e,t){var n=e.id,a=void 0===n?Object(r.a)():n,c=e.ports,u=void 0===c?[]:c,s=e.procedure,l=e.code,f=e.autostart,d=void 0!==f&&f,p=e.async,h=void 0!==p&&p,v=e.delta,g=void 0!==v&&v,y=e.meta;if(null==s&&null!=l&&(s=Object(i.a)(l,t)),null==s)throw TypeError(\"Process must have procedure or code set\");return g&&!u.length&&u.push(o.HOT),{id:a,ports:u,procedure:s,autostart:d,async:h,delta:g,meta:y}},t.createArc=function(e){var t=e.id,n=e.entity,r=e.process,i=e.port,o=e.meta;if(null==n)throw TypeError(\"no entity specified in arc \"+t);if(null==r)throw TypeError(\"no process specified in arc \"+t);return null==t&&(t=null==i?r+\"->\"+n:n+\"->\"+r+\"::\"+i),{id:t,entity:n,process:r,port:i,meta:o}},n.d(t,\"PORT_TYPES\",function(){return o});var r=n(19),i=n(37),o={COLD:\"COLD\",HOT:\"HOT\",ACCUMULATOR:\"ACCUMULATOR\"}},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return r}),n.d(t,\"b\",function(){return i});var r={ENTITY_INSPECT:\"flow:entity_inspect\",ENTITY_RESET:\"flow:entity_reset\",PROCESS_RUN:\"flow:process_run\",PROCESS_STOP:\"flow:process_stop\",SET_RUNTIME:\"flow:set_runtime\",SELECT_ACTIVE_RUNTIME:\"flow:select_active_runtime\"},i={ENTITY:{WATCH_ACTIVE_ENTITY:\"gui:entity:watch_active_entity\",SAVE_VALUE:\"gui:entity:save_value\",SAVE_META:\"gui:entity:save_meta\",SET_ACTIVE_PROCESS:\"gui:entity:open_process\",SET_ACTIVE_ENTITY:\"gui:entity:open_entity\",RESET_ACTIVE_NODE:\"gui:entity:reset_entity\",SET_VIEW_MODE:\"gui:entity:set_view_mode\"},GRAPH:{UPDATE_SCALE:\"gui:graph:update_scale\",UPDATE_SIZE:\"gui:graph:update_size\",MOVE_VIEWPORT:\"gui:graph:move_viewport\",MOVE_ENTITY_POSITION:\"gui:graph:set_entity_position\"},TREE:{TOGGLE_LEVEL:\"gui:tree:toggle_level\"},MAIN:{SET_ACTIVE_WINDOW:\"gui:main:set_active_window\",UPDATE_VISIBILITY:\"gui:main:update_visibility\",CLOSE_WINDOW:\"gui:main:close_window\",MOVE_WINDOW:\"gui:main:set_window_position\",RESIZE_WINDOW:\"gui:main:resize_window\"}}},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return o}),n.d(t,\"d\",function(){return a}),n.d(t,\"e\",function(){return c}),n.d(t,\"c\",function(){return u}),n.d(t,\"b\",function(){return s}),n.d(t,\"g\",function(){return l}),n.d(t,\"f\",function(){return f});var r=n(1),i=(n.n(r),n(47)),o=\"white\",a=16,c=\"cyan\",u={borderRadius:4,backgroundColor:Object(i.a)(40,40,40,.75).toString(),boxShadow:\"0 10px 15px rgba(0,0,0,0.3)\",borderTop:\"1px solid rgba(255, 255, 255, 0.4)\",borderBottom:\"1px solid rgba(0, 0, 0, 0.6)\"},s={borderRadius:4,boxShadow:\"0 4px 8px rgba(0,0,0,0.3) inset\",borderBottom:\"1px solid rgba(255, 255, 255, 0.4)\",borderTop:\"1px solid rgba(0, 0, 0, 0.6)\"},l={padding:0,listStyle:\"none\"},f=Object(r.style)({position:\"fixed\",top:0,left:0,width:0,height:0,zIndex:1e3,fontSize:a,fontFamily:\"sans-serif\",lineHeight:1.5,color:o,userSelect:\"none\",$nest:{\"& *\":{userSelect:\"none\",MozUserSelect:\"none\"}}})},function(e,t,n){\"use strict\";function r(e){var t=e.split(\".\");return{label:t.pop(),group:t.join(\".\")}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.createEntityTree=function(e,t){void 0===t&&(t=\".\");var n={};return Object.keys(e).sort().forEach(function(r){var i=e[r],o=i.id.split(t),a=n,c=o.slice(),u=[];o.forEach(function(){var e=c.shift();c.length?(u.push(e),a=a[e]=a[e]||{__path__:u.join(t)}):a[e]={__entity__:i}})}),n},t.processGraph=function(e){var t={},n={},a=function(n){var i=e.entities[n],a=r(n);t[n]=o({},i,{name:a.label,namespace:a.group,processes:Object.values(e.arcs).filter(function(e){return e.entity===i.id&&null==e.port}).map(function(e){return e.process})})};for(var c in e.entities)a(c);var u=function(t){var a=e.processes[t],c=r(t.split(\"::\").shift()),u=a.ports.indexOf(i.PORT_TYPES.ACCUMULATOR),s=[],l=Object.values(e.arcs).find(function(e){return e.process===t&&null==e.port}),f=l&&l.entity;u>=0&&f&&(s[u]={eid:f,type:i.PORT_TYPES.ACCUMULATOR}),n[t]=o({},a,{name:c.label,namespace:c.group,reaction:u>=0,output:f,inputs:Object.values(e.arcs).filter(function(e){return e.process===t&&null!=e.port}).reduce(function(e,t){return e[t.port]={eid:t.entity,type:a.ports[t.port]},e},s)})};for(var s in e.processes)u(s);return{entities:t,processes:n}},t.printEntityName=function(e){return e.name?e.namespace+\" / \"+e.name:e.id||\"No entity selected\"};var i=n(4),o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}},function(e,t,n){\"use strict\";function r(e,t){if(e===t)return!0;if(!t)return!1;if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}n.d(t,\"c\",function(){return i}),n.d(t,\"d\",function(){return o}),t.a=r,t.b=function(e,t){if(e===t)return!0;if(!t)return!1;var n=Object.keys(e);if(!r(n,Object.keys(t)))return!1;for(var i=0,o=n;i<o.length;i++){var a=o[i];if(e[a]!==t[a])return!1}return!0};var i=function(e){return function(t,n){return!e(t,n)}},o=function(e,t){return e!==t}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"activeEntityId\",function(){return c}),n.d(t,\"activeProcessId\",function(){return u}),n.d(t,\"activeEntity\",function(){return s}),n.d(t,\"activeProcess\",function(){return l}),n.d(t,\"activeNode\",function(){return f}),n.d(t,\"watchingEntity\",function(){return d}),n.d(t,\"activeValue\",function(){return p});var r=n(0),i=n(8),o=n(3),a=n(12),c=Object(r.stream)([o.metaEntity.HOT],function(e){return e.activeEntityId}).accept(i.d),u=Object(r.stream)([o.metaEntity.HOT],function(e){return e.activeProcessId}).accept(i.d),s=Object(r.stream)([c.HOT,o.enhancedGraphData.COLD],function(e,t){return t.entities[e]||{id:e}}),l=Object(r.stream)([u.HOT,o.enhancedGraphData.COLD],function(e,t){return t.processes[e]||{id:e}}),f=Object(r.val)({id:\"\"}).react([l.HOT,s.HOT],function(e,t,n){return t.id?t:n}),d=Object(r.stream)([o.metaEntity.HOT],function(e){return e.watchingEntity}).accept(i.d),p=Object(r.asyncStream)([o.runtime.COLD,c.HOT,a.visibility.HOT,d.HOT],function(e,t,n,r,i){if(n){var o=t.get(n);if(e(void 0===o?null:o),r.entity&&i)return t.on(n,e),function(){return t.off(n,e)}}else e(null)})},function(e,t,n){\"use strict\";(function(e){function n(e){return e.replace(p,y).replace(h,\"-ms-\")}function r(e){for(var t=5381,n=e.length;n--;)t=33*t^e.charCodeAt(n);return(t>>>0).toString(36)}function i(e,t){return\"number\"!=typeof t||0===t||b[e]?e+\":\"+t:e+\":\"+t+\"px\"}function o(e){return e.sort(function(e,t){return e[0]>t[0]?1:-1})}function a(e,r){for(var a=[],c=[],u=!1,s=0,l=Object.keys(e);s<l.length;s++){var f=l[s],d=e[f];null!==d&&void 0!==d&&(f===t.IS_UNIQUE?u=!0:\"object\"!=typeof d||Array.isArray(d)?a.push([n(f.trim()),d]):c.push([f.trim(),d]))}return{styleString:function(e){return e.map(function(e){var t=e[0],n=e[1];return Array.isArray(n)?n.map(function(e){return i(t,e)}).join(\";\"):i(t,n)}).join(\";\")}(o(a)),nestedStyles:r?c:o(c),isUnique:u}}function c(e,t){return e.indexOf(\"&\")>-1?e.replace(v,t):t+\" \"+e}function u(e,t,n,r,i){var o=a(n,!!t),s=o.styleString,l=o.nestedStyles,f=o.isUnique,p=s;if(64===t.charCodeAt(0)){var h=e.add(new I(t,i?void 0:s,e.hash));if(s&&i){b=h.add(new x(s,h.hash,f?\"u\"+(++d).toString(36):void 0));r.push([i,b])}for(var v=0,g=l;v<g.length;v++){var y=g[v];p+=(T=y[0])+u(h,T,E=y[1],r,i)}}else{var m=i?c(t,i):t;if(s){var b=e.add(new x(s,e.hash,f?\"u\"+(++d).toString(36):void 0));r.push([m,b])}for(var _=0,O=l;_<O.length;_++){var w=O[_],T=w[0],E=w[1];p+=T+u(e,T,E,r,m)}}return p}function s(e,n,r,i,o){for(var a=new S(e.hash),s=[],l=u(a,n,r,s),f=\"f\"+a.hash(l),d=o?o+\"_\"+f:f,p=0,h=s;p<h.length;p++){var v=h[p],g=v[0],y=v[1],m=i?c(g,\".\"+t.escape(d)):g;y.add(new j(m,y.hash,void 0,l))}return{cache:a,pid:l,id:d}}function l(e){for(var t=\"\",n=0;n<e.length;n++)t+=e[n];return t}var f=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,\"__esModule\",{value:!0});var d=0;t.IS_UNIQUE=\"__DO_NOT_DEDUPE_STYLE__\";for(var p=/[A-Z]/g,h=/^ms-/,v=/&/g,g=/[ !#$%&()*+,./;<=>?@[\\]^`{|}~\"'\\\\]/g,y=function(e){return\"-\"+e.toLowerCase()},m=[\"animation-iteration-count\",\"box-flex\",\"box-flex-group\",\"column-count\",\"counter-increment\",\"counter-reset\",\"flex\",\"flex-grow\",\"flex-positive\",\"flex-shrink\",\"flex-negative\",\"font-weight\",\"line-clamp\",\"line-height\",\"opacity\",\"order\",\"orphans\",\"tab-size\",\"widows\",\"z-index\",\"zoom\",\"fill-opacity\",\"stroke-dashoffset\",\"stroke-opacity\",\"stroke-width\"],b=Object.create(null),_=0,O=[\"-webkit-\",\"-ms-\",\"-moz-\",\"-o-\",\"\"];_<O.length;_++)for(var w=O[_],T=0,E=m;T<E.length;T++){b[w+E[T]]=!0}t.escape=function(e){return e.replace(g,\"\\\\$&\")},t.hyphenate=n,t.stringHash=r;var k={add:function(){},change:function(){},remove:function(){}},S=function(){function e(e,t){void 0===e&&(e=r),void 0===t&&(t=k),this.hash=e,this.changes=t,this.sheet=[],this.changeId=0,this._keys=[],this._children=Object.create(null),this._counters=Object.create(null)}return e.prototype.add=function(t){var n=this._counters[t.id]||0,r=this._children[t.id]||t.clone();if(this._counters[t.id]=n+1,0===n)this._children[r.id]=r,this._keys.push(r.id),this.sheet.push(r.getStyles()),this.changeId++,this.changes.add(r,this._keys.length-1);else{if(r.getIdentifier()!==t.getIdentifier())throw new TypeError(\"Hash collision: \"+t.getStyles()+\" === \"+r.getStyles());var i=this._keys.indexOf(t.id),o=this._keys.length-1,a=this.changeId;if(i!==o&&(this._keys.splice(i,1),this._keys.push(t.id),this.changeId++),r instanceof e&&t instanceof e){var c=r.changeId;r.merge(t),r.changeId!==c&&this.changeId++}this.changeId!==a&&(i===o?this.sheet.splice(i,1,r.getStyles()):(this.sheet.splice(i,1),this.sheet.splice(o,0,r.getStyles())),this.changes.change(r,i,o))}return r},e.prototype.remove=function(t){var n=this._counters[t.id];if(n>0){this._counters[t.id]=n-1;var r=this._children[t.id],i=this._keys.indexOf(r.id);if(1===n)delete this._counters[t.id],delete this._children[t.id],this._keys.splice(i,1),this.sheet.splice(i,1),this.changeId++,this.changes.remove(r,i);else if(r instanceof e&&t instanceof e){var o=r.changeId;r.unmerge(t),r.changeId!==o&&(this.sheet.splice(i,1,r.getStyles()),this.changeId++,this.changes.change(r,i,i))}}},e.prototype.merge=function(e){for(var t=0,n=e._keys;t<n.length;t++){var r=n[t];this.add(e._children[r])}return this},e.prototype.unmerge=function(e){for(var t=0,n=e._keys;t<n.length;t++){var r=n[t];this.remove(e._children[r])}return this},e.prototype.clone=function(){return new e(this.hash).merge(this)},e}();t.Cache=S;var j=function(){function e(e,t,n,r){void 0===n&&(n=\"s\"+t(e)),void 0===r&&(r=\"\"),this.selector=e,this.hash=t,this.id=n,this.pid=r}return e.prototype.getStyles=function(){return this.selector},e.prototype.getIdentifier=function(){return this.pid+\".\"+this.selector},e.prototype.clone=function(){return new e(this.selector,this.hash,this.id,this.pid)},e}();t.Selector=j;var x=function(e){function t(t,n,r){void 0===r&&(r=\"c\"+n(t));var i=e.call(this,n)||this;return i.style=t,i.hash=n,i.id=r,i}return f(t,e),t.prototype.getStyles=function(){return this.sheet.join(\",\")+\"{\"+this.style+\"}\"},t.prototype.getIdentifier=function(){return this.style},t.prototype.clone=function(){return new t(this.style,this.hash,this.id).merge(this)},t}(S);t.Style=x;var I=function(e){function t(t,n,r,i,o){void 0===n&&(n=\"\"),void 0===i&&(i=\"a\"+r(t+\".\"+n)),void 0===o&&(o=\"\");var a=e.call(this,r)||this;return a.rule=t,a.style=n,a.hash=r,a.id=i,a.pid=o,a}return f(t,e),t.prototype.getStyles=function(){return this.rule+\"{\"+this.style+l(this.sheet)+\"}\"},t.prototype.getIdentifier=function(){return this.pid+\".\"+this.rule+\".\"+this.style},t.prototype.clone=function(){return new t(this.rule,this.style,this.hash,this.id,this.pid).merge(this)},t}(S);t.Rule=I;var C=function(n){function i(t,i,o,a){void 0===t&&(t=r),void 0===i&&(i=void 0!==e&&!1),void 0===o&&(o=\"f\"+(++d).toString(36));var c=n.call(this,t,a)||this;return c.hash=t,c.debug=i,c.id=o,c}return f(i,n),i.prototype.registerStyle=function(e,t){var n=s(this,\"&\",e,!0,this.debug?t:void 0),r=n.cache,i=n.id;return this.merge(r),i},i.prototype.registerKeyframes=function(e,t){return this.registerHashRule(\"@keyframes\",e,t)},i.prototype.registerHashRule=function(e,n,r){var i=s(this,\"\",n,!1,this.debug?r:void 0),o=i.cache,a=i.pid,c=i.id,u=new I(e+\" \"+t.escape(c),void 0,this.hash,void 0,a);return this.add(u.merge(o)),c},i.prototype.registerRule=function(e,t){this.merge(s(this,e,t,!1).cache)},i.prototype.registerCss=function(e){this.merge(s(this,\"\",e,!1).cache)},i.prototype.getStyles=function(){return l(this.sheet)},i.prototype.getIdentifier=function(){return this.id},i.prototype.clone=function(){return new i(this.hash,this.debug,this.id,this.changes).merge(this)},i}(S);t.FreeStyle=C,t.create=function(e,t,n){return new C(e,t,void 0,n)}}).call(t,n(42))},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return a}),n.d(t,\"c\",function(){return c}),n.d(t,\"b\",function(){return u});var r=n(1),i=(n.n(r),n(6)),o=(Object(r.style)({margin:\"0 4px\",verticalAlign:\"top\",display:\"inline-block\",$nest:{\"& input\":{margin:5,verticalAlign:\"middle\"}}}),{margin:\"0 4px\",padding:\"4px 10px 3px\",border:0,color:i.a,fontSize:\"1.0em\",verticalAlign:\"middle\",cursor:\"pointer\",outline:\"none\",$nest:{\"& > svg\":{verticalAlign:\"middle\"},\"&.selected\":{backgroundColor:\"transparent\"},\"&.tiny\":{margin:0,fontSize:\"0.9em\",padding:\"2px 5px\",boxShadow:\"0 2px 4px rgba(0,0,0,0.3)\"}}}),a=Object(r.style)(i.c,o),c=Object(r.style)(i.c,o,{padding:\"0 4px\"}),u=Object(r.style)({display:\"inline-block\",margin:\"0 2px\",padding:0,border:0,background:\"transparent\",boxShadow:\"none\",fontSize:\"0.9em\"})},function(e,t,n){\"use strict\";function r(e,t){e.react([d.COLD,p.HOT],function(e,n,r){if(n===t)return c({},e,{zIndex:r})})}Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"metaTreeWindow\",function(){return u}),n.d(t,\"metaGraphWindow\",function(){return s}),n.d(t,\"metaEntityWindow\",function(){return l}),n.d(t,\"visibility\",function(){return f}),n.d(t,\"activeWindow\",function(){return d}),n.d(t,\"zIndex\",function(){return p}),n.d(t,\"controlsPosition\",function(){return h}),n.d(t,\"treeWindow\",function(){return v}),n.d(t,\"graphWindow\",function(){return g}),n.d(t,\"entityWindow\",function(){return y});var i=n(0),o=n(8),a=n(3),c=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},u=Object(i.stream)([a.metaTree.HOT],function(e){return e.window}).accept(o.d),s=Object(i.stream)([a.metaGraph.HOT],function(e){return e.window}).accept(o.d),l=Object(i.stream)([a.metaEntity.HOT],function(e){return e.window}).accept(o.d),f=Object(i.val)({tree:!1,graph:!1,entity:!1}).react([s.HOT],function(e,t){return c({},e,{graph:!!t.visible})}).react([l.HOT],function(e,t){return c({},e,{entity:!!t.visible})}).react([u.HOT],function(e,t){return c({},e,{tree:!!t.visible})}).accept(function(e,t){return t&&e&&(t.tree!==e.tree||t.entity!==e.entity||t.graph!==e.graph)}),d=Object(i.stream)([a.meta.HOT],function(e){return e.ui&&e.ui.activeWindow}).accept(o.d),p=Object(i.val)(0).react([d.HOT],function(e){return e+1}),h=Object(i.stream)([a.metaControls.HOT],function(e){return e.position}).accept(o.d),v=Object(i.stream)([u.HOT],function(e){return e.area}).accept(o.d),g=Object(i.stream)([s.HOT],function(e){return e.area}).accept(o.d),y=Object(i.stream)([l.HOT],function(e){return e.area}).accept(o.d);r(h,\"controls\"),r(v,\"tree\"),r(g,\"graph\"),r(y,\"entity\")},function(e,t,n){\"use strict\";function r(e,t){for(var n in e)\"function\"==typeof t[n]?e[n]=t[n](e[n]):e[n]&&\"object\"==typeof e[n]&&t[n]&&\"object\"==typeof t[n]&&r(e[n],t[n]);return e}n.d(t,\"c\",function(){return a}),n.d(t,\"a\",function(){return i}),n.d(t,\"b\",function(){return c}),t.d=function(e){return r(e,d)};var i,o=n(63),a={width:0,height:0,offsetX:0,offsetY:0,scale:1};!function(e){e.DETAILS=\"details\",e.VALUE=\"value\"}(i||(i={}));var c={ui:{entity:{activeEntityId:\"\",activeProcessId:\"\",watchingEntity:!1,window:{visible:!1,area:{top:50,left:400,width:400,height:500}}},graph:{viewBox:{width:600,height:600,offsetX:0,offsetY:0,scale:1},window:{visible:!1,area:{top:200,left:100,width:600,height:600}}},tree:{window:{visible:!1,area:{top:100,left:0,width:300,height:400}}},controls:{position:{top:0,left:0}}},entities:{}},u=function(e){return Object(o.a)(0,window.innerHeight-20,e)},s=function(e){return Object(o.a)(0,window.innerWidth-20,e)},l=function(e){return Math.min(window.innerWidth-20,e)},f=function(e){return Math.min(window.innerHeight-20,e)},d={ui:{entity:{window:{area:{top:u,left:s,width:l,height:f}}},graph:{window:{area:{top:u,left:s,width:l,height:f}}},tree:{window:{area:{top:u,left:s,width:l,height:f}}},controls:{position:{top:u,left:s}}}}},function(e,t,n){\"use strict\";t.a=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 24 24\"},[\"title\",\"close\"],[\"path\",{d:\"M18.984 6.422l-5.578 5.578 5.578 5.578-1.406 1.406-5.578-5.578-5.578 5.578-1.406-1.406 5.578-5.578-5.578-5.578 1.406-1.406 5.578 5.578 5.578-5.578z\"}]]},t.d=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 24 24\"},[\"title\",\"graph\"],[\"path\",{d:\"M18 16.078c1.594 0 2.906 1.313 2.906 2.906s-1.313 2.953-2.906 2.953-2.906-1.359-2.906-2.953c0-0.234 0-0.469 0.047-0.656l-7.078-4.125c-0.563 0.516-1.266 0.797-2.063 0.797-1.641 0-3-1.359-3-3s1.359-3 3-3c0.797 0 1.5 0.281 2.063 0.797l7.031-4.078c-0.047-0.234-0.094-0.469-0.094-0.703 0-1.641 1.359-3 3-3s3 1.359 3 3-1.359 3-3 3c-0.797 0-1.5-0.328-2.063-0.844l-7.031 4.125c0.047 0.234 0.094 0.469 0.094 0.703s-0.047 0.469-0.094 0.703l7.125 4.125c0.516-0.469 1.219-0.75 1.969-0.75z\"}]]},t.e=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 24 24\"},[\"title\",\"list\"],[\"path\",{d:\"M9 5.016h12v3.984h-12v-3.984zM9 18.984v-3.984h12v3.984h-12zM9 14.016v-4.031h12v4.031h-12zM3.984 9v-3.984h4.031v3.984h-4.031zM3.984 18.984v-3.984h4.031v3.984h-4.031zM3.984 14.016v-4.031h4.031v4.031h-4.031z\"}]]},t.c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 24 24\"},[\"title\",\"entity\"],[\"path\",{d:\"M16.641 1.688l5.672 5.672-5.672 5.625h4.359v8.016h-8.016v-8.016h3.656l-5.625-5.625v3.656h-8.016v-8.016h8.016v4.359zM3 21v-8.016h8.016v8.016h-8.016z\"}]]},t.g=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"play\"],[\"path\",{d:\"M6 4l20 12-20 12z\"}]]},t.j=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"stop\"],[\"path\",{d:\"M4 4h24v24h-24z\"}]]},t.k=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"stopMarked\"],[\"path\",{d:\"M4 4h24v24h-24z\"}],[\"circle\",{cx:\"16\",cy:\"16\",r:\"6\",fill:\"#666\"}]]},t.h=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"reset\"],[\"path\",{d:\"M32 12h-12l4.485-4.485c-2.267-2.266-5.28-3.515-8.485-3.515s-6.219 1.248-8.485 3.515c-2.266 2.267-3.515 5.28-3.515 8.485s1.248 6.219 3.515 8.485c2.267 2.266 5.28 3.515 8.485 3.515s6.219-1.248 8.485-3.515c0.189-0.189 0.371-0.384 0.546-0.583l3.010 2.634c-2.933 3.349-7.239 5.464-12.041 5.464-8.837 0-16-7.163-16-16s7.163-16 16-16c4.418 0 8.418 1.791 11.313 4.687l4.687-4.687v12z\"}]]},t.i=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"show\"],[\"path\",{d:\"M31.008 27.231l-7.58-6.447c-0.784-0.705-1.622-1.029-2.299-0.998 1.789-2.096 2.87-4.815 2.87-7.787 0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12c2.972 0 5.691-1.081 7.787-2.87-0.031 0.677 0.293 1.515 0.998 2.299l6.447 7.58c1.104 1.226 2.907 1.33 4.007 0.23s0.997-2.903-0.23-4.007zM12 20c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8-3.582 8-8 8z\"}]]},t.b=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"copy\"],[\"path\",{d:\"M28.681 11.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-11.5c-1.379 0-2.5 1.122-2.5 2.5v23c0 1.378 1.121 2.5 2.5 2.5h19c1.378 0 2.5-1.122 2.5-2.5v-15.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 9.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268v0zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-19c-0.271 0-0.5-0.229-0.5-0.5v-23c0-0.271 0.229-0.5 0.5-0.5 0 0 11.499-0 11.5 0v7c0 0.552 0.448 1 1 1h7v15.5z\"}],[\"path\",{d:\"M18.841 1.319c-1.612-1.182-2.393-1.319-2.841-1.319h-11.5c-1.378 0-2.5 1.121-2.5 2.5v23c0 1.207 0.86 2.217 2 2.45v-25.45c0-0.271 0.229-0.5 0.5-0.5h15.215c-0.301-0.248-0.595-0.477-0.873-0.681z\"}]]},t.f=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return[\"svg\",{class:r.a.apply(void 0,[o].concat(e)),viewBox:\"0 0 32 32\"},[\"title\",\"more\"],[\"path\",{d:\"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13z\"}],[\"path\",{d:\"M11.086 22.086l2.829 2.829 8.914-8.914-8.914-8.914-2.828 2.828 6.086 6.086z\"}]]};var r=n(22),i=n(6),o=Object(r.b)({display:\"inline-block\",width:\"1.1em\",height:\"1.1em\",margin:4,strokeWidth:0,stroke:\"currentColor\",fill:\"currentColor\",verticalAlign:\"bottom\",$nest:{\"&.selected\":{fill:i.e}}})},function(e,t,n){\"use strict\";t.a=function(e){var t=e.title,n=e.onclick,o=e.icon,a=e.key,c=e.class,u=[\"button\",{class:Object(r.classes)(i.c,c),onmouseup:n,title:t},o];return a&&(u[1].key=a),u};var r=n(1),i=(n.n(r),n(11))},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return a}),n.d(t,\"e\",function(){return c}),n.d(t,\"d\",function(){return u}),n.d(t,\"c\",function(){return s}),n.d(t,\"b\",function(){return l});var r=n(1),i=(n.n(r),n(6)),o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},a=Object(r.style)(i.c,{display:\"inline-block\",position:\"relative\",padding:2,whiteSpace:\"nowrap\",$nest:{\"& h1, & h2\":{display:\"inline-block\",margin:\"0 8px\",fontSize:i.d,fontWeight:\"normal\",verticalAlign:\"middle\"},\"& ul\":o({},i.g,{display:\"inline-block\",margin:0,fontSize:i.d,fontWeight:\"normal\"}),\"& li\":{display:\"inline-block\"},\"& nav\":{display:\"inline-block\"}}}),c=Object(r.style)(i.c,{position:\"absolute\",display:\"flex\",flexDirection:\"column\",padding:5,paddingTop:1,alignItems:\"stretch\",alignContent:\"stretch\",$nest:{\"&>.resize\":{position:\"absolute\",width:20,height:20,bottom:0,right:0,borderRadius:4,cursor:\"nwse-resize\",background:\"linear-gradient(135deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 50%, rgba(0,0,0,0.8) 100%)\"},\"&>header\":{display:\"flex\",alignItems:\"center\",minHeight:26},\"&>header input\":{verticalAlign:\"middle\"},\"&>header .gap\":{flexGrow:1}}}),u=Object(r.style)(i.b,{overflow:\"auto\",position:\"relative\",flexGrow:1,padding:5,$nest:{\"& h3\":{fontSize:\"1em\"},\"& a\":{$nest:{\"&:hover, &:focus\":{cursor:\"pointer\",textDecoration:\"underline\"}}},\"& td, & th\":{paddingRight:\"1em\",paddingBottom:\"0.5em\",verticalAlign:\"top\",textAlign:\"left\"},\"& p, & div\":{marginTop:0,marginBottom:\"0.5em\"}}}),s=Object(r.style)(i.g,{margin:0,$nest:{\"& ul\":i.g,\"& li\":{paddingLeft:\"1.5em\",cursor:\"pointer\"},\"&>li\":{paddingLeft:0},\"& .entity-controls\":{display:\"none\"},\"& .entity-item:hover>.entity-controls\":{display:\"inline\"},\"& .entity-item.selected\":{color:i.e}}}),l=Object(r.style)({display:\"flex\",flexDirection:\"column\",flexGrow:1,overflow:\"auto\",$nest:{\"& pre\":{margin:0,MozUserSelect:\"text\",userSelect:\"text\"}}})},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"windowSize\",function(){return o}),n.d(t,\"element\",function(){return a}),n.d(t,\"action\",function(){return c});var r=n(0),i=n(62),o=Object(r.asyncStreamStart)(null,i.a),a=Object(r.val)(),c=Object(r.val)()},function(e,t,n){e.exports=n(68).default,e.exports.default=e.exports},function(e,t,n){\"use strict\";t.a=function(){var e=function(){for(var e=0,t=void 0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random(),r[e]=t>>>((3&e)<<3)&255);return r}();return e[6]=15&e[6]|64,e[8]=63&e[8]|128,function(e){var t=i,n=0;return t[e[n++]]+t[e[n++]]+t[e[n++]]+t[e[n++]]+\"-\"+t[e[n++]]+t[e[n++]]+\"-\"+t[e[n++]]+t[e[n++]]+\"-\"+t[e[n++]]+t[e[n++]]+\"-\"+t[e[n++]]+t[e[n++]]+t[e[n++]]+t[e[n++]]+t[e[n++]]+t[e[n++]]}(e)};for(var r=new Array(16),i=[],o={},a=0;a<256;a++)i[a]=(a+256).toString(16).substr(1),o[i[a]]=a},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.empty=function(){return{entities:{},processes:{},arcs:{},meta:{}}},t.merge=function(e,t){return{entities:r({},e.entities,t.entities),processes:r({},e.processes,t.processes),arcs:r({},e.arcs,t.arcs),meta:r({},e.meta,t.meta)}};var r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}},function(e,t,n){\"use strict\";function r(e,t){return void 0===t&&(t=\".\"),e.split(\".\")[1].split(\"/\").filter(function(e){return e}).join(t)}Object.defineProperty(t,\"__esModule\",{value:!0}),t.modulePathToNamespace=r,t.getGraphFromModules=function(e,t){var n=e.keys().map(function(n){var o=e(n);return Object.values(Object(i.resolveEntityIds)(o,r(n,t))).filter(i.isEntity)}).reduce(function(e,t){return e.concat(t)},[]);return Object(i.getGraphFromAll)(n)};var i=n(0)},function(e,t,n){\"use strict\";n.d(t,\"b\",function(){return c});var r=n(40),i=n(43),o=(n.n(i),n(23));n.d(t,\"a\",function(){return o.a});var a=new r.a({autoGenerateTag:!0}),c=(a.setStylesTarget,a.cssRaw,a.cssRule,a.forceRenderStyles,a.fontFace,a.getStyles,a.keyframes,a.reinit,a.style)},function(e,t,n){\"use strict\";function r(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},i=0,o=e;i<o.length;i++){var a=o[i];if(null!=a&&!1!==a)for(var c in a){var u=a[c];(u||0===u)&&(\"$nest\"===c&&u?n[c]=n.$nest?r(n.$nest,u):u:-1!==c.indexOf(\"&\")||0===c.indexOf(\"@media\")?n[c]=n[c]?r(n[c],u):u:n[c]=u)}}return n}n.d(t,\"c\",function(){return i}),t.a=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.filter(function(e){return!!e}).join(\" \")},t.b=r;var i=\"undefined\"==typeof requestAnimationFrame?function(e){return setTimeout(e)}:requestAnimationFrame.bind(window)},function(e,t,n){\"use strict\";function r(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},i=0,o=e;i<o.length;i++){var a=o[i];if(null!=a&&!1!==a)for(var c in a){var u=a[c];(u||0===u)&&(\"$nest\"===c&&u?n[c]=n.$nest?r(n.$nest,u):u:-1!==c.indexOf(\"&\")||0===c.indexOf(\"@media\")?n[c]=n[c]?r(n[c],u):u:n[c]=u)}}return n}Object.defineProperty(t,\"__esModule\",{value:!0}),t.raf=\"undefined\"==typeof requestAnimationFrame?function(e){return setTimeout(e)}:requestAnimationFrame.bind(window),t.classes=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.filter(function(e){return!!e}).join(\" \")},t.extend=r,t.media=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=[];e.type&&o.push(e.type),e.orientation&&o.push(e.orientation),e.minWidth&&o.push(\"(min-width: \"+i(e.minWidth)+\")\"),e.maxWidth&&o.push(\"(max-width: \"+i(e.maxWidth)+\")\"),e.minHeight&&o.push(\"(min-height: \"+i(e.minHeight)+\")\"),e.maxHeight&&o.push(\"(max-height: \"+i(e.maxHeight)+\")\");return{$nest:(a={},a[\"@media \"+o.join(\" and \")]=r.apply(void 0,t),a)};var a};var i=function(e){return\"string\"==typeof e?e:e+\"px\"}},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return a});var r=n(2),i=n(26),o=function(e){return function(){return Object(r.d)(arguments,function(e){return e||0===e}).map(function(e){return\"number\"==typeof e?Object(i.a)(e):e.toString()}).join(e)}},a=o(\" \");o(\",\")},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return i});var r=n(2),i=(Object(r.g)(\"%\"),Object(r.g)(\"deg\"),Object(r.g)(\"em\"),Object(r.g)(\"px\"));Object(r.g)(\"rad\"),Object(r.g)(\"rem\"),Object(r.g)(\"vh\"),Object(r.g)(\"vw\"),Object(r.g)(\"turn\")},function(e,t,n){\"use strict\";t.a=function(e,t){function n(){document.removeEventListener(\"mousemove\",i),document.removeEventListener(\"mouseup\",n),r=r.filter(function(e){return e!==o})}function i(t){for(var n=0,i=r;n<i.length;n++){var u=i[n];if(u!==o&&o.contains(u))return}e({x:a-t.clientX,y:c-t.clientY}),a=t.clientX,c=t.clientY}var o,a=0,c=0;return{onmousedown:function(e){o=e.currentTarget,r.push(o),a=e.clientX,c=e.clientY,document.addEventListener(\"mousemove\",i),document.addEventListener(\"mouseup\",n),t&&t(e)}}};var r=[]},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"entityWindowProps\",function(){return c}),n.d(t,\"controlProps\",function(){return u}),n.d(t,\"treeWindowProps\",function(){return s}),n.d(t,\"graphWindowProps\",function(){return l}),n.d(t,\"entityViewProps\",function(){return f}),n.d(t,\"processViewProps\",function(){return d});var r=n(0),i=n(9),o=n(12),a=n(3),c=Object(r.stream)([a.metaEntity.HOT,o.entityWindow.HOT,i.activeNode.HOT,o.activeWindow.HOT],function(e,t,n,r){return{viewMode:e.viewMode,dimensions:t,node:n,window:r}}),u=Object(r.stream)([o.visibility.HOT,o.controlsPosition.HOT],function(e,t){return{visibility:e,position:t}}),s=Object(r.stream)([o.treeWindow.HOT,o.activeWindow.HOT],function(e,t){return{dimensions:e,window:t}}),l=Object(r.stream)([o.graphWindow.HOT,o.activeWindow.HOT],function(e,t){return{dimensions:e,window:t}}),f=Object(r.stream)([i.activeEntity.HOT,i.activeValue.HOT,i.watchingEntity.HOT,a.enhancedGraphData.COLD,a.metaEntities.HOT],function(e,t,n,r,i){return{entity:e,value:t,watching:n,graph:r,meta:i[e.id]}}),d=Object(r.stream)([i.activeProcess.HOT,a.enhancedGraphData.COLD],function(e,t){return{process:e,graph:t}})},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"viewBox\",function(){return f}),n.d(t,\"simulationSteps\",function(){return d}),n.d(t,\"initialPosition\",function(){return p}),n.d(t,\"entityPositions\",function(){return h}),n.d(t,\"graphData\",function(){return v});var r=n(0),i=n(8),o=n(3),a=n(4),c=n(9),u=n(13),s=n(65),l=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},f=Object(r.stream)([o.metaGraph.HOT],function(e){return e.viewBox||u.c}).accept(function(e,t){return!t||!Object(i.b)(e,t)}),d=Object(r.val)(500),p=Object(r.stream)([o.graph.HOT],function(e){var t={};for(var n in e.entities)t[n]={x:800*Math.random(),y:800*Math.random()};return t}),h=Object(r.asyncStream)([o.metaEntities.HOT,d.HOT,o.enhancedGraphData.COLD,p.HOT],function(e,t,n,r,i){function o(){for(var e={},t=0;t<d.length;t++){for(var o=d[t],c=r.entities[o],u=i[o],l=0,f=c.processes;l<f.length;l++)for(var p=f[l],h=0,v=r.processes[p].inputs;h<v.length;h++){var g=v[h],y=r.entities[g.eid].namespace===c.namespace?200:300,m=i[g.eid],b=Object(s.e)([m.x,m.y],[u.x,u.y]),_=Object(s.b)(b),O=Object(s.d)(b),w=_-y,T=g.type===a.PORT_TYPES.COLD?.5*w:2*w;e[o]=Object(s.a)(e[o]||[0,0],Object(s.c)(T,O)),e[g.eid]=Object(s.a)(e[g.eid]||[0,0],Object(s.c)(-1*T,O))}for(var E=t+1;E<d.length;E++){var k=d[E],S=r.entities[k],m=i[k],b=Object(s.e)([m.x,m.y],[u.x,u.y]),_=Object(s.b)(b),O=Object(s.d)(b),T=Math.max(100-_,0);if(e[o]=Object(s.a)(e[o]||[0,0],Object(s.c)(-1*T,O)),e[k]=Object(s.a)(e[k]||[0,0],Object(s.c)(T,O)),c.namespace===S.namespace){var j=_-300;e[o]=Object(s.a)(e[o]||[0,0],Object(s.c)(j,O)),e[k]=Object(s.a)(e[k]||[0,0],Object(s.c)(-1*j,O))}else{var x=Math.max(300-_,0);e[o]=Object(s.a)(e[o]||[0,0],Object(s.c)(-1*x,O)),e[k]=Object(s.a)(e[k]||[0,0],Object(s.c)(x,O))}}}for(var o in e){var T=e[o],I=Object(s.b)(T);if(I>n/2){var C=Object(s.d)(T),M=i[o],N=Object(s.a)([M.x,M.y],Object(s.c)(I/n,C)),A=N[0],P=N[1];i[o]={x:Math.floor(A),y:Math.floor(P)}}}}function c(){if(p>10){var t={};for(var n in i)t[n]=i[n];for(var r=10;r>0;r--)o(),p--;var a=!0;for(var n in i){var u=t[n],s=i[n];u===s||u.x===s.x&&u.y===s.y||(a=!1)}a||(e(i),p>10&&setTimeout(c,60))}}for(var u in t){var l=t[u],f=l&&l.ui&&l.ui.graph&&l.ui.graph.position;f&&(i[u]=f)}e(i);var d=Object.keys(r.entities),p=n;return requestAnimationFrame(c),function(){p=0}});o.runtime.react([h.HOT],function(e,t){var n={};for(var r in t)n[r]={ui:{graph:{position:t[r]}}};e.setMeta({entities:n})});var v=Object(r.stream)([o.enhancedGraphData.HOT,c.activeNode.HOT,h.HOT],function(e,t,n){var r={},i=0,o=[],c=[],u=[];for(var s in e.entities){var f=e.entities[s];r[f.namespace]=r[f.namespace]||i++%7+1;var d=l({},n[s],{id:f.id,class:\"group-\"+r[f.namespace],label:f.name,active:f.id===t.id});null!=f.accept&&(d.accept=!0),null!=f.value&&(d.initial=!0),c.push(d);for(var p=0,h=f.processes;p<h.length;p++){var v=h[p],g=e.processes[v],y={id:g.id,async:g.async,autostart:g.autostart,active:g.id===t.id,acc:g.reaction,from:g.inputs,to:s,class:d.class};if(g.inputs.length){y.x=0,y.y=0;for(var m=0,b=g.inputs;m<b.length;m++){var _=b[m],O=_.eid,w=_.type,T=n[O];if(T){var E=T.x-d.x,k=T.y-d.y;w===a.PORT_TYPES.COLD&&(E/=2,k/=2),y.x+=E,y.y+=k}y.fromIsActive=y.fromIsActive||O===t.id,u.push({from:T,to:y,class:\"from\"+(w===a.PORT_TYPES.COLD?\" cold\":\"\"),title:w,active:d.active||y.active||O===t.id})}var S=Math.sqrt(y.x*y.x+y.y*y.y);y.x=50*y.x/S+d.x,y.y=50*y.y/S+d.y}else y.x=d.x,y.y=d.y-50;o.push(y),u.push({from:y,to:d,class:\"to\"+(g.async?\" async\":\"\"),active:d.active||y.active||y.fromIsActive}),g.reaction&&u.push({from:y,to:d,class:\"to acc\"})}}return{entities:c,processes:o,edges:u}}).react([f.HOT],function(e,t){return e.viewBox={x:t.offsetX*t.scale,y:t.offsetY*t.scale,width:t.width*t.scale,height:t.height*t.scale},e})},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"entityTree\",function(){return c}),n.d(t,\"treeData\",function(){return u});var r=n(0),i=n(9),o=n(3),a=n(7),c=Object(r.stream)([o.enhancedGraphData.HOT],function(e){return Object(a.createEntityTree)(e.entities)}),u=Object(r.stream)([o.metaTree.HOT,c.HOT,i.activeEntity.HOT],function(e,t,n){return{fold:e.fold||{},tree:t,selected:n}}).val({fold:{},tree:{},selected:null})},function(e,t,n){\"use strict\";function r(){for(var e in f)f[e]();f={},d=!0}function i(e){if(\"function\"==typeof e)return u()(e);if(!Array.isArray(e))return e;var t=e.shift(),n=e[0];return\"object\"!=typeof n||Array.isArray(n)?n={}:e.shift(),e.length?u()(t,n,e.map(i)):u()(t,n)}Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"ComponentClass\",function(){return l}),t.flowComponentFactory=function(e,t,n){function o(n,r){\"string\"==typeof n?e.set(t,{type:n,payload:r}):e.set(t,n)}void 0===n&&(n=!1);var a={};return function t(c,u){var p=u.getId(),h=p+c.toString();if(a[h])return a[h];var v=function(a){function u(){var t=null!==a&&a.apply(this,arguments)||this;return t.state={current:e.get(p)},t.update=function(){t.setState(function(t){return t.current=e.get(p),t})},t.updateAsync=function(){!function(e,t){f[e]=t,d&&(requestAnimationFrame(r),d=!1)}(h,t.update)},t}return s(u,a),u.prototype.render=function(){if(void 0!==this.state.current)return i(c(this.state.current,o,t))},u.prototype.componentDidMount=function(){n&&console.log(\"component mounted!\",this),e.on(p,this.updateAsync)},u.prototype.componentWillUnmount=function(){n&&console.log(\"component will unmount!\",this),e.off(p,this.updateAsync)},u}(l);return a[h]=v,v}},t.h=i;var o=n(66),a=n.n(o),c=n(32),u=n.n(c),s=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t}(a.a),f={},d=!0},function(e,t,n){e.exports=n(69).default,e.exports.default=e.exports},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),n.d(t,\"ui\",function(){return u}),n.d(t,\"console\",function(){return s}),n.d(t,\"utils\",function(){return l});var r=n(34),i=n(81),o=n(7),a=n(21),c=n(31);t.default=r;var u=r,s={tree:i},l={entityData:o,webpack:a,yoyo:c}},function(e,t,n){\"use strict\";function r(e){return\"tvsFlowTools::\"+e}Object.defineProperty(t,\"__esModule\",{value:!0}),t.start=function(e){var t=b({debug:!1,graph:null},e),n=i.a.create();n.addGraph(Object(o.getGraphFromModules)(_)),n.flush();var s=Object(c.flowComponentFactory)(n,u.action.getId(),t.debug),f=Object(a.a)(s),p=document.createElement(\"div\");p.className=\"tvs-flow-tools-container\",document.body.appendChild(p),d.a.render(h()(f),p),n.set(u.element.getId(),p);var O=new l.a(\".tvs-save-graph\",{text:function(){return JSON.stringify(n.get(g.meta.getId()),null,\"  \")}});return O.on(\"success\",function(e){return console.log(\"saved graph to clipboard\",e)}),O.on(\"error\",function(e){return console.log(\"error while saving graph to clipboard\",e)}),n.on(g.meta.getId(),m(function(e){var t=n.get(g.selectedRuntimeId.getId());t&&localStorage.setItem(r(t),JSON.stringify(e))},300)),{setFlow:function(e,t){var i=e.getMeta(),o=localStorage.getItem(r(t));if(e.setMeta(b({},y.b,{name:t})),o){var a=JSON.parse(o);e.setMeta(a)}e.setMeta(i),requestAnimationFrame(function(){n.set(u.action.getId(),{type:v.a.SET_RUNTIME,payload:{label:t,runtime:e}})})},dispose:function(){document.body.removeChild(p),O.destroy()},getState:function(){return n},getElement:function(){return p}}};var i=n(35),o=n(21),a=n(39),c=n(31),u=n(17),s=n(70),l=n.n(s),f=n(18),d=n.n(f),p=n(32),h=n.n(p),v=n(5),g=n(3),y=n(13),m=n(78),b=(n.n(m),this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}),_=n(80)},function(e,t,n){\"use strict\";var r=n(36);n(0),n(20),n(4);t.a=r;r.create},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.create=function(){function e(e){return null==e||\"object\"!=typeof e||Array.isArray(e)||(T=Object(i.a)(T,e)),T}function t(e){return w.es[e]&&w.es[e].val}function n(e,t){g(y(e),t,!0)&&h()}function a(t){var n=Object(r.createEntity)(t);b[n.id]=n;var i=y(n.id);return void 0===n.value||!n.reset&&void 0!==i.val||(i.val=n.value,j[n.id]=!1,I=!0),i.accept=n.accept,n.meta&&e({entities:(o={},o[n.id]=n.meta,o)}),n;var o}function c(t){var n=y(t);for(var r in n.arcs)f(r);var i=b[t];i&&i.meta&&e({entities:(o={},o[i.id]=void 0,o)}),delete w.es[t],delete b[t];var o}function u(t){var n=Object(r.createProcess)(t,E),i=n.ports,o=m(n.id);_[n.id]=n,delete o.acc,o.values=[],o.sources=[],o.async=n.async,o.delta=n.delta,Object.keys(o.arcs).forEach(function(e){var t=O[e].port;null==t||i[t]&&i[t]!==r.PORT_TYPES.ACCUMULATOR||f(e)}),i.forEach(function(e,t){e===r.PORT_TYPES.ACCUMULATOR&&(o.acc=t)});for(var a in o.arcs)d(O[a]);return n.meta&&e({processes:(c={},c[n.id]=n.meta,c)}),n;var c}function s(t){var n=m(t);n.stop&&(n.stop(),delete n.stop);for(var r in n.arcs)f(r);delete w.ps[t];var i=_[t];i&&i.meta&&e({processes:(o={},o[i.id]=void 0,o)}),delete _[t];var o}function l(t){var n=Object(r.createArc)(t);O[n.id]=n,d(n);var i=m(n.process),o=_[n.process];return o&&!0===o.autostart&&Object.keys(i.arcs).length===Object.keys(o.ports).length+1&&function(e){e.async?requestAnimationFrame(function(){v(e)}):(v(e),e.out&&(j[e.out.id]=!1))}(i),n.meta&&e({arcs:(a={},a[n.id]=n.meta,a)}),n;var a}function f(t){var n=O[t];if(n){var r=m(n.process),i=y(n.entity);delete r.arcs[t],delete i.arcs[t],null!=n.port?(delete i.effects[n.process],delete r.sources[n.port],delete r.values[n.port]):(r.stop&&(r.stop(),delete r.stop),r.sink=function(){},delete r.out,delete i.reactions[n.process]),n.meta&&e({arcs:(o={},o[n.id]=void 0,o)})}delete O[t];var o}function d(e){var t=e.process,n=e.entity,i=m(t),o=y(n),a=_[t];o.arcs[e.id]=!0,a&&(i.arcs[e.id]=!0,null!=e.port?(delete o.effects[t],a.ports&&null!=a.ports[e.port]&&(i.sources[e.port]=o,a.ports[e.port]===r.PORT_TYPES.HOT&&(o.effects[t]=i))):(i.out=o,null!=i.acc?(i.sources[i.acc]=o,o.reactions[t]=i):delete o.reactions[t],i.sink=function(e){g(o,e,!0)&&!x&&h()}))}function p(t){if(t.entities)for(var n in t.entities)a(t.entities[n]);if(t.processes)for(var n in t.processes)u(t.processes[n]);if(t.arcs)for(var n in t.arcs)l(t.arcs[n]);e(t.meta)}function h(){k&&console.log(\"flushing graph recursively with\",j);for(var e=Object.keys(j),t=0,n=e;t<n.length;t++)if(c=n[t],j[c]){l=w.es[c];for(var r in l.reactions)v(l.reactions[r])}var i={};j={},I=!1,x=!0;for(var o=0,a=e;o<a.length;o++){var c=a[o];(l=w.es[c]).cb.length>0&&(S[c]=l);for(var r in l.effects)i[r]||(v(l.effects[r]),i[r]=!0)}if(x=!1,I)h();else{var u=Object.keys(S);S={};for(var s in u)for(var l,f=0,d=(l=w.es[u[s]]).cb;f<d.length;f++)(0,d[f])(l.val);k&&console.log(\"flush finished\")}}function v(e){for(var t=!0,n=0;n<e.sources.length;n++){var r=e.sources[n];if(void 0===r.val){t=!1;break}if(e.values[n]=r.val,e.delta){if(void 0===r.oldVal){t=!1;break}e.values[n+1]=r.oldVal}}if(t)if(k&&console.log(\"running process\",e.id),e.async)e.stop&&e.stop(),e.stop=_[e.id].procedure.apply(E,[e.sink].concat(e.values));else{var i=_[e.id].procedure.apply(E,e.values);e.out&&g(e.out,i,null==e.acc)}}function g(e,t,n){return!(void 0===t||e.accept&&!e.accept(t,e.val)||(e.oldVal=e.val,e.val=t,j[e.id]=n,I=!0,0))}function y(e){return b[e]||a({id:e}),w.es[e]||(w.es[e]={id:e,val:void 0,reactions:{},effects:{},arcs:{},cb:[]})}function m(e){return w.ps[e]||(w.ps[e]={id:e,arcs:{},sink:function(){}})}var b={},_={},O={},w={es:{},ps:{}},T={},E=null,k=!1,S={},j={},x=!1,I=!1;return{addEntity:a,removeEntity:c,addProcess:u,removeProcess:s,addArc:l,removeArc:f,addGraph:p,replaceGraph:function(e){var t={},n={};if(e.entities)for(var r in e.entities){var i=e.entities[r];i.id&&(t[i.id]=!0)}if(e.processes)for(var r in e.processes){var o=e.processes[r];o.id&&(n[o.id]=!0)}Object.keys(b).filter(function(e){return!t[e]}).forEach(c),Object.keys(_).filter(function(e){return!n[e]}).forEach(s),p(e)},getGraph:function(){return{entities:b,processes:_,arcs:O,meta:T}},getState:function(){var e={};for(var t in w.es)e[t]=w.es[t].val;return e},setMeta:e,getMeta:function(){return T},getContext:function(){return E},setContext:function(e){E=e},setDebug:function(e){k=e},get:t,set:n,update:function(e,r){n(e,r(t(e)))},on:function(e,t){y(e).cb.push(t)},off:function(e,t){var n=y(e);n.cb=t?n.cb.filter(function(e){return e!==t}):[]},start:function(e){var t=m(e);v(t),t.async||h()},stop:function(e){var t=m(e);t.stop&&(t.stop(),delete t.stop)},flush:h,PORT_TYPES:o({},r.PORT_TYPES)}};var r=n(4),i=n(38),o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}},function(module,__webpack_exports__,__webpack_require__){\"use strict\";function evaluate(code,context){var prefix=\"(function(){ return \",postfix=\"})\",factory=eval(prefix+code+postfix);return factory.call(context)}__webpack_exports__.a=evaluate},function(e,t,n){\"use strict\";function r(e,t){if(\"object\"==typeof e&&\"object\"==typeof t&&!Array.isArray(e)&&!Array.isArray(t)&&e!==t){var n=i({},e);for(var o in t){var a=e[o],c=t[o];void 0!==c?n[o]=r(a,c):delete n[o]}return n}return t}t.a=r;var i=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}},function(e,t,n){\"use strict\";function r(e,t){return[\"h2\",I({},Object(S.a)(function(e){t(_.b.MAIN.MOVE_WINDOW,e)})),Object(x.printEntityName)(e)]}function i(e){return[\"footer\",I({},Object(S.a)(function(t){e(_.b.MAIN.RESIZE_WINDOW,t)}),{class:\"resize\"})]}function o(e,t){return function(){return t(_.b.MAIN.SET_ACTIVE_WINDOW,e)}}function a(e,t,n){var i=e.visibility,a=e.position,c=function(e){return function(){return t(_.b.MAIN.UPDATE_VISIBILITY,e)}};return[\"header\",{class:Object(f.a)(\"tvs-flow-controls\",v.a),onmousedown:o(\"controls\",t),style:I({},a)},[\"nav\",I({class:\"tvs-controls-btns\"},Object(S.a)(function(e){t(_.b.MAIN.MOVE_WINDOW,e)})),[\"ul\",[\"li\",Object(h.a)({class:i.tree&&C,onclick:c(\"tree\"),icon:d.e(),title:\"toggle entity tree\"})],[\"li\",Object(h.a)({class:i.graph&&C,onclick:c(\"graph\"),icon:d.d(),title:\"toggle flow graph\"})],[\"li\",Object(h.a)({class:i.entity&&C,onclick:c(\"entity\"),icon:d.c(),title:\"toggle entity details\"})]]],n(r,E.activeNode)]}function c(e,t,n){var r=e.dimensions,a=e.window;return[\"article\",{class:Object(f.a)(\"tvs-flow-tree\",v.e),style:I({},r),onmousedown:o(\"tree\",t)},[\"header\",I({},Object(S.a)(function(e){t(_.b.MAIN.MOVE_WINDOW,e)})),d.e(\"tree\"===a?\"selected\":\"\"),\" Tree \",[\"span\",{class:\"gap\"}],\" \",Object(h.a)({icon:d.a(),class:b.b,title:\"close window\",onclick:function(){return t(_.b.MAIN.CLOSE_WINDOW,\"tree\")}})],[\"section\",{class:v.d},n(m.a,k.treeData)],i(t)]}function u(e,t,n){var r=e.dimensions,a=e.window,c=n(g.a,T.graphData);return[\"article\",{ref:function(e){if(e&&e.querySelector){var n=e.querySelector(\"section\");requestAnimationFrame(function(){t(_.b.GRAPH.UPDATE_SIZE,{width:n.clientWidth,height:n.clientHeight})})}},class:Object(f.a)(\"tvs-flow-graph\",v.e),style:I({},r),onmousedown:o(\"graph\",t)},[\"header\",I({},Object(S.a)(function(e){t(_.b.MAIN.MOVE_WINDOW,e)})),d.d(\"graph\"===a?\"selected\":\"\"),\" Graph \",[\"span\",{class:\"gap\"}],n(g.b,T.viewBox),\" \",Object(h.a)({icon:d.b(),class:Object(f.a)(b.b,\"tvs-save-graph\"),title:\"copy the current graph state to clipboard\"}),Object(h.a)({icon:d.a(),class:b.b,title:\"close window\",onclick:function(){return t(_.b.MAIN.CLOSE_WINDOW,\"graph\")}})],c,i(t)]}function s(e,t,n){var r=e.dimensions,a=e.node,c=e.window,u=e.viewMode;u=u||j.a.VALUE;var s=a&&a.procedure,l=u===j.a.VALUE?s?n(y.d,w.processViewProps):n(y.b,w.entityViewProps):s?n(y.c,w.processViewProps):n(y.a,w.entityViewProps);return[\"article\",{class:Object(f.a)(\"tvs-flow-entity\",v.e),style:I({},r),onmousedown:o(\"entity\",t)},[\"header\",I({},Object(S.a)(function(e){t(_.b.MAIN.MOVE_WINDOW,e)})),d.c(\"entity\"===c?\"selected\":\"\"),s?\" Process \":\" Entity \",[\"span\",{class:\"gap\"},\" \"],[\"button\",{class:Object(f.a)(b.a,\"tiny\",u===j.a.VALUE&&\"selected\"),onClick:function(){return t(_.b.ENTITY.SET_VIEW_MODE,j.a.VALUE)}},\"value\"],[\"button\",{class:Object(f.a)(b.a,\"tiny\",u===j.a.DETAILS&&\"selected\"),onClick:function(){return t(_.b.ENTITY.SET_VIEW_MODE,j.a.DETAILS)}},\"details\"],Object(h.a)({icon:d.a(),class:b.b,title:\"close window\",onclick:function(){return t(_.b.MAIN.CLOSE_WINDOW,\"entity\")}})],l,i(t)]}function l(e,t,n){var r=e.tree?n(c,w.treeWindowProps):\"\",i=e.graph?n(u,w.graphWindowProps):\"\",o=e.entity?n(s,w.entityWindowProps):\"\";return[\"article\",{class:Object(f.a)(\"tvs-flow-tools\",p.f)},n(a,w.controlProps),i,o,r]}t.a=function(e){return e(l,O.visibility)};var f=n(22),d=n(14),p=n(6),h=n(15),v=n(16),g=n(58),y=n(60),m=n(61),b=n(11),_=n(5),O=n(12),w=n(28),T=n(29),E=n(9),k=n(30),S=n(27),j=n(13),x=n(7),I=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},C=Object(f.b)({color:p.e})},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return c});var r=n(41),i=n(23),o=n(10),a=(n.n(o),function(){return o.create(void 0,!0)}),c=function(){function e(e){var t=e.autoGenerateTag,n=this;this.cssRaw=function(e){e&&(n._raw+=e||\"\",n._pendingRawChange=!0,n._styleUpdated())},this.cssRule=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o];var a=Object(r.a)(i.b.apply(void 0,t)).result;n._freeStyle.registerRule(e,a),n._styleUpdated()},this.forceRenderStyles=function(){var e=n._getTag();e&&(e.textContent=n.getStyles())},this.fontFace=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=n._freeStyle,i=0,o=e;i<o.length;i++){var a=o[i];r.registerRule(\"@font-face\",a)}n._styleUpdated()},this.getStyles=function(){return(n._raw||\"\")+n._freeStyle.getStyles()},this.keyframes=function(e){var t=Object(r.b)(e),i=t.keyframes,o=t.$debugName,a=n._freeStyle.registerKeyframes(i,o);return n._styleUpdated(),a},this.reinit=function(){var e=a();n._freeStyle=e,n._lastFreeStyleChangeId=e.changeId,n._raw=\"\",n._pendingRawChange=!1;var t=n._getTag();t&&(t.textContent=\"\")},this.setStylesTarget=function(e){n._tag&&(n._tag.textContent=\"\"),n._tag=e,n.forceRenderStyles()},this.style=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=n._freeStyle,a=Object(r.a)(i.b.apply(void 0,e)),c=a.result,u=a.debugName,s=u?o.registerStyle(c,u):o.registerStyle(c);return n._styleUpdated(),s};var o=a();this._autoGenerateTag=t,this._freeStyle=o,this._lastFreeStyleChangeId=o.changeId,this._pending=0,this._pendingRawChange=!1,this._raw=\"\",this._tag=void 0}return e.prototype._afterAllSync=function(e){var t=this;this._pending++;var n=this._pending;Object(i.c)(function(){n===t._pending&&e()})},e.prototype._getTag=function(){if(this._tag)return this._tag;if(this._autoGenerateTag){var e=\"undefined\"==typeof window?{textContent:\"\"}:document.createElement(\"style\");return\"undefined\"!=typeof document&&document.head.appendChild(e),this._tag=e,e}},e.prototype._styleUpdated=function(){var e=this,t=this._freeStyle.changeId,n=this._lastFreeStyleChangeId;(this._pendingRawChange||t!==n)&&(this._lastFreeStyleChangeId=t,this._pendingRawChange=!1,this._afterAllSync(function(){return e.forceRenderStyles()}))},e}()},function(e,t,n){\"use strict\";function r(e){var t={},n=\"\";for(var o in e){var a=e[o];if(\"$unique\"===o)t[i.IS_UNIQUE]=a;else if(\"$nest\"===o){var c=a;for(var u in c){var s=c[u];t[u]=r(s).result}}else\"$debugName\"===o?n=a:t[o]=a}return{result:t,debugName:n}}t.a=r,t.b=function(e){var t={$debugName:void 0,keyframes:{}};for(var n in e){var r=e[n];\"$debugName\"===n?t.$debugName=r:t.keyframes[n]=r}return t};var i=n(10);n.n(i)},function(e,t){function n(){throw new Error(\"setTimeout has not been defined\")}function r(){throw new Error(\"clearTimeout has not been defined\")}function i(e){if(s===setTimeout)return setTimeout(e,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}function o(){h&&d&&(h=!1,d.length?p=d.concat(p):v=-1,p.length&&a())}function a(){if(!h){var e=i(o);h=!0;for(var t=p.length;t;){for(d=p,p=[];++v<t;)d&&d[v].run();v=-1,t=p.length}d=null,h=!1,function(e){if(l===clearTimeout)return clearTimeout(e);if((l===r||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(e);try{l(e)}catch(t){try{return l.call(null,e)}catch(t){return l.call(this,e)}}}(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var s,l,f=e.exports={};!function(){try{s=\"function\"==typeof setTimeout?setTimeout:n}catch(e){s=n}try{l=\"function\"==typeof clearTimeout?clearTimeout:r}catch(e){l=r}}();var d,p=[],h=!1,v=-1;f.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new c(e,t)),1!==p.length||h||i(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title=\"browser\",f.browser=!0,f.env={},f.argv=[],f.version=\"\",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.prependListener=u,f.prependOnceListener=u,f.listeners=function(e){return[]},f.binding=function(e){throw new Error(\"process.binding is not supported\")},f.cwd=function(){return\"/\"},f.chdir=function(e){throw new Error(\"process.chdir is not supported\")},f.umask=function(){return 0}},function(e,t){},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(45),i=n(24),o=n(10),a=function(){return o.create(void 0,!0)},c=function(){function e(e){var t=e.autoGenerateTag,n=this;this.cssRaw=function(e){e&&(n._raw+=e||\"\",n._pendingRawChange=!0,n._styleUpdated())},this.cssRule=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o];var a=r.ensureStringObj(i.extend.apply(void 0,t)).result;n._freeStyle.registerRule(e,a),n._styleUpdated()},this.forceRenderStyles=function(){var e=n._getTag();e&&(e.textContent=n.getStyles())},this.fontFace=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var r=n._freeStyle,i=0,o=e;i<o.length;i++){var a=o[i];r.registerRule(\"@font-face\",a)}n._styleUpdated()},this.getStyles=function(){return(n._raw||\"\")+n._freeStyle.getStyles()},this.keyframes=function(e){var t=r.explodeKeyframes(e),i=t.keyframes,o=t.$debugName,a=n._freeStyle.registerKeyframes(i,o);return n._styleUpdated(),a},this.reinit=function(){var e=a();n._freeStyle=e,n._lastFreeStyleChangeId=e.changeId,n._raw=\"\",n._pendingRawChange=!1;var t=n._getTag();t&&(t.textContent=\"\")},this.setStylesTarget=function(e){n._tag&&(n._tag.textContent=\"\"),n._tag=e,n.forceRenderStyles()},this.style=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=n._freeStyle,a=r.ensureStringObj(i.extend.apply(void 0,e)),c=a.result,u=a.debugName,s=u?o.registerStyle(c,u):o.registerStyle(c);return n._styleUpdated(),s};var o=a();this._autoGenerateTag=t,this._freeStyle=o,this._lastFreeStyleChangeId=o.changeId,this._pending=0,this._pendingRawChange=!1,this._raw=\"\",this._tag=void 0}return e.prototype._afterAllSync=function(e){var t=this;this._pending++;var n=this._pending;i.raf(function(){n===t._pending&&e()})},e.prototype._getTag=function(){if(this._tag)return this._tag;if(this._autoGenerateTag){var e=\"undefined\"==typeof window?{textContent:\"\"}:document.createElement(\"style\");return\"undefined\"!=typeof document&&document.head.appendChild(e),this._tag=e,e}},e.prototype._styleUpdated=function(){var e=this,t=this._freeStyle.changeId,n=this._lastFreeStyleChangeId;(this._pendingRawChange||t!==n)&&(this._lastFreeStyleChangeId=t,this._pendingRawChange=!1,this._afterAllSync(function(){return e.forceRenderStyles()}))},e}();t.TypeStyle=c},function(e,t,n){\"use strict\";function r(e){var t={},n=\"\";for(var o in e){var a=e[o];if(\"$unique\"===o)t[i.IS_UNIQUE]=a;else if(\"$nest\"===o){var c=a;for(var u in c){var s=c[u];t[u]=r(s).result}}else\"$debugName\"===o?n=a:t[o]=a}return{result:t,debugName:n}}Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(10);t.ensureStringObj=r,t.explodeKeyframes=function(e){var t={$debugName:void 0,keyframes:{}};for(var n in e){var r=e[n];\"$debugName\"===n?t.$debugName=r:t.keyframes[n]=r}return t}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0})},function(e,t,n){\"use strict\";var r=n(48);n.d(t,\"a\",function(){return r.a})},function(e,t,n){\"use strict\";n(49),n(53);var r=n(54);n.d(t,\"a\",function(){return r.a});n(55),n(25),n(56),n(57),n(26)},function(e,t,n){\"use strict\";n(2)},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return r}),n.d(t,\"b\",function(){return i});var r=function(e,t){return Array.prototype.filter.call(e,t)},i=function(e,t){return Array.prototype.map.call(e,t)}},function(e,t,n){\"use strict\";function r(e){return o.exec(e.toString())[1]}n.d(t,\"f\",function(){return a}),t.c=function(e){return\"number\"==typeof e?e:.01*parseFloat(e)},t.e=function(e){return r(100*e)+\"%\"},t.d=r,t.b=function(e){if(null!==e&&void 0!==e){var t=+e;return t==t?e+\"px\":e}},t.g=function(e){var t=i.exec(e);if(t&&t.length)return[t[1]].concat(t[2].split(\",\"))},t.a=function(e,t){return e+\"(\"+Array.prototype.join.call(t,\",\")+\")\"};var i=/[\\s]*([a-z-]+)[\\s]*\\([\\s]*([^\\)]+)[\\s]*\\)[\\s]*/i,o=/^(\\-?\\d+\\.?\\d{0,5})/,a=function(e){return function(t){return t+e}}},function(e,t,n){\"use strict\";t.a=function(e,t){return Math.round(e*t)/t}},function(e,t,n){\"use strict\";n(2);var r=n(25);r.a,r.a,r.a},function(e,t,n){\"use strict\";function r(e){return f(e)||function(e){var t=e.match(/#(([a-f0-9]{6})|([a-f0-9]{3}))$/i);if(!t)return;var n=t[1],r=parseInt(3===n.length?n[0]+n[0]+n[1]+n[1]+n[2]+n[2]:n,16);return new _(g,r>>16&255,r>>8&255,255&r,1,!1)}(e)||function(e){var t=Object(h.i)(e);if(!t||4!==t.length&&5!==t.length)return;var n,r=t[0],i=\"rgba\"===r,o=\"hsla\"===r,a=\"rgb\"===r,c=o||i;if(a||i)n=g;else{if(\"hsl\"!==r&&!o)throw new Error(\"unsupported color string\");n=y}var u=parseFloat(t[1]),s=a||i?parseFloat(t[2]):Object(h.c)(t[2]),l=a||i?parseFloat(t[3]):Object(h.c)(t[3]),f=c?parseFloat(t[4]):1;return new _(n,u,s,l,f,c)}(e)||f(\"red\")}function i(e,t,n){return new _(g,e,t,n,1,!1)}function o(e,t,n,r){return new _(g,e,t,n,Object(h.c)(r),!0)}function a(e){var t=Math.round(e);return(t<16?\"0\":\"\")+t.toString(16)}function c(e){return((e<0?360:0)+e%360)%360}function u(e,t,n,r,i,o,a){return e===t?new _(e,n,r,i,o,a):m[e-t](n,r,i,o,a)}function s(e,t,n,r){if(!v)return[e||0,t||0,n||0,r||0];var i=new Float32Array(4);return i[0]=e||0,i[1]=t||0,i[2]=n||0,i[3]=r||0,i}function l(e,t,n){var r=b[e][t];return n<0?0:n>r?r:n}function f(e){return O[e]||void 0}t.a=o;var d,p,h=n(2),v=\"undefined\"!=typeof Float32Array,g=0,y=1,m=(d={},d[g-y]=function(e,t,n,r,i){var o,a=e/255,c=t/255,u=n/255,s=Math.min(a,c,u),l=Math.max(a,c,u),f=(s+l)/2,d=l-s;o=l===s?0:a===l?(c-u)/d:c===l?2+(u-a)/d:u===l?4+(a-c)/d:0,(o=Math.min(60*o,360))<0&&(o+=360);var p;return p=l===s?0:f<=.5?d/(l+s):d/(2-l-s),new _(y,o,p,f,r,i)},d[y-g]=function(e,t,n,r,i){var o=e/360,a=t,c=n;if(0===a)return new _(g,v=255*c,v,v,r,i);for(var u=c<.5?c*(1+a):c+a-c*a,s=2*c-u,l=0,f=0,d=0,p=0;p<3;p++){var h=o+1/3*-(p-1);h<0&&h++,h>1&&h--;var v=void 0;v=6*h<1?s+6*(u-s)*h:2*h<1?u:3*h<2?s+(u-s)*(2/3-h)*6:s,v*=255,0===p?l=v:1===p?f=v:d=v}return new _(g,l,f,d,r,i)},d),b=(p={},p[g]=s(255,255,255,1),p[y]=s(360,1,1,1),p),_=function(){function e(e,t,n,r,i,o){this._format=e,this._hasAlpha=o,this._values=s(l(e,0,t),l(e,1,n),l(e,2,r),l(e,3,i))}return e.convertHelper=function(e,t){var n=t._format,r=t._values,i=t._hasAlpha;return n===e?t:m[n-e](r[0],r[1],r[2],r[3],i)},e.prototype.toString=function(){var e,t,n=this._format,r=this._values,i=this._hasAlpha;if(n===g)e=i?\"rgba\":\"rgb\",t=[Math.round(r[0]),Math.round(r[1]),Math.round(r[2])];else{if(n!==y)throw new Error(\"Invalid color format\");e=i?\"hsla\":\"hsl\",t=[Math.round(r[0]),Object(h.f)(Object(h.j)(r[1],100)),Object(h.f)(Object(h.j)(r[2],100))]}return i&&t.push(Object(h.e)(Object(h.j)(r[3],1e5))),Object(h.a)(e,t)},e.prototype.toHexString=function(){var t=e.convertHelper(g,this)._values;return\"#\"+(a(t[0])+a(t[1])+a(t[2])).toUpperCase()},e.prototype.toHSL=function(){var e=this._values;return u(this._format,y,e[0],e[1],e[2],1,!1)},e.prototype.toHSLA=function(){var e=this._values;return u(this._format,y,e[0],e[1],e[2],e[3],!0)},e.prototype.toRGB=function(){var e=this._values;return u(this._format,g,e[0],e[1],e[2],1,!1)},e.prototype.toRGBA=function(){var e=this._values;return u(this._format,g,e[0],e[1],e[2],e[3],!0)},e.prototype.red=function(){return(this._format===g?this:this.toRGB())._values[0]},e.prototype.green=function(){return(this._format===g?this:this.toRGB())._values[1]},e.prototype.blue=function(){return(this._format===g?this:this.toRGB())._values[2]},e.prototype.hue=function(){return(this._format===y?this:this.toHSL())._values[0]},e.prototype.saturation=function(){return(this._format===y?this:this.toHSL())._values[1]},e.prototype.lightness=function(){return(this._format===y?this:this.toHSL())._values[2]},e.prototype.alpha=function(){return this._values[3]},e.prototype.opacity=function(){return this.alpha()},e.prototype.invert=function(){var t=e.convertHelper(g,this)._values;return e.convertHelper(this._format,new e(g,255-t[0],255-t[1],255-t[2],this._values[3],this._hasAlpha))},e.prototype.lighten=function(t,n){var r=e.convertHelper(y,this)._values,i=b[y][2],o=r[2]+(n?i-r[2]:i)*Object(h.c)(t);return e.convertHelper(this._format,new e(y,r[0],r[1],o,this._values[3],this._hasAlpha))},e.prototype.darken=function(t,n){var r=e.convertHelper(y,this)._values,i=r[2]-(n?r[2]:b[y][2])*Object(h.c)(t);return e.convertHelper(this._format,new e(y,r[0],r[1],i,this._values[3],this._hasAlpha))},e.prototype.saturate=function(t,n){var r=e.convertHelper(y,this)._values,i=b[y][1],o=r[1]+(n?i-r[1]:i)*Object(h.c)(t);return e.convertHelper(this._format,new e(y,r[0],o,r[2],this._values[3],this._hasAlpha))},e.prototype.desaturate=function(t,n){var r=e.convertHelper(y,this)._values,i=b[y][1],o=r[1]-(n?r[1]:i)*Object(h.c)(t);return e.convertHelper(this._format,new e(y,r[0],o,r[2],this._values[3],this._hasAlpha))},e.prototype.grayscale=function(){return this.desaturate(1)},e.prototype.fade=function(t){var n=this._values,r=l(g,3,Object(h.c)(t));return e.convertHelper(this._format,new e(this._format,n[0],n[1],n[2],r,!0))},e.prototype.fadeOut=function(t,n){var r=this._values,i=l(g,3,r[3]-(n?r[3]:1)*Object(h.c)(t));return e.convertHelper(this._format,new e(this._format,r[0],r[1],r[2],i,!0))},e.prototype.fadeIn=function(t,n){var r=this._values,i=l(g,3,r[3]+(n?r[3]:1)*Object(h.c)(t));return e.convertHelper(this._format,new e(this._format,r[0],r[1],r[2],i,!0))},e.prototype.mix=function(t,n){var i=function(e){return e instanceof _?e:r(e)}(t),o=e.convertHelper(g,this)._values,a=e.convertHelper(g,i)._values,c=void 0===n?.5:n,u=2*c-1,s=Math.abs(o[3]-a[3]),l=((u*s==-1?u:(u+s)/(1+u*s))+1)/2,f=1-l,d=new e(g,Math.round(o[0]*l+a[0]*f),Math.round(o[1]*l+a[1]*f),Math.round(o[2]*l+a[2]*f),o[3]*c+a[3]*(1-c),this._hasAlpha||i._hasAlpha);return e.convertHelper(this._format,d)},e.prototype.tint=function(e){return T.mix(this,e)},e.prototype.shade=function(e){return w.mix(this,e)},e.prototype.spin=function(t){var n=e.convertHelper(y,this)._values;return e.convertHelper(this._format,new e(y,c(n[0]+t),n[1],n[2],this._values[3],this._hasAlpha))},e}(),O={aliceblue:i(240,248,245),antiquewhite:i(250,235,215),aqua:i(0,255,255),aquamarine:i(127,255,212),azure:i(240,255,255),beige:i(245,245,220),bisque:i(255,228,196),black:i(0,0,0),blanchedalmond:i(255,235,205),blue:i(0,0,255),blueviolet:i(138,43,226),brown:i(165,42,42),burlywood:i(222,184,35),cadetblue:i(95,158,160),chartreuse:i(127,255,0),chocolate:i(210,105,30),coral:i(255,127,80),cornflowerblue:i(100,149,237),cornsilk:i(255,248,220),crimson:i(220,20,60),cyan:i(0,255,255),darkblue:i(0,0,139),darkcyan:i(0,139,139),darkgoldenrod:i(184,134,11),darkgray:i(169,169,169),darkgreen:i(0,100,0),darkgrey:i(169,169,169),darkkhaki:i(189,183,107),darkmagenta:i(139,0,139),darkolivegreen:i(85,107,47),darkorange:i(255,140,0),darkorchid:i(153,50,204),darkred:i(139,0,0),darksalmon:i(233,150,122),darkseagreen:i(143,188,143),darkslateblue:i(72,61,139),darkslategray:i(47,79,79),darkslategrey:i(47,79,79),darkturquoise:i(0,206,209),darkviolet:i(148,0,211),deeppink:i(255,20,147),deepskyblue:i(0,191,255),dimgray:i(105,105,105),dimgrey:i(105,105,105),dodgerblue:i(30,144,255),firebrick:i(178,34,34),floralwhite:i(255,250,240),forestgreen:i(34,139,34),fuchsia:i(255,0,255),gainsboro:i(220,220,220),ghostwhite:i(248,248,255),gold:i(255,215,0),goldenrod:i(218,165,32),gray:i(128,128,128),green:i(0,128,0),greenyellow:i(173,255,47),grey:i(128,128,128),honeydew:i(240,255,240),hotpink:i(255,105,180),indianred:i(205,92,92),indigo:i(75,0,130),ivory:i(255,255,240),khaki:i(240,230,140),lavender:i(230,230,250),lavenderblush:i(255,240,245),lawngreen:i(124,252,0),lemonchiffon:i(255,250,205),lightblue:i(173,216,230),lightcoral:i(240,128,128),lightcyan:i(224,255,255),lightgoldenrodyellow:i(250,250,210),lightgray:i(211,211,211),lightgreen:i(144,238,144),lightgrey:i(211,211,211),lightpink:i(255,182,193),lightsalmon:i(255,160,122),lightseagreen:i(32,178,170),lightskyblue:i(135,206,250),lightslategray:i(119,136,153),lightslategrey:i(119,136,153),lightsteelblue:i(176,196,222),lightyellow:i(255,255,224),lime:i(0,255,0),limegreen:i(50,205,50),linen:i(250,240,230),maroon:i(128,0,0),mediumaquamarine:i(102,205,170),mediumblue:i(0,0,205),mediumorchid:i(186,85,211),mediumpurple:i(147,112,219),mediumseagreen:i(60,179,113),mediumslateblue:i(123,104,238),mediumspringgreen:i(0,250,154),mediumturquoise:i(72,209,204),mediumvioletred:i(199,21,133),midnightblue:i(25,25,112),mintcream:i(245,255,250),mistyrose:i(255,228,225),moccasin:i(255,228,181),navajowhite:i(255,222,173),navy:i(0,0,128),oldlace:i(253,245,230),olive:i(128,128,0),olivedrab:i(107,142,35),orange:i(255,165,0),purple:i(128,0,128),rebeccapurple:i(102,51,153),red:i(255,0,0),silver:i(192,192,192),teal:i(0,128,128),transparent:o(0,0,0,0),white:i(255,255,255),yellow:i(255,255,0)},w=(O.aliceblue,O.antiquewhite,O.aqua,O.aquamarine,O.azure,O.beige,O.bisque,O.black),T=(O.blanchedalmond,O.blue,O.blueviolet,O.brown,O.burlywood,O.cadetblue,O.chartreuse,O.chocolate,O.coral,O.cornflowerblue,O.cornsilk,O.crimson,O.cyan,O.darkblue,O.darkcyan,O.darkgoldenrod,O.darkgray,O.darkgreen,O.darkgrey,O.darkkhaki,O.darkmagenta,O.darkolivegreen,O.darkorange,O.darkorchid,O.darkred,O.darksalmon,O.darkseagreen,O.darkslateblue,O.darkslategray,O.darkslategrey,O.darkturquoise,O.darkviolet,O.deeppink,O.deepskyblue,O.dimgray,O.dimgrey,O.dodgerblue,O.firebrick,O.floralwhite,O.forestgreen,O.fuchsia,O.gainsboro,O.ghostwhite,O.gold,O.goldenrod,O.gray,O.green,O.greenyellow,O.grey,O.honeydew,O.hotpink,O.indianred,O.indigo,O.ivory,O.khaki,O.lavender,O.lavenderblush,O.lawngreen,O.lemonchiffon,O.lightblue,O.lightcoral,O.lightcyan,O.lightgoldenrodyellow,O.lightgray,O.lightgreen,O.lightgrey,O.lightpink,O.lightsalmon,O.lightseagreen,O.lightskyblue,O.lightslategray,O.lightslategrey,O.lightsteelblue,O.lightyellow,O.lime,O.limegreen,O.linen,O.maroon,O.mediumaquamarine,O.mediumblue,O.mediumorchid,O.mediumpurple,O.mediumseagreen,O.mediumslateblue,O.mediumspringgreen,O.mediumturquoise,O.mediumvioletred,O.midnightblue,O.mintcream,O.mistyrose,O.moccasin,O.navajowhite,O.navy,O.oldlace,O.olive,O.olivedrab,O.orange,O.purple,O.rebeccapurple,O.red,O.silver,O.teal,O.transparent,O.white);O.yellow},function(e,t,n){\"use strict\";n(2)},function(e,t,n){\"use strict\"},function(e,t,n){\"use strict\";n(2)},function(e,t,n){\"use strict\";t.b=function(e,t){return[\"span\",[\"input\",{type:\"range\",value:e.scale,min:.5,max:3,step:.2,onchange:function(e){return t(o.b.GRAPH.UPDATE_SCALE,e.target.value)},onmousemove:function(e){return e.stopPropagation()}}]]},t.a=function(e,t){if(!e)return[\"section\",{class:r.a}];var n=e.entities,u=e.processes,s=e.edges,l=e.viewBox,f=void 0===l?{}:l;return[\"section\",{class:r.a},[\"svg\",c({width:\"100%\",height:\"100%\",id:\"graph-ui\",viewBox:f.x+\", \"+f.y+\", \"+f.width+\", \"+f.height},Object(a.a)(function(e){return t(o.b.GRAPH.MOVE_VIEWPORT,e)},function(e){e&&2===e.button&&e.target===e.currentTarget&&t(o.b.ENTITY.RESET_ACTIVE_NODE)}),{oncontextmenu:function(e){return e.preventDefault()}})].concat(s.map(function(e){return[\"line\",{x1:e.from.x,y1:e.from.y,x2:e.to.x,y2:e.to.y,class:Object(i.classes)(e.class,e.active&&\"active\")}]}),u.map(function(e){return[\"circle\",{class:Object(i.classes)(e.class,e.active&&\"active\"),transform:\"translate(\"+e.x+\", \"+e.y+\")\",onmousedown:function(){return t(o.b.ENTITY.SET_ACTIVE_PROCESS,e.id)},cx:0,cy:0,r:e.autostart?13:8,title:e.id}]}),n.map(function(e){return[\"g\",c({\"data-eid\":e.id,transform:\"translate(\"+e.x+\", \"+e.y+\")\",title:e.id,class:Object(i.classes)(e.class,e.active&&\"active\")},Object(a.a)(function(n){return t(o.b.GRAPH.MOVE_ENTITY_POSITION,{start:e,delta:n})},function(){return t(o.b.ENTITY.SET_ACTIVE_ENTITY,e.id)})),[\"rect\",{x:-15,y:-15,width:30,height:30,class:e.accept?\"accept\":\"\"}],[\"text\",{\"text-anchor\":\"middle\",x:0,y:30},e.label],e.initial&&[\"circle\",{cx:0,cy:0,r:6,class:\"initial\"}]]}))]};var r=n(59),i=n(1),o=(n.n(i),n(5)),a=n(27),c=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}},function(e,t,n){\"use strict\";n.d(t,\"a\",function(){return o});var r=n(1),i=(n.n(r),n(6)),o=Object(r.style)(i.b,{position:\"relative\",flexGrow:1,$nest:{\"& svg\":{position:\"absolute\",filter:\"drop-shadow(0 4px 4px rgba(0,0,0,0.6))\"},\"& text\":{fill:\"white\",stroke:\"black\",paintOrder:\"stroke\"},\"& line\":{stroke:\"darkgray\",$nest:{\"&.active\":{stroke:\"#ff7\"},\"&.to\":{strokeWidth:6},\"&.to.async\":{strokeDasharray:\"4, 5\"},\"&.to.acc\":{stroke:\"black\",strokeWidth:2},\"&.from\":{strokeWidth:2},\"&.from.cold\":{strokeDasharray:\"7, 10\"}}},\"& rect\":{$nest:{\"&.accept\":{strokeWidth:3,strokeDasharray:\"3, 3\"}}},\"& .group-1 rect\":{fill:\"orangered\"},\"& .group-1.active rect\":{fill:\"lightsalmon\",stroke:\"orangered\",strokeWidth:5},\"& circle.group-1\":{fill:\"orangered\"},\"& circle.group-1.active\":{fill:\"lightsalmon\"},\"& .group-1 .initial\":{fill:\"darkred\"},\"& .group-1 .accept\":{stroke:\"darkred\"},\"& .group-2 rect\":{fill:\"limegreen\"},\"& .group-2.active rect\":{fill:\"palegreen\",stroke:\"limegreen\",strokeWidth:5},\"& circle.group-2\":{fill:\"limegreen\"},\"& circle.group-2.active\":{fill:\"palegreen\"},\"& .group-2 .initial\":{fill:\"darkgreen\"},\"& .group-2 .accept\":{stroke:\"darkgreen\"},\"& .group-3 rect\":{fill:\"cornflowerblue\"},\"& .group-3.active rect\":{fill:\"lightblue\",stroke:\"cornflowerblue\",strokeWidth:5},\"& circle.group-3\":{fill:\"cornflowerblue\"},\"& circle.group-3.active\":{fill:\"lightblue\"},\"& .group-3 .initial\":{fill:\"darkslateblue\"},\"& .group-3 .accept\":{stroke:\"darkslateblue\"},\"& .group-4 rect\":{fill:\"orchid\"},\"& .group-4.active rect\":{fill:\"thistle\",stroke:\"orchid\",strokeWidth:5},\"& circle.group-4\":{fill:\"orchid\"},\"& circle.group-4.active\":{fill:\"thistle\"},\"& .group-4 .initial\":{fill:\"purple\"},\"& .group-4 .accept\":{stroke:\"purple\"},\"& .group-5 rect\":{fill:\"gold\"},\"& .group-5.active rect\":{fill:\"palegoldenrod\",stroke:\"gold\",strokeWidth:5},\"& circle.group-5\":{fill:\"gold\"},\"& circle.group-5.active\":{fill:\"beige\"},\"& .group-5 .initial\":{fill:\"darkgoldenrod\"},\"& .group-5 .accept\":{stroke:\"darkgoldenrod\"},\"& .group-6 rect\":{fill:\"lightseagreen\"},\"& .group-6.active rect\":{fill:\"paleturquoise\",stroke:\"lightseagreen\",strokeWidth:5},\"& circle.group-6\":{fill:\"lightseagreen\"},\"& circle.group-6.active\":{fill:\"paleturquoise\"},\"& .group-6 .initial\":{fill:\"darkslategray\"},\"& .group-6 .accept\":{stroke:\"darkslategray\"},\"& .group-7 rect\":{fill:\"orange\"},\"& .group-7.active rect\":{fill:\"moccasin\",stroke:\"orange\",strokeWidth:5},\"& circle.group-7\":{fill:\"orange\"},\"& circle.group-7.active\":{fill:\"moccasin\"},\"& .group-7 .initial\":{fill:\"saddlebrown\"},\"& .group-7 .accept\":{stroke:\"saddlebrown\"}}})},function(e,t,n){\"use strict\";function r(e,t){var n=[\"div\",{style:\"margin-top: 4px\"}];return n.push(Object(o.a)({onclick:function(){return t(u.a.PROCESS_RUN,e.id)},icon:i.g(),title:\"Run process\"})),e.async&&n.push(Object(o.a)({onclick:function(){return t(u.a.PROCESS_STOP,e.id)},icon:i.j(),title:\"Stop async process\"})),n}t.b=function(e,t){var n=e.entity,r=e.value,s=e.watching,l={value:r},f=[\"div\",{style:\"margin-top: 4px\"}];return s?(f.push([\"button\",{class:a.a,key:\"edit-btn\",onclick:function(){return t(u.b.ENTITY.WATCH_ACTIVE_ENTITY,!1)}},\"Edit\"],Object(o.a)({key:\"inspect-btn-\"+n.id,onclick:function(){return t(u.a.ENTITY_INSPECT,n.id)},icon:i.i(),title:\"Inspect entity value\"})),n.value&&f.push(Object(o.a)({key:\"reset-btn-\"+n.id,onclick:function(){return t(u.a.ENTITY_RESET,n.id)},icon:i.h(),title:\"Reset entity value\"}))):f.push([\"button\",{class:a.a,onclick:function(){return t(u.b.ENTITY.WATCH_ACTIVE_ENTITY,!0)}},\"Cancel\"],[\"button\",{class:a.a,key:\"save-btn-\"+n.id,onclick:function(){var e=JSON.parse(l.value);t(u.b.ENTITY.SAVE_VALUE,e)}},\"Save\"]),[\"section\",{class:c.b},[\"div\",{class:c.d,key:n.id+s},function(e,t,n){var r=\"\";if(null!=e)try{r=JSON.stringify(e,null,\"  \")}catch(e){r=\"Error: \"+e.message}return[\"code\",[\"pre\",{contentEditable:!t,onInput:function(e){return n.value=e.target.textContent}},r]]}(r,s,l)],n.id&&f]},t.a=function(e,t){function n(e){var t=[\"(\",e.inputs.filter(function(e){return e.type!==l.PORT_TYPES.ACCUMULATOR}).map(function(e){var t=s.entities[e.eid];return(t.namespace===r.namespace?t.name:t.namespace+\"/\"+t.name)+\"::\"+e.type}).join(\", \"),\")\"];return e.autostart&&t.unshift(\"S\"),e.async&&t.unshift(\"A\"),t.join(\"\")}var r=e.entity,s=e.graph,f=e.meta;if(!r.id)return[\"section\",{class:c.b},[\"div\",{class:c.d}]];var d=(r.processes||[]).map(function(e){return s.processes[e]}),p=d.filter(function(e){return!e.reaction}),h=d.filter(function(e){return e.reaction}),v=f?JSON.stringify(f,null,\"  \"):\"\";return[\"section\",{class:c.b},[\"div\",{class:c.d},[\"table\",[\"tr\",[\"th\",\"name\"],[\"td\",r.name]],[\"tr\",[\"th\",\"namespace\"],[\"td\",r.namespace]],p.length>0&&[\"tr\",[\"th\",\"streams\"],[\"td\"].concat(p.map(function(e){return[\"p\",[\"a\",{onClick:function(){return t(u.b.ENTITY.SET_ACTIVE_PROCESS,e.id)}},n(e)]]}))],h.length>0&&[\"tr\",[\"th\",\"reactions\"],[\"td\"].concat(h.map(function(e){return[\"p\",[\"a\",{onClick:function(){return t(u.b.ENTITY.SET_ACTIVE_PROCESS,e.id)}},n(e)]]}))]],r.value&&[\"h3\",\" initial value  \",Object(o.a)({onclick:function(){return t(u.a.ENTITY_RESET,r.id)},icon:i.h(),title:\"Reset entity value\"})],r.value&&[\"code\",[\"pre\",JSON.stringify(r.value,null,\"  \")]],f&&[\"h3\",\" meta data  \",[\"button\",{class:a.a,onclick:function(){var e=JSON.parse(v);t(u.b.ENTITY.SAVE_META,{id:r.id,value:e})}},\"Save\"]],f&&[\"code\",[\"pre\",{contentEditable:!0,onInput:function(e){return v=e.target.textContent}},v]]],[\"div\",{style:\"margin-top: 4px\"},Object(o.a)({key:\"inspect-btn-\"+r.id,onclick:function(){return t(u.a.ENTITY_INSPECT,r.id)},icon:i.i(),title:\"Inspect entity value\"})]]},t.d=function(e,t){var n=e.process;return[\"section\",{class:c.b},[\"div\",{class:c.d},[\"code\",[\"pre\",n.procedure.toString()]]],r(n,t)]},t.c=function(e,t){var n=e.process,i=e.graph,o=n.reaction?\"Reaction\":n.async?\"Async Stream\":\"Stream\";return n.autostart&&(o+=\" Autostart\"),n.delta&&(o=\"Delta \"+o),[\"section\",{class:c.b},[\"div\",{class:c.d},[\"table\",[\"tr\",[\"td\",\"type\"],[\"td\",o]],[\"tr\",[\"td\",\"output\"],[\"td\",[\"a\",{onClick:function(){return t(u.b.ENTITY.SET_ACTIVE_ENTITY,n.output)}},Object(s.printEntityName)(i.entities[n.output])]]],[\"tr\",[\"td\",\"inputs\"],[\"td\"].concat(n.inputs.filter(function(e){return e.type!==l.PORT_TYPES.ACCUMULATOR}).map(function(e){return[\"p\",[\"a\",{onClick:function(){return t(u.b.ENTITY.SET_ACTIVE_ENTITY,e.eid)}},Object(s.printEntityName)(i.entities[e.eid])+\" :: \"+e.type]]}))]]],r(n,t)]};var i=n(14),o=n(15),a=n(11),c=n(16),u=n(5),s=n(7),l=n(4)},function(e,t,n){\"use strict\";function r(e,t,n,i,o){if(t.__entity__){var f=t.__entity__,d=[\"span\",{class:\"entity-controls\"},Object(c.a)({icon:a.i(),class:u.b,onclick:function(){return i(s.a.ENTITY_INSPECT,f.id)},title:\"Inspect entity value\"})];null!=f.value&&d.push(Object(c.a)({class:u.b,onclick:function(){return i(s.a.ENTITY_RESET,f.id)},icon:a.h(),title:\"Reset entity value\"}));var p=\"entity-item\";return n===f.id&&(p+=\" selected\"),[\"li\",[\"div\",{class:p,onclick:function(){return i(s.b.ENTITY.SET_ACTIVE_ENTITY,f.id)}},null!=f.value?a.k():a.j(),\" \"+e+\" \",d]]}var h=[\"li\",[\"div\",{onclick:function(){return i(s.b.TREE.TOGGLE_LEVEL,t.__path__)}},a.f(o[t.__path__]?\"\":l),\" \"+e]];if(!o[t.__path__]){var v=[\"ul\"];for(var g in t)\"__path__\"!==g&&v.push(r(g,t[g],n,i,o));h.push(v)}return h}t.a=function(e,t){var n=e.fold,o=e.tree,a=e.selected,c=[\"ul\",{class:i.c}];if(o){var u=Object.keys(o).map(function(e){return r(e,o[e],a.id,t,n)});c.push.apply(c,u)}return c};var i=n(16),o=n(1),a=(n.n(o),n(14)),c=n(15),u=n(11),s=n(5),l=Object(o.style)({transform:\"rotate(90deg)\"})},function(e,t,n){\"use strict\";function r(e){function t(){e({width:window.innerWidth,height:window.innerHeight})}return window.addEventListener(\"resize\",t),t(),function(){window.removeEventListener(\"resize\",t)}}t.a=r},function(e,t,n){\"use strict\";t.a=function(e,t,n){return Math.max(e,Math.min(n,t))};Math.PI},function(e,t,n){\"use strict\";e.exports=function e(t,n){if(t===n)return!0;var r,i=Array.isArray(t),o=Array.isArray(n);if(i&&o){if(t.length!=n.length)return!1;for(r=0;r<t.length;r++)if(!e(t[r],n[r]))return!1;return!0}if(i!=o)return!1;if(t&&n&&\"object\"==typeof t&&\"object\"==typeof n){var a=Object.keys(t);if(a.length!==Object.keys(n).length)return!1;var c=t instanceof Date,u=n instanceof Date;if(c&&u)return t.getTime()==n.getTime();if(c!=u)return!1;var s=t instanceof RegExp,l=n instanceof RegExp;if(s&&l)return t.toString()==n.toString();if(s!=l)return!1;for(r=0;r<a.length;r++)if(!Object.prototype.hasOwnProperty.call(n,a[r]))return!1;for(r=0;r<a.length;r++)if(!e(t[a[r]],n[a[r]]))return!1;return!0}return!1}},function(e,t,n){\"use strict\";function r(e,t){for(var n=[],r=0;r<t.length;r++)n[r]=t[r]*e;return n}function i(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];t+=r*r}return Math.sqrt(t)}t.a=function(e,t){for(var n=[],r=0;r<e.length;r++)n[r]=e[r]+t[r];return n},t.e=function(e,t){for(var n=[],r=0;r<e.length;r++)n[r]=e[r]-t[r];return n},t.c=r,t.b=i,t.d=function(e){return function(e,t){for(var n=[],r=0;r<t.length;r++)n[r]=t[r]/e;return n}(i(e),e)};n(8).a},function(e,t,n){e.exports=n(67).default,e.exports.default=e.exports},function(e,t,n){\"use strict\";function r(e){return a(e)||o(e)}function i(e){return\"function\"==typeof e}function o(e){return null===e}function a(e){return void 0===e}function c(e){throw e||(e=h),new Error(\"Inferno Error: \"+e)}function u(e,t){var n={};if(e)for(var r in e)n[r]=e[r];if(t)for(var i in t)n[i]=t[i];return n}function s(){this.listeners=[]}function l(e,t,n){i(t)&&(t=t(e.state,e.props,e.context));var o=e._pendingState;if(r(o))e._pendingState=t;else for(var a in t)o[a]=t[a];e._pendingSetState||e._blockRender?(e._pendingSetState=!0,i(n)&&e._blockRender&&e._lifecycle.addListener(n.bind(e))):e._updating?function(e,t,n){var i=g.get(e);void 0===i&&(i=[],g.set(e,i),y.then(function(){g.delete(e),e._updating=!0,f(e,t,function(){for(var t=0,n=i.length;t<n;t++)i[t].call(e)}),e._updating=!1})),r(n)||i.push(n)}(e,!1,n):(e._pendingSetState=!0,e._updating=!0,f(e,!1,n),e._updating=!1)}function f(e,t,n){if(!e._unmounted){if(t||!e._blockRender){e._pendingSetState=!1;var s=e._pendingState,l=e.state,f=u(l,s),h=e.props,g=e.context;e._pendingState=null;var y,m=e._updateComponent(l,f,h,h,g,t,!0),b=!0;if(function(e){return o(e)||!1===e||!0===e||a(e)}(m))y=d.createVNode(4096,null);else if(m===p)y=e._lastInput,b=!1;else if(function(e){var t=typeof e;return\"string\"===t||\"number\"===t}(m))y=d.createVNode(1,null,null,m);else{if(v(m))return c();y=m}var _=e._lastInput,O=e._vNode,w=_.dom&&_.dom.parentNode||(_.dom=O.dom);if(28&y.flags&&(y.parentVNode=O),e._lastInput=y,b){var T;r(e.getChildContext)||(T=e.getChildContext()),T=r(T)?e._childContext:u(g,T);var E=e._lifecycle;if(d.internal_patch(_,y,w,E,T,e._isSVG,!1),e._unmounted)return;E.trigger(),r(e.componentDidUpdate)||e.componentDidUpdate(h,l,g),o(d.options.afterUpdate)||d.options.afterUpdate(O)}var k=O.dom=y.dom;for(d.options.findDOMNodeEnabled&&d.internal_DOMNodeMap.set(e,y.dom);!r(O=O.parentVNode);)(28&O.flags)>0&&(O.dom=k)}else e.state=e._pendingState,e._pendingState=null;i(n)&&n.call(e)}}Object.defineProperty(t,\"__esModule\",{value:!0});var d=n(18),p=\"$NO_OP\",h=\"a runtime error occured! Use Inferno in development environment to find the error.\",v=Array.isArray;s.prototype.addListener=function(e){this.listeners.push(e)},s.prototype.trigger=function(){for(var e,t=this.listeners;e=t.shift();)e()};var g=new Map,y=Promise.resolve(),m=function(e,t){this.state=null,this._blockRender=!1,this._blockSetState=!0,this._pendingSetState=!1,this._pendingState=null,this._lastInput=null,this._vNode=null,this._unmounted=!1,this._lifecycle=null,this._childContext=null,this._isSVG=!1,this._updating=!0,this.props=e||d.EMPTY_OBJ,this.context=t||d.EMPTY_OBJ};m.prototype.forceUpdate=function(e){this._unmounted||f(this,!0,e)},m.prototype.setState=function(e,t){this._unmounted||(this._blockSetState?c():l(this,e,t))},m.prototype._updateComponent=function(e,t,n,i,o,a,s){if(!0===this._unmounted&&c(),n!==i||i===d.EMPTY_OBJ||e!==t||a){if(n!==i||i===d.EMPTY_OBJ){if(!r(this.componentWillReceiveProps)&&!s){if(this._blockRender=!0,this.componentWillReceiveProps(i,o),this._unmounted)return p;this._blockRender=!1}this._pendingSetState&&(t=u(t,this._pendingState),this._pendingSetState=!1,this._pendingState=null)}if(a||r(this.shouldComponentUpdate)||this.shouldComponentUpdate&&this.shouldComponentUpdate(i,t,o)){r(this.componentWillUpdate)||(this._blockSetState=!0,this.componentWillUpdate(i,t,o),this._blockSetState=!1),this.props=i,this.state=t,this.context=o,d.options.beforeRender&&d.options.beforeRender(this);var l=this.render(i,t,o);return d.options.afterRender&&d.options.afterRender(this),l}this.props=i,this.state=t,this.context=o}return p},m.prototype.render=function(e,t,n){},t.default=m},function(e,t,n){\"use strict\";function r(e){var t=typeof e;return\"string\"===t||\"number\"===t}function i(e){return l(e)||s(e)}function o(e){return s(e)||!1===e||function(e){return!0===e}(e)||l(e)}function a(e){return\"function\"==typeof e}function c(e){return\"string\"==typeof e}function u(e){return\"number\"==typeof e}function s(e){return null===e}function l(e){return void 0===e}function f(e){return\"object\"==typeof e}function d(e){throw e||(e=Se),new Error(\"Inferno Error: \"+e)}function p(e,t){var n={};if(e)for(var r in e)n[r]=e[r];if(t)for(var i in t)n[i]=t[i];return n}function h(){this.listeners=[]}function v(e,t,n,r){var i=Ue.get(e);if(n)i||((i={items:new Map,docEvent:null}).docEvent=function(e,t){var n=function(e){var n=t.items.size;if(n>0){e.stopPropagation=y;var r={dom:document};try{Object.defineProperty(e,\"currentTarget\",{configurable:!0,get:function(){return r.dom}})}catch(e){}!function(e,t,n,r,i,o){var a=t;for(;r>0;){if(i&&a.disabled)return;var c=n.get(a);if(c&&(r--,o.dom=a,c.event?c.event(c.data,e):c(e),e.cancelBubble))return;if(null===(a=a.parentNode))return}}(e,e.target,t.items,n,\"click\"===e.type,r)}};return document.addEventListener(g(e),n),n}(e,i),Ue.set(e,i)),t||De&&\"onClick\"===e&&function(e){e.onclick=m}(r),i.items.set(r,n);else if(i){var o=i.items;o.delete(r)&&0===o.size&&(document.removeEventListener(g(e),i.docEvent),Ue.delete(e))}}function g(e){return e.substr(2).toLowerCase()}function y(){this.cancelBubble=!0,this.stopImmediatePropagation()}function m(){}function b(e){return\"checkbox\"===e||\"radio\"===e}function _(e){var t=this.vNode,n=t.props||Be,r=t.dom,i=n.value;if(n.onInput){var o=n.onInput;o.event?o.event(o.data,e):o(e)}else n.oninput&&n.oninput(e);var a=this.vNode.props||Be;i!==a.value&&T(a,r)}function O(e){var t=(this.vNode.props||Be).onChange;t.event?t.event(t.data,e):t(e)}function w(e){e.stopPropagation();var t=this.vNode,n=t.props||Be,r=t.dom;if(n.onClick){var i=n.onClick;i.event?i.event(i.data,e):i(e)}else n.onclick&&n.onclick(e);T(this.vNode.props||Be,r)}function T(e,t){var n=e.type,r=e.value,o=e.checked,a=e.multiple,c=e.defaultValue,u=!i(r);n&&n!==t.type&&t.setAttribute(\"type\",n),a&&a!==t.multiple&&(t.multiple=a),i(c)||u||(t.defaultValue=c+\"\"),b(n)?(u&&(t.value=r),i(o)||(t.checked=o)):u&&t.value!==r?(t.defaultValue=r,t.value=r):i(o)||(t.checked=o)}function E(e,t){if(\"optgroup\"===e.type){var n=e.children;if(xe(n))for(var r=0,i=n.length;r<i;r++)k(n[r],t);else ge(n)&&k(n,t)}else k(e,t)}function k(e,t){var n=e.props||Be,r=e.dom;r.value=n.value,xe(t)&&-1!==t.indexOf(n.value)||n.value===t?r.selected=!0:i(t)&&i(n.selected)||(r.selected=n.selected||!1)}function S(e){var t=this.vNode,n=t.props||Be,r=t.dom,i=n.value;if(n.onChange){var o=n.onChange;o.event?o.event(o.data,e):o(e)}else n.onchange&&n.onchange(e);var a=this.vNode,c=a.props||Be;i!==c.value&&j(a,r,c,!1)}function j(e,t,n,r){n.multiple!==t.multiple&&(t.multiple=n.multiple);var a=e.children;if(!o(a)){var c=n.value;if(r&&i(c)&&(c=n.defaultValue),xe(a))for(var u=0,s=a.length;u<s;u++)E(a[u],c);else ge(a)&&E(a,c)}}function x(e){var t=(this.vNode.props||Be).onChange;t.event?t.event(t.data,e):t(e)}function I(e){var t=this.vNode,n=t.props||Be,r=n.value;if(n.onInput){var i=n.onInput;i.event?i.event(i.data,e):i(e)}else n.oninput&&n.oninput(e);var o=this.vNode;r!==(o.props||Be).value&&C(o,t.dom,!1)}function C(e,t,n){var r=e.value,o=t.value;if(i(r)){if(n){var a=e.defaultValue;i(a)?\"\"!==o&&(t.defaultValue=\"\",t.value=\"\"):a!==o&&(t.defaultValue=a,t.value=a)}}else o!==r&&(t.defaultValue=r,t.value=r)}function M(e,t,n,r,i,o){(512&e)>0?function(e,t,n,r,i){T(n,t),i&&(t.vNode=e,r&&(b(n.type)?(t.onclick=w,t.onclick.wrapped=!0):(t.oninput=_,t.oninput.wrapped=!0),n.onChange&&(t.onchange=O,t.onchange.wrapped=!0)))}(t,n,r,i,o):(2048&e)>0?function(e,t,n,r,i){j(e,t,n,r),i&&(t.vNode=e,r&&(t.onchange=S,t.onchange.wrapped=!0))}(t,n,r,i,o):(1024&e)>0&&function(e,t,n,r,i){C(n,t,r),i&&(t.vNode=e,r&&(t.oninput=I,t.oninput.wrapped=!0,n.onChange&&(t.onchange=x,t.onchange.wrapped=!0)))}(t,n,r,i,o)}function N(e){return e.type&&b(e.type)?!i(e.checked):!i(e.value)}function A(e,t,n,a,c){var u=e.children,l=e.props,d=e.className,p=e.flags,h=e.ref;if(c=c||(128&p)>0,1!==t.nodeType||t.tagName.toLowerCase()!==e.type){var v=J(e,null,n,a,c);return e.dom=v,ue(t.parentNode,v,t),v}if(e.dom=t,o(u)?null===t.firstChild||function(e,t){return Boolean(t&&t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html&&le(e,t.dangerouslySetInnerHTML.__html))}(t,l)||(t.textContent=\"\"):function(e,t,n,i,o){!function(e){for(var t=e.firstChild;t;)if(8===t.nodeType)if(\"!\"===t.data){var n=document.createTextNode(\"\");e.replaceChild(n,t),t=t.nextSibling}else{var r=t.previousSibling;e.removeChild(t),t=r||e.firstChild}else t=t.nextSibling}(t);var a=t.firstChild;if(r(e))s(a)||3!==a.nodeType?\"\"===e?t.appendChild(document.createTextNode(\"\")):t.textContent=e:a.nodeValue!==e&&(a.nodeValue=e),s(a)||(a=a.nextSibling);else if(xe(e))for(var c=0,u=e.length;c<u;c++){var l=e[c];if(!s(l)&&f(l))if(s(a))B(l,t,n,i,o);else{var d=a.nextSibling;P(l,a,n,i,o),a=d}}else s(a)?B(e,t,n,i,o):(P(e,a,n,i,o),a=a.nextSibling);for(;a;){var p=a.nextSibling;t.removeChild(a),a=p}}(u,t,n,a,c),l){var g=!1,y=(3584&p)>0;y&&(g=N(l));for(var m in l)F(m,null,l[m],t,c,g);y&&M(p,e,t,l,!0,g)}return i(d)?\"\"!==t.className&&t.removeAttribute(\"class\"):c?t.setAttribute(\"class\",d):t.className=d,h&&ee(t,h,n),t}function P(e,t,n,r,i){var o=e.flags;28&o?function(e,t,n,r,i,o){var a=e.type,c=e.ref,u=e.props||Be;if(o){var s=t.namespaceURI===Ne,l=te(e,a,u,r,s,n),f=l._lastInput;l._vNode=e,P(f,t,n,l._childContext,s),e.dom=f.dom,Z(e,c,l,n),l._updating=!1,Ie.findDOMNodeEnabled&&Ge.set(l,t)}else{var d=re(e,a,u,r);P(d,t,n,r,i),e.children=d,e.dom=d.dom,Q(u,c,t,n)}}(e,t,n,r,i,(4&o)>0):3970&o?A(e,t,n,r,i):1&o?function(e,t){if(3!==t.nodeType){var n=$(e,null);return e.dom=n,ue(t.parentNode,n,t),n}var r=e.children;t.nodeValue!==r&&(t.nodeValue=r),e.dom=t}(e,t):4096&o?function(e,t){e.dom=t}(e,t):d()}function R(e,t,n,r,c){var u=e.flags,d=e.dom;if(28&u){var p=e.children,h=(4&u)>0,v=e.props||Be,g=e.ref;c||(h?p._unmounted||(s(Ie.beforeUnmount)||Ie.beforeUnmount(e),l(p.componentWillUnmount)||p.componentWillUnmount(),g&&!c&&g(null),p._unmounted=!0,Ie.findDOMNodeEnabled&&Ge.delete(p),R(p._lastInput,null,p._lifecycle,!1,c)):(i(g)||i(g.onComponentWillUnmount)||g.onComponentWillUnmount(d,v),R(p,null,n,!1,c))),Ie.recyclingEnabled&&!h&&(t||r)&&function(e){var t=e.ref;if(!t||!(t.onComponentWillMount||t.onComponentWillUnmount||t.onComponentDidMount||t.onComponentWillUpdate||t.onComponentDidUpdate)){var n=e.type,r=e.key,i=Ve.get(n);if(l(i)&&(i={keyed:new Map,nonKeyed:[]},Ve.set(n,i)),s(r))i.nonKeyed.push(e);else{var o=i.keyed.get(r);l(o)&&(o=[],i.keyed.set(r,o)),o.push(e)}}}(e)}else if(3970&u){var y=e.ref,m=e.props;!c&&a(y)&&y(null);var b=e.children;if(!i(b))if(xe(b))for(var _=0,O=b.length;_<O;_++){var w=b[_];!o(w)&&f(w)&&R(w,null,n,!1,c)}else f(b)&&R(b,null,n,!1,c);if(!s(m))for(var T in m)null!==m[T]&&G(T)&&(z(T,m[T],null,d),m[T]=null);Ie.recyclingEnabled&&(t||r)&&function(e){var t=e.type,n=e.key,r=Ye.get(t);if(l(r)&&(r={keyed:new Map,nonKeyed:[]},Ye.set(t,r)),s(n))r.nonKeyed.push(e);else{var i=r.keyed.get(n);l(i)&&(i=[],r.keyed.set(n,i)),i.push(e)}}(e)}s(t)||function(e,t){e.removeChild(t)}(t,d)}function H(e){Ie.findDOMNodeEnabled||d();var t=e&&e.nodeType?e:null;return Ge.get(e)||t}function L(e,t){if(ze===t&&d(),e!==ke){var n=function(e){for(var t=0,n=Fe.length;t<n;t++){var r=Fe[t];if(r.dom===e)return r}return null}(t);if(s(n)){var r=new h;o(e)||(e.dom&&(e=de(e)),function(e,t,n){if(!s(t)){var r=t.firstChild;if(!s(r)){for(P(e,r,n,Be,!1),r=t.firstChild;r=r.nextSibling;)t.removeChild(r);return!0}}return!1}(e,t,r)||B(e,t,r,Be,!1),n=function(e,t,n){var r={dom:e,input:t,lifecycle:n};return Fe.push(r),r}(t,e,r),r.trigger())}else{var a=n.lifecycle;a.listeners=[],i(e)?(R(n.input,t,a,!1,!1),function(e){for(var t=0,n=Fe.length;t<n;t++)if(Fe[t]===e)return void Fe.splice(t,1)}(n)):(e.dom&&(e=de(e)),D(n.input,e,t,a,Be,!1,!1)),n.input=e,a.trigger()}if(n){var c=n.input;if(c&&28&c.flags)return c.children}}}function W(e){return function(t,n){e||(e=t),L(n,e)}}function D(e,t,n,r,i,o,a){if(e!==t){var c=e.flags,u=t.flags;if(28&u){var s=(4&u)>0;28&c?Y(e,t,n,r,i,o,s,a):ne(n,X(t,null,r,i,o,s),e,r,a)}else 3970&u?3970&c?V(e,t,n,r,i,o,a):ne(n,J(t,null,r,i,o),e,r,a):1&u?1&c?function(e,t){var n=t.children,r=e.dom;t.dom=r,e.children!==n&&(r.nodeValue=n)}(e,t):ne(n,$(t,null),e,r,a):4096&u?4096&c?function(e,t){t.dom=e.dom}(e,t):ne(n,q(t,null),e,r,a):function(e,t,n,r,i,o,a){ne(n,B(t,null,r,i,o),e,r,a)}(e,t,n,r,i,o,a)}}function U(e,t,n,r){ge(e)?R(e,t,n,!0,r):xe(e)?se(t,e,n,r):t.textContent=\"\"}function V(e,t,n,a,c,u,f){var d=t.type;if(e.type!==d)ce(e,t,n,a,c,u,f);else{var p=e.dom,h=e.props,g=t.props,y=e.children,m=t.children,b=e.flags,_=t.flags,O=t.ref,w=e.className,T=t.className;if(t.dom=p,u=u||(128&_)>0,y!==m){!function(e,t,n,a,c,u,f,d,p){var h=!1,v=!1;64&t?h=!0:(32&e)>0&&(32&t)>0?(v=!0,h=!0):o(a)?U(n,c,u,p):o(n)?r(a)?ie(c,a):xe(a)?K(a,c,u,f,d):B(a,c,u,f,d):r(a)?r(n)?function(e,t){var n=e.firstChild;s(n)?ie(e,t):n.nodeValue=t}(c,a):(U(n,c,u,p),ie(c,a)):xe(a)?xe(n)?(h=!0,function(e,t){return t.length>0&&!i(t[0])&&!i(t[0].key)&&e.length>0&&!i(e[0])&&!i(e[0].key)}(n,a)&&(v=!0)):(U(n,c,u,p),K(a,c,u,f,d)):xe(n)?(se(c,n,u,p),B(a,c,u,f,d)):ge(a)&&(ge(n)?D(n,a,c,u,f,d,p):(U(n,c,u,p),B(a,c,u,f,d)));if(h){var g=n.length,y=a.length;0===g?y>0&&K(a,c,u,f,d):0===y?se(c,n,u,p):v?function(e,t,n,r,i,o,a,c,u){var f,d,p,h,v,g,y,m=c-1,b=u-1,_=0,O=0,w=e[_],T=t[O],E=e[m],k=t[b];T.dom&&(t[O]=T=de(T));k.dom&&(t[b]=k=de(k));e:{for(;w.key===T.key;){if(D(w,T,n,r,i,o,a),_++,O++,_>m||O>b)break e;w=e[_],(T=t[O]).dom&&(t[O]=T=de(T))}for(;E.key===k.key;){if(D(E,k,n,r,i,o,a),m--,b--,_>m||O>b)break e;E=e[m],(k=t[b]).dom&&(t[b]=k=de(k))}}if(_>m){if(O<=b)for(v=(g=b+1)<u?t[g].dom:null;O<=b;)(y=t[O]).dom&&(t[O]=y=de(y)),O++,ae(n,B(y,null,r,i,o),v)}else if(O>b)for(;_<=m;)R(e[_++],n,r,!1,a);else{var S=m-_+1,j=b-O+1,x=new Array(j);for(f=0;f<j;f++)x[f]=-1;var I=!1,C=0,M=0;if(j<=4||S*j<=16){for(f=_;f<=m;f++)if(p=e[f],M<j)for(d=O;d<=b;d++)if(h=t[d],p.key===h.key){x[d-O]=f,C>d?I=!0:C=d,h.dom&&(t[d]=h=de(h)),D(p,h,n,r,i,o,a),M++,e[f]=null;break}}else{var N=new Map;for(f=O;f<=b;f++)N.set(t[f].key,f);for(f=_;f<=m;f++)p=e[f],M<j&&(l(d=N.get(p.key))||(h=t[d],x[d-O]=f,C>d?I=!0:C=d,h.dom&&(t[d]=h=de(h)),D(p,h,n,r,i,o,a),M++,e[f]=null))}if(S===c&&0===M)for(se(n,e,r,a);O<j;)(y=t[O]).dom&&(t[O]=y=de(y)),O++,ae(n,B(y,null,r,i,o),null);else{for(f=S-M;f>0;)s(p=e[_++])||(R(p,n,r,!0,a),f--);if(I){var A=function(e){var t,n,r,i,o,a=e.slice(0),c=[0],u=e.length;for(t=0;t<u;t++){var s=e[t];if(-1!==s){if(n=c[c.length-1],e[n]<s){a[t]=n,c.push(t);continue}for(r=0,i=c.length-1;r<i;)e[c[o=(r+i)/2|0]]<s?r=o+1:i=o;s<e[c[r]]&&(r>0&&(a[t]=c[r-1]),c[r]=t)}}r=c.length,i=c[r-1];for(;r-- >0;)c[r]=i,i=a[i];return c}(x);for(d=A.length-1,f=j-1;f>=0;f--)-1===x[f]?((y=t[C=f+O]).dom&&(t[C]=y=de(y)),g=C+1,ae(n,B(y,null,r,i,o),g<u?t[g].dom:null)):d<0||f!==A[d]?(y=t[C=f+O],g=C+1,ae(n,y.dom,g<u?t[g].dom:null)):d--}else if(M!==j)for(f=j-1;f>=0;f--)-1===x[f]&&((y=t[C=f+O]).dom&&(t[C]=y=de(y)),g=C+1,ae(n,B(y,null,r,i,o),g<u?t[g].dom:null))}}}(n,a,c,u,f,d,p,g,y):function(e,t,n,r,i,o,a,c,u){for(var s=c>u?u:c,l=0;l<s;l++){var f=t[l];f.dom&&(f=t[l]=de(f)),D(e[l],f,n,r,i,o,a)}if(c<u)for(l=s;l<u;l++){var d=t[l];d.dom&&(d=t[l]=de(d)),oe(n,B(d,null,r,i,o))}else if(c>u)for(l=s;l<c;l++)R(e[l],n,r,!1,a)}(n,a,c,u,f,d,p,g,y)}}(b,_,y,m,p,a,c,!0===u&&\"foreignObject\"!==t.type,f)}if(h!==g){var E=h||Be,k=g||Be,S=!1;if(k!==Be){var j=(3584&_)>0;j&&(S=N(k));for(var x in k){var I=k[x];F(x,E[x],I,p,u,S)}j&&M(_,t,p,k,f,S)}if(E!==Be)for(var C in E)i(k[C])&&!i(E[C])&&function(e,t,n,r){\"value\"===e?n.value=2048&r?null:\"\":\"style\"===e?n.removeAttribute(\"style\"):G(e)?v(e,t,null,n):n.removeAttribute(e)}(C,E[C],p,_)}w!==T&&(i(T)?p.removeAttribute(\"class\"):u?p.setAttribute(\"class\",T):p.className=T),O&&(e.ref!==O||f)&&ee(p,O,a)}}function Y(e,t,n,a,c,u,h,v){var g=e.type,y=t.type,m=e.key,b=t.key;if(g!==y||m!==b)return ce(e,t,n,a,c,u,v),!1;var _=t.props||Be;if(h){var O=e.children;if(O._updating=!0,O._unmounted){if(s(n))return!0;ue(n,X(t,null,a,c,u,(4&t.flags)>0),e.dom)}else{var w=!l(O.componentDidUpdate),T=O.state,E=w?p(T,null):T,k=O.props;t.children=O,O._isSVG=u;var S=O._lastInput,j=O._updateComponent(E,T,k,_,c,!1,!1);if(O._unmounted)return!1;var x,I=!0;i(O.getChildContext)||(x=O.getChildContext()),x=i(x)?c:p(c,x),O._childContext=x,o(j)?j=he():j===ke?(j=S,I=!1):r(j)?j=ve(j,null):xe(j)?d():f(j)&&(s(j.dom)||(j=de(j))),28&j.flags?j.parentVNode=t:28&S.flags&&(S.parentVNode=t),O._lastInput=j,O._vNode=t,I&&(D(S,j,n,a,x,u,v),w&&O.componentDidUpdate&&O.componentDidUpdate(k,E),s(Ie.afterUpdate)||Ie.afterUpdate(t),Ie.findDOMNodeEnabled&&Ge.set(O,j.dom)),t.dom=j.dom}O._updating=!1}else{var C=!0,M=e.props,N=t.ref,A=!i(N),P=e.children,R=P;t.dom=e.dom,t.children=P,m!==b?C=!0:A&&!i(N.onComponentShouldUpdate)&&(C=N.onComponentShouldUpdate(M,_)),!1!==C&&(A&&!i(N.onComponentWillUpdate)&&N.onComponentWillUpdate(M,_),o(R=y(_,c))?R=he():r(R)&&R!==ke?R=ve(R,null):xe(R)?d():f(R)&&(s(R.dom)||(R=de(R))),R!==ke&&(D(P,R,n,a,c,u,v),t.children=R,A&&!i(N.onComponentDidUpdate)&&N.onComponentDidUpdate(M,_),t.dom=R.dom)),28&R.flags?R.parentVNode=t:28&P.flags&&(P.parentVNode=t)}return!1}function G(e){return\"o\"===e[0]&&\"n\"===e[1]}function F(e,t,n,r,o,a){if(t!==n){if(Le.has(e)||a&&\"value\"===e)return;if(Pe.has(e))r[e=\"autoFocus\"===e?e.toLowerCase():e]=!!n;else if(Ae.has(e)){var s=i(n)?\"\":n;r[e]!==s&&(r[e]=s)}else if(G(e))z(e,t,n,r);else if(i(n))r.removeAttribute(e);else if(\"style\"===e)!function(e,t,n){var r,o,a=n.style;if(c(t))return void(a.cssText=t);if(i(e)||c(e))for(r in t)o=t[r],a[r]=!u(o)||He.has(r)?o:o+\"px\";else{for(r in t)(o=t[r])!==e[r]&&(a[r]=!u(o)||He.has(r)?o:o+\"px\");for(r in e)i(t[r])&&(a[r]=\"\")}}(t,n,r);else if(\"dangerouslySetInnerHTML\"===e){var l=t&&t.__html,f=n&&n.__html;l!==f&&(i(f)||le(r,f)||(r.innerHTML=f))}else o&&Re.has(e)?r.setAttributeNS(Re.get(e),e,n):r.setAttribute(e,n)}}function z(e,t,n,r){if(t!==n)if(We.has(e))v(e,t,n,r);else{var o=e.toLowerCase(),c=r[o];if(c&&c.wrapped)return;if(a(n)||i(n))r[o]=n;else{var u=n.event;u&&a(u)?r[o]=function(e){u(n.data,e)}:d()}}}function B(e,t,n,r,i){var o=e.flags;return 3970&o?J(e,t,n,r,i):28&o?X(e,t,n,r,i,(4&o)>0):4096&o?q(e,t):1&o?$(e,t):void d()}function $(e,t){var n=document.createTextNode(e.children);return e.dom=n,s(t)||oe(t,n),n}function q(e,t){var n=document.createTextNode(\"\");return e.dom=n,s(t)||oe(t,n),n}function J(e,t,n,i,a){var c;if(Ie.recyclingEnabled&&(c=function(e,t,n,r){var i=e.type,o=Ye.get(i);if(!l(o)){var a=e.key,c=null===a?o.nonKeyed:o.keyed.get(a);if(!l(c)){var u=c.pop();if(!l(u))return V(u,e,null,t,n,r,!0),e.dom}}return null}(e,n,i,a),!s(c)))return s(t)||oe(t,c),c;var u=e.flags;a=a||(128&u)>0,c=function(e,t){return!0===t?document.createElementNS(Ne,e):document.createElement(e)}(e.type,a);var f=e.children,d=e.props,p=e.className,h=e.ref;if(e.dom=c,!o(f))if(r(f))ie(c,f);else{var v=!0===a&&\"foreignObject\"!==e.type;xe(f)?K(f,c,n,i,v):ge(f)&&B(f,c,n,i,v)}if(!s(d)){var g=!1,y=(3584&u)>0;y&&(g=N(d));for(var m in d)F(m,null,d[m],c,a,g);y&&M(u,e,c,d,!0,g)}return null!==p&&(a?c.setAttribute(\"class\",p):c.className=p),s(h)||ee(c,h,n),s(t)||oe(t,c),c}function K(e,t,n,r,i){for(var a=0,c=e.length;a<c;a++){var u=e[a];o(u)||(u.dom&&(e[a]=u=de(u)),B(e[a],t,n,r,i))}}function X(e,t,n,r,i,o){var a;if(Ie.recyclingEnabled&&(a=function(e,t,n,r){var i=e.type,o=Ve.get(i);if(!l(o)){var a=e.key,c=null===a?o.nonKeyed:o.keyed.get(a);if(!l(c)){var u=c.pop();if(!l(u)&&!Y(u,e,null,t,n,r,(4&e.flags)>0,!0))return e.dom}}return null}(e,n,r,i),!s(a)))return s(t)||oe(t,a),a;var c=e.type,u=e.props||Be,f=e.ref;if(o){var d=te(e,c,u,r,i,n),p=d._lastInput;d._vNode=e,e.dom=a=B(p,null,n,d._childContext,i),s(t)||oe(t,a),Z(e,f,d,n),d._updating=!1,Ie.findDOMNodeEnabled&&Ge.set(d,a)}else{var h=re(e,c,u,r);e.dom=a=B(h,null,n,r,i),e.children=h,Q(u,f,a,n),s(t)||oe(t,a)}return a}function Z(e,t,n,r){t&&(a(t)?t(n):d());var i=!l(n.componentDidMount),o=Ie.afterMount;!i&&s(o)||r.addListener(function(){n._updating=!0,o&&o(e),i&&n.componentDidMount(),n._updating=!1})}function Q(e,t,n,r){t&&(i(t.onComponentWillMount)||t.onComponentWillMount(e),i(t.onComponentDidMount)||r.addListener(function(){return t.onComponentDidMount(n,e)}))}function ee(e,t,n){if(a(t))n.addListener(function(){return t(e)});else{if(o(t))return;d()}}function te(e,t,n,a,c,u){l(a)&&(a=Be);var f=new t(n,a);if(e.children=f,f._blockSetState=!1,f.context=a,f.props===Be&&(f.props=n),f._lifecycle=u,f._unmounted=!1,f._isSVG=c,!i(f.componentWillMount)){if(f._blockRender=!0,f.componentWillMount(),f._pendingSetState){var h=f.state,v=f._pendingState;if(null===h)f.state=v;else for(var g in v)h[g]=v[g];f._pendingSetState=!1,f._pendingState=null}f._blockRender=!1}var y;i(f.getChildContext)||(y=f.getChildContext()),i(y)?f._childContext=a:f._childContext=p(a,y),s(Ie.beforeRender)||Ie.beforeRender(f);var m=f.render(n,f.state,a);return s(Ie.afterRender)||Ie.afterRender(f),xe(m)?d():o(m)?m=he():r(m)?m=ve(m,null):(m.dom&&(m=de(m)),28&m.flags&&(m.parentVNode=e)),f._lastInput=m,f}function ne(e,t,n,r,i){R(n,null,r,!1,i),ue(e,t,n.dom)}function re(e,t,n,i){var a=t(n,i);return xe(a)?d():o(a)?a=he():r(a)?a=ve(a,null):(a.dom&&(a=de(a)),28&a.flags&&(a.parentVNode=e)),a}function ie(e,t){\"\"!==t?e.textContent=t:e.appendChild(document.createTextNode(\"\"))}function oe(e,t){e.appendChild(t)}function ae(e,t,n){i(n)?oe(e,t):e.insertBefore(t,n)}function ce(e,t,n,r,i,o,a){R(e,null,r,!1,a);var c=B(t,null,r,i,o);t.dom=c,ue(n,c,e.dom)}function ue(e,t,n){e||(e=n.parentNode),e.replaceChild(t,n)}function se(e,t,n,r){(!Ie.recyclingEnabled||Ie.recyclingEnabled&&!r)&&function(e,t,n,r){for(var i=0,a=t.length;i<a;i++){var c=t[i];o(c)||R(c,e,n,!0,r)}}(null,t,n,r),e.textContent=\"\"}function le(e,t){var n=document.createElement(\"i\");return n.innerHTML=t,n.innerHTML===e.innerHTML}function fe(e,t,n,r,i,o,a,c){16&e&&(e=function(e){return!l(e.prototype)&&!l(e.prototype.render)}(t)?4:8);var u={children:void 0===r?null:r,className:void 0===n?null:n,dom:null,flags:e,key:void 0===o?null:o,props:void 0===i?null:i,ref:void 0===a?null:a,type:t};return!0!==c&&Te(u),null!==Ie.createVNode&&Ie.createVNode(u),u}function de(e){var t,n=e.flags;if(28&n){var i,a=e.props;if(s(a))i=Be;else{i={};for(var c in a)i[c]=a[c]}var u=(t=fe(n,e.type,null,null,i,e.key,e.ref,!0)).props,l=u.children;if(l)if(xe(l)){var f=l.length;if(f>0){for(var d=[],p=0;p<f;p++){var h=l[p];r(h)?d.push(h):!o(h)&&ge(h)&&d.push(de(h))}u.children=d}}else ge(l)&&(u.children=de(l));t.children=null}else if(3970&n){var v,g=e.children,y=e.props;if(null===y)v=Be;else{v={};for(var m in y)v[m]=y[m]}t=fe(n,e.type,e.className,g,v,e.key,e.ref,!g)}else 1&n&&(t=ve(e.children,e.key));return t}function pe(e,t){for(var n=[],i=arguments.length-2;i-- >0;)n[i]=arguments[i+2];var a=n,c=n.length;c>0&&!l(n[0])&&(t||(t={}),1===c&&(a=n[0]),l(a)||(t.children=a));var u;if(xe(e)){for(var s=[],f=0,d=e.length;f<d;f++)s.push(de(e[f]));u=s}else{var h=e.flags,v=e.className,g=e.key,y=e.ref;if(t&&(t.hasOwnProperty(\"className\")&&(v=t.className),t.hasOwnProperty(\"ref\")&&(y=t.ref),t.hasOwnProperty(\"key\")&&(g=t.key)),28&h){var m=(u=fe(h,e.type,v,null,e.props||t?p(e.props,t):Be,g,y,!0)).props;if(m){var b=m.children;if(b)if(xe(b)){var _=b.length;if(_>0){for(var O=[],w=0;w<_;w++){var T=b[w];r(T)?O.push(T):!o(T)&&ge(T)&&O.push(de(T))}m.children=O}}else ge(b)&&(m.children=de(b))}u.children=null}else 3970&h?(a=t&&!l(t.children)?t.children:e.children,u=fe(h,e.type,v,a,e.props||t?p(e.props,t):Be,g,y,!1)):1&h&&(u=ve(e.children,g))}return u}function he(){return fe(4096,null)}function ve(e,t){return fe(1,null,null,e,null,t)}function ge(e){return!!e.flags}function ye(e,t){return t.key=e,t}function me(e,t){return u(e)&&(e=\".\"+e),s(t.key)||\".\"===t.key[0]?ye(e,t):t}function be(e,t){return t.key=e+t.key,t}function _e(e,t,n,i){for(var a=e.length;n<a;n++){var c=e[n],u=i+\".\"+n;o(c)||(xe(c)?_e(c,t,0,u):(r(c)?c=ve(c,null):(ge(c)&&c.dom||c.key&&\".\"===c.key[0])&&(c=de(c)),c=s(c.key)||\".\"===c.key[0]?ye(u,c):be(i,c),t.push(c)))}}function Oe(e){return xe(e)?function(e){var t;!0===e.$?e=e.slice():e.$=!0;for(var n=0,i=e.length;n<i;n++){var a=e[n];if(o(a)||xe(a)){var c=(t||e).slice(0,n);return _e(e,c,n,\"\"),c}r(a)?(t||(t=e.slice(0,n)),t.push(me(n,ve(a,null)))):ge(a)&&null!==a.dom||s(a.key)&&0==(64&a.flags)?(t||(t=e.slice(0,n)),t.push(me(n,de(a)))):t&&t.push(me(n,de(a)))}return t||e}(e):ge(e)&&null!==e.dom?de(e):e}function we(e){return\"svg\"===e?128:\"input\"===e?512:\"select\"===e?2048:\"textarea\"===e?1024:\"media\"===e?256:2}function Te(e){var t=e.props,n=e.children;if(28&e.flags){var r=e.type,a=r.defaultProps;if(!i(a))if(t)for(var u in a)l(t[u])&&(t[u]=a[u]);else t=e.props=a;c(r)&&(e.flags=we(r),t&&t.children&&(e.children=t.children,n=t.children))}t&&(!function(e,t,n){3970&e.flags&&(i(n)&&t.hasOwnProperty(\"children\")&&(e.children=t.children),t.hasOwnProperty(\"className\")&&(e.className=t.className||null,delete t.className)),t.hasOwnProperty(\"ref\")&&(e.ref=t.ref,delete t.ref),t.hasOwnProperty(\"key\")&&(e.key=t.key,delete t.key)}(e,t,n),o(t.children)||(t.children=Oe(t.children))),o(n)||(e.children=Oe(n))}function Ee(e,t){return a(t)?{data:e,event:t}:null}Object.defineProperty(t,\"__esModule\",{value:!0});var ke=\"$NO_OP\",Se=\"a runtime error occured! Use Inferno in development environment to find the error.\",je=!(\"undefined\"==typeof window||!window.document),xe=Array.isArray;h.prototype.addListener=function(e){this.listeners.push(e)},h.prototype.trigger=function(){for(var e,t=this.listeners;e=t.shift();)e()};var Ie={afterMount:null,afterRender:null,afterUpdate:null,beforeRender:null,beforeUnmount:null,createVNode:null,findDOMNodeEnabled:!1,recyclingEnabled:!1,roots:[]},Ce=\"http://www.w3.org/1999/xlink\",Me=\"http://www.w3.org/XML/1998/namespace\",Ne=\"http://www.w3.org/2000/svg\",Ae=new Set;Ae.add(\"volume\"),Ae.add(\"defaultChecked\");var Pe=new Set;Pe.add(\"muted\"),Pe.add(\"scoped\"),Pe.add(\"loop\"),Pe.add(\"open\"),Pe.add(\"checked\"),Pe.add(\"default\"),Pe.add(\"capture\"),Pe.add(\"disabled\"),Pe.add(\"readOnly\"),Pe.add(\"required\"),Pe.add(\"autoplay\"),Pe.add(\"controls\"),Pe.add(\"seamless\"),Pe.add(\"reversed\"),Pe.add(\"allowfullscreen\"),Pe.add(\"novalidate\"),Pe.add(\"hidden\"),Pe.add(\"autoFocus\"),Pe.add(\"selected\"),Pe.add(\"indeterminate\");var Re=new Map;Re.set(\"xlink:href\",Ce),Re.set(\"xlink:arcrole\",Ce),Re.set(\"xlink:actuate\",Ce),Re.set(\"xlink:show\",Ce),Re.set(\"xlink:role\",Ce),Re.set(\"xlink:title\",Ce),Re.set(\"xlink:type\",Ce),Re.set(\"xml:base\",Me),Re.set(\"xml:lang\",Me),Re.set(\"xml:space\",Me);var He=new Set;He.add(\"animationIterationCount\"),He.add(\"borderImageOutset\"),He.add(\"borderImageSlice\"),He.add(\"borderImageWidth\"),He.add(\"boxFlex\"),He.add(\"boxFlexGroup\"),He.add(\"boxOrdinalGroup\"),He.add(\"columnCount\"),He.add(\"flex\"),He.add(\"flexGrow\"),He.add(\"flexPositive\"),He.add(\"flexShrink\"),He.add(\"flexNegative\"),He.add(\"flexOrder\"),He.add(\"gridRow\"),He.add(\"gridColumn\"),He.add(\"fontWeight\"),He.add(\"lineClamp\"),He.add(\"lineHeight\"),He.add(\"opacity\"),He.add(\"order\"),He.add(\"orphans\"),He.add(\"tabSize\"),He.add(\"widows\"),He.add(\"zIndex\"),He.add(\"zoom\"),He.add(\"fillOpacity\"),He.add(\"floodOpacity\"),He.add(\"stopOpacity\"),He.add(\"strokeDasharray\"),He.add(\"strokeDashoffset\"),He.add(\"strokeMiterlimit\"),He.add(\"strokeOpacity\"),He.add(\"strokeWidth\");var Le=new Set;Le.add(\"children\"),Le.add(\"childrenType\"),Le.add(\"defaultValue\"),Le.add(\"ref\"),Le.add(\"key\"),Le.add(\"checked\"),Le.add(\"multiple\");var We=new Set;We.add(\"onClick\"),We.add(\"onMouseDown\"),We.add(\"onMouseUp\"),We.add(\"onMouseMove\"),We.add(\"onSubmit\"),We.add(\"onDblClick\"),We.add(\"onKeyDown\"),We.add(\"onKeyUp\"),We.add(\"onKeyPress\");var De=je&&!!navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform),Ue=new Map,Ve=new Map,Ye=new Map,Ge=new Map,Fe=Ie.roots,ze=je?document.body:null,Be={},$e={EMPTY_OBJ:Be,NO_OP:ke,cloneVNode:pe,createRenderer:W,createVNode:fe,findDOMNode:H,getFlagsForElementVnode:we,internal_DOMNodeMap:Ge,internal_isUnitlessNumber:He,internal_normalize:Te,internal_patch:D,linkEvent:Ee,options:Ie,render:L,version:\"3.10.1\"};t.default=$e,t.EMPTY_OBJ=Be,t.NO_OP=ke,t.cloneVNode=pe,t.createRenderer=W,t.createVNode=fe,t.findDOMNode=H,t.getFlagsForElementVnode=we,t.internal_DOMNodeMap=Ge,t.internal_isUnitlessNumber=He,t.internal_normalize=Te,t.internal_patch=D,t.linkEvent=Ee,t.options=Ie,t.render=L,t.version=\"3.10.1\"},function(e,t,n){\"use strict\";function r(e){return o(e)||i(e)}function i(e){return null===e}function o(e){return void 0===e}function a(){this.listeners=[]}Object.defineProperty(t,\"__esModule\",{value:!0});var c=n(18);a.prototype.addListener=function(e){this.listeners.push(e)},a.prototype.trigger=function(){for(var e,t=this.listeners;e=t.shift();)e()};var u=new Set;u.add(\"onComponentWillMount\"),u.add(\"onComponentDidMount\"),u.add(\"onComponentWillUnmount\"),u.add(\"onComponentShouldUpdate\"),u.add(\"onComponentWillUpdate\"),u.add(\"onComponentDidUpdate\"),t.default=function(e,t){for(var n=[],a=arguments.length-2;a-- >0;)n[a]=arguments[a+2];if(function(e){return i(e)||!1===e||!0===e||o(e)}(e)||\"object\"==typeof e)throw new Error(\"Inferno Error: createElement() name parameter cannot be undefined, null, false or true, It must be a string, class or function.\");var s,l=n,f=null,d=null,p=null,h=0;if(n&&(1===n.length?l=n[0]:0===n.length&&(l=void 0)),\"string\"==typeof e){if(h=c.getFlagsForElementVnode(e),!r(t)){s={};for(var v in t)\"className\"===v||\"class\"===v?p=t[v]:\"key\"===v?d=t.key:\"children\"===v&&o(l)?l=t.children:\"ref\"===v?f=t.ref:s[v]=t[v]}}else if(h=16,o(l)||(t||(t={}),t.children=l,l=null),!r(t)){s={};for(var g in t)u.has(g)?(f||(f={}),f[g]=t[g]):\"key\"===g?d=t.key:s[g]=t[g]}return c.createVNode(h,e,p,l,s,d,f)}},function(e,t,n){var r,i,o;!function(a,c){i=[e,n(71),n(73),n(74)],void 0!==(o=\"function\"==typeof(r=c)?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t,n,r){\"use strict\";function i(e){return e&&e.__esModule?e:{default:e}}function o(e,t){var n=\"data-clipboard-\"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var a=i(t),c=i(n),u=i(r),s=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.resolveOptions(n),r.listenClick(e),r}return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,c.default),l(t,[{key:\"resolveOptions\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=\"function\"==typeof e.action?e.action:this.defaultAction,this.target=\"function\"==typeof e.target?e.target:this.defaultTarget,this.text=\"function\"==typeof e.text?e.text:this.defaultText,this.container=\"object\"===s(e.container)?e.container:document.body}},{key:\"listenClick\",value:function(e){var t=this;this.listener=(0,u.default)(e,\"click\",function(e){return t.onClick(e)})}},{key:\"onClick\",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new a.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:\"defaultAction\",value:function(e){return o(\"action\",e)}},{key:\"defaultTarget\",value:function(e){var t=o(\"target\",e);if(t)return document.querySelector(t)}},{key:\"defaultText\",value:function(e){return o(\"text\",e)}},{key:\"destroy\",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:\"isSupported\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[\"copy\",\"cut\"],t=\"string\"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach(function(e){n=n&&!!document.queryCommandSupported(e)}),n}}]),t}();e.exports=f})},function(e,t,n){var r,i,o;!function(a,c){i=[e,n(72)],void 0!==(o=\"function\"==typeof(r=c)?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t){\"use strict\";var n=function(e){return e&&e.__esModule?e:{default:e}}(t),r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.resolveOptions(t),this.initSelection()}return i(e,[{key:\"resolveOptions\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=\"\"}},{key:\"initSelection\",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:\"selectFake\",value:function(){var e=this,t=\"rtl\"==document.documentElement.getAttribute(\"dir\");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener(\"click\",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement(\"textarea\"),this.fakeElem.style.fontSize=\"12pt\",this.fakeElem.style.border=\"0\",this.fakeElem.style.padding=\"0\",this.fakeElem.style.margin=\"0\",this.fakeElem.style.position=\"absolute\",this.fakeElem.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=r+\"px\",this.fakeElem.setAttribute(\"readonly\",\"\"),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:\"removeFake\",value:function(){this.fakeHandler&&(this.container.removeEventListener(\"click\",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:\"selectTarget\",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:\"copyText\",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:\"handleResult\",value:function(e){this.emitter.emit(e?\"success\":\"error\",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:\"clearSelection\",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:\"destroy\",value:function(){this.removeFake()}},{key:\"action\",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"copy\";if(this._action=e,\"copy\"!==this._action&&\"cut\"!==this._action)throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"')},get:function(){return this._action}},{key:\"target\",set:function(e){if(void 0!==e){if(!e||\"object\"!==(void 0===e?\"undefined\":r(e))||1!==e.nodeType)throw new Error('Invalid \"target\" value, use a valid Element');if(\"copy\"===this.action&&e.hasAttribute(\"disabled\"))throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');if(\"cut\"===this.action&&(e.hasAttribute(\"readonly\")||e.hasAttribute(\"disabled\")))throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=o})},function(e,t){e.exports=function(e){var t;if(\"SELECT\"===e.nodeName)e.focus(),t=e.value;else if(\"INPUT\"===e.nodeName||\"TEXTAREA\"===e.nodeName){var n=e.hasAttribute(\"readonly\");n||e.setAttribute(\"readonly\",\"\"),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute(\"readonly\"),t=e.value}else{e.hasAttribute(\"contenteditable\")&&e.focus();var r=window.getSelection(),i=document.createRange();i.selectNodeContents(e),r.removeAllRanges(),r.addRange(i),t=r.toString()}return t}},function(e,t){function n(){}n.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function r(){i.off(e,r),t.apply(n,arguments)}var i=this;return r._=t,this.on(e,r,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;for(r;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var o=0,a=r.length;o<a;o++)r[o].fn!==t&&r[o].fn._!==t&&i.push(r[o]);return i.length?n[e]=i:delete n[e],this}},e.exports=n},function(e,t,n){var r=n(75),i=n(76);e.exports=function(e,t,n){if(!e&&!t&&!n)throw new Error(\"Missing required arguments\");if(!r.string(t))throw new TypeError(\"Second argument must be a String\");if(!r.fn(n))throw new TypeError(\"Third argument must be a Function\");if(r.node(e))return function(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}(e,t,n);if(r.nodeList(e))return function(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}(e,t,n);if(r.string(e))return function(e,t,n){return i(document.body,e,t,n)}(e,t,n);throw new TypeError(\"First argument must be a String, HTMLElement, HTMLCollection, or NodeList\")}},function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&(\"[object NodeList]\"===n||\"[object HTMLCollection]\"===n)&&\"length\"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return\"string\"==typeof e||e instanceof String},t.fn=function(e){return\"[object Function]\"===Object.prototype.toString.call(e)}},function(e,t,n){var r=n(77);e.exports=function(e,t,n,i,o){var a=function(e,t,n,i){return function(n){n.delegateTarget=r(n.target,t),n.delegateTarget&&i.call(e,n)}}.apply(this,arguments);return e.addEventListener(n,a,o),{destroy:function(){e.removeEventListener(n,a,o)}}}},function(e,t){var n=9;if(\"undefined\"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}e.exports=function(e,t){for(;e&&e.nodeType!==n;){if(\"function\"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}},function(e,t,n){(function(t){function n(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function r(e){if(\"number\"==typeof e)return e;if(function(e){return\"symbol\"==typeof e||!!e&&\"object\"==typeof e&&v.call(e)==a}(e))return o;if(n(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=n(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(c,\"\");var r=s.test(e);return r||l.test(e)?f(e.slice(2),r?2:8):u.test(e)?o:+e}var i=\"Expected a function\",o=NaN,a=\"[object Symbol]\",c=/^\\s+|\\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,l=/^0o[0-7]+$/i,f=parseInt,d=\"object\"==typeof t&&t&&t.Object===Object&&t,p=\"object\"==typeof self&&self&&self.Object===Object&&self,h=d||p||Function(\"return this\")(),v=Object.prototype.toString,g=Math.max,y=Math.min,m=function(){return h.Date.now()};e.exports=function(e,t,o){function a(t){var n=f,r=d;return f=d=void 0,_=t,h=e.apply(r,n)}function c(e){var n=e-b;return void 0===b||n>=t||n<0||w&&e-_>=p}function u(){var e=m();if(c(e))return s(e);v=setTimeout(u,function(n){var r=t-(e-b);return w?y(r,p-(e-_)):r}())}function s(e){return v=void 0,T&&f?a(e):(f=d=void 0,h)}function l(){var e=m(),n=c(e);if(f=arguments,d=this,b=e,n){if(void 0===v)return function(e){return _=e,v=setTimeout(u,t),O?a(e):h}(b);if(w)return v=setTimeout(u,t),a(b)}return void 0===v&&(v=setTimeout(u,t)),h}var f,d,p,h,v,b,_=0,O=!1,w=!1,T=!0;if(\"function\"!=typeof e)throw new TypeError(i);return t=r(t)||0,n(o)&&(O=!!o.leading,p=(w=\"maxWait\"in o)?g(r(o.maxWait)||0,t):p,T=\"trailing\"in o?!!o.trailing:T),l.cancel=function(){void 0!==v&&clearTimeout(v),_=0,f=b=d=v=void 0},l.flush=function(){return void 0===v?h:s(m())},l}}).call(t,n(79))},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){function r(e){return n(i(e))}function i(e){var t=o[e];if(!(t+1))throw new Error(\"Cannot find module '\"+e+\"'.\");return t}var o={\"./events.ts\":17,\"./state/entity.ts\":9,\"./state/flow.ts\":3,\"./state/graph.ts\":29,\"./state/gui.ts\":12,\"./state/tree.ts\":30,\"./state/views.ts\":28};r.keys=function(){return Object.keys(o)},r.resolve=i,e.exports=r,r.id=80},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.create=function(e){function t(e){return function(){for(var t in this)\"function\"==typeof this[t][e]&&this[t][e]()}}function n(n){var r=e.getGraph(),i=r.entities,o=r.arcs,a=r.processes;return Object.keys(i).reduce(function(n,r){var c=function(e,n){return void 0===n&&(n={}),r.split(\".\").reduce(function(e,n){return e[n]=e[n]||{reset:t(\"reset\"),watch:t(\"watch\"),unwatch:t(\"unwatch\")}},n)}(0,n),u=i[r],s=Object.keys(o).map(function(e){return o[e]}).filter(function(e){return e.entity===r&&!e.port}).map(function(e){return e.process});return c.id=r,Object.defineProperty(c,\"val\",{get:function(){return e.get(r)},set:function(t){return e.set(r,t)}}),c.update=function(t){e.update(r,t)},c.reset=function(){null!=u.value&&e.set(r,u.value)},c.watch=function(){e.on(r,function(e){return console.log(r,e)})},c.unwatch=function(){e.off(r)},c.streams={},s.forEach(function(t){var n=t.split(\".\").pop();n&&(c.streams[n]={start:function(){e.start(t)}},a[t].async&&(c.streams[n].stop=function(){e.stop(t)}))}),n},n)}return n({update:function(){for(var e in this)\"update\"!==e&&delete this[e];n(this)}})}}])});","export function create(flow) {\n    function callAll(name) {\n        return function () {\n            for (var key in this) {\n                if (typeof this[key][name] === 'function') {\n                    this[key][name]();\n                }\n            }\n        };\n    }\n    function createObject(pathstring, root) {\n        if (root === void 0) { root = {}; }\n        var names = pathstring.split('.');\n        return names.reduce(function (obj, name) { return obj[name] = obj[name] || {\n            reset: callAll('reset'),\n            watch: callAll('watch'),\n            unwatch: callAll('unwatch')\n        }; }, root);\n    }\n    function createTree(root) {\n        var graph = flow.getGraph();\n        var entities = graph.entities, arcs = graph.arcs, processes = graph.processes;\n        return Object.keys(entities)\n            .reduce(function (obj, eid) {\n            var e = createObject(eid, obj);\n            var entity = entities[eid];\n            var streamIds = Object.keys(arcs)\n                .map(function (k) { return arcs[k]; })\n                .filter(function (a) { return a.entity === eid && !a.port; })\n                .map(function (a) { return a.process; });\n            e.id = eid;\n            Object.defineProperty(e, 'val', {\n                get: function () { return flow.get(eid); },\n                set: function (v) { return flow.set(eid, v); }\n            });\n            e.update = function (fn) {\n                flow.update(eid, fn);\n            };\n            e.reset = function () {\n                if (entity.value != null) {\n                    flow.set(eid, entity.value);\n                }\n            };\n            e.watch = function () {\n                flow.on(eid, function (v) { return console.log(eid, v); });\n            };\n            e.unwatch = function () {\n                flow.off(eid);\n            };\n            e.streams = {};\n            streamIds.forEach(function (p) {\n                var name = p.split('.').pop();\n                if (name) {\n                    e.streams[name] = {\n                        start: function () { flow.start(p); }\n                    };\n                    if (processes[p].async) {\n                        e.streams[name].stop = function () { flow.stop(p); };\n                    }\n                }\n            });\n            return obj;\n        }, root);\n    }\n    var root = {\n        update: function () {\n            for (var key in this) {\n                if (key !== 'update') {\n                    delete this[key];\n                }\n            }\n            createTree(this);\n        }\n    };\n    return createTree(root);\n}\n//# sourceMappingURL=tree.js.map","import * as flowTree from 'tvs-flow-tools/dist/lib/console/tree'\nimport { getGraphFromModules } from 'tvs-flow-tools/dist/lib/utils/webpack'\n\n\nexport function updateFlow (flow, graphModules) {\n\tflow.replaceGraph(getGraphFromModules(graphModules))\n\twindow['entities'] = flowTree.create(flow)\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { resolveEntityIds, isEntity, getGraphFromAll } from 'tvs-flow/dist/lib/utils/entity-reference';\nexport function modulePathToNamespace(path, separator) {\n    if (separator === void 0) { separator = '.'; }\n    return path.split('.')[1].split('/').filter(function (v) { return v; }).join(separator);\n}\nexport function getGraphFromModules(graphModules, nsSeparator) {\n    var entities = graphModules.keys()\n        .map(function (path) {\n        var module = graphModules(path);\n        return Object.values(resolveEntityIds(module, modulePathToNamespace(path, nsSeparator)))\n            .filter(isEntity);\n    })\n        .reduce(function (arr, es) { return arr.concat(es); }, []);\n    return getGraphFromAll(entities);\n}\n//# sourceMappingURL=webpack.js.map","import { streamStart, val } from 'tvs-flow/dist/lib/utils/entity-reference'\nimport { mat4 } from 'gl-matrix'\nimport { tick } from './events'\nimport { unequal } from 'tvs-libs/dist/lib/utils/predicates'\n\n\nexport const groundColor = val([0.7, 0.6, 0.9, 1])\n\nexport const groundTransform = streamStart(null, () => {\n\tconst t = mat4.create()\n\tmat4.rotateX(t, t, Math.PI / 2)\n\tmat4.scale(t, t, [10, 10, 10])\n\treturn t\n})\n\n\nexport const animate = val(true)\nexport const rotationSpeed = val(0.0002)\n\nexport const lightRotation = val(-Math.PI * 0.8)\n.react(\n\t[animate.COLD, rotationSpeed.COLD, tick.HOT],\n\t(rot, animate, speed, tick) => animate ? rot + speed * tick : rot\n)\n\nexport const time = val(0)\n.react([tick.HOT, animate.COLD], (t, tick, animate) => animate ? t + tick : t)\n.accept(unequal)\n\nexport const lightPosition = val([0, 3.5, 0])\n.react([time.HOT], (pos, t) => {\n\tpos[1] += Math.sin(t / 2000) * 0.05\n\treturn pos\n})\n\nexport const lightColor = val([1.0, 1.0, 1.0, 0.0])\nexport const lightBackColor = val([0.0, 0.0, 0.2, 0.0])\n\nexport const lightTransforms = val([mat4.create(), mat4.create()])\n.react(\n\t[lightRotation.HOT, lightPosition.HOT],\n\t(mats, rot, pos) => {\n\t\tmat4.fromTranslation(mats[0], pos)\n\t\tmat4.rotateX(mats[0], mats[0], rot)\n\t\tmat4.rotateX(mats[1], mats[0], Math.PI)\n\t\treturn mats\n\t})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { val, asyncStream, EntityRef, delta, stream } from 'tvs-flow/dist/lib/utils/entity-reference'\nimport * as flowCamera from 'tvs-utils/dist/lib/vr/flow-camera'\nimport { canvasSize } from './painter'\nimport { Keys } from 'tvs-libs/dist/lib/events/keyboard'\nimport { vec3 } from 'gl-matrix'\nimport { keys, tick, mouse } from './events'\n\n\nexport const {\n\tposition, rotX, rotY, rotation, view\n} = flowCamera.makeFirstPersonView()\n\n\nposition.val(vec3.fromValues(11, 2, -9))\nrotX.val(0)\nrotY.val(2)\n\n\nexport const {\n\tperspectiveSettings, perspective\n} = flowCamera.makePerspective(canvasSize)\n\n\nperspectiveSettings.updateVal(s => ({ ...s, fovy: Math.PI * 0.4 }))\n\n\nexport const moveSpeed = val(0.15)\n\nexport const lookSpeed = val(0.002)\n\n\nexport const moveForward: EntityRef<number> = asyncStream(\n\t[keys.COLD, moveSpeed.COLD, tick.HOT],\n\t(send, keys, speed, _) => {\n\t\tif (!keys) return\n\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\tsend(speed)\n\t\t}\n\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\tsend(-speed)\n\t\t}\n\t}\n)\n\n\nexport const moveLeft: EntityRef<number> = asyncStream(\n\t[keys.COLD, moveSpeed.COLD, tick.HOT],\n\t(send, keys, speed) => {\n\n\t\tif (!keys) return\n\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\tsend(speed)\n\t\t}\n\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\tsend(-speed)\n\t\t}\n\t}\n)\n\n\nexport const mouseDrag = stream(\n\t[mouse.HOT], m => ({\n\t\tx: m.drag.x,\n\t\ty: m.drag.y\n\t})\n)\n\n\nexport const dragDeltas = delta(mouseDrag, (n, o) => ({\n\tx: n.x === 0 ? n.x : o.x - n.x,\n\ty: n.y === 0 ? n.y : o.y - n.y\n}))\n.accept(drag => !!(drag && (drag.x || drag.y)))\n\n\nrotX.react(\n\t[dragDeltas.HOT, lookSpeed.COLD],\n\t(rot, drag, speed) => rot + drag.y * speed\n)\n\n\nrotY.react(\n\t[dragDeltas.HOT, lookSpeed.COLD],\n\t(rot, drag, speed) => rot + drag.x * speed\n)\n\nposition.react(\n\t[moveLeft.HOT, rotation.COLD],\n\t(pos, left, rotation) => {\n\t\tconst v = vec3.fromValues(rotation.rotY[0], rotation.rotY[1], rotation.rotY[2])\n\t\treturn vec3.add(pos, pos, vec3.scale(v, v, -left))\n\t}\n)\n\nposition.react(\n\t[moveForward.HOT, rotation.COLD],\n\t(pos, forward, rotation) => {\n\t\tconst v = vec3.fromValues(rotation.rotY[8], rotation.rotY[9], rotation.rotY[10])\n\t\treturn vec3.add(pos, pos, vec3.scale(v, v, -forward))\n\t}\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4, vec3 } from 'gl-matrix';\nimport { val } from 'tvs-flow/dist/lib/utils/entity-reference';\nexport function makePerspective(canvasSize) {\n    var perspectiveSettings = val({\n        near: 0.1,\n        far: 1000,\n        fovy: Math.PI * 0.6,\n        aspect: 1\n    })\n        .react([canvasSize.HOT], function (self, _a) {\n        var width = _a.width, height = _a.height;\n        self.aspect = width / height;\n        return self;\n    });\n    var perspective = val(mat4.create())\n        .react([perspectiveSettings.HOT], function (self, s) { return mat4.perspective(self, s.fovy, s.aspect, s.near, s.far); });\n    return {\n        perspectiveSettings: perspectiveSettings, perspective: perspective\n    };\n}\nexport function makeFirstPersonView() {\n    var position = val(vec3.fromValues(0, 0, 0));\n    var rotY = val(0);\n    var rotX = val(0);\n    var rotation = val({\n        rotX: mat4.create(),\n        rotY: mat4.create()\n    })\n        .react([rotY.HOT], function (self, rotY) {\n        mat4.fromYRotation(self.rotY, rotY);\n        return self;\n    })\n        .react([rotX.HOT], function (self, rotX) {\n        mat4.fromXRotation(self.rotX, rotX);\n        return self;\n    });\n    var view = val(mat4.create())\n        .react([rotation.HOT, position.HOT], function (self, rotation, position) {\n        mat4.fromTranslation(self, position);\n        mat4.multiply(self, self, rotation.rotY);\n        mat4.multiply(self, self, rotation.rotX);\n        mat4.invert(self, self);\n        return self;\n    });\n    return { position: position, rotation: rotation, view: view, rotY: rotY, rotX: rotX };\n}\n//# sourceMappingURL=flow-camera.js.map","export function animateWithTPF(callback) {\n    let isRunning = true;\n    let oldTime;\n    function next(newTime) {\n        if (isRunning) {\n            callback(newTime - (oldTime || newTime));\n            oldTime = newTime;\n            requestAnimationFrame(next);\n        }\n    }\n    requestAnimationFrame(next);\n    return function stopAnimation() {\n        isRunning = false;\n    };\n}\nexport function animate(callback) {\n    let isRunning = true;\n    function next(time) {\n        if (isRunning) {\n            callback(time);\n            requestAnimationFrame(next);\n        }\n    }\n    requestAnimationFrame(next);\n    return function stopAnimation() {\n        isRunning = false;\n    };\n}\nexport function createAnimator(animateFunction = animateWithTPF) {\n    let updates = [];\n    function callback() {\n        for (const i in updates) {\n            updates[i].apply(null, arguments);\n        }\n    }\n    return {\n        start: function () {\n            this.stop = animateFunction(callback);\n        },\n        stop: () => { },\n        step: callback,\n        addUpdate: function (update) {\n            updates.push(update);\n        },\n        removeUpdate: function (update) {\n            updates = updates.filter(u => u !== update);\n        }\n    };\n}\n//# sourceMappingURL=animation.js.map","import { val } from 'tvs-flow/dist/lib/utils/entity-reference'\nimport vert from './geo-vert.glsl'\nimport frag from './geo-frag.glsl'\nimport light from './light-frag.glsl'\nimport { ShadeData } from 'tvs-painter/dist/lib'\n\n\nexport const geoSpec = val({\n\tvert, frag\n} as ShadeData).reset()\n\n\nexport const lightFrag = val(light).reset()\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { plane } from 'tvs-painter/dist/lib/utils/geometry/plane'\nimport { val, stream } from 'tvs-flow/dist/lib/utils/entity-reference'\n\n\nexport const props = val({\n  width: 10,\n  height: 10,\n  segX: 0,\n  segY: 0\n})\n\n\nexport const geometry = stream(\n  [props.HOT],\n  props => plane(props.width, props.height, props.segX, props.segY)\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec4 vPosition;\\nvarying vec4 vNormal;\\nvarying vec4 vUv;\\n\\nvoid main() {\\n\\tvPosition = transform * vec4(position, 1.0);\\n\\tvNormal = transform * vec4(normal, 0.0);\\n\\tvUv = vec4(uv, 0.0, 0.0);\\n\\tgl_Position = projection * view * vPosition;\\n}\\n\"","module.exports = \"#extension GL_EXT_draw_buffers : require\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec4 color;\\n\\nvarying vec4 vPosition;\\nvarying vec4 vNormal;\\nvarying vec4 vUv;\\n\\nvoid main() {\\n\\tgl_FragData[0] = vPosition;\\n\\tgl_FragData[1] = vNormal;\\n\\tgl_FragData[2] = vUv;\\n\\tgl_FragData[3] = color;\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvec4 diffuseAreaLight_1_0(sampler2D tex, mat4 lightMat, vec3 V, vec3 N, vec2 areaSize) {\\n\\tfloat width = areaSize.x / 2.0;\\n\\tfloat height = areaSize.y / 2.0;\\n\\n\\tvec3 right = normalize(lightMat[0].xyz);\\n\\tvec3 up = normalize(lightMat[1].xyz);\\n\\tvec3 normal = normalize(lightMat[2].xyz);\\n\\tvec3 pos = lightMat[3].xyz;\\n\\n\\t/*project onto plane and calculate direction from center to the projection*/\\n\\tfloat dis = dot(normal, V - pos);\\n\\tvec3 projection = V - dis * normal;\\n\\tvec3 dir = projection - pos;\\n\\n\\t/*calculate distance from area*/\\n\\tvec2 diagonal = vec2(dot(dir, right), dot(dir, up));\\n\\tvec2 nearest2D = vec2(clamp(diagonal.x, -width, width), clamp(diagonal.y, -height, height));\\n\\tvec3 nearestPointInside = pos + (right * nearest2D.x + up * nearest2D.y);\\n\\n\\tvec3 L = normalize(nearestPointInside - V);\\n\\n\\tfloat nDotL = dot(-normal, L);\\n\\n\\tfloat d = distance(V, nearestPointInside); //real distance to area rectangle\\n\\n\\tvec4 diff = vec4(0.0);\\n\\n\\tif (nDotL > 0.0) {\\n\\t\\tfloat lod = pow(d, 0.03) * 6.0;\\n\\n\\t\\tvec2 co = ((diagonal.xy / (d + 1.0)) + vec2(width, height)) / areaSize;\\n\\t\\t//co.x = 1.0 - co.x;\\n\\n\\t\\tvec4 t00 = texture2D(tex, co, lod);\\n\\t\\tvec4 t01 = texture2D(tex, co, lod + 1.0);\\n\\n\\t\\tdiff = mix(t00, t01, fract(lod + 1.5));\\n\\n\\t\\tfloat NDotL = clamp(dot(-N, L), 0.0, 1.0);\\n\\t\\tnDotL *= NDotL * 0.5 + 0.5; //distribute over hemisphere, looks better. Should be dependant of area size.\\n\\n\\t\\tfloat attenuation = 1.0 / (1.0 + d);\\n\\n\\t\\tdiff *= nDotL * attenuation;\\n\\t}\\n\\n\\tdiff.a = 1.0;\\n\\treturn diff;\\n}\\n\\n\\n\\n\\nfloat specularAreaLight_2_1(mat4 lightMat, vec3 V, vec3 N, vec3 eyePosition, vec2 areaSize, float gloss) {\\n\\n\\tvec3 pos = lightMat[3].xyz;\\n\\tvec3 normal = normalize(lightMat[2].xyz);\\n\\n\\tvec3 direction = eyePosition - V;\\n\\n\\tvec3 R = reflect(normalize(direction), -N);\\n\\tfloat rDotN = dot(normal, R);\\n\\n\\tif (rDotN > 0.0) {\\n\\t\\tvec3 E = V + R * (dot(normal, pos - V) / rDotN); // line-plane intersection\\n\\t\\tvec3 dir = E - pos;\\n\\n\\t\\tfloat width = areaSize.x / 2.0;\\n\\t\\tfloat height = areaSize.y / 2.0;\\n\\n\\t\\tvec3 right = normalize(lightMat[0].xyz);\\n\\t\\tvec3 up = normalize(lightMat[1].xyz);\\n\\n\\t\\t/*calculate distance from area*/\\n\\t\\tvec2 diagonal = vec2(dot(dir, right), dot(dir, up));\\n\\t\\tvec2 nearest2D = vec2(clamp(diagonal.x, -width, width), clamp(diagonal.y, -height, height));\\n\\t\\tvec3 nearestPointInside = pos + (right * nearest2D.x + up * nearest2D.y);\\n\\n\\t\\tfloat dist = distance(V, nearestPointInside); //real distance to area rectangle\\n\\n\\t\\tfloat rDotL = max(0.0, dot(R, normalize(V - nearestPointInside)));\\n\\n\\t\\t// reduce glow of reflected points that are fare outside of the light area\\n\\t\\tfloat falloff = min(1.0, length(vec2(width, height)) / length(diagonal));\\n\\n\\t\\t// remove artefact when intersection point is close to the vertex\\n\\t\\tfloat closeness = clamp(distance(E, V) / dist, 0.0, 1.0);\\n\\t\\t//float closeness = 1.0;\\n\\n\\t\\tfloat attenuation = 1.0 / (pow(dist, 0.5));\\n\\n\\t\\treturn pow(max(rDotL, 0.0), gloss) * falloff * closeness * attenuation;\\n\\t} else {\\n\\t\\treturn 0.0;\\n\\t}\\n}\\n\\n\\n\\n\\n\\nuniform sampler2D colors;\\nuniform sampler2D positions;\\nuniform sampler2D normals;\\nuniform sampler2D uvs;\\nuniform sampler2D tex;\\n\\nuniform vec3 eyePosition;\\nuniform mat4 lightMat;\\nuniform mat4 view;\\n\\nvarying vec2 coords;\\n\\nconst vec2 lightSize = vec2(10.0);\\n\\nvoid main() {\\n\\n\\tvec3 position = texture2D(positions, coords).xyz;\\n\\tvec3 normal = normalize(texture2D(normals, coords).xyz);\\n\\tvec4 uv = texture2D(uvs, coords);\\n\\tvec4 color = texture2D(colors, coords);\\n\\n\\tif (color.a < 1.0) {\\n\\t\\tvec4 texColor = texture2D(tex, uv.xy);\\n\\t\\tgl_FragColor = vec4(texColor.rgb * color.rgb, 1.0);\\n\\t} else {\\n\\t\\t// paint ground grid\\n\\t\\tfloat vertical = fract(uv.x * 100.0);\\n\\t\\tfloat horizontal = fract(uv.y * 100.0);\\n\\t\\tif (vertical >= 0.95 || horizontal >= 0.95) gl_FragColor.b += 0.3;\\n\\n\\t\\t// light calculation\\n\\t\\tvec4 diffuseColor = diffuseAreaLight_1_0(tex, lightMat, position, normal, lightSize);\\n\\t\\tdiffuseColor = vec4(\\n\\t\\t\\tpow(diffuseColor.r, 0.7),\\n\\t\\t\\tpow(diffuseColor.g, 0.7),\\n\\t\\t\\tpow(diffuseColor.b, 0.7),\\n\\t\\t\\t1.0\\n\\t\\t);\\n\\t\\tdiffuseColor *= color * 4.0;\\n\\n\\t\\tfloat specularPower = specularAreaLight_2_1(lightMat, position, normal, eyePosition, lightSize, 100.0);\\n\\n\\t\\tvec3 specularColor = vec3(0.9) * specularPower * color.xyz;\\n\\t\\t// gl_FragColor += vec4(specularColor / 2.0, 1.0);\\n\\t\\tgl_FragColor += diffuseColor / 1.5;\\n\\t}\\n}\\n\"","var map = {\n\t\"./camera.ts\": 44,\n\t\"./events.ts\": 25,\n\t\"./geometries/plane.ts\": 52,\n\t\"./painter.ts\": 24,\n\t\"./renderer.ts\": 94,\n\t\"./shaders/shaders.ts\": 48,\n\t\"./state.ts\": 39\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 93;","import { stream, val, asyncStreamStart } from 'tvs-flow/dist/lib/utils/entity-reference'\nimport { makeFormEntity, makeShadeEntity, makeSketchEntity, makeDrawingLayerEntity, makeEffectLayerEntity, makeStaticLayerEntity } from 'tvs-utils/dist/lib/vr/flow-painter-utils'\nimport { painter, gl } from './painter'\nimport * as events from './events'\nimport * as camera from './camera'\nimport * as plane from './geometries/plane'\nimport { makeClear } from 'tvs-painter/dist/lib/utils/context'\nimport { groundTransform, lightTransforms, groundColor, lightColor, lightBackColor } from './state'\nimport { DrawSettings, TextureData } from 'tvs-painter/dist/lib'\nimport { geoSpec, lightFrag } from './shaders/shaders'\n\n\n// Forms\n\nexport const planeForm = makeFormEntity(painter, plane.geometry)\n\n\n// Shades\n\nexport const geoShade = makeShadeEntity(painter, geoSpec)\n\n\n// Textures\n\nexport const image = asyncStreamStart<HTMLImageElement>([], send => {\n\tconst img = new Image()\n\timg.onload = () => send(img)\n\timg.src = 'tree.jpg'\n})\n\n\nexport const textureData = val({\n\tminFilter: 'LINEAR_MIPMAP_LINEAR',\n\tmagFilter: 'LINEAR'\n} as TextureData)\n.react([image.HOT], (tex, img) => ({\n\t...tex,\n\tasset: img\n}))\n\n\nexport const texture = makeStaticLayerEntity(painter, textureData)\n\n\n// Sketches\n\nexport const groundSketch = makeSketchEntity(painter)\n.react(\n\t[groundTransform.HOT, groundColor.HOT, geoShade.HOT, planeForm.HOT],\n\t(sketch, transform, color, shade, form) => sketch.update({\n\t\tform, shade,\n\t\tuniforms: {\n\t\t\ttransform,\n\t\t\tcolor\n\t\t}\n\t})\n)\n\n\nexport const lightSketch = makeSketchEntity(painter)\n.react(\n\t[lightTransforms.COLD, lightColor.HOT, lightBackColor.HOT, geoShade.HOT, planeForm.HOT, gl.HOT],\n\t(sketch, [frontMat, backMat], color, backColor, shade, form, gl) => sketch.update({\n\t\tform, shade,\n\t\tuniforms: [{\n\t\t\ttransform: frontMat,\n\t\t\tcolor\n\t\t},\n\t\t{\n\t\t\ttransform: backMat,\n\t\t\tcolor: backColor\n\t\t}],\n\t\tdrawSettings: {\n\t\t\tenable: [gl.CULL_FACE]\n\t\t}\n\t})\n)\n\n\n// Layers\n\nexport const drawSettings = stream(\n\t[gl.HOT],\n\tgl => ({\n\t\tclearBits: makeClear(gl, 'color', 'depth')\n\t} as DrawSettings)\n)\n\n\nexport const sceneLayer = makeDrawingLayerEntity(painter)\n.react(\n\t[\n\t\tgl.HOT,\n\t\tlightSketch.HOT,\n\t\tgroundSketch.HOT,\n\t\tcamera.view.COLD,\n\t\tcamera.perspective.COLD,\n\t\tdrawSettings.HOT\n\t],\n\t(layer, gl, light, ground, view, projection, settings) => layer.update({\n\t\tbuffered: true,\n\t\ttextureConfig: {\n\t\t\tcount: 4,\n\t\t\ttype: gl.FLOAT\n\t\t},\n\t\tsketches: [light, ground],\n\t\tdrawSettings: settings,\n\t\tuniforms: {\n\t\t\tview, projection\n\t\t},\n\t\twrap: 'CLAMP_TO_EDGE',\n\t\tminFilter: 'NEAREST',\n\t\tmagFilter: 'NEAREST'\n\t})\n)\n\n\nexport const lightLayer = makeEffectLayerEntity(painter)\n\t.react([\n\t\tsceneLayer.HOT,\n\t\tcamera.position.COLD,\n\t\tlightTransforms.COLD,\n\t\tcamera.view.COLD,\n\t\tgl.HOT,\n\t\ttexture.HOT,\n\t\tlightFrag.HOT\n\t], (layer, scene, eyePosition, lightMats, view, gl, tex, frag) => layer.update({\n\t\tfrag,\n\t\tuniforms: {\n\t\t\teyePosition,\n\t\t\tlightMat: lightMats[0],\n\t\t\tview,\n\t\t\ttex: tex.texture(),\n\t\t\tpositions: scene.texture(0),\n\t\t\tnormals: scene.texture(1),\n\t\t\tuvs: scene.texture(2),\n\t\t\tcolors: scene.texture(3)\n\t\t},\n\t\tdrawSettings: {\n\t\t\tdisable: [gl.DEPTH_TEST],\n\t\t\tenable: [gl.BLEND],\n\t\t\tclearBits: makeClear(gl, 'color')\n\t\t}\n\t})\n)\n\n\npainter.react(\n\t[sceneLayer.COLD, lightLayer.COLD, events.tick.HOT],\n\t(p, scene, light) => p.compose(scene, light)\n)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import * as runtime from 'tvs-flow/dist/lib/runtime'\nimport * as tvsTools from 'tvs-flow-tools'\nimport graph from './nodes.json'\n\nexport const flow = runtime.create()\n\nexport const tools = tvsTools.ui.start({ graph })\n\n; (window as any)['flow'] = flow\n; (window as any)['tools'] = tools\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { flow, tools } from 'experiments/area-light/flow'\nimport { updateFlow } from 'shared-utils/reload'\n\n\nconst graphModules = require.context('./graph', true, /\\.ts$/)\n\n\nflow.setDebug(true)\n\nupdateFlow(flow, graphModules)\n\ntools.setFlow(flow, 'area light')\n\nsetTimeout(function () {\n  flow.setDebug(false)\n}, 1000)\n\n\nif (module.hot) {\n  module.hot.accept((graphModules as any).id, function() {\n    const newGraphModules = require.context('./graph', true, /\\.ts$/)\n    updateFlow(flow, newGraphModules)\n    tools.setFlow(flow, 'area light')\n  })\n}\n"],"sourceRoot":""}