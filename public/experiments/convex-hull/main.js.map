{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/contants.js","webpack:///../libs/libs/dist/events/dom.js","webpack:///../libs/libs/dist/events/mouse.js","webpack:///../libs/painter/dist/asset-lib.js","webpack:///../libs/painter/dist/render-utils.js","webpack:///../libs/painter/dist/form.js","webpack:///../libs/painter/dist/layer.js","webpack:///../libs/painter/dist/shade.js","webpack:///../libs/painter/dist/sketch.js","webpack:///../libs/painter/dist/painter.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/utils/object.js","webpack:///../libs/libs/dist/math/coords.js","webpack:///../libs/libs/dist/utils/sequence.js","webpack:///../libs/libs/dist/events/keyboard.js","webpack:///./experiments/convex-hull/shaders/compose.frag","webpack:///./experiments/convex-hull/shaders/point.frag","webpack:///./experiments/convex-hull/shaders/point.vert","webpack:///../libs/libs/dist/math/vectors.js","webpack:///./experiments/convex-hull/shaders/side.frag","webpack:///../libs/libs/dist/math/random.js","webpack:///../libs/painter/dist/utils/context.js","webpack:///./experiments/convex-hull/context.ts","webpack:///./experiments/convex-hull/nodes.ts","webpack:///./experiments/convex-hull/index.ts","webpack:///./shared-utils/scheduler.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","windowSize","callback","resize","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","Buttons","LEFT","MIDDLE","RIGHT","mouse","opts","cb","element","document","enableRightButton","state","pressed","drag","x","y","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","defaultTextureSettings","wrap","minFilter","magFilter","defaultForms","renderQuad","attribs","[object Object]","contants","buffer","Float32Array","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","b","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","updateRenderTarget","target","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","formCounter","form_Form","id","this","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","Error","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","staticLayerCount","layer_StaticLayer","_texture","asset","indexOf","generateMipmap","assign","drawingLayerCount","layer_DrawingLayer","targets","canvas","buffered","sequence","doubleBuffered","forEach","sketches","sketch","shade","update","uniforms","destroy","undefined","shadeCounter","shade_Shade","fragSource","trim","vertSource","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","length","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","drawSettings","form","painter_Painter","forceUpdateTargets","keepCurrentSize","createForm","result","createFlatSketch","multiplier","context","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","currentCanvas","painter","getPainter","device","cancelWindow","cancelMouse","cancelKeys","scheduler","sizeMultiplier","keepCanvasSize","dispatch","baseEvents","RESIZE","keyboard","k","keys","init","debug","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","set","getState","addSystem","painterState_forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","tpf","prop","val","reset","deepOverride","obj1","obj2","opt","ignore","val1","val2","systems","FRAME","polarToCartesian2D","coords","phi","Math","cos","sin","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","fn","res","as","bs","min","array","subarray","currentLength","coll","obj","Keys","onKeydown","keyCode","Date","now","onKeyup","add","vec1","vec2","sub","mul","scalar","vec","div","vectors_length","sum","sqrt","dot","v1","v2","cross","cross2D","randInt","int","floor","random","randIntInRange","from","to","normalRand","getContext","contextAttributes","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","getElementById","painterState","radius","triples","nodes","vectors","abs","PI","pointsShade","shaders_point_default","a","point_default","pointsForm","position","pointsSketch","points","COLOR_BUFFER_BIT","BLEND","sides","side_default","bufferOpts","compose_default","outBuffer1","outBuffer2","previous","current","convex_hull_layers","triple","p1","p2","p3","o1","o2","compose","log","once","repeat","stop","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","updates","requestAnimationFrame"],"mappings":"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","file":"experiments/convex-hull/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n","export const GEOMETRY_PROP_POSITION = 'position';\r\nexport const GEOMETRY_PROP_NORMAL = 'normal';\r\nexport const GEOMETRY_PROP_UV = 'uv';\r\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\r\nexport const VARYING_UV_COORDS = 'coords';\r\nexport const GL_TYPE = {\r\n    FLOAT: 0x1406,\r\n    FLOAT_VEC2: 0x8b50,\r\n    FLOAT_VEC3: 0x8b51,\r\n    FLOAT_VEC4: 0x8b52,\r\n    INT: 0x1404,\r\n    INT_VEC2: 0x8b53,\r\n    INT_VEC3: 0x8b54,\r\n    INT_VEC4: 0x8b55,\r\n    BOOL: 0x8b56,\r\n    BOOL_VEC2: 0x8b57,\r\n    BOOL_VEC3: 0x8b58,\r\n    BOOL_VEC4: 0x8b59,\r\n    FLOAT_MAT2: 0x8b5a,\r\n    FLOAT_MAT3: 0x8b5b,\r\n    FLOAT_MAT4: 0x8b5c,\r\n    SAMPLER_2D: 0x8b5e,\r\n    SAMPLER_CUBE: 0x8b60,\r\n    SAMPLER_3D: 0x8b5f,\r\n    SAMPLER_2D_SHADOW: 0x8b62,\r\n    FLOAT_MAT2X3: 0x8b65,\r\n    FLOAT_MAT2X4: 0x8b66,\r\n    FLOAT_MAT3X2: 0x8b67,\r\n    FLOAT_MAT3X4: 0x8b68,\r\n    FLOAT_MAT4X2: 0x8b69,\r\n    FLOAT_MAT4X3: 0x8b6a,\r\n    SAMPLER_2D_ARRAY: 0x8dc1,\r\n    SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\r\n    SAMPLER_CUBE_SHADOW: 0x8dc5,\r\n    UNSIGNED_INT: 0x1405,\r\n    UNSIGNED_INT_VEC2: 0x8dc6,\r\n    UNSIGNED_INT_VEC3: 0x8dc7,\r\n    UNSIGNED_INT_VEC4: 0x8dc8,\r\n    INT_SAMPLER_2D: 0x8dca,\r\n    INT_SAMPLER_3D: 0x8dcb,\r\n    INT_SAMPLER_CUBE: 0x8dcc,\r\n    INT_SAMPLER_2D_ARRAY: 0x8dcf,\r\n    UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\r\n    UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\r\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\r\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\r\n    TEXTURE_2D: 0x0de1,\r\n    TEXTURE_CUBE_MAP: 0x8513,\r\n    TEXTURE_3D: 0x806f,\r\n    TEXTURE_2D_ARRAY: 0x8c1a,\r\n    BYTE: 0x1400,\r\n    UNSIGNED_BYTE: 0x1401,\r\n    SHORT: 0x1402,\r\n    UNSIGNED_SHORT: 0x1403,\r\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\r\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\r\n    UNSIGNED_SHORT_5_6_5: 0x8363,\r\n    HALF_FLOAT: 0x140b,\r\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\r\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\r\n    UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\r\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\r\n    UNSIGNED_INT_24_8: 0x84fa,\r\n};\r\n//# sourceMappingURL=contants.js.map","export function windowSize(callback) {\r\n    function resize() {\r\n        callback({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        });\r\n    }\r\n    window.addEventListener('resize', resize);\r\n    resize();\r\n    return function stop() {\r\n        window.removeEventListener('resize', resize);\r\n    };\r\n}\r\nexport function windowSizeObserver() {\r\n    const state = {\r\n        size: { width: 0, height: 0 },\r\n    };\r\n    const destroy = windowSize(s => (state.size = s));\r\n    return { state, destroy };\r\n}\r\n//# sourceMappingURL=dom.js.map","export const Buttons = {\r\n    LEFT: 0,\r\n    MIDDLE: 1,\r\n    RIGHT: 2,\r\n};\r\nexport function mouse(opts, callback) {\r\n    const cb = callback || opts;\r\n    const { element = document, enableRightButton } = opts;\r\n    const state = {\r\n        pressed: {},\r\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\r\n        dragging: false,\r\n    };\r\n    let x = 0, y = 0, oX = 0, oY = 0;\r\n    function onMouseDown(e) {\r\n        state.pressed[e.button] = e;\r\n        if (e.button === Buttons.LEFT) {\r\n            x = oX = e.clientX;\r\n            y = oY = e.clientY;\r\n            state.dragging = true;\r\n        }\r\n        cb(state);\r\n    }\r\n    function onMouseUp(e) {\r\n        delete state.pressed[e.button];\r\n        delete state.drag.event;\r\n        state.drag.x = 0;\r\n        state.drag.y = 0;\r\n        state.drag.dX = 0;\r\n        state.drag.dY = 0;\r\n        state.dragging = false;\r\n        cb(state);\r\n    }\r\n    function onMouseMove(e) {\r\n        if (state.dragging) {\r\n            state.drag.event = e;\r\n            state.drag.x = x - e.clientX;\r\n            state.drag.y = y - e.clientY;\r\n            state.drag.dX = oX - e.clientX;\r\n            state.drag.dY = oY - e.clientY;\r\n            oX = e.clientX;\r\n            oY = e.clientY;\r\n            cb(state);\r\n        }\r\n    }\r\n    function preventDefault(e) {\r\n        e.preventDefault();\r\n    }\r\n    element.addEventListener('mousedown', onMouseDown);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    if (enableRightButton) {\r\n        element.addEventListener('contextmenu', preventDefault);\r\n    }\r\n    cb(state);\r\n    return function destroy() {\r\n        element.removeEventListener('mousedown', onMouseDown);\r\n        document.removeEventListener('mousemove', onMouseMove);\r\n        document.removeEventListener('mouseup', onMouseUp);\r\n        if (enableRightButton) {\r\n            element.removeEventListener('contextmenu', preventDefault);\r\n        }\r\n    };\r\n}\r\nexport function mouseObserver(opts = {}) {\r\n    const observer = {\r\n        Buttons,\r\n        state: {},\r\n        destroy: () => { },\r\n    };\r\n    function callback(state) {\r\n        observer.state = state;\r\n    }\r\n    observer.destroy = mouse(opts, callback);\r\n    return observer;\r\n}\r\n//# sourceMappingURL=mouse.js.map","import * as constants from './contants';\r\nexport const defaultTextureSettings = {\r\n    wrap: 'CLAMP_TO_EDGE',\r\n    minFilter: 'LINEAR',\r\n    magFilter: 'NEAREST',\r\n};\r\nexport function getDefaultLayerSettings(gl) {\r\n    return {\r\n        clearColor: [0.0, 0.0, 0.0, 1.0],\r\n        enable: [gl.DEPTH_TEST],\r\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\r\n    };\r\n}\r\nexport const defaultForms = {\r\n    renderQuad: {\r\n        attribs: {\r\n            [constants.GEOMETRY_PROP_POSITION]: {\r\n                buffer: new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]),\r\n                storeType: 'STATIC',\r\n            },\r\n            [constants.GEOMETRY_PROP_UV]: {\r\n                buffer: new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]),\r\n                storeType: 'STATIC',\r\n            },\r\n        },\r\n        drawType: 'TRIANGLE_STRIP',\r\n        itemCount: 4,\r\n    },\r\n};\r\nexport const defaultShaders = {\r\n    basicEffect: {\r\n        vert: `\r\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\r\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\r\nvarying vec2 ${constants.VARYING_UV_COORDS};\r\nvoid main() {\r\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\r\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\r\n}`,\r\n        frag: `precision mediump float;\r\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\r\nvarying vec2 ${constants.VARYING_UV_COORDS};\r\nvoid main() {\r\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\r\n}`,\r\n    },\r\n};\r\n//# sourceMappingURL=asset-lib.js.map","import { GL_TYPE } from './contants';\r\n// Attrib and Uniform Setters\r\nfunction getBindPointForSamplerType(type) {\r\n    return typeMap[type].bindPoint;\r\n}\r\nfunction floatSetter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform1f(location, v);\r\n    };\r\n}\r\nfunction floatArraySetter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform1fv(location, v);\r\n    };\r\n}\r\nfunction floatVec2Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform2fv(location, v);\r\n    };\r\n}\r\nfunction floatVec3Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform3fv(location, v);\r\n    };\r\n}\r\nfunction floatVec4Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform4fv(location, v);\r\n    };\r\n}\r\nfunction intSetter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform1i(location, v);\r\n    };\r\n}\r\nfunction intArraySetter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform1iv(location, v);\r\n    };\r\n}\r\nfunction intVec2Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform2iv(location, v);\r\n    };\r\n}\r\nfunction intVec3Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform3iv(location, v);\r\n    };\r\n}\r\nfunction intVec4Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform4iv(location, v);\r\n    };\r\n}\r\nfunction uintSetter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform1ui(location, v);\r\n    };\r\n}\r\nfunction uintArraySetter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform1uiv(location, v);\r\n    };\r\n}\r\nfunction uintVec2Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform2uiv(location, v);\r\n    };\r\n}\r\nfunction uintVec3Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform3uiv(location, v);\r\n    };\r\n}\r\nfunction uintVec4Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniform4uiv(location, v);\r\n    };\r\n}\r\nfunction floatMat2Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix2fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat3Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix3fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat4Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix4fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat23Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix2x3fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat32Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix3x2fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat24Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix2x4fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat42Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix4x2fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat34Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix3x4fv(location, false, v);\r\n    };\r\n}\r\nfunction floatMat43Setter(gl, location) {\r\n    return (v) => {\r\n        gl.uniformMatrix4x3fv(location, false, v);\r\n    };\r\n}\r\nfunction samplerSetter(gl, type, unit, location) {\r\n    const bindPoint = getBindPointForSamplerType(type);\r\n    return (texture) => {\r\n        gl.uniform1i(location, unit);\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(bindPoint, texture);\r\n    };\r\n}\r\nfunction samplerArraySetter(gl, type, unit, location, size) {\r\n    const bindPoint = getBindPointForSamplerType(type);\r\n    const units = new Int32Array(size);\r\n    for (let i = 0; i < size; ++i) {\r\n        units[i] = unit + i;\r\n    }\r\n    return (textures) => {\r\n        gl.uniform1iv(location, units);\r\n        for (const index in textures) {\r\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\r\n            gl.bindTexture(bindPoint, textures[index]);\r\n        }\r\n    };\r\n}\r\nfunction isSamplerInfo(info) {\r\n    return info.Type === null;\r\n}\r\nconst typeMap = {\r\n    [GL_TYPE.FLOAT]: {\r\n        Type: Float32Array,\r\n        size: 4,\r\n        setter: floatSetter,\r\n        arraySetter: floatArraySetter,\r\n    },\r\n    [GL_TYPE.FLOAT_VEC2]: {\r\n        Type: Float32Array,\r\n        size: 8,\r\n        setter: floatVec2Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_VEC3]: {\r\n        Type: Float32Array,\r\n        size: 12,\r\n        setter: floatVec3Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_VEC4]: {\r\n        Type: Float32Array,\r\n        size: 16,\r\n        setter: floatVec4Setter,\r\n    },\r\n    [GL_TYPE.INT]: {\r\n        Type: Int32Array,\r\n        size: 4,\r\n        setter: intSetter,\r\n        arraySetter: intArraySetter,\r\n    },\r\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\r\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\r\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\r\n    [GL_TYPE.UNSIGNED_INT]: {\r\n        Type: Uint32Array,\r\n        size: 4,\r\n        setter: uintSetter,\r\n        arraySetter: uintArraySetter,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\r\n        Type: Uint32Array,\r\n        size: 8,\r\n        setter: uintVec2Setter,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\r\n        Type: Uint32Array,\r\n        size: 12,\r\n        setter: uintVec3Setter,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\r\n        Type: Uint32Array,\r\n        size: 16,\r\n        setter: uintVec4Setter,\r\n    },\r\n    [GL_TYPE.BOOL]: {\r\n        Type: Uint32Array,\r\n        size: 4,\r\n        setter: intSetter,\r\n        arraySetter: intArraySetter,\r\n    },\r\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\r\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\r\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\r\n    [GL_TYPE.FLOAT_MAT2]: {\r\n        Type: Float32Array,\r\n        size: 16,\r\n        setter: floatMat2Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT3]: {\r\n        Type: Float32Array,\r\n        size: 36,\r\n        setter: floatMat3Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT4]: {\r\n        Type: Float32Array,\r\n        size: 64,\r\n        setter: floatMat4Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT2X3]: {\r\n        Type: Float32Array,\r\n        size: 24,\r\n        setter: floatMat23Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT2X4]: {\r\n        Type: Float32Array,\r\n        size: 32,\r\n        setter: floatMat24Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT3X2]: {\r\n        Type: Float32Array,\r\n        size: 24,\r\n        setter: floatMat32Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT3X4]: {\r\n        Type: Float32Array,\r\n        size: 48,\r\n        setter: floatMat34Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT4X2]: {\r\n        Type: Float32Array,\r\n        size: 32,\r\n        setter: floatMat42Setter,\r\n    },\r\n    [GL_TYPE.FLOAT_MAT4X3]: {\r\n        Type: Float32Array,\r\n        size: 48,\r\n        setter: floatMat43Setter,\r\n    },\r\n    [GL_TYPE.SAMPLER_2D]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D,\r\n    },\r\n    [GL_TYPE.SAMPLER_CUBE]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\r\n    },\r\n    [GL_TYPE.SAMPLER_3D]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_3D,\r\n    },\r\n    [GL_TYPE.SAMPLER_2D_SHADOW]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D,\r\n    },\r\n    [GL_TYPE.SAMPLER_2D_ARRAY]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\r\n    },\r\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\r\n    },\r\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\r\n    },\r\n    [GL_TYPE.INT_SAMPLER_2D]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D,\r\n    },\r\n    [GL_TYPE.INT_SAMPLER_3D]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_3D,\r\n    },\r\n    [GL_TYPE.INT_SAMPLER_CUBE]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\r\n    },\r\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_3D,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: {\r\n        Type: null,\r\n        size: 0,\r\n        setter: samplerSetter,\r\n        arraySetter: samplerArraySetter,\r\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\r\n    },\r\n};\r\nfunction floatAttribSetter(gl, location, typeInfo) {\r\n    return (b) => {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\r\n        gl.enableVertexAttribArray(location);\r\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\r\n    };\r\n}\r\nfunction intAttribSetter(gl, location, typeInfo) {\r\n    return (b) => {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\r\n        gl.enableVertexAttribArray(location);\r\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\r\n    };\r\n}\r\nfunction matAttribSetter(gl, location, typeInfo) {\r\n    const defaultSize = typeInfo.size;\r\n    const count = typeInfo.count;\r\n    return (b) => {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\r\n        const numComponents = defaultSize;\r\n        const size = numComponents / count;\r\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\r\n        const stride = typeInfo.size * numComponents;\r\n        const normalize = b.normalize || false;\r\n        const offset = b.offset || 0;\r\n        const rowOffset = stride / count;\r\n        for (let i = 0; i < count; ++i) {\r\n            gl.enableVertexAttribArray(location + i);\r\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\r\n        }\r\n    };\r\n}\r\nconst attrTypeMap = {\r\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\r\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\r\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\r\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\r\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\r\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\r\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\r\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\r\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\r\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\r\n        size: 8,\r\n        setter: intAttribSetter,\r\n        itemSize: 2,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\r\n        size: 12,\r\n        setter: intAttribSetter,\r\n        itemSize: 3,\r\n    },\r\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\r\n        size: 16,\r\n        setter: intAttribSetter,\r\n        itemSize: 4,\r\n    },\r\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\r\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\r\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\r\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\r\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\r\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\r\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 },\r\n};\r\nexport function createUniformSetters(gl, program) {\r\n    let textureUnit = 0;\r\n    function createUniformSetter(program, uniformInfo) {\r\n        const location = gl.getUniformLocation(program, uniformInfo.name);\r\n        const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\r\n        const type = uniformInfo.type;\r\n        const typeInfo = typeMap[type];\r\n        if (!typeInfo) {\r\n            throw new Error('unknown type: 0x' + type.toString(16)); // we should never get here.\r\n        }\r\n        if (location == null) {\r\n            return;\r\n        }\r\n        let setter;\r\n        if (isSamplerInfo(typeInfo)) {\r\n            // it's a sampler\r\n            const unit = textureUnit;\r\n            textureUnit += uniformInfo.size;\r\n            if (isArray) {\r\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\r\n            }\r\n            else {\r\n                setter = typeInfo.setter(gl, type, unit, location);\r\n            }\r\n        }\r\n        else {\r\n            if (typeInfo.arraySetter && isArray) {\r\n                setter = typeInfo.arraySetter(gl, location);\r\n            }\r\n            else {\r\n                setter = typeInfo.setter(gl, location);\r\n            }\r\n        }\r\n        return { setter, location };\r\n    }\r\n    const uniformSetters = {};\r\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n    for (let i = 0; i < numUniforms; ++i) {\r\n        const uniformInfo = gl.getActiveUniform(program, i);\r\n        if (!uniformInfo) {\r\n            continue;\r\n        }\r\n        let name = uniformInfo.name;\r\n        // remove the array suffix.\r\n        if (name.substr(-3) === '[0]') {\r\n            name = name.substr(0, name.length - 3);\r\n        }\r\n        if (program) {\r\n            const setter = createUniformSetter(program, uniformInfo);\r\n            if (setter) {\r\n                uniformSetters[name] = setter;\r\n            }\r\n        }\r\n    }\r\n    return uniformSetters;\r\n}\r\nexport function createAttributeSetters(gl, program) {\r\n    const attribSetters = {};\r\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    for (let i = 0; i < numAttribs; i++) {\r\n        const attribInfo = gl.getActiveAttrib(program, i);\r\n        if (!attribInfo) {\r\n            break;\r\n        }\r\n        const location = gl.getAttribLocation(program, attribInfo.name);\r\n        const typeInfo = attrTypeMap[attribInfo.type];\r\n        const setter = typeInfo.setter(gl, location, typeInfo);\r\n        attribSetters[attribInfo.name] = { setter, location };\r\n    }\r\n    return attribSetters;\r\n}\r\n// Type helpers\r\nexport const glTypeToTypedArray = {\r\n    [GL_TYPE.BYTE]: Int8Array,\r\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\r\n    [GL_TYPE.SHORT]: Int16Array,\r\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\r\n    [GL_TYPE.INT]: Int32Array,\r\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\r\n    [GL_TYPE.FLOAT]: Float32Array,\r\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\r\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\r\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\r\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\r\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\r\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\r\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\r\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\r\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array,\r\n};\r\nexport function getGLTypeForTypedArray(typedArray) {\r\n    if (typedArray instanceof Int8Array) {\r\n        return GL_TYPE.BYTE;\r\n    }\r\n    if (typedArray instanceof Uint8Array) {\r\n        return GL_TYPE.UNSIGNED_BYTE;\r\n    }\r\n    if (typedArray instanceof Uint8ClampedArray) {\r\n        return GL_TYPE.UNSIGNED_BYTE;\r\n    }\r\n    if (typedArray instanceof Int16Array) {\r\n        return GL_TYPE.SHORT;\r\n    }\r\n    if (typedArray instanceof Uint16Array) {\r\n        return GL_TYPE.UNSIGNED_SHORT;\r\n    }\r\n    if (typedArray instanceof Int32Array) {\r\n        return GL_TYPE.INT;\r\n    }\r\n    if (typedArray instanceof Uint32Array) {\r\n        return GL_TYPE.UNSIGNED_INT;\r\n    }\r\n    if (typedArray instanceof Float32Array) {\r\n        return GL_TYPE.FLOAT;\r\n    }\r\n    throw new Error('unsupported typed array type');\r\n}\r\nexport function getGLTypeForTypedArrayType(typedArrayType) {\r\n    if (typedArrayType === Int8Array) {\r\n        return GL_TYPE.BYTE;\r\n    }\r\n    if (typedArrayType === Uint8Array) {\r\n        return GL_TYPE.UNSIGNED_BYTE;\r\n    }\r\n    if (typedArrayType === Uint8ClampedArray) {\r\n        return GL_TYPE.UNSIGNED_BYTE;\r\n    }\r\n    if (typedArrayType === Int16Array) {\r\n        return GL_TYPE.SHORT;\r\n    }\r\n    if (typedArrayType === Uint16Array) {\r\n        return GL_TYPE.UNSIGNED_SHORT;\r\n    }\r\n    if (typedArrayType === Int32Array) {\r\n        return GL_TYPE.INT;\r\n    }\r\n    if (typedArrayType === Uint32Array) {\r\n        return GL_TYPE.UNSIGNED_INT;\r\n    }\r\n    if (typedArrayType === Float32Array) {\r\n        return GL_TYPE.FLOAT;\r\n    }\r\n    throw new Error('unsupported typed array type');\r\n}\r\n// Texture helper\r\nexport function setTextureParams(gl, data = {}, oldData = {}) {\r\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\r\n    }\r\n    if ((data.wrap && data.wrap !== oldData.wrap) ||\r\n        (data.wrapS && data.wrapS !== oldData.wrapS) ||\r\n        (data.wrapT && data.wrapT !== oldData.wrapT)) {\r\n        let wrapS, wrapT;\r\n        if (data.wrap) {\r\n            wrapS = wrapT = data.wrap;\r\n        }\r\n        else {\r\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\r\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\r\n        }\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\r\n    }\r\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\r\n    }\r\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\r\n    }\r\n}\r\n// Framebuffers\r\nexport function updateRenderTarget(gl, target, data, oldData) {\r\n    if (target.width == null || target.height == null) {\r\n        return;\r\n    }\r\n    if (target.frameBuffer == null) {\r\n        target.frameBuffer = gl.createFramebuffer();\r\n    }\r\n    if (!target.textures) {\r\n        target.textures = [];\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\r\n    if (target.textureConfig.type === gl.FLOAT) {\r\n        gl.getExtension('OES_texture_float');\r\n    }\r\n    const texCount = target.textureConfig.count;\r\n    if (texCount > 1) {\r\n        const glDB = gl.getExtension('WEBGL_draw_buffers') ||\r\n            { drawBuffersWEBGL() { } };\r\n        const bufferAttachments = [];\r\n        for (let i = 0; i < texCount; i++) {\r\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\r\n        }\r\n        glDB.drawBuffersWEBGL(bufferAttachments);\r\n        for (let i = 0; i < texCount; i++) {\r\n            if (target.textures[i] == null) {\r\n                target.textures[i] = gl.createTexture();\r\n            }\r\n            const texture = target.textures[i];\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\r\n            setTextureParams(gl, data, oldData);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\r\n        }\r\n    }\r\n    else {\r\n        if (target.textures[0] == null) {\r\n            target.textures[0] = gl.createTexture();\r\n        }\r\n        const texture = target.textures[0];\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\r\n        setTextureParams(gl, data, oldData);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    }\r\n    if (target.depthBuffer == null) {\r\n        target.depthBuffer = gl.createRenderbuffer();\r\n    }\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\r\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\r\n        console.error('framebuffer error', err, data);\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n}\r\nexport function destroyRenderTarget(gl, target) {\r\n    gl.deleteFramebuffer(target.frameBuffer);\r\n    gl.deleteRenderbuffer(target.depthBuffer);\r\n    for (const texture of target.textures) {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\r\n// Settings\r\nexport function applyDrawSettings(gl, settings) {\r\n    if (settings.enable) {\r\n        for (const setting of settings.enable) {\r\n            gl.enable(setting);\r\n        }\r\n    }\r\n    if (settings.disable) {\r\n        for (const setting of settings.disable) {\r\n            gl.disable(setting);\r\n        }\r\n    }\r\n    if (settings.blendFunc) {\r\n        gl.blendFunc.apply(gl, settings.blendFunc);\r\n    }\r\n    if (settings.depthFunc != null) {\r\n        gl.depthFunc(settings.depthFunc);\r\n    }\r\n    if (settings.cullFace != null) {\r\n        gl.cullFace(settings.cullFace);\r\n    }\r\n    if (settings.frontFace != null) {\r\n        gl.frontFace(settings.frontFace);\r\n    }\r\n    if (settings.lineWidth != null) {\r\n        gl.lineWidth(settings.lineWidth);\r\n    }\r\n    if (settings.colorMask) {\r\n        gl.colorMask.apply(gl, settings.colorMask);\r\n    }\r\n    if (settings.depthMask != null) {\r\n        gl.depthMask(settings.depthMask);\r\n    }\r\n    if (settings.clearColor) {\r\n        gl.clearColor.apply(gl, settings.clearColor);\r\n    }\r\n    if (settings.clearDepth != null) {\r\n        gl.clearDepth(settings.clearDepth);\r\n    }\r\n    if (settings.clearBits != null) {\r\n        gl.clear(settings.clearBits);\r\n    }\r\n}\r\nexport function revertDrawSettings(gl, settings) {\r\n    if (settings.enable) {\r\n        for (const setting of settings.enable) {\r\n            gl.disable(setting);\r\n        }\r\n    }\r\n    if (settings.disable) {\r\n        for (const setting of settings.disable) {\r\n            gl.enable(setting);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\r\nlet formCounter = 1;\r\nexport class Form {\r\n    constructor(gl, id = 'Form' + formCounter++) {\r\n        this.gl = gl;\r\n        this.id = id;\r\n    }\r\n    update(data) {\r\n        const gl = this.gl;\r\n        if (data.drawType) {\r\n            this.drawType = gl[data.drawType];\r\n        }\r\n        if (data.itemCount) {\r\n            this.itemCount = data.itemCount;\r\n        }\r\n        this.attribs = this.attribs || {};\r\n        for (const id in data.attribs) {\r\n            const attribData = data.attribs[id];\r\n            if (this.attribs[id] == null) {\r\n                this.attribs[id] = {\r\n                    buffer: gl.createBuffer(),\r\n                };\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\r\n        }\r\n        if (data.elements) {\r\n            const buffer = data.elements.buffer;\r\n            if (this.elements == null) {\r\n                this.elements = {\r\n                    buffer: gl.createBuffer(),\r\n                    glType: null,\r\n                };\r\n            }\r\n            this.elements.glType = getGLTypeForTypedArray(buffer);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\r\n        }\r\n        return this;\r\n    }\r\n    destroy() {\r\n        for (const id in this.attribs) {\r\n            this.gl.deleteBuffer(this.attribs[id].buffer);\r\n        }\r\n        if (this.elements) {\r\n            this.gl.deleteBuffer(this.elements.buffer);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=form.js.map","import { times } from 'tvs-libs/dist/utils/sequence';\r\nimport { defaultTextureSettings } from './asset-lib';\r\nimport { Painter } from './painter';\r\nimport { destroyRenderTarget, setTextureParams, updateRenderTarget, } from './render-utils';\r\nlet staticLayerCount = 1;\r\nexport class StaticLayer {\r\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\r\n        this.gl = gl;\r\n        this.id = id;\r\n        this.data = {};\r\n        this._texture = gl.createTexture();\r\n    }\r\n    texture() {\r\n        return this._texture;\r\n    }\r\n    update(data) {\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\r\n        if (data.asset) {\r\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\r\n                data.wrap = defaultTextureSettings.wrap;\r\n            }\r\n            if (!data.minFilter) {\r\n                data.minFilter = defaultTextureSettings.minFilter;\r\n            }\r\n            if (!data.magFilter) {\r\n                data.magFilter = defaultTextureSettings.magFilter;\r\n            }\r\n        }\r\n        setTextureParams(this.gl, data, this.data);\r\n        if (data.asset) {\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\r\n        }\r\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\r\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n        }\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n        Object.assign(this.data, data);\r\n        return this;\r\n    }\r\n    destroy() {\r\n        this.gl.deleteTexture(this.texture());\r\n    }\r\n}\r\nlet drawingLayerCount = 1;\r\nexport class DrawingLayer {\r\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\r\n        this.gl = gl;\r\n        this.id = id;\r\n        this.data = {};\r\n    }\r\n    texture(i = 0) {\r\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n            if (this.targets) {\r\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\r\n            }\r\n        }\r\n        return (this.targets && this.targets[0].textures[i]) || null;\r\n    }\r\n    update(data = {}) {\r\n        data.width = data.width || this.gl.canvas.width;\r\n        data.height = data.height || this.gl.canvas.height;\r\n        if (data.buffered && !this.targets) {\r\n            this.targets = times(i => ({\r\n                id: this.id + '_target' + (i + 1),\r\n                width: data.width,\r\n                height: data.height,\r\n                frameBuffer: null,\r\n                textures: [],\r\n                depthBuffer: null,\r\n                textureConfig: {\r\n                    type: (data.textureConfig && data.textureConfig.type) ||\r\n                        this.gl.UNSIGNED_BYTE,\r\n                    count: (data.textureConfig && data.textureConfig.count) || 1,\r\n                },\r\n            }), data.doubleBuffered ? 2 : 1);\r\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\r\n                data.wrap = defaultTextureSettings.wrap;\r\n            }\r\n            if (!data.minFilter) {\r\n                data.minFilter = defaultTextureSettings.minFilter;\r\n            }\r\n            if (!data.magFilter) {\r\n                data.magFilter = defaultTextureSettings.magFilter;\r\n            }\r\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\r\n        }\r\n        else if (this.targets &&\r\n            (data.width !== this.data.width || data.height !== this.data.height)) {\r\n            this.targets.forEach(t => {\r\n                t.width = data.width;\r\n                t.height = data.height;\r\n                updateRenderTarget(this.gl, t, data, this.data);\r\n            });\r\n        }\r\n        if (data.sketches) {\r\n            this.sketches = data.sketches;\r\n        }\r\n        if (data.frag) {\r\n            const sketch = this.sketches && this.sketches[0];\r\n            if (sketch) {\r\n                sketch.shade.update({ frag: data.frag });\r\n            }\r\n        }\r\n        if (data.uniforms) {\r\n            this.uniforms = data.uniforms;\r\n        }\r\n        Object.assign(this.data, data);\r\n        return this;\r\n    }\r\n    destroy() {\r\n        if (this.sketches) {\r\n            for (const sketch of this.sketches) {\r\n                sketch.destroy();\r\n            }\r\n        }\r\n        if (this.targets) {\r\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\r\n            this.targets = undefined;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=layer.js.map","import { createAttributeSetters, createUniformSetters } from './render-utils';\r\nlet shadeCounter = 1;\r\nexport class Shade {\r\n    constructor(gl, id = 'Shade' + shadeCounter++) {\r\n        this.gl = gl;\r\n        this.id = id;\r\n    }\r\n    update(data) {\r\n        const gl = this.gl;\r\n        const fragSource = (data.frag && data.frag.trim()) || this.fragSource;\r\n        const vertSource = (data.vert && data.vert.trim()) || this.vertSource;\r\n        if (!(fragSource &&\r\n            vertSource &&\r\n            (fragSource !== this.fragSource || vertSource !== this.vertSource))) {\r\n            return this;\r\n        }\r\n        this.destroy();\r\n        if (fragSource.indexOf('GL_EXT_draw_buffers') >= 0) {\r\n            gl.getExtension('WEBGL_draw_buffers');\r\n        }\r\n        const program = gl.createProgram();\r\n        const frag = gl.createShader(gl.FRAGMENT_SHADER);\r\n        const vert = gl.createShader(gl.VERTEX_SHADER);\r\n        // if (!(program && frag && vert)) {\r\n        // \tthrow TypeError('Could not initialize Shade')\r\n        // }\r\n        this.program = program;\r\n        this.frag = frag;\r\n        this.vert = vert;\r\n        if (!(program && vert && frag))\r\n            return;\r\n        gl.attachShader(program, vert);\r\n        gl.attachShader(program, frag);\r\n        gl.shaderSource(vert, vertSource);\r\n        gl.shaderSource(frag, fragSource);\r\n        gl.compileShader(vert);\r\n        gl.compileShader(frag);\r\n        if (!gl.getShaderParameter(vert, gl.COMPILE_STATUS)) {\r\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(vert), addLineNumbers(vertSource));\r\n        }\r\n        if (!gl.getShaderParameter(frag, gl.COMPILE_STATUS)) {\r\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(frag), addLineNumbers(fragSource));\r\n        }\r\n        gl.linkProgram(program);\r\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (!linked) {\r\n            const lastError = gl.getProgramInfoLog(program);\r\n            console.error('Error in program linking:', lastError);\r\n        }\r\n        this.uniformSetters = createUniformSetters(gl, program);\r\n        this.attributeSetters = createAttributeSetters(gl, program);\r\n        this.fragSource = fragSource;\r\n        this.vertSource = vertSource;\r\n        return this;\r\n    }\r\n    destroy() {\r\n        this.gl.deleteProgram(this.program);\r\n        this.gl.deleteShader(this.frag);\r\n        this.gl.deleteShader(this.vert);\r\n    }\r\n}\r\nfunction addLineNumbers(src) {\r\n    return src\r\n        .trim()\r\n        .split('\\n')\r\n        .map((line, i) => i + 1 + ': ' + line)\r\n        .join('\\n');\r\n}\r\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\r\nexport class Sketch {\r\n    constructor(id = 'Sketch' + sketchCounter++) {\r\n        this.id = id;\r\n    }\r\n    update(data) {\r\n        if (data.drawSettings) {\r\n            this.drawSettings = data.drawSettings;\r\n        }\r\n        if (data.form) {\r\n            this.form = data.form;\r\n        }\r\n        if (data.shade) {\r\n            this.shade = data.shade;\r\n        }\r\n        if (data.uniforms) {\r\n            this.uniforms = data.uniforms;\r\n        }\r\n        return this;\r\n    }\r\n    destroy() {\r\n        this.form && this.form.destroy();\r\n        this.shade && this.shade.destroy();\r\n    }\r\n}\r\n//# sourceMappingURL=sketch.js.map","import { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings, } from './asset-lib';\r\nimport { Form } from './form';\r\nimport { DrawingLayer, StaticLayer } from './layer';\r\nimport { applyDrawSettings, destroyRenderTarget, revertDrawSettings, updateRenderTarget, } from './render-utils';\r\nimport { Shade } from './shade';\r\nimport { Sketch } from './sketch';\r\nimport { resizeCanvas } from './utils/context';\r\nexport class Painter {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.targets = [\r\n            { id: 'MainTarget_1' },\r\n            { id: 'MainTarget_2' },\r\n        ];\r\n        this.resize({\r\n            forceUpdateTargets: true,\r\n            keepCurrentSize: !!(gl.canvas.width && gl.canvas.height),\r\n        });\r\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\r\n        this.result = this.createFlatSketch();\r\n    }\r\n    resize({ multiplier = 1, forceUpdateTargets = false, keepCurrentSize = false, } = {}) {\r\n        const canvas = this.gl.canvas;\r\n        const needUpdate = keepCurrentSize || resizeCanvas(canvas, multiplier);\r\n        if (needUpdate || forceUpdateTargets) {\r\n            this.targets.forEach(t => {\r\n                if (t.width !== canvas.width || t.height !== canvas.height) {\r\n                    t.width = canvas.width;\r\n                    t.height = canvas.height;\r\n                    t.textureConfig = {\r\n                        count: 1,\r\n                        type: this.gl.UNSIGNED_BYTE,\r\n                    };\r\n                    updateRenderTarget(this.gl, t, defaultTextureSettings);\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    destroy() {\r\n        this.result.destroy();\r\n        for (const target of this.targets) {\r\n            destroyRenderTarget(this.gl, target);\r\n        }\r\n    }\r\n    updateDrawSettings(drawSettings) {\r\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\r\n        return this;\r\n    }\r\n    createForm(id) {\r\n        return new Form(this.gl, id);\r\n    }\r\n    createShade(id) {\r\n        return new Shade(this.gl, id);\r\n    }\r\n    createSketch(id) {\r\n        return new Sketch(id);\r\n    }\r\n    createFlatSketch(id) {\r\n        const s = this.createSketch(id);\r\n        return s.update({\r\n            form: this.renderQuad,\r\n            shade: this.createShade(s.id + '_defaultShade').update(defaultShaders.basicEffect),\r\n        });\r\n    }\r\n    createStaticLayer(id) {\r\n        return new StaticLayer(this.gl, id);\r\n    }\r\n    createDrawingLayer(id) {\r\n        return new DrawingLayer(this.gl, id);\r\n    }\r\n    createEffectLayer(id) {\r\n        const l = this.createDrawingLayer(id);\r\n        return l.update({\r\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')],\r\n        });\r\n    }\r\n    draw(sketch, globalUniforms) {\r\n        draw(this.gl, sketch, null, globalUniforms);\r\n        return this;\r\n    }\r\n    compose(...layers) {\r\n        composeLayers(this.gl, layers, this.targets, this.result);\r\n        return this;\r\n    }\r\n}\r\nPainter.debug = false;\r\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\r\n    const { shade, form, drawSettings, uniforms } = sketch;\r\n    if (!(shade && form)) {\r\n        throw Error('cannot draw, shader or geometry are not set');\r\n    }\r\n    gl.useProgram(shade.program);\r\n    shadeForm(shade, form);\r\n    if (globalUniforms) {\r\n        shadeUniforms(shade, globalUniforms, defaultTexture);\r\n    }\r\n    if (drawSettings) {\r\n        applyDrawSettings(gl, drawSettings);\r\n    }\r\n    if (Array.isArray(uniforms)) {\r\n        for (const instanceUniforms of uniforms) {\r\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\r\n        }\r\n    }\r\n    else {\r\n        drawInstance(gl, sketch, defaultTexture, uniforms);\r\n    }\r\n    if (drawSettings) {\r\n        revertDrawSettings(gl, drawSettings);\r\n    }\r\n}\r\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\r\n    if (uniforms) {\r\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\r\n    }\r\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\r\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\r\n    }\r\n    else {\r\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\r\n    }\r\n}\r\nfunction shadeForm(shade, form) {\r\n    for (const name in form.attribs) {\r\n        const setter = shade.attributeSetters[name];\r\n        if (setter) {\r\n            setter.setter(form.attribs[name]);\r\n        }\r\n    }\r\n}\r\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\r\n    for (const name in uniforms) {\r\n        const setter = shade.uniformSetters[name];\r\n        if (setter) {\r\n            let value = uniforms[name];\r\n            if (typeof value === 'function') {\r\n                value = value();\r\n            }\r\n            if (value === null || typeof value === 'string') {\r\n                setter.setter(defaultTexture);\r\n            }\r\n            else {\r\n                setter.setter(value);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\r\n    const source = targets[0];\r\n    const target = targets[1];\r\n    if (directRender) {\r\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n            console.log(`PAINTER: Rendering directly to viewport`);\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n    }\r\n    else if (layer.targets) {\r\n        const i = layer.targets.length - 1;\r\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\r\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n            console.log(`PAINTER: Rendering to target ${target.id}`);\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n    }\r\n    if (layer.data.drawSettings) {\r\n        applyDrawSettings(gl, layer.data.drawSettings);\r\n    }\r\n    if (layer.sketches) {\r\n        for (const sketch of layer.sketches) {\r\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\r\n        }\r\n    }\r\n    else {\r\n        // Display static texture\r\n        draw(gl, resultSketch, null, { source: layer.texture() });\r\n    }\r\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n        console.log(`PAINTER: Render success!`);\r\n    }\r\n    if (layer.data.drawSettings) {\r\n        revertDrawSettings(gl, layer.data.drawSettings);\r\n    }\r\n    if (!directRender) {\r\n        if (!layer.targets) {\r\n            targets[0] = target;\r\n            targets[1] = source;\r\n        }\r\n        else if (layer.targets.length === 2) {\r\n            const tmp = layer.targets[0];\r\n            layer.targets[0] = layer.targets[1];\r\n            layer.targets[1] = tmp;\r\n            layer.looping = true;\r\n        }\r\n    }\r\n}\r\nfunction composeLayers(gl, layers, targets, result) {\r\n    const last = layers.length - 1;\r\n    for (let i = 0; i < layers.length; i++) {\r\n        const layer = layers[i];\r\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\r\n        }\r\n        if (Array.isArray(layer.uniforms)) {\r\n            const newLast = last + layer.uniforms.length - 1;\r\n            layer.looping = false;\r\n            for (let j = 0; j < layer.uniforms.length; j++) {\r\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\r\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\r\n                }\r\n                const directRender = i + j === newLast;\r\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\r\n            }\r\n        }\r\n        else {\r\n            const directRender = i === last;\r\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=painter.js.map","import { once } from 'shared-utils/scheduler'\r\nimport { windowSize } from 'tvs-libs/dist/events/dom'\r\nimport { keyboard, KeyState } from 'tvs-libs/dist/events/keyboard'\r\nimport { mouse, MouseState } from 'tvs-libs/dist/events/mouse'\r\nimport { deepOverride } from 'tvs-libs/dist/utils/object'\r\nimport { Form } from 'tvs-painter/dist/form'\r\nimport { DrawingLayer, StaticLayer } from 'tvs-painter/dist/layer'\r\nimport { Painter } from 'tvs-painter/dist/painter'\r\nimport { Shade } from 'tvs-painter/dist/shade'\r\nimport { Sketch } from 'tvs-painter/dist/sketch'\r\nimport { getContext } from 'tvs-painter/dist/utils/context'\r\n\r\n// === Painter ===\r\n\r\nlet currentCanvas: HTMLCanvasElement\r\nlet painter: Painter\r\n\r\nexport function getPainter(canvas: HTMLCanvasElement) {\r\n\tinit(canvas)\r\n\treturn painter\r\n}\r\n\r\nconst forms: { [id: string]: Form } = {}\r\nexport function getForm(painter: Painter, id: string) {\r\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\r\n}\r\n\r\nconst shades: { [id: string]: Shade } = {}\r\nexport function getShade(painter: Painter, id: string) {\r\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\r\n}\r\n\r\nconst sketches: { [id: string]: Sketch } = {}\r\nexport function getSketch(painter: Painter, id: string) {\r\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\r\n}\r\n\r\nconst drawingLayers: { [id: string]: DrawingLayer } = {}\r\nexport function getDrawingLayer(painter: Painter, id: string) {\r\n\treturn (\r\n\t\tdrawingLayers[id] ||\r\n\t\t(drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\r\n\t)\r\n}\r\n\r\nconst staticLayers: { [id: string]: StaticLayer } = {}\r\nexport function getStaticLayer(painter: Painter, id: string) {\r\n\treturn (\r\n\t\tstaticLayers[id] ||\r\n\t\t(staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\r\n\t)\r\n}\r\n\r\nconst effectLayers: { [id: string]: DrawingLayer } = {}\r\nexport function getEffectLayer(painter: Painter, id: string) {\r\n\treturn (\r\n\t\teffectLayers[id] ||\r\n\t\t(effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\r\n\t)\r\n}\r\n\r\n// === State ===\r\n\r\nexport interface BaseState {\r\n\tdevice: {\r\n\t\ttpf: number\r\n\t\tcanvas: HTMLCanvasElement\r\n\t\tmouse: MouseState\r\n\t\tkeys: KeyState\r\n\t\tsizeMultiplier: number\r\n\t\tkeepCanvasSize?: boolean\r\n\t}\r\n}\r\n\r\nexport const state: BaseState = {\r\n\tdevice: {\r\n\t\ttpf: 0,\r\n\t\tsizeMultiplier: 1,\r\n\t},\r\n} as BaseState\r\n;(window as any).state = state\r\n\r\nexport function get<\r\n\tS extends BaseState = BaseState,\r\n\tK extends keyof S = keyof S\r\n>(prop: K): S[K] {\r\n\treturn (state as S)[prop]\r\n}\r\n\r\nexport function set<\r\n\tS extends BaseState = BaseState,\r\n\tK extends keyof S = keyof S\r\n>(key: K, val: S[K], opts?: { reset: any }) {\r\n\tconst s = state as S\r\n\tif (s[key]) {\r\n\t\tconst reset = opts && opts.reset\r\n\t\tif (reset !== true) {\r\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\r\n\t\t}\r\n\t}\r\n\ts[key] = val\r\n}\r\n\r\nexport function getState<S extends BaseState>() {\r\n\treturn state as S\r\n}\r\n\r\n// === Systems ===\r\n\r\ntype ActionHandler<S extends BaseState = BaseState> = (\r\n\tevent: string,\r\n\tstate: S,\r\n) => void\r\nconst systems: { [id: string]: ActionHandler<any> } = {}\r\n\r\nexport function addSystem<S extends BaseState = BaseState>(\r\n\tid: string,\r\n\ts: ActionHandler<S>,\r\n) {\r\n\tsystems[id] = s\r\n}\r\n\r\nexport function dispatch(event: string) {\r\n\tfor (const k in systems) {\r\n\t\tsystems[k](event, state)\r\n\t}\r\n}\r\n\r\nexport const baseEvents = {\r\n\tFRAME: 'frame',\r\n\tRESIZE: 'resize',\r\n}\r\n\r\n// === Init ===\r\n\r\nlet cancelWindow: () => void\r\nlet cancelMouse: () => void\r\nlet cancelKeys: () => void\r\n\r\nexport function init(canvas: HTMLCanvasElement) {\r\n\tif (canvas !== currentCanvas) {\r\n\t\tcurrentCanvas = canvas\r\n\r\n\t\tpainter = new Painter(getContext(canvas))\r\n\r\n\t\tstate.device.canvas = canvas\r\n\r\n\t\tcancelWindow && cancelWindow()\r\n\t\tcancelMouse && cancelMouse()\r\n\t\tcancelKeys && cancelKeys()\r\n\r\n\t\tcancelWindow = windowSize(() =>\r\n\t\t\tonce(() => {\r\n\t\t\t\tpainter.resize({\r\n\t\t\t\t\tmultiplier: state.device.sizeMultiplier,\r\n\t\t\t\t\tkeepCurrentSize: state.device.keepCanvasSize,\r\n\t\t\t\t})\r\n\t\t\t\tdispatch(baseEvents.RESIZE)\r\n\t\t\t}, 'resize'),\r\n\t\t)\r\n\r\n\t\tcancelMouse = mouse(\r\n\t\t\t{ element: canvas, enableRightButton: true },\r\n\t\t\tm => (state.device.mouse = m),\r\n\t\t)\r\n\r\n\t\tcancelKeys = keyboard(k => (state.device.keys = k))\r\n\t}\r\n}\r\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function deepmerge(obj1, obj2) {\r\n    if (typeof obj1 === 'object' &&\r\n        typeof obj2 === 'object' &&\r\n        !Array.isArray(obj1) &&\r\n        !Array.isArray(obj2) &&\r\n        obj1 !== obj2) {\r\n        const result = Object.assign({}, obj1);\r\n        for (const key in obj2) {\r\n            const val1 = obj1[key];\r\n            const val2 = obj2[key];\r\n            if (typeof val2 !== 'undefined') {\r\n                result[key] = deepmerge(val1, val2);\r\n            }\r\n            else {\r\n                delete result[key];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    return obj2;\r\n}\r\nexport function deepOverride(obj1, obj2, opt) {\r\n    const ignore = opt && opt.ignore;\r\n    if (typeof obj1 === 'object' &&\r\n        typeof obj2 === 'object' &&\r\n        !Array.isArray(obj1) &&\r\n        !Array.isArray(obj2) &&\r\n        obj1 !== obj2) {\r\n        for (const key in obj1) {\r\n            if (obj1.hasOwnProperty(key) &&\r\n                !(ignore && key in ignore && ignore[key] === true)) {\r\n                const val1 = obj1[key];\r\n                const val2 = obj2[key];\r\n                if (val2 !== undefined) {\r\n                    obj1[key] = deepOverride(val1, val2, {\r\n                        ignore: ignore && ignore[key],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return obj1;\r\n    }\r\n    return obj2;\r\n}\r\n//# sourceMappingURL=object.js.map","import { length } from './vectors';\r\nexport function cartesianToPolar2D(v) {\r\n    return [length(v), Math.atan2(v[1], v[0])];\r\n}\r\nexport function polarToCartesian2D(coords) {\r\n    const r = coords[0], phi = coords[1];\r\n    return [r * Math.cos(phi), r * Math.sin(phi)];\r\n}\r\n//# sourceMappingURL=coords.js.map","import { randInt, randIntInRange } from '../math/random';\r\nexport function pickRandom(arr) {\r\n    return arr[randInt(arr.length)];\r\n}\r\nexport function doTimes(fn, count) {\r\n    for (let i = 0; i < count; i++) {\r\n        fn(i);\r\n    }\r\n}\r\nexport function times(fn, count, res = []) {\r\n    for (let i = 0; i < count; i++) {\r\n        res[i] = fn(i);\r\n    }\r\n    return res;\r\n}\r\nexport function zip(fn, as, bs, res = []) {\r\n    const length = Math.min(as.length, bs.length);\r\n    for (let i = 0; i < length; i++) {\r\n        res[i] = fn(as[i], bs[i]);\r\n    }\r\n    return res;\r\n}\r\nexport function flatten(array, res = []) {\r\n    for (const subarray of array) {\r\n        const currentLength = res.length;\r\n        for (let i = 0; i < subarray.length; i++) {\r\n            res[i + currentLength] = subarray[i];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexport function mapcat(fn, array, res = []) {\r\n    return flatten(array.map(fn), res);\r\n}\r\nexport function shuffle(arr) {\r\n    const shuffled = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const j = randIntInRange(i, arr.length);\r\n        const temp = shuffled[i] !== undefined ? shuffled[i] : arr[i];\r\n        shuffled[i] = shuffled[j] !== undefined ? shuffled[j] : arr[j];\r\n        shuffled[j] = temp;\r\n    }\r\n    return shuffled;\r\n}\r\nexport function map(fn, coll) {\r\n    if (Array.isArray(coll)) {\r\n        return coll.map(fn);\r\n    }\r\n    else {\r\n        const obj = {};\r\n        for (const key in coll) {\r\n            obj[key] = fn(coll[key], key);\r\n        }\r\n        return obj;\r\n    }\r\n}\r\nexport function each(fn, coll) {\r\n    for (const key in coll) {\r\n        fn(coll[key], key);\r\n    }\r\n}\r\n//# sourceMappingURL=sequence.js.map","export var Keys;\r\n(function (Keys) {\r\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\r\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\r\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\r\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\r\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\r\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\r\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\r\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\r\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\r\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\r\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\r\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\r\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\r\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\r\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\r\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\r\n    Keys[Keys[\"END\"] = 35] = \"END\";\r\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\r\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\r\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\r\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\r\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\r\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\r\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\r\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\r\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\r\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\r\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\r\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\r\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\r\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\r\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\r\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\r\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\r\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\r\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\r\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\r\n    Keys[Keys[\"A\"] = 65] = \"A\";\r\n    Keys[Keys[\"B\"] = 66] = \"B\";\r\n    Keys[Keys[\"C\"] = 67] = \"C\";\r\n    Keys[Keys[\"D\"] = 68] = \"D\";\r\n    Keys[Keys[\"E\"] = 69] = \"E\";\r\n    Keys[Keys[\"F\"] = 70] = \"F\";\r\n    Keys[Keys[\"G\"] = 71] = \"G\";\r\n    Keys[Keys[\"H\"] = 72] = \"H\";\r\n    Keys[Keys[\"I\"] = 73] = \"I\";\r\n    Keys[Keys[\"J\"] = 74] = \"J\";\r\n    Keys[Keys[\"K\"] = 75] = \"K\";\r\n    Keys[Keys[\"L\"] = 76] = \"L\";\r\n    Keys[Keys[\"M\"] = 77] = \"M\";\r\n    Keys[Keys[\"N\"] = 78] = \"N\";\r\n    Keys[Keys[\"O\"] = 79] = \"O\";\r\n    Keys[Keys[\"P\"] = 80] = \"P\";\r\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\r\n    Keys[Keys[\"R\"] = 82] = \"R\";\r\n    Keys[Keys[\"S\"] = 83] = \"S\";\r\n    Keys[Keys[\"T\"] = 84] = \"T\";\r\n    Keys[Keys[\"U\"] = 85] = \"U\";\r\n    Keys[Keys[\"V\"] = 86] = \"V\";\r\n    Keys[Keys[\"W\"] = 87] = \"W\";\r\n    Keys[Keys[\"X\"] = 88] = \"X\";\r\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\r\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\r\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\r\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\r\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\r\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\r\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\r\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\r\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\r\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\r\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\r\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\r\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\r\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\r\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\r\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\r\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\r\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\r\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\r\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\r\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\r\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\r\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\r\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\r\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\r\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\r\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\r\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\r\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\r\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\r\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\r\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\r\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\r\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\r\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\r\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\r\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\r\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\r\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\r\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\r\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\r\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\r\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\r\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\r\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\r\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\r\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\r\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\r\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\r\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\r\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\r\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\r\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\r\n    Keys[Keys[\"META\"] = 224] = \"META\";\r\n})(Keys || (Keys = {}));\r\nexport function keyboard(opts, callback) {\r\n    const cb = callback || opts;\r\n    const { element = window } = opts;\r\n    const pressed = {};\r\n    function onKeydown(event) {\r\n        pressed[event.keyCode] = Date.now();\r\n        cb(pressed);\r\n    }\r\n    function onKeyup(event) {\r\n        delete pressed[event.keyCode];\r\n        cb(pressed);\r\n    }\r\n    element.addEventListener('keyup', onKeyup, false);\r\n    element.addEventListener('keydown', onKeydown, false);\r\n    cb(pressed);\r\n    return function stop() {\r\n        element.removeEventListener('keyup', onKeyup);\r\n        element.removeEventListener('keydown', onKeydown);\r\n    };\r\n}\r\nexport function keyboardObserver(opts) {\r\n    const observer = {\r\n        Keys,\r\n        state: { pressed: {} },\r\n        destroy: () => { },\r\n    };\r\n    function callback(pressed) {\r\n        observer.state.pressed = pressed;\r\n    }\r\n    observer.destroy = keyboard(callback, opts);\r\n    return observer;\r\n}\r\n//# sourceMappingURL=keyboard.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D previous;\\nuniform sampler2D current;\\n\\nvarying vec2 coords;\\n\\nvoid main() {\\n\\tvec4 p = texture2D(previous, coords);\\n\\tvec4 c = texture2D(current, coords);\\n\\tvec3 color = max(p.rgb, c.rgb);\\n\\tgl_FragColor = vec4(color, 1.0);\\n}\\n\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nconst float r = 0.5;\\n\\nvoid main() {\\n\\tvec2 pos = gl_PointCoord.xy;\\n\\tpos -= r;\\n\\tfloat x = pos.x;\\n\\tfloat y = pos.y;\\n\\tfloat light = x * x + y * y - r * r;\\n \\tlight = clamp(-(light * 4.0), 0.0, 1.0);\\n\\n\\tgl_FragColor = vec4(vec3(light) * 0.7, light);\\n}\\n\"","module.exports = \"#define GLSLIFY 1\\nattribute vec2 position;\\n\\nuniform vec2 size;\\n\\nvoid main() {\\n\\tgl_Position = vec4((position / size) * 2.0 - 1.0, 0.0, 1.0);\\n\\tgl_PointSize = 10.0;\\n}\\n\"","import { equalArray } from '../utils/predicates';\r\nexport function vec(v) {\r\n    if (typeof v === 'number') {\r\n        return new Float32Array(v);\r\n    }\r\n    return new Float32Array(v);\r\n}\r\nexport function add(vec1, vec2, res = []) {\r\n    for (let i = 0; i < vec1.length; i++) {\r\n        res[i] = vec1[i] + vec2[i];\r\n    }\r\n    return res;\r\n}\r\nexport function sub(vec1, vec2, res = []) {\r\n    for (let i = 0; i < vec1.length; i++) {\r\n        res[i] = vec1[i] - vec2[i];\r\n    }\r\n    return res;\r\n}\r\nexport function mul(scalar, vec, res = []) {\r\n    for (let i = 0; i < vec.length; i++) {\r\n        res[i] = vec[i] * scalar;\r\n    }\r\n    return res;\r\n}\r\nexport function div(scalar, vec, res = []) {\r\n    for (let i = 0; i < vec.length; i++) {\r\n        res[i] = vec[i] / scalar;\r\n    }\r\n    return res;\r\n}\r\nexport function length(vec) {\r\n    let sum = 0;\r\n    for (let i = 0; i < vec.length; i++) {\r\n        const val = vec[i];\r\n        sum += val * val;\r\n    }\r\n    return Math.sqrt(sum);\r\n}\r\nexport function normalize(vec, res = []) {\r\n    return div(length(vec), vec, res);\r\n}\r\nexport function limit(maxLength, vec) {\r\n    const l = length(vec);\r\n    if (maxLength < l) {\r\n        return mul(maxLength / l, vec);\r\n    }\r\n    else {\r\n        return vec;\r\n    }\r\n}\r\nexport function dot(v1, v2) {\r\n    let d = 0;\r\n    for (let i = 0; i < v1.length; i++) {\r\n        d += v1[i] * v2[i];\r\n    }\r\n    return d;\r\n}\r\nexport function cross(v1, v2, res = []) {\r\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\r\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\r\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\r\n    return res;\r\n}\r\nexport function cross2D(v1, v2) {\r\n    return v1[0] * v2[1] - v1[1] * v2[0];\r\n}\r\nexport const isEqual = equalArray;\r\n//# sourceMappingURL=vectors.js.map","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 p1;\\nuniform vec2 p2;\\nuniform vec2 p3;\\nuniform vec2 size;\\nuniform sampler2D source;\\n\\nvarying vec2 coords;\\n\\nvoid main() {\\n\\tvec2 v = p2 - p1;\\n\\tvec2 p = p3 - p1;\\n\\tvec2 pos = coords * size;\\n\\tvec2 f = pos - p1;\\n\\n\\t// f - (f * v) * v\\n\\n\\t// 2D Cross product\\n\\tfloat directionPoint = v.x * p.y - v.y * p.x;\\n\\tfloat directionFrag = v.x * f.y - v.y * f.x;\\n\\n\\tfloat vLength = length(v);\\n\\tvec2 vn = v / vLength;\\n\\tfloat dist = length(pos - (p1 + vn * clamp(dot(f, vn), 0.0, vLength)));\\n\\tvec3 color = vec3(1.0, coords) * max(100.0 - dist, 0.0) / 100.0;\\n\\tif (\\n\\t\\tdirectionPoint == 0.0\\n\\t\\t|| sign(directionFrag) != sign(directionPoint)\\n\\t\\t|| vLength < length(f)\\n\\t\\t|| vLength < length(pos - p2)\\n\\t) {\\n\\t\\tcolor = vec3(0.0);\\n\\t}\\n\\n\\tfloat alpha = 0.4;\\n\\tvec4 old = texture2D(source, coords);\\n\\tcolor = pow(color, vec3(2.0));\\n\\tgl_FragColor = vec4(mix(color, old.rgb, 1.0 - alpha), 1.0);\\n}\\n\\n\"","export function randInt(int) {\r\n    return Math.floor(Math.random() * int);\r\n}\r\nexport function randIntInRange(from, to) {\r\n    return randInt(to - from) + from;\r\n}\r\nexport function normalRand() {\r\n    return (Math.random() + Math.random() + Math.random()) / 3;\r\n}\r\n//# sourceMappingURL=random.js.map","export function getContext(canvas, contextAttributes) {\r\n    const gl = canvas.getContext('webgl', contextAttributes) ||\r\n        canvas.getContext('experimental-webgl', contextAttributes);\r\n    if (gl == null) {\r\n        throw Error('Webgl context cannot be initialized');\r\n    }\r\n    return gl;\r\n}\r\nexport function makeClear(gl, ...clearArray) {\r\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\r\n}\r\nexport function setBlendFunc(gl, blendOpts) {\r\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\r\n}\r\n/**\r\n * @param {HTMLCanvasElement} canvas The canvas to resize.\r\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\r\n * @return {boolean} true if the canvas was resized.\r\n */\r\nexport function resizeCanvas(canvas, multiplier = 1) {\r\n    const width = (canvas.clientWidth * multiplier) | 0;\r\n    const height = (canvas.clientHeight * multiplier) | 0;\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=context.js.map","import { baseEvents, getPainter } from 'shared-utils/painterState'\r\n\r\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\r\n\r\nexport const painter = getPainter(canvas)\r\npainter.resize()\r\n\r\nexport const gl = painter.gl\r\n\r\nexport const events = {\r\n\t...baseEvents,\r\n}\r\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { polarToCartesian2D } from 'tvs-libs/dist/math/coords'\r\nimport { normalRand } from 'tvs-libs/dist/math/random'\r\nimport { add } from 'tvs-libs/dist/math/vectors'\r\nimport { times } from 'tvs-libs/dist/utils/sequence'\r\nimport { canvas } from './context'\r\n\r\nconst pointCount = 40\r\nconst radius = Math.min(canvas.height, canvas.width) * 0.4\r\n\r\nexport const triples: number[][][] = []\r\n\r\nexport const nodes = times(\r\n\t() =>\r\n\t\tadd(\r\n\t\t\tpolarToCartesian2D([\r\n\t\t\t\tMath.sqrt(Math.abs(normalRand() * 2 - 1)) * radius,\r\n\t\t\t\tMath.random() * 2 * Math.PI,\r\n\t\t\t]),\r\n\t\t\t[canvas.width / 2, canvas.height / 2],\r\n\t\t),\r\n\tpointCount,\r\n)\r\n\r\nfor (let i = 0; i < nodes.length - 1; i++) {\r\n\tfor (let j = i + 1; j < nodes.length; j++) {\r\n\t\ttriples.push([nodes[i], nodes[j], nodes[(j + 1) % nodes.length]])\r\n\t}\r\n}\r\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import {\r\n\tgetDrawingLayer,\r\n\tgetEffectLayer,\r\n\tgetForm,\r\n\tgetShade,\r\n\tgetSketch,\r\n} from 'shared-utils/painterState'\r\nimport { repeat, stop } from 'shared-utils/scheduler'\r\nimport { flatten } from 'tvs-libs/dist/utils/sequence'\r\nimport { canvas, gl, painter } from './context'\r\nimport { nodes, triples } from './nodes'\r\nimport composeFrag from './shaders/compose.frag'\r\nimport pointFrag from './shaders/point.frag'\r\nimport pointVert from './shaders/point.vert'\r\nimport sideFrag from './shaders/side.frag'\r\n\r\n// ===== shaders =====\r\n\r\nconst pointsShade = getShade(painter, 'point').update({\r\n\tvert: pointVert,\r\n\tfrag: pointFrag,\r\n})\r\n\r\n// ===== geometries =====\r\n\r\nconst pointsForm = getForm(painter, 'points').update({\r\n\tdrawType: 'POINTS',\r\n\tattribs: {\r\n\t\tposition: {\r\n\t\t\tbuffer: new Float32Array(flatten(nodes)),\r\n\t\t\tstoreType: 'DYNAMIC',\r\n\t\t},\r\n\t},\r\n\titemCount: nodes.length,\r\n})\r\n\r\n// ===== objects =====\r\n\r\nconst pointsSketch = getSketch(painter, 'points').update({\r\n\tform: pointsForm,\r\n\tshade: pointsShade,\r\n})\r\n\r\n// ===== layers =====\r\n\r\nconst points = getDrawingLayer(painter, 'points').update({\r\n\tsketches: [pointsSketch],\r\n\tuniforms: { size: () => [canvas.width, canvas.height] },\r\n\tdrawSettings: {\r\n\t\tclearColor: [0, 0, 0, 1],\r\n\t\tclearBits: gl.COLOR_BUFFER_BIT,\r\n\t\tenable: [gl.BLEND],\r\n\t\tblendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\r\n\t},\r\n})\r\n\r\nconst sides = getEffectLayer(painter, 'sides').update({\r\n\tfrag: sideFrag,\r\n})\r\n\r\nconst bufferOpts = {\r\n\tbuffered: true,\r\n\twidth: canvas.width,\r\n\theight: canvas.height,\r\n\tfrag: composeFrag,\r\n}\r\nconst outBuffer1 = getEffectLayer(painter, 'outBuf1').update(bufferOpts)\r\nconst outBuffer2 = getEffectLayer(painter, 'outBuf2').update(bufferOpts)\r\n\r\noutBuffer1.update({\r\n\tuniforms: {\r\n\t\tprevious: outBuffer2.texture(),\r\n\t\tcurrent: null,\r\n\t},\r\n})\r\n\r\noutBuffer2.update({\r\n\tuniforms: {\r\n\t\tprevious: outBuffer1.texture(),\r\n\t\tcurrent: null,\r\n\t},\r\n})\r\n\r\n// ===== render =====\r\n\r\nlet layers = [points, sides, outBuffer1, outBuffer2]\r\nlet i = 0\r\nrepeat(() => {\r\n\tconst triple = triples[i]\r\n\r\n\tsides.update({\r\n\t\tuniforms: {\r\n\t\t\t// triples.map(triple => ({\r\n\t\t\tsize: [canvas.width, canvas.height],\r\n\t\t\tp1: triple[0],\r\n\t\t\tp2: triple[1],\r\n\t\t\tp3: triple[2],\r\n\t\t\tsource: null,\r\n\t\t}, // ))\r\n\t})\r\n\r\n\tconst [p, s, o1, o2] = layers\r\n\tpainter.compose(\r\n\t\tp,\r\n\t\ts,\r\n\t\to1,\r\n\t\to2,\r\n\t)\r\n\tlayers = [p, s, o2, o1]\r\n\tconsole.log(i++)\r\n\r\n\tif (i === triples.length) stop('render')\r\n}, 'render')\r\n\r\nconsole.log(triples.length)\r\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","// onNextTick\r\n// schedule actions on next animation frame\r\n\r\ntype Callback = (n: number) => void\r\n\r\nlet updateOnce: { [id: string]: Callback } | null = null\r\nconst updateRepeat: { [id: string]: Callback } = {}\r\n\r\nlet willUpdate = false\r\n\r\nlet uidCounter = 0\r\n\r\nlet oldTime = 0\r\n\r\nfunction processUpdates(time: number) {\r\n\tconst tpf = oldTime ? time - oldTime : oldTime\r\n\toldTime = time\r\n\r\n\tif (updateOnce) {\r\n\t\tfor (const id in updateOnce) {\r\n\t\t\tupdateOnce[id](tpf)\r\n\t\t}\r\n\t\tupdateOnce = null\r\n\t}\r\n\r\n\tlet updates = 0\r\n\tfor (const id in updateRepeat) {\r\n\t\tupdates++\r\n\t\tupdateRepeat[id](tpf)\r\n\t}\r\n\r\n\tif (!updates) {\r\n\t\twillUpdate = false\r\n\t\toldTime = 0\r\n\t} else {\r\n\t\trequestAnimationFrame(processUpdates)\r\n\t}\r\n}\r\n\r\nexport function once(fn: Callback, id?: string | number) {\r\n\tid = id || fn.name || uidCounter++\r\n\tupdateOnce = updateOnce || {}\r\n\tupdateOnce[id] = fn\r\n\r\n\tif (!willUpdate) {\r\n\t\trequestAnimationFrame(processUpdates)\r\n\t\twillUpdate = true\r\n\t}\r\n}\r\n\r\nexport function repeat(fn: Callback, id?: string | number) {\r\n\tid = id || fn.name || uidCounter++\r\n\tupdateRepeat[id] = fn\r\n\r\n\tif (!willUpdate) {\r\n\t\trequestAnimationFrame(processUpdates)\r\n\t\twillUpdate = true\r\n\t}\r\n\r\n\treturn id\r\n}\r\n\r\nexport function stop(id: Callback | string | number) {\r\n\tif (typeof id === 'function') {\r\n\t\tid = id.name\r\n\t}\r\n\tdelete updateRepeat[id]\r\n}\r\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}