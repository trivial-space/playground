{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/math/core.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/painter/dist/lib/utils/geometry/plane.js","webpack:///../libs/libs/dist/lib/math/geometry.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///./tiles/glsl/base-vert.glsl","webpack:///./tiles/glsl/base-frag.glsl","webpack:///../libs/libs/dist/lib/math/random.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///./tiles/state/data.ts","webpack:///./shared-utils/transitions.ts","webpack:///./tiles/context.ts","webpack:///./tiles/state/tiles.ts","webpack:///./tiles/viewport.ts","webpack:///./tiles/renderer.ts","webpack:///./tiles/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","unequal","equalArray","a","b","arr1","arr2","length","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","textures","index","[object Object]","contants","Type","Float32Array","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","updateRenderTarget","target","width","height","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","push","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","defaultTextureSettings","defaultForms","renderQuad","attribs","storeType","drawType","itemCount","defaultShaders","basicEffect","vert","frag","formCounter","form_Form","id","this","attribData","createBuffer","bufferData","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shadeCounter","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","drawSettings","form","shade","uniforms","destroy","staticLayerCount","layer_StaticLayer","_texture","asset","generateMipmap","assign","drawingLayerCount","layer_DrawingLayer","targets","buffered","sequence","canvas","forEach","sketches","sketch","update","undefined","painter_Painter","resize","createForm","result","createFlatSketch","multiplier","forceUpdateTargets","context","DEPTH_TEST","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","Error","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","debug","once","repeat","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","tpf","updates","requestAnimationFrame","fn","windowSize","callback","window","innerWidth","innerHeight","addEventListener","removeEventListener","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","sign","num","lerp","step","start","end","clamp","min","max","Math","PI","EPSILON","ARRAY_TYPE","RANDOM","random","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b1","b2","b3","translate","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","vec","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","mouse","Buttons","LEFT","MIDDLE","RIGHT","opts","cb","element","document","enableRightButton","state","pressed","drag","dX","dY","dragging","oX","oY","onMouseDown","e","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","PerspectiveCamera","WithKeyNavigation","WithMouseRotation","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","Camera","props","position","rotationX","rotationY","rotationXMat","rotationYMat","projectionMat","viewMat","needsUpdateView","amount","super","needsUpdateProjection","Cam","speed","keys","UP","W","moveForward","DOWN","A","moveLeft","D","_oldMouse","deltaX","deltaY","updateRotationX","updateRotationY","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","res","as","bs","array","subarray","currentLength","coll","obj","plane","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","iy","ix","offset2","indices","normal","uv","planeFromNormalAndCoplanarPoint","mirrorMatrixFromPlane","getYawQuat","getRollQuat","_vectors__WEBPACK_IMPORTED_MODULE_0__","point","rotYAngle","rotZAngle","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","getState","addSystem","dispatch","baseEvents","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_0__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_4__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_5__","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","painter","device","cancelWindow","cancelMouse","cancelKeys","RESIZE","init","forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","prop","val","reset","systems","FRAME","Keys","keyboard","onKeydown","keyCode","Date","now","onKeyup","vec1","vec2","scalar","sum","v1","v2","cross2D","randInt","int","randIntInRange","from","to","normalRand","getContext","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","data_specs","lbA1","file","connections","lbA2","lbA3","lbB1","lbB2","lbB3","lrA1","lrB1","lrC1","lrD1","lrD2","lrD3","lrE1","lrE2","lrE3","lrtbA1","lrtbB1","lrtbC1","ltbA1","ltbB1","sets","linear","Transition","options","easeFn","duration","delay","done","progress","oldValue","onStart","newValue","onUpdate","onComplete","transitions","initialized","pushTransition","transitionProps","painterState","filter","context_canvas","getElementById","events","INIT","START","NEW_ACTIVE_TILES","tiles_TileState","baseColor","specs","gridIndex","pos","posOffset","transform","gl_matrix","neighbours","flipped","yawDirection","yawDelay","yaw","rotation","updateTransform","g","color","tileSpecId","turn","tileSpec","roll","side","neighbour","nIndex","current","next","isConnected","neighbourSide","SIDES_INDEX","rotateHalf","part","smooth","acc","slow","tiles","images","Promise","all","values","_n","img","Image","onload","then","colCount","tileDensity","rowCount","newWidth","newHeight","grid","heightDiff","widthDiff","createTile","currentHeight","newCol","unshift","down","row","tile","makeGrid","activeTiles","firstLeftIndex","firstUpIndex","widthDelta","activeCols","activeRows","offX","offY","iX","iY","connect","createActiveTiles","animationDuration","chance","animationChance","tileSize","disconnect","dir","core","rot","rise","liftHeight","sinkHeight","geometry","updateTiles","viewPort","cam","camera","moveSpeed","lookSpeed","updateDrawSettings","CULL_FACE","base_frag_default","base_vert_default","renderer_form","tilesSketch","scene","projection","image","scheduler","compose"],"mappings":"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","file":"tiles/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 82);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            break;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\n\t\t\tattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\n\t\t\tattribute vec2 ${constants.GEOMETRY_PROP_UV};\n\t\t\tvarying vec2 ${constants.VARYING_UV_COORDS};\n\t\t\tvoid main() {\n\t\t\t\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\t\t\t\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n\t\t\t}`,\n        frag: `precision mediump float;\n\t\t\tuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\n\t\t\tvarying vec2 ${constants.VARYING_UV_COORDS};\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n\t\t\t}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n        this.program = gl.createProgram(),\n            this.frag = gl.createShader(gl.FRAGMENT_SHADER),\n            this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nimport { Painter } from './painter';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), 2);\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' }\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) { return new Form(this.gl, id); }\n    createShade(id) { return new Shade(this.gl, id); }\n    createSketch(id) { return new Sketch(id); }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade').update(defaultShaders.basicEffect)\n        });\n    }\n    createStaticLayer(id) { return new StaticLayer(this.gl, id); }\n    createDrawingLayer(id) { return new DrawingLayer(this.gl, id); }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings } = sketch;\n    const { uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[1].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[1].frameBuffer);\n        gl.viewport(0, 0, layer.targets[1].width, layer.targets[1].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t}\n\n\tupdateRotationX (amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY (amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[8], this.rotationYMat[9], this.rotationYMat[10])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[0], this.rotationYMat[1], this.rotationYMat[2])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[4], this.rotationYMat[5], this.rotationYMat[6])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate () {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper()\n\t\tObject.assign(this, props)\n\t}\n\n\tupdate () {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\n\nexport function WithKeyNavigation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys (speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function WithMouseRotation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse (speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - (iy / gridY);\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new ((vertices.length / 3) > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = (ix + 1) + gridX1 * (iy + 1);\n            const d = (ix + 1) + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            'position': {\n                buffer: vertices\n            },\n            'normal': {\n                buffer: normals\n            },\n            'uv': {\n                buffer: uvs\n            }\n        },\n        elements: {\n            buffer: indices\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length\n    };\n}\n//# sourceMappingURL=plane.js.map","import { dot, normalize, cross, sub } from './vectors';\nexport function planeFromNormalAndCoplanarPoint(n, point) {\n    const d = dot(n, point);\n    return [n[0], n[1], n[2], -d];\n}\nexport function planeFromThreeCoplanarPoints(p1, p2, p3) {\n    return planeFromNormalAndCoplanarPoint(normalFromThreeCoplanarPoints(p1, p2, p3), p1);\n}\nexport function normalFromThreeCoplanarPoints(p1, p2, p3) {\n    return normalize(cross(sub(p3, p2), sub(p1, p2)));\n}\nexport function mirrorMatrixFromPlane(plane) {\n    const [a, b, c, d] = plane;\n    return [\n        1 - 2 * a * a, -2 * a * b, -2 * a * c, 0,\n        -2 * a * b, 1 - 2 * b * b, -2 * b * c, 0,\n        -2 * a * c, -2 * b * c, 1 - 2 * c * c, 0,\n        -2 * a * d, -2 * b * d, -2 * c * d, 1\n    ];\n}\nexport function getYawQuat(rotYAngle) {\n    rotYAngle *= 0.5;\n    return [0, Math.sin(rotYAngle), 0, Math.cos(rotYAngle)];\n}\nexport function getPitchQuat(rotXAngle) {\n    rotXAngle *= 0.5;\n    return [Math.sin(rotXAngle), 0, 0, Math.cos(rotXAngle)];\n}\nexport function getRollQuat(rotZAngle) {\n    rotZAngle *= 0.5;\n    return [0, 0, Math.sin(rotZAngle), Math.cos(rotZAngle)];\n}\n//# sourceMappingURL=geometry.js.map","import { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { once } from 'shared-utils/scheduler'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype System<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: System<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: System<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize()\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D image;\\nuniform vec3 color;\\nuniform vec4 connections;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec4 tex = texture2D(image, vUv);\\n  if (tex.r > 0.9) {\\n    discard;\\n  }\\n\\n  float up = 0.0;\\n  float right = 0.0;\\n  float down = 0.0;\\n  float left = 0.0;\\n  float x = vUv.x - 0.5;\\n  float y = vUv.y;\\n\\n  if (connections[0] > 0.0) {\\n    up = x * x * 2.0 + y * y * 2.0;\\n    up = connections[0] - up;\\n    up = max(0.0, up);\\n    up *= up;\\n  }\\n\\n  if (connections[1] > 0.0) {\\n    x = vUv.x - 1.0;\\n    y = vUv.y - 0.5;\\n    right = x * x * 2.0 + y * y * 2.0;\\n    right = connections[1] - right;\\n    right = max(0.0, right);\\n    right *= right;\\n  }\\n\\n  if (connections[2] > 0.0) {\\n    x = vUv.x - 0.5;\\n    y = vUv.y - 1.0;\\n    down = x * x * 2.0 + y * y * 2.0;\\n    down = connections[2] - down;\\n    down = max(0.0, down);\\n    down *= down;\\n  }\\n\\n  if (connections[3] > 0.0) {\\n    x = vUv.x;\\n    y = vUv.y - 0.5;\\n    left = x * x * 2.0 + y * y * 2.0;\\n    left = connections[3] - left;\\n    left = max(0.0, left);\\n    left *= left;\\n  }\\n\\n  // smooth out border\\n  /* col /= resolution.x * resolution.y * 0.5; */\\n  /* col = sqrt(col); */\\n\\n\\tfloat glow = up + right + left + down;\\n\\n\\tvec3 result = 0.8 - color.rgb * (1.0 - tex.r);\\n\\tfloat red = result.r;\\n\\n\\tif (abs(tex.g - tex.r) > 0.1 && tex.g > 0.9) {\\n\\t\\tred = mix(red, 1.0, glow);\\n\\t}\\n\\n  gl_FragColor = vec4(red, result.gb, 1.0);\\n  // gl_FragColor = vec4(color, 1.0);\\n  // gl_FragColor = connections;\\n}\\n\"","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","export function getContext(canvas) {\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    multiplier = Math.max(1, multiplier);\n    const width = canvas.clientWidth * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export interface TileSpec {\n\tfile: string,\n\tconnections: [number, number, number, number]\n}\n\n\nexport const specs = {\n\tlbA1: {\n\t\tfile: 'tile_lb_A_1',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbA2: {\n\t\tfile: 'tile_lb_A_2',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbA3: {\n\t\tfile: 'tile_lb_A_3',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB1: {\n\t\tfile: 'tile_lb_B_1',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB2: {\n\t\tfile: 'tile_lb_B_2',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB3: {\n\t\tfile: 'tile_lb_B_3',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlrA1: {\n\t\tfile: 'tile_lr_A_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrB1: {\n\t\tfile: 'tile_lr_B_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrC1: {\n\t\tfile: 'tile_lr_C_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD1: {\n\t\tfile: 'tile_lr_D_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD2: {\n\t\tfile: 'tile_lr_D_2',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD3: {\n\t\tfile: 'tile_lr_D_3',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE1: {\n\t\tfile: 'tile_lr_E_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE2: {\n\t\tfile: 'tile_lr_E_2',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE3: {\n\t\tfile: 'tile_lr_E_3',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrtbA1: {\n\t\tfile: 'tile_lrtb_A_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tlrtbB1: {\n\t\tfile: 'tile_lrtb_B_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tlrtbC1: {\n\t\tfile: 'tile_lrtb_C_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tltbA1: {\n\t\tfile: 'tile_ltb_A_1',\n\t\tconnections: [1, 0, 1, 1]\n\t},\n\tltbB1: {\n\t\tfile: 'tile_ltb_B_1',\n\t\tconnections: [1, 0, 1, 1]\n\t}\n} as { [k: string]: TileSpec }\n\n\nexport const sets = [{\n\tlbA1: 1,\n\tlbA2: 1,\n\tlbA3: 1,\n\tlbB1: 1,\n\tlbB2: 1,\n\tlbB3: 1,\n\tlrD1: 1,\n\tlrD2: 1,\n\tlrD3: 1,\n\tlrE1: 1,\n\tlrE2: 1,\n\tlrE3: 1,\n\tlrtbA1: 1,\n\tlrtbB1: 1,\n\tlrtbC1: 1,\n\tltbA1: 1,\n\tltbB1: 1\n}]\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem, baseEvents } from 'shared-utils/painterState'\n\nexport const linear = (step: number) => step\n\n\nexport class Transition {\n\n\teaseFn = linear\n\tduration = 1000\n\tdelay = 0\n\trepeat = false\n\tonComplete?: () => void\n\tonStart?: () => void\n\tonUpdate?: (step: number) => void\n\n\tprogress: number\n\toldValue: number\n\n\tdone = false\n\n\tconstructor(options: Partial<Transition>) {\n\t\tObject.assign(this, options)\n\n\t\tthis.progress = -this.delay\n\t\tthis.oldValue = this.easeFn(0)\n\t}\n\n\tupdate (step: number) {\n\t\tif (this.done) {\n\t\t\treturn 0\n\t\t}\n\n\t\tthis.progress += step\n\n\t\tif (this.progress <= 0) {\n\t\t\treturn 0\n\t\t}\n\n\t\tif (this.progress <= step && this.onStart) { this.onStart() }\n\n\t\tconst newValue = (this.progress < this.duration)\n\t\t\t? this.easeFn(this.progress / this.duration)\n\t\t\t: this.easeFn(1)\n\n\t\tconst value = newValue - this.oldValue\n\t\tthis.oldValue = newValue\n\n\t\tif (this.onUpdate) this.onUpdate(value)\n\n\t\tif (this.progress >= this.duration) {\n\n\t\t\tif (this.repeat === true || (typeof this.repeat === 'number' && this.repeat > 0)) {\n\t\t\t\tif (typeof this.repeat === 'number') {\n\t\t\t\t\tthis.repeat--\n\t\t\t\t}\n\t\t\t\tthis.progress = 0\n\n\t\t\t} else {\n\t\t\t\tif (this.onComplete) {\n\t\t\t\t\tthis.onComplete()\n\t\t\t\t}\n\t\t\t\tthis.done = true\n\t\t\t}\n\t\t}\n\n\t\treturn value\n\t}\n}\n\n\nlet transitions: Transition[] = []\nlet initialized = false\n\nexport function pushTransition (transitionProps: Partial<Transition>) {\n\tif (!initialized) {\n\t\taddSystem('_transitionRunner', (e, s) => {\n\t\t\tif (e === baseEvents.FRAME) {\n\t\t\t\ttransitions = transitions.filter(t => !t.done)\n\t\t\t\ttransitions.forEach(t => t.update(s.device.tpf))\n\t\t\t}\n\t\t})\n\t\tinitialized = true\n\t}\n\n\tconst t = new Transition(transitionProps)\n\ttransitions.push(t)\n\treturn t\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { getPainter, getState, baseEvents } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './viewport'\nimport { Tiles } from './state/tiles'\n\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort\n\ttiles: Tiles\n}\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents,\n\tINIT: 'init',\n\tSTART: 'start',\n\tNEW_ACTIVE_TILES: 'new_active_tiles'\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { randInt, normalRand } from 'tvs-libs/dist/lib/math/random'\nimport { sign } from 'tvs-libs/dist/lib/math/core'\nimport { mat4, quat } from 'gl-matrix'\nimport { getRollQuat, getYawQuat } from 'tvs-libs/dist/lib/math/geometry'\nimport { pickRandom, doTimes, times, map } from 'tvs-libs/dist/lib/utils/sequence'\nimport { sets, TileSpec, specs } from './data'\nimport { pushTransition } from 'shared-utils/transitions'\nimport { addSystem, dispatch, set } from 'shared-utils/painterState'\nimport { State, events } from '../context'\n\n\ntype Color = number[]\ntype Position = [number, number]\n\n\nexport class Tiles {\n\ttileSize = 3\n\ttileDensity = 15\n\tcolor = [normalRand(), normalRand(), normalRand()]\n\tset = pickRandom(sets)\n\tanimationDuration = 1700\n\tanimationChance = 0.01\n\tliftHeight = 1\n\tsinkHeight = -100\n\tflipped = false\n\tcolCount = 0\n\trowCount = 0\n\timages: { [id: string]: HTMLImageElement } = {}\n\tactiveTiles: TileState[] = []\n\tgrid: TileState[][] = []\n}\n\n\nclass TileState {\n\tgridIndex: Position = [0, 0]\n\tpos: Position = [0, 0]\n\tposOffset: Position = [0, 0]\n\ttransform = mat4.create()\n\ttileSpecId: string\n\ttileSpec: TileSpec\n\tturn: number\n\troll: number\n\tcolor: Color\n\tneighbours: (TileState | undefined)[] = []\n\tflipped = false\n\tyawDirection = 0\n\tyawDelay = 0\n\tyaw = 0\n\theight = 0\n\trotation = quat.create()\n\tupdateTransform = false\n\tconnections = [0, 0, 0, 0]\n\n\tconstructor(\n\t\tset: { [id: string]: number },\n\t\tbaseColor: Color,\n\t\tspecs: { [id: string]: TileSpec }\n\t) {\n\t\tconst [r, g, b] = baseColor\n\t\tthis.color = [\n\t\t\tr + (normalRand() - 0.6) * 0.25,\n\t\t\tg + (normalRand() - 0.6) * 0.25,\n\t\t\tb + (normalRand() - 0.6) * 0.25\n\t\t]\n\t\tthis.tileSpecId = pickRandom(Object.keys(set))\n\t\tthis.turn = randInt(3)\n\t\tthis.tileSpec = specs[this.tileSpecId]\n\n\t\tthis.roll = this.turn * Math.PI / 2\n\t}\n\n\tisConnected () {\n\t\treturn !!(this.height < 0.1 && this.height > -0.1)\n\t}\n\n\tconnect () {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst index = (i + 4 - this.turn) % 4\n\t\t\tconst side = this.tileSpec.connections[index]\n\t\t\tconst neighbour = this.neighbours[i]\n\t\t\tconst nIndex = neighbour ? (i + 6 - neighbour.turn) % 4 : 0\n\t\t\tconst current = this.connections[index]\n\t\t\tlet next: number\n\t\t\tif (this.isConnected() && neighbour && neighbour.isConnected()) {\n\t\t\t\tconst neighbourSide = neighbour.tileSpec.connections[nIndex]\n\t\t\t\tnext = side && neighbourSide\n\t\t\t} else {\n\t\t\t\tnext = 0\n\t\t\t}\n\t\t\tif (current !== next) {\n\t\t\t\tnext === 0\n\t\t\t\t\t? pushTransition({\n\t\t\t\t\t\tduration: 300,\n\t\t\t\t\t\tonUpdate: p => {\n\t\t\t\t\t\t\tthis.connections[index] = Math.max(0, this.connections[index] - p)\n\t\t\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\t\t\tneighbour.connections[nIndex] = Math.max(0, neighbour.connections[nIndex] - p)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t: pushTransition({\n\t\t\t\t\t\tduration: 300,\n\t\t\t\t\t\tonUpdate: p => {\n\t\t\t\t\t\t\tthis.connections[index] = Math.min(1, this.connections[index] + p)\n\t\t\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\t\t\tneighbour.connections[nIndex] = Math.min(1, neighbour.connections[nIndex] + p)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tdisconnect () {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst neighbour = this.neighbours[i]\n\t\t\tconst nIndex = neighbour ? (i + 6 - neighbour.turn) % 4 : 0\n\t\t\tpushTransition({\n\t\t\t\tduration: 300,\n\t\t\t\tonUpdate: p => {\n\t\t\t\t\tthis.connections[i] = Math.max(0, this.connections[i] - p)\n\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\tneighbour.connections[nIndex] = Math.max(0, neighbour.connections[nIndex] - p)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n\nconst SIDES_INDEX = {\n\tUP: 0,\n\tRIGHT: 1,\n\tDOWN: 2,\n\tLEFT: 3\n}\n\n\nfunction rotateHalf (part) {\n\treturn -Math.cos(part * Math.PI * 2) * 0.5 + 0.5\n}\n\nfunction smooth (part) {\n\treturn -Math.cos(part * Math.PI) * 0.5 + 0.5\n}\n\nfunction acc (part) {\n\treturn part * part * part * part\n}\n\nfunction slow (part) {\n\treturn Math.pow(part, 0.25)\n}\n\n\n// ===== basic properties =====\n\naddSystem<State>('tiles', (e, s) => {\n\tconst t = s.tiles\n\n\tswitch (e) {\n\t\tcase events.INIT:\n\t\t\tt.images = {}\n\t\t\tPromise.all(\n\t\t\t\tObject.values(map((_n, key) => new Promise(res => {\n\t\t\t\t\tconst img = new Image()\n\t\t\t\t\timg.onload = res\n\t\t\t\t\timg.src = 'img/' + specs[key].file + '.jpg'\n\t\t\t\t\tt.images[key] = img\n\t\t\t\t}), t.set))\n\t\t\t).then(() => {\n\t\t\t\tdispatch(events.START)\n\t\t\t\tdispatch(events.RESIZE)\n\t\t\t})\n\n\t\tcase events.RESIZE:\n\t\t\tconst canvas = s.device.canvas\n\t\t\tconst aspect = canvas.width / canvas.height\n\t\t\tt.colCount = Math.floor(Math.pow(canvas.width / 1000, 0.5) * t.tileDensity)\n\t\t\tt.rowCount = Math.ceil(t.colCount / aspect)\n\t\t\tmakeGrid(t.colCount, t.rowCount, t.color, t.set, t.grid)\n\t\t\tcreateActiveTiles(t)\n\n\t\tcase events.FRAME:\n\t\t\tupdateTiles(t)\n\t}\n})\n\n\nset<State>('tiles', new Tiles())\n\n\n// ===== primary state =====\n\nfunction makeGrid(\n\tnewWidth: number,\n\tnewHeight: number,\n\tcolor: Color,\n\tset,\n\tgrid: TileState[][]\n) {\n\n\tconst width = grid.length\n\tconst height = grid[0] && grid[0].length || 0\n\n\tconst heightDiff = newHeight - height\n\tconst widthDiff = newWidth - width\n\n\tconst createTile = () => new TileState(set, color, specs)\n\n\t// create new grid columns left and right\n\tif (widthDiff > 0) {\n\n\t\tconst left = Math.floor(widthDiff / 2)\n\t\tconst right = widthDiff - left\n\t\tconst currentHeight = Math.max(newHeight, height)\n\n\t\tconst newCol = () => times(createTile, currentHeight)\n\n\t\tgrid.unshift(...times(newCol, left))\n\t\tgrid.push(...times(newCol, right))\n\t}\n\n\t// create new gid rows at top and bottom\n\tif (heightDiff > 0) {\n\n\t\tconst up = Math.floor(heightDiff / 2)\n\t\tconst down = heightDiff - up\n\n\t\tgrid.forEach(row => {\n\t\t\trow.unshift(...times(createTile, up))\n\t\t\trow.push(...times(createTile, down))\n\t\t})\n\t}\n\n\n\tif (widthDiff > 0 || heightDiff > 0) {\n\n\t\tfor (let x = 0; x < grid.length; x++) {\n\t\t\tfor (let y = 0; y < grid[x].length; y++) {\n\t\t\t\tconst tile = grid[x][y]\n\t\t\t\ttile.gridIndex = [x, y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.LEFT] = grid[x - 1] && grid[x - 1][y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.RIGHT] = grid[x + 1] && grid[x + 1][y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.UP] = grid[x][y - 1]\n\t\t\t\ttile.neighbours[SIDES_INDEX.DOWN] = grid[x][y + 1]\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunction createActiveTiles (t: Tiles) {\n\tconst tiles = t.activeTiles = [] as TileState[]\n\tconst width = t.grid.length\n\tconst height = t.grid[0].length\n\tconst firstLeftIndex = -Math.floor(width / 2)\n\tconst firstUpIndex = -Math.floor(height / 2)\n\tconst widthDelta = width - t.colCount\n\tlet activeCols = Math.floor(widthDelta / 2)\n\tif ((width + 1) % 2 && widthDelta % 2) activeCols++\n\tconst activeRows = Math.floor((height - t.rowCount) / 2)\n\tconst offX = ((t.colCount + 1) % 2) * 0.5\n\tconst offY = (t.rowCount % 2) * 0.5 + 0.5\n\n\tdoTimes(x => {\n\t\tdoTimes(y => {\n\t\t\tconst tile = t.grid[x + activeCols][y + activeRows]\n\t\t\tif (tile) {\n\t\t\t\tconst [iX, iY] = tile.gridIndex\n\t\t\t\ttile.posOffset = [offX, offY]\n\t\t\t\ttile.updateTransform = true\n\t\t\t\ttile.yawDelay = (x + (t.rowCount - y + 1)) * 100\n\t\t\t\ttile.pos = [firstLeftIndex + iX, firstUpIndex + iY]\n\t\t\t\ttiles.push(tile)\n\t\t\t}\n\t\t}, t.rowCount)\n\t}, t.colCount)\n\n\ttiles.forEach(t => t.connect())\n\n\tdispatch(events.NEW_ACTIVE_TILES)\n}\n\n\nexport function updateTiles (t: Tiles) {\n\tconst tiles = t.activeTiles\n\tconst duration = t.animationDuration\n\tconst chance = t.animationChance / t.activeTiles.length\n\tconst offset = t.tileSize * 0.95\n\n\tfor (const i in tiles) {\n\t\tconst tile: TileState = tiles[i]\n\n\t\tif (Math.random() < chance) {\n\t\t\ttile.disconnect()\n\t\t\tconst dir = sign(Math.random() - 0.5)\n\n\t\t\tpushTransition({\n\t\t\t\tduration,\n\t\t\t\teaseFn: smooth,\n\t\t\t\tonUpdate: rot => {\n\t\t\t\t\ttile.roll += rot * Math.PI / 2 * dir\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t\tonComplete: () => {\n\t\t\t\t\ttile.turn = dir > 0 ?\n\t\t\t\t\t\t(tile.turn + 1) % 4 :\n\t\t\t\t\t\tdir < 0 ?\n\t\t\t\t\t\t\t(tile.turn + 3) % 4 :\n\t\t\t\t\t\t\ttile.turn\n\t\t\t\t\ttile.connect()\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tpushTransition({\n\t\t\t\tduration,\n\t\t\t\teaseFn: rotateHalf,\n\t\t\t\tonUpdate: rise => {\n\t\t\t\t\ttile.height += rise * t.liftHeight\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (t.flipped !== tile.flipped) {\n\t\t\ttile.flipped = t.flipped\n\t\t\tpushTransition({\n\t\t\t\tduration,\n\t\t\t\teaseFn: t.flipped ? acc : slow,\n\t\t\t\tdelay: tile.yawDelay,\n\t\t\t\tonStart: () => tile.disconnect(),\n\t\t\t\tonUpdate: rot => {\n\t\t\t\t\ttile.yaw += rot * Math.PI\n\t\t\t\t\ttile.height += rot * t.sinkHeight * (tile.flipped ? 1 : -1)\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t\tonComplete: () => {\n\t\t\t\t\tif (!tile.flipped) {\n\t\t\t\t\t\ttile.connect()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (tile.updateTransform) {\n\t\t\ttile.updateTransform = false\n\t\t\tquat.multiply(tile.rotation, getYawQuat(tile.yaw) as quat, getRollQuat(tile.roll) as quat)\n\t\t\tconst [x, y] = tile.pos\n\t\t\tconst [offX, offY] = tile.posOffset\n\t\t\tmat4.fromRotationTranslation(\n\t\t\t\ttile.transform,\n\t\t\t\ttile.rotation,\n\t\t\t\t[(x + offX) * offset, (y + offY) * offset, tile.height]\n\t\t\t)\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { PerspectiveCamera } from 'shared-utils/vr/camera'\nimport { set, addSystem } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class ViewPort {\n\tdistance = 1\n\tcamera = new PerspectiveCamera({\n\t\tfovy: Math.PI * 0.5,\n\t\tposition: [0, 0, 0]\n\t})\n}\n\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\n\t\tcase events.RESIZE:\n\t\t\tconst cam = v.camera\n\t\t\tv.distance = s.tiles.colCount * s.tiles.tileSize * 0.47\n\t\t\tcam.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tcam.needsUpdateProjection = true\n\t\t\tcam.position = [0, 0, v.distance / cam.aspect]\n\t\t\tcam.needsUpdateView = true\n\t\t\tcam.update()\n\t}\n})\n\n\nset<State>('viewPort', new ViewPort(), {reset: {moveSpeed: true, lookSpeed: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import vert from './glsl/base-vert.glsl'\nimport frag from './glsl/base-frag.glsl'\nimport { painter, gl, state, events, State } from './context'\nimport { getShade, getForm, getStaticLayer, getSketch, getDrawingLayer, addSystem } from 'shared-utils/painterState'\nimport { plane } from 'tvs-painter/dist/lib/utils/geometry/plane'\nimport { each } from 'tvs-libs/dist/lib/utils/sequence'\nimport { StaticLayer } from 'tvs-painter/dist/lib/layer'\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [1, 1, 1, 1],\n\tenable: [gl.DEPTH_TEST, gl.CULL_FACE]\n})\n\n\n// ===== shaders =====\n\nconst shade = getShade(painter, 'shade')\n\t.update({ frag, vert })\n\n\n// ===== geometries =====\n\nconst tileSize = state.tiles.tileSize\nconst form = getForm(painter, 'form')\n\t.update(plane(tileSize, tileSize, 3, 3))\n\n\n// ===== textures =====\n\nconst textures: { [id: string]: StaticLayer } = {}\n\n\n// ===== objects =====\n\nconst tilesSketch = getSketch(painter, 'tiles')\n\n\n// ===== layers =====\n\nexport const scene = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [tilesSketch],\n\t\tuniforms: {\n\t\t\tview: () => state.viewPort.camera.viewMat,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat\n\t\t}\n\t})\n\n\naddSystem<State>('render', (e, s) => {\n\tswitch (e) {\n\t\tcase events.START:\n\t\t\teach((img, key) => {\n\t\t\t\ttextures[key] = getStaticLayer(painter, key)\n\t\t\t\t\t.update({\n\t\t\t\t\t\tminFilter: 'LINEAR',\n\t\t\t\t\t\tmagFilter: 'LINEAR',\n\t\t\t\t\t\tasset: img\n\t\t\t\t\t})\n\t\t\t}, s.tiles.images)\n\t\t\tbreak\n\n\t\tcase events.NEW_ACTIVE_TILES:\n\t\t\ttilesSketch.update({\n\t\t\t\tform, shade,\n\t\t\t\tuniforms: s.tiles.activeTiles.map(tile => ({\n\t\t\t\t\ttransform: tile.transform,\n\t\t\t\t\timage: textures[tile.tileSpecId] && textures[tile.tileSpecId].texture(),\n\t\t\t\t\tcolor: tile.color,\n\t\t\t\t\tconnections: tile.connections\n\t\t\t\t}))\n\t\t\t})\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import './state/tiles'\nimport './viewport'\nimport { repeat } from 'shared-utils/scheduler'\nimport { painter, events, State } from './context'\nimport { scene } from './renderer'\nimport { addSystem, dispatch } from 'shared-utils/painterState'\n\n\naddSystem<State>('start', (e, s) => {\n if (e === events.START) {\n\t repeat(tpf => {\n\t\t s.device.tpf = tpf\n\t\t dispatch(events.FRAME)\n\t\t painter.compose(scene)\n\t }, 'loop')\n }\n})\n\ndispatch(events.INIT)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}