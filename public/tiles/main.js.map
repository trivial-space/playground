{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../libs/painter/dist/lib/contants.js","webpack:///./tiles/state/data.ts","webpack:///./shared-utils/transitions.ts","webpack:///./tiles/context.ts","webpack:///./tiles/state/tiles.ts","webpack:///./tiles/viewport.ts","webpack:///./tiles/renderer.ts","webpack:///./tiles/index.ts","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/libs/dist/lib/utils/predicates.js","webpack:///../libs/painter/dist/lib/render-utils.js","webpack:///../libs/painter/dist/lib/form.js","webpack:///../libs/painter/dist/lib/shade.js","webpack:///../libs/painter/dist/lib/sketch.js","webpack:///../libs/painter/dist/lib/layer.js","webpack:///../libs/painter/dist/lib/painter.js","webpack:///../libs/libs/dist/lib/events/dom.js","webpack:///../libs/libs/dist/lib/utils/object.js","webpack:///../libs/libs/dist/lib/events/mouse.js","webpack:///./shared-utils/painterState.ts","webpack:///../libs/libs/dist/lib/math/core.js","webpack:///../libs/painter/dist/lib/utils/geometry/plane.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///./shared-utils/vr/camera.ts","webpack:///../libs/painter/dist/lib/asset-lib.js","webpack:///../libs/libs/dist/lib/math/geometry.js","webpack:///../libs/libs/dist/lib/utils/sequence.js","webpack:///../libs/libs/dist/lib/events/keyboard.js","webpack:///./tiles/glsl/base-vert.glsl","webpack:///./tiles/glsl/base-frag.glsl","webpack:///../libs/libs/dist/lib/math/vectors.js","webpack:///../libs/painter/dist/lib/utils/context.js","webpack:///../libs/libs/dist/lib/math/random.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","GEOMETRY_PROP_POSITION","GEOMETRY_PROP_NORMAL","GEOMETRY_PROP_UV","UNIFORM_SOURCE_TEXTURE","VARYING_UV_COORDS","GL_TYPE","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2X3","FLOAT_MAT2X4","FLOAT_MAT3X2","FLOAT_MAT3X4","FLOAT_MAT4X2","FLOAT_MAT4X3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","data_specs","lbA1","file","connections","lbA2","lbA3","lbB1","lbB2","lbB3","lrA1","lrB1","lrC1","lrD1","lrD2","lrD3","lrE1","lrE2","lrE3","lrtbA1","lrtbB1","lrtbC1","ltbA1","ltbB1","sets","linear","step","Transition","[object Object]","options","this","easeFn","duration","delay","repeat","done","assign","progress","oldValue","onStart","newValue","onUpdate","onComplete","transitions","initialized","pushTransition","transitionProps","painterState","e","FRAME","filter","forEach","update","device","tpf","push","context_canvas","document","getElementById","painter","gl","state","events","INIT","START","NEW_ACTIVE_TILES","tiles_TileState","set","baseColor","specs","gridIndex","pos","posOffset","transform","gl_matrix","neighbours","flipped","yawDirection","yawDelay","yaw","height","rotation","updateTransform","g","b","color","random","tileSpecId","sequence","keys","turn","tileSpec","roll","Math","PI","index","side","neighbour","nIndex","current","next","isConnected","neighbourSide","max","min","SIDES_INDEX","UP","RIGHT","DOWN","LEFT","rotateHalf","part","cos","smooth","acc","slow","pow","tiles","images","Promise","all","values","_n","res","img","Image","onload","src","then","RESIZE","canvas","aspect","width","colCount","floor","tileDensity","rowCount","ceil","newWidth","newHeight","grid","length","heightDiff","widthDiff","createTile","left","right","currentHeight","newCol","unshift","up","down","row","x","y","tile","makeGrid","activeTiles","firstLeftIndex","firstUpIndex","widthDelta","activeCols","activeRows","offX","offY","iX","iY","connect","createActiveTiles","animationDuration","chance","animationChance","offset","tileSize","disconnect","dir","core","rot","rise","liftHeight","sinkHeight","multiply","geometry","fromRotationTranslation","updateTiles","v","viewPort","cam","camera","distance","needsUpdateProjection","position","needsUpdateView","fovy","reset","moveSpeed","lookSpeed","updateDrawSettings","clearColor","enable","DEPTH_TEST","CULL_FACE","shade","frag","base_frag_default","a","vert","base_vert_default","renderer_form","plane","textures","tilesSketch","scene","sketches","uniforms","view","viewMat","projection","projectionMat","minFilter","magFilter","asset","form","map","image","texture","scheduler","compose","once","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","id","updates","requestAnimationFrame","fn","unequal","equalArray","arr1","arr2","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","activeTexture","TEXTURE0","bindTexture","samplerArraySetter","size","units","Int32Array","contants","Type","Float32Array","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","buffer","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","Int8Array","Uint8Array","Int16Array","Uint16Array","setTextureParams","data","oldData","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","updateRenderTarget","target","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","textureConfig","getExtension","texCount","glDB","bufferAttachments","drawBuffersWEBGL","createTexture","texImage2D","RGBA","framebufferTexture2D","COLOR_ATTACHMENT0","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","destroyRenderTarget","deleteFramebuffer","deleteRenderbuffer","deleteTexture","applyDrawSettings","settings","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearDepth","clearBits","clear","revertDrawSettings","formCounter","form_Form","drawType","itemCount","attribs","attribData","createBuffer","bufferData","storeType","elements","glType","typedArray","Uint8ClampedArray","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","shadeCounter","shade_Shade","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","attachShader","trim","fragSource","vertSource","indexOf","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","isArray","substr","toString","info","isSamplerInfo","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","split","line","join","sketchCounter","Sketch","drawSettings","destroy","staticLayerCount","layer_StaticLayer","_texture","asset_lib","generateMipmap","drawingLayerCount","layer_DrawingLayer","targets","buffered","doubleBuffered","sketch","basicEffect","undefined","painter_Painter","resize","renderQuad","createForm","result","createFlatSketch","multiplier","forceUpdateTargets","context","createSketch","createShade","createDrawingLayer","globalUniforms","draw","layers","last","layer","Array","newLast","looping","j","directRender","renderLayer","composeLayers","defaultTexture","Error","useProgram","shadeForm","shadeUniforms","instanceUniforms","drawInstance","drawElements","drawArrays","resultSketch","source","viewport","drawingBufferWidth","drawingBufferHeight","tmp","debug","windowSize","callback","window","innerWidth","innerHeight","addEventListener","removeEventListener","deepmerge","obj1","obj2","val1","val2","deepOverride","opt","ignore","mouse","Buttons","MIDDLE","opts","cb","element","enableRightButton","pressed","drag","dX","dY","dragging","oX","oY","onMouseDown","button","clientX","clientY","onMouseUp","event","onMouseMove","preventDefault","getPainter","getForm","getShade","getSketch","getDrawingLayer","getStaticLayer","getEffectLayer","getState","addSystem","dispatch","baseEvents","shared_utils_scheduler__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_dom__WEBPACK_IMPORTED_MODULE_1__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_2__","tvs_libs_dist_lib_events_mouse__WEBPACK_IMPORTED_MODULE_3__","tvs_libs_dist_lib_utils_object__WEBPACK_IMPORTED_MODULE_4__","tvs_painter_dist_lib_painter__WEBPACK_IMPORTED_MODULE_5__","tvs_painter_dist_lib_utils_context__WEBPACK_IMPORTED_MODULE_6__","currentCanvas","cancelWindow","cancelMouse","cancelKeys","sizeMultiplier","k","init","forms","shades","drawingLayers","staticLayers","createStaticLayer","effectLayers","createEffectLayer","prop","val","systems","sign","num","lerp","start","end","clamp","widthSegments","heightSegments","widthHalf","heightHalf","gridX","gridY","gridX1","gridY1","segmentWidth","segmentHeight","vertices","normals","uvs","iy","ix","offset2","indices","normal","uv","EPSILON","ARRAY_TYPE","RANDOM","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","b0","b1","b2","b3","translate","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","bottom","top","near","far","rl","tb","nf","perspective","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","round","vec3_scale","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","vec3_dot","cross","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","vec","arg","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","mat4_namespaceObject","quat_namespaceObject","vec3_namespaceObject","PerspectiveCamera","WithKeyNavigation","WithMouseRotation","gl_matrix__WEBPACK_IMPORTED_MODULE_0__","tvs_libs_dist_lib_events_keyboard__WEBPACK_IMPORTED_MODULE_1__","Camera","props","rotationX","rotationY","rotationXMat","rotationYMat","amount","super","Cam","speed","W","moveForward","A","moveLeft","D","_oldMouse","deltaX","deltaY","updateRotationX","updateRotationY","defaultTextureSettings","getDefaultLayerSettings","defaultForms","defaultShaders","_contants__WEBPACK_IMPORTED_MODULE_0__","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","planeFromNormalAndCoplanarPoint","mirrorMatrixFromPlane","getYawQuat","getRollQuat","_vectors__WEBPACK_IMPORTED_MODULE_0__","point","rotYAngle","rotZAngle","pickRandom","doTimes","times","zip","flatten","mapcat","each","_math_random__WEBPACK_IMPORTED_MODULE_0__","arr","as","bs","array","subarray","currentLength","coll","obj","Keys","keyboard","onKeydown","keyCode","Date","now","onKeyup","vec1","vec2","scalar","sum","v1","v2","cross2D","getContext","contextAttributes","makeClear","clearArray","reduce","item","toUpperCase","resizeCanvas","clientWidth","clientHeight","randInt","int","randIntInRange","from","to","normalRand"],"mappings":"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","file":"tiles/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 89);\n","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8B50,\n    FLOAT_VEC3: 0x8B51,\n    FLOAT_VEC4: 0x8B52,\n    INT: 0x1404,\n    INT_VEC2: 0x8B53,\n    INT_VEC3: 0x8B54,\n    INT_VEC4: 0x8B55,\n    BOOL: 0x8B56,\n    BOOL_VEC2: 0x8B57,\n    BOOL_VEC3: 0x8B58,\n    BOOL_VEC4: 0x8B59,\n    FLOAT_MAT2: 0x8B5A,\n    FLOAT_MAT3: 0x8B5B,\n    FLOAT_MAT4: 0x8B5C,\n    SAMPLER_2D: 0x8B5E,\n    SAMPLER_CUBE: 0x8B60,\n    SAMPLER_3D: 0x8B5F,\n    SAMPLER_2D_SHADOW: 0x8B62,\n    FLOAT_MAT2X3: 0x8B65,\n    FLOAT_MAT2X4: 0x8B66,\n    FLOAT_MAT3X2: 0x8B67,\n    FLOAT_MAT3X4: 0x8B68,\n    FLOAT_MAT4X2: 0x8B69,\n    FLOAT_MAT4X3: 0x8B6A,\n    SAMPLER_2D_ARRAY: 0x8DC1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,\n    SAMPLER_CUBE_SHADOW: 0x8DC5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8DC6,\n    UNSIGNED_INT_VEC3: 0x8DC7,\n    UNSIGNED_INT_VEC4: 0x8DC8,\n    INT_SAMPLER_2D: 0x8DCA,\n    INT_SAMPLER_3D: 0x8DCB,\n    INT_SAMPLER_CUBE: 0x8DCC,\n    INT_SAMPLER_2D_ARRAY: 0x8DCF,\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,\n    TEXTURE_2D: 0x0DE1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806F,\n    TEXTURE_2D_ARRAY: 0x8C1A,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140B,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,\n    UNSIGNED_INT_24_8: 0x84FA\n};\n//# sourceMappingURL=contants.js.map","export interface TileSpec {\n\tfile: string,\n\tconnections: [number, number, number, number]\n}\n\n\nexport const specs = {\n\tlbA1: {\n\t\tfile: 'tile_lb_A_1',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbA2: {\n\t\tfile: 'tile_lb_A_2',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbA3: {\n\t\tfile: 'tile_lb_A_3',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB1: {\n\t\tfile: 'tile_lb_B_1',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB2: {\n\t\tfile: 'tile_lb_B_2',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB3: {\n\t\tfile: 'tile_lb_B_3',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlrA1: {\n\t\tfile: 'tile_lr_A_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrB1: {\n\t\tfile: 'tile_lr_B_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrC1: {\n\t\tfile: 'tile_lr_C_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD1: {\n\t\tfile: 'tile_lr_D_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD2: {\n\t\tfile: 'tile_lr_D_2',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD3: {\n\t\tfile: 'tile_lr_D_3',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE1: {\n\t\tfile: 'tile_lr_E_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE2: {\n\t\tfile: 'tile_lr_E_2',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE3: {\n\t\tfile: 'tile_lr_E_3',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrtbA1: {\n\t\tfile: 'tile_lrtb_A_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tlrtbB1: {\n\t\tfile: 'tile_lrtb_B_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tlrtbC1: {\n\t\tfile: 'tile_lrtb_C_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tltbA1: {\n\t\tfile: 'tile_ltb_A_1',\n\t\tconnections: [1, 0, 1, 1]\n\t},\n\tltbB1: {\n\t\tfile: 'tile_ltb_B_1',\n\t\tconnections: [1, 0, 1, 1]\n\t}\n} as { [k: string]: TileSpec }\n\n\nexport const sets = [{\n\tlbA1: 1,\n\tlbA2: 1,\n\tlbA3: 1,\n\tlbB1: 1,\n\tlbB2: 1,\n\tlbB3: 1,\n\tlrD1: 1,\n\tlrD2: 1,\n\tlrD3: 1,\n\tlrE1: 1,\n\tlrE2: 1,\n\tlrE3: 1,\n\tlrtbA1: 1,\n\tlrtbB1: 1,\n\tlrtbC1: 1,\n\tltbA1: 1,\n\tltbB1: 1\n}]\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { addSystem, baseEvents } from 'shared-utils/painterState'\n\nexport const linear = (step: number) => step\n\n\nexport class Transition {\n\n\teaseFn = linear\n\tduration = 1000\n\tdelay = 0\n\trepeat = false\n\tonComplete?: () => void\n\tonStart?: () => void\n\tonUpdate?: (step: number) => void\n\n\tprogress: number\n\toldValue: number\n\n\tdone = false\n\n\tconstructor(options: Partial<Transition>) {\n\t\tObject.assign(this, options)\n\n\t\tthis.progress = -this.delay\n\t\tthis.oldValue = this.easeFn(0)\n\t}\n\n\tupdate (step: number) {\n\t\tif (this.done) {\n\t\t\treturn 0\n\t\t}\n\n\t\tthis.progress += step\n\n\t\tif (this.progress <= 0) {\n\t\t\treturn 0\n\t\t}\n\n\t\tif (this.progress <= step && this.onStart) { this.onStart() }\n\n\t\tconst newValue = (this.progress < this.duration)\n\t\t\t? this.easeFn(this.progress / this.duration)\n\t\t\t: this.easeFn(1)\n\n\t\tconst value = newValue - this.oldValue\n\t\tthis.oldValue = newValue\n\n\t\tif (this.onUpdate) this.onUpdate(value)\n\n\t\tif (this.progress >= this.duration) {\n\n\t\t\tif (this.repeat === true || (typeof this.repeat === 'number' && this.repeat > 0)) {\n\t\t\t\tif (typeof this.repeat === 'number') {\n\t\t\t\t\tthis.repeat--\n\t\t\t\t}\n\t\t\t\tthis.progress = 0\n\n\t\t\t} else {\n\t\t\t\tif (this.onComplete) {\n\t\t\t\t\tthis.onComplete()\n\t\t\t\t}\n\t\t\t\tthis.done = true\n\t\t\t}\n\t\t}\n\n\t\treturn value\n\t}\n}\n\n\nlet transitions: Transition[] = []\nlet initialized = false\n\nexport function pushTransition (transitionProps: Partial<Transition>) {\n\tif (!initialized) {\n\t\taddSystem('_transitionRunner', (e, s) => {\n\t\t\tif (e === baseEvents.FRAME) {\n\t\t\t\ttransitions = transitions.filter(t => !t.done)\n\t\t\t\ttransitions.forEach(t => t.update(s.device.tpf))\n\t\t\t}\n\t\t})\n\t\tinitialized = true\n\t}\n\n\tconst t = new Transition(transitionProps)\n\ttransitions.push(t)\n\treturn t\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { getPainter, getState, baseEvents } from 'shared-utils/painterState'\nimport { BaseState } from 'shared-utils/painterState'\nimport { ViewPort } from './viewport'\nimport { Tiles } from './state/tiles'\n\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort\n\ttiles: Tiles\n}\n\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const painter = getPainter(canvas)\n\nexport const gl = painter.gl\n\nexport const state = getState<State>()\n\nexport const events = {\n\t...baseEvents,\n\tINIT: 'init',\n\tSTART: 'start',\n\tNEW_ACTIVE_TILES: 'new_active_tiles'\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { randInt, normalRand } from 'tvs-libs/dist/lib/math/random'\nimport { sign } from 'tvs-libs/dist/lib/math/core'\nimport { mat4, quat } from 'gl-matrix'\nimport { getRollQuat, getYawQuat } from 'tvs-libs/dist/lib/math/geometry'\nimport { pickRandom, doTimes, times, map } from 'tvs-libs/dist/lib/utils/sequence'\nimport { sets, TileSpec, specs } from './data'\nimport { pushTransition } from 'shared-utils/transitions'\nimport { addSystem, dispatch, set } from 'shared-utils/painterState'\nimport { State, events } from '../context'\n\n\ntype Color = number[]\ntype Position = [number, number]\n\n\nexport class Tiles {\n\ttileSize = 3\n\ttileDensity = 15\n\tcolor = [normalRand(), normalRand(), normalRand()]\n\tset = pickRandom(sets)\n\tanimationDuration = 1700\n\tanimationChance = 0.01\n\tliftHeight = 1\n\tsinkHeight = -100\n\tflipped = false\n\tcolCount = 0\n\trowCount = 0\n\timages: { [id: string]: HTMLImageElement } = {}\n\tactiveTiles: TileState[] = []\n\tgrid: TileState[][] = []\n}\n\n\nclass TileState {\n\tgridIndex: Position = [0, 0]\n\tpos: Position = [0, 0]\n\tposOffset: Position = [0, 0]\n\ttransform = mat4.create()\n\ttileSpecId: string\n\ttileSpec: TileSpec\n\tturn: number\n\troll: number\n\tcolor: Color\n\tneighbours: (TileState | undefined)[] = []\n\tflipped = false\n\tyawDirection = 0\n\tyawDelay = 0\n\tyaw = 0\n\theight = 0\n\trotation = quat.create()\n\tupdateTransform = false\n\tconnections = [0, 0, 0, 0]\n\n\tconstructor(\n\t\tset: { [id: string]: number },\n\t\tbaseColor: Color,\n\t\tspecs: { [id: string]: TileSpec }\n\t) {\n\t\tconst [r, g, b] = baseColor\n\t\tthis.color = [\n\t\t\tr + (normalRand() - 0.6) * 0.25,\n\t\t\tg + (normalRand() - 0.6) * 0.25,\n\t\t\tb + (normalRand() - 0.6) * 0.25\n\t\t]\n\t\tthis.tileSpecId = pickRandom(Object.keys(set))\n\t\tthis.turn = randInt(3)\n\t\tthis.tileSpec = specs[this.tileSpecId]\n\n\t\tthis.roll = this.turn * Math.PI / 2\n\t}\n\n\tisConnected () {\n\t\treturn !!(this.height < 0.1 && this.height > -0.1)\n\t}\n\n\tconnect () {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst index = (i + 4 - this.turn) % 4\n\t\t\tconst side = this.tileSpec.connections[index]\n\t\t\tconst neighbour = this.neighbours[i]\n\t\t\tconst nIndex = neighbour ? (i + 6 - neighbour.turn) % 4 : 0\n\t\t\tconst current = this.connections[index]\n\t\t\tlet next: number\n\t\t\tif (this.isConnected() && neighbour && neighbour.isConnected()) {\n\t\t\t\tconst neighbourSide = neighbour.tileSpec.connections[nIndex]\n\t\t\t\tnext = side && neighbourSide\n\t\t\t} else {\n\t\t\t\tnext = 0\n\t\t\t}\n\t\t\tif (current !== next) {\n\t\t\t\tnext === 0\n\t\t\t\t\t? pushTransition({\n\t\t\t\t\t\tduration: 300,\n\t\t\t\t\t\tonUpdate: p => {\n\t\t\t\t\t\t\tthis.connections[index] = Math.max(0, this.connections[index] - p)\n\t\t\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\t\t\tneighbour.connections[nIndex] = Math.max(0, neighbour.connections[nIndex] - p)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t: pushTransition({\n\t\t\t\t\t\tduration: 300,\n\t\t\t\t\t\tonUpdate: p => {\n\t\t\t\t\t\t\tthis.connections[index] = Math.min(1, this.connections[index] + p)\n\t\t\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\t\t\tneighbour.connections[nIndex] = Math.min(1, neighbour.connections[nIndex] + p)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tdisconnect () {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst neighbour = this.neighbours[i]\n\t\t\tconst nIndex = neighbour ? (i + 6 - neighbour.turn) % 4 : 0\n\t\t\tpushTransition({\n\t\t\t\tduration: 300,\n\t\t\t\tonUpdate: p => {\n\t\t\t\t\tthis.connections[i] = Math.max(0, this.connections[i] - p)\n\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\tneighbour.connections[nIndex] = Math.max(0, neighbour.connections[nIndex] - p)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n\nconst SIDES_INDEX = {\n\tUP: 0,\n\tRIGHT: 1,\n\tDOWN: 2,\n\tLEFT: 3\n}\n\n\nfunction rotateHalf (part) {\n\treturn -Math.cos(part * Math.PI * 2) * 0.5 + 0.5\n}\n\nfunction smooth (part) {\n\treturn -Math.cos(part * Math.PI) * 0.5 + 0.5\n}\n\nfunction acc (part) {\n\treturn part * part * part * part\n}\n\nfunction slow (part) {\n\treturn Math.pow(part, 0.25)\n}\n\n\n// ===== basic properties =====\n\naddSystem<State>('tiles', (e, s) => {\n\tconst t = s.tiles\n\n\tswitch (e) {\n\t\tcase events.INIT:\n\t\t\tt.images = {}\n\t\t\tPromise.all(\n\t\t\t\tObject.values(map((_n, key) => new Promise(res => {\n\t\t\t\t\tconst img = new Image()\n\t\t\t\t\timg.onload = res\n\t\t\t\t\timg.src = 'img/' + specs[key].file + '.jpg'\n\t\t\t\t\tt.images[key] = img\n\t\t\t\t}), t.set))\n\t\t\t).then(() => {\n\t\t\t\tdispatch(events.START)\n\t\t\t\tdispatch(events.RESIZE)\n\t\t\t})\n\n\t\tcase events.RESIZE:\n\t\t\tconst canvas = s.device.canvas\n\t\t\tconst aspect = canvas.width / canvas.height\n\t\t\tt.colCount = Math.floor(Math.pow(canvas.width / 1000, 0.5) * t.tileDensity)\n\t\t\tt.rowCount = Math.ceil(t.colCount / aspect)\n\t\t\tmakeGrid(t.colCount, t.rowCount, t.color, t.set, t.grid)\n\t\t\tcreateActiveTiles(t)\n\n\t\tcase events.FRAME:\n\t\t\tupdateTiles(t)\n\t}\n})\n\n\nset<State>('tiles', new Tiles())\n\n\n// ===== primary state =====\n\nfunction makeGrid(\n\tnewWidth: number,\n\tnewHeight: number,\n\tcolor: Color,\n\tset,\n\tgrid: TileState[][]\n) {\n\n\tconst width = grid.length\n\tconst height = grid[0] && grid[0].length || 0\n\n\tconst heightDiff = newHeight - height\n\tconst widthDiff = newWidth - width\n\n\tconst createTile = () => new TileState(set, color, specs)\n\n\t// create new grid columns left and right\n\tif (widthDiff > 0) {\n\n\t\tconst left = Math.floor(widthDiff / 2)\n\t\tconst right = widthDiff - left\n\t\tconst currentHeight = Math.max(newHeight, height)\n\n\t\tconst newCol = () => times(createTile, currentHeight)\n\n\t\tgrid.unshift(...times(newCol, left))\n\t\tgrid.push(...times(newCol, right))\n\t}\n\n\t// create new gid rows at top and bottom\n\tif (heightDiff > 0) {\n\n\t\tconst up = Math.floor(heightDiff / 2)\n\t\tconst down = heightDiff - up\n\n\t\tgrid.forEach(row => {\n\t\t\trow.unshift(...times(createTile, up))\n\t\t\trow.push(...times(createTile, down))\n\t\t})\n\t}\n\n\n\tif (widthDiff > 0 || heightDiff > 0) {\n\n\t\tfor (let x = 0; x < grid.length; x++) {\n\t\t\tfor (let y = 0; y < grid[x].length; y++) {\n\t\t\t\tconst tile = grid[x][y]\n\t\t\t\ttile.gridIndex = [x, y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.LEFT] = grid[x - 1] && grid[x - 1][y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.RIGHT] = grid[x + 1] && grid[x + 1][y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.UP] = grid[x][y - 1]\n\t\t\t\ttile.neighbours[SIDES_INDEX.DOWN] = grid[x][y + 1]\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nfunction createActiveTiles (t: Tiles) {\n\tconst tiles = t.activeTiles = [] as TileState[]\n\tconst width = t.grid.length\n\tconst height = t.grid[0].length\n\tconst firstLeftIndex = -Math.floor(width / 2)\n\tconst firstUpIndex = -Math.floor(height / 2)\n\tconst widthDelta = width - t.colCount\n\tlet activeCols = Math.floor(widthDelta / 2)\n\tif ((width + 1) % 2 && widthDelta % 2) activeCols++\n\tconst activeRows = Math.floor((height - t.rowCount) / 2)\n\tconst offX = ((t.colCount + 1) % 2) * 0.5\n\tconst offY = (t.rowCount % 2) * 0.5 + 0.5\n\n\tdoTimes(x => {\n\t\tdoTimes(y => {\n\t\t\tconst tile = t.grid[x + activeCols][y + activeRows]\n\t\t\tif (tile) {\n\t\t\t\tconst [iX, iY] = tile.gridIndex\n\t\t\t\ttile.posOffset = [offX, offY]\n\t\t\t\ttile.updateTransform = true\n\t\t\t\ttile.yawDelay = (x + (t.rowCount - y + 1)) * 100\n\t\t\t\ttile.pos = [firstLeftIndex + iX, firstUpIndex + iY]\n\t\t\t\ttiles.push(tile)\n\t\t\t}\n\t\t}, t.rowCount)\n\t}, t.colCount)\n\n\ttiles.forEach(t => t.connect())\n\n\tdispatch(events.NEW_ACTIVE_TILES)\n}\n\n\nexport function updateTiles (t: Tiles) {\n\tconst tiles = t.activeTiles\n\tconst duration = t.animationDuration\n\tconst chance = t.animationChance / t.activeTiles.length\n\tconst offset = t.tileSize * 0.95\n\n\tfor (const i in tiles) {\n\t\tconst tile: TileState = tiles[i]\n\n\t\tif (Math.random() < chance) {\n\t\t\ttile.disconnect()\n\t\t\tconst dir = sign(Math.random() - 0.5)\n\n\t\t\tpushTransition({\n\t\t\t\tduration,\n\t\t\t\teaseFn: smooth,\n\t\t\t\tonUpdate: rot => {\n\t\t\t\t\ttile.roll += rot * Math.PI / 2 * dir\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t\tonComplete: () => {\n\t\t\t\t\ttile.turn = dir > 0 ?\n\t\t\t\t\t\t(tile.turn + 1) % 4 :\n\t\t\t\t\t\tdir < 0 ?\n\t\t\t\t\t\t\t(tile.turn + 3) % 4 :\n\t\t\t\t\t\t\ttile.turn\n\t\t\t\t\ttile.connect()\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tpushTransition({\n\t\t\t\tduration,\n\t\t\t\teaseFn: rotateHalf,\n\t\t\t\tonUpdate: rise => {\n\t\t\t\t\ttile.height += rise * t.liftHeight\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (t.flipped !== tile.flipped) {\n\t\t\ttile.flipped = t.flipped\n\t\t\tpushTransition({\n\t\t\t\tduration,\n\t\t\t\teaseFn: t.flipped ? acc : slow,\n\t\t\t\tdelay: tile.yawDelay,\n\t\t\t\tonStart: () => tile.disconnect(),\n\t\t\t\tonUpdate: rot => {\n\t\t\t\t\ttile.yaw += rot * Math.PI\n\t\t\t\t\ttile.height += rot * t.sinkHeight * (tile.flipped ? 1 : -1)\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t\tonComplete: () => {\n\t\t\t\t\tif (!tile.flipped) {\n\t\t\t\t\t\ttile.connect()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (tile.updateTransform) {\n\t\t\ttile.updateTransform = false\n\t\t\tquat.multiply(tile.rotation, getYawQuat(tile.yaw) as quat, getRollQuat(tile.roll) as quat)\n\t\t\tconst [x, y] = tile.pos\n\t\t\tconst [offX, offY] = tile.posOffset\n\t\t\tmat4.fromRotationTranslation(\n\t\t\t\ttile.transform,\n\t\t\t\ttile.rotation,\n\t\t\t\t[(x + offX) * offset, (y + offY) * offset, tile.height]\n\t\t\t)\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { PerspectiveCamera } from 'shared-utils/vr/camera'\nimport { set, addSystem } from 'shared-utils/painterState'\nimport { events, State } from './context'\n\n\nexport class ViewPort {\n\tdistance = 1\n\tcamera = new PerspectiveCamera({\n\t\tfovy: Math.PI * 0.5,\n\t\tposition: [0, 0, 0]\n\t})\n}\n\n\naddSystem<State>('viewPort', (e, s) => {\n\tconst v = s.viewPort\n\tswitch (e) {\n\n\t\tcase events.RESIZE:\n\t\t\tconst cam = v.camera\n\t\t\tv.distance = s.tiles.colCount * s.tiles.tileSize * 0.47\n\t\t\tcam.aspect = s.device.canvas.width / s.device.canvas.height\n\t\t\tcam.needsUpdateProjection = true\n\t\t\tcam.position = [0, 0, v.distance / cam.aspect]\n\t\t\tcam.needsUpdateView = true\n\t\t\tcam.update()\n\t}\n})\n\n\nset<State>('viewPort', new ViewPort(), {reset: {moveSpeed: true, lookSpeed: true}})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import vert from './glsl/base-vert.glsl'\nimport frag from './glsl/base-frag.glsl'\nimport { painter, gl, state, events, State } from './context'\nimport { getShade, getForm, getStaticLayer, getSketch, getDrawingLayer, addSystem } from 'shared-utils/painterState'\nimport { plane } from 'tvs-painter/dist/lib/utils/geometry/plane'\nimport { each } from 'tvs-libs/dist/lib/utils/sequence'\nimport { StaticLayer } from 'tvs-painter/dist/lib/layer'\n\n// ===== Settings =====\n\npainter.updateDrawSettings({\n\tclearColor: [1, 1, 1, 1],\n\tenable: [gl.DEPTH_TEST, gl.CULL_FACE]\n})\n\n\n// ===== shaders =====\n\nconst shade = getShade(painter, 'shade')\n\t.update({ frag, vert })\n\n\n// ===== geometries =====\n\nconst tileSize = state.tiles.tileSize\nconst form = getForm(painter, 'form')\n\t.update(plane(tileSize, tileSize, 3, 3))\n\n\n// ===== textures =====\n\nconst textures: { [id: string]: StaticLayer } = {}\n\n\n// ===== objects =====\n\nconst tilesSketch = getSketch(painter, 'tiles')\n\n\n// ===== layers =====\n\nexport const scene = getDrawingLayer(painter, 'scene')\n\t.update({\n\t\tsketches: [tilesSketch],\n\t\tuniforms: {\n\t\t\tview: () => state.viewPort.camera.viewMat,\n\t\t\tprojection: () => state.viewPort.camera.projectionMat\n\t\t}\n\t})\n\n\naddSystem<State>('render', (e, s) => {\n\tswitch (e) {\n\t\tcase events.START:\n\t\t\teach((img, key) => {\n\t\t\t\ttextures[key] = getStaticLayer(painter, key)\n\t\t\t\t\t.update({\n\t\t\t\t\t\tminFilter: 'LINEAR',\n\t\t\t\t\t\tmagFilter: 'LINEAR',\n\t\t\t\t\t\tasset: img\n\t\t\t\t\t})\n\t\t\t}, s.tiles.images)\n\t\t\tbreak\n\n\t\tcase events.NEW_ACTIVE_TILES:\n\t\t\ttilesSketch.update({\n\t\t\t\tform, shade,\n\t\t\t\tuniforms: s.tiles.activeTiles.map(tile => ({\n\t\t\t\t\ttransform: tile.transform,\n\t\t\t\t\timage: textures[tile.tileSpecId] && textures[tile.tileSpecId].texture(),\n\t\t\t\t\tcolor: tile.color,\n\t\t\t\t\tconnections: tile.connections\n\t\t\t\t}))\n\t\t\t})\n\t}\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import './state/tiles'\nimport './viewport'\nimport { repeat } from 'shared-utils/scheduler'\nimport { painter, events, State } from './context'\nimport { scene } from './renderer'\nimport { addSystem, dispatch } from 'shared-utils/painterState'\n\n\naddSystem<State>('start', (e, s) => {\n if (e === events.START) {\n\t repeat(tpf => {\n\t\t s.device.tpf = tpf\n\t\t dispatch(events.FRAME)\n\t\t painter.compose(scene)\n\t }, 'loop')\n }\n})\n\ndispatch(events.INIT)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","// onNextTick\n// schedule actions on next animation frame\n\nlet updateOnce: {[id: string]: Function} | null = null\nconst updateRepeat: {[id: string]: Function} = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\n\nfunction processUpdates (time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\n\nexport function once(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\n\nexport function repeat(fn: Function, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\n\nexport function stop(id: Function | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (a, b) => !p(a, b);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return function (v) {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return function (v) {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return function (v) {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return function (v) {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return function (v) {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return function (v) {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return function (v) {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return function (v) {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return function (texture) {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return function (textures) {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter },\n    [GL_TYPE.FLOAT_VEC2]: { Type: Float32Array, size: 8, setter: floatVec2Setter },\n    [GL_TYPE.FLOAT_VEC3]: { Type: Float32Array, size: 12, setter: floatVec3Setter },\n    [GL_TYPE.FLOAT_VEC4]: { Type: Float32Array, size: 16, setter: floatVec4Setter },\n    [GL_TYPE.INT]: { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { Type: Uint32Array, size: 8, setter: uintVec2Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { Type: Uint32Array, size: 12, setter: uintVec3Setter },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { Type: Uint32Array, size: 16, setter: uintVec4Setter },\n    [GL_TYPE.BOOL]: { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: { Type: Float32Array, size: 16, setter: floatMat2Setter },\n    [GL_TYPE.FLOAT_MAT3]: { Type: Float32Array, size: 36, setter: floatMat3Setter },\n    [GL_TYPE.FLOAT_MAT4]: { Type: Float32Array, size: 64, setter: floatMat4Setter },\n    [GL_TYPE.FLOAT_MAT2X3]: { Type: Float32Array, size: 24, setter: floatMat23Setter },\n    [GL_TYPE.FLOAT_MAT2X4]: { Type: Float32Array, size: 32, setter: floatMat24Setter },\n    [GL_TYPE.FLOAT_MAT3X2]: { Type: Float32Array, size: 24, setter: floatMat32Setter },\n    [GL_TYPE.FLOAT_MAT3X4]: { Type: Float32Array, size: 48, setter: floatMat34Setter },\n    [GL_TYPE.FLOAT_MAT4X2]: { Type: Float32Array, size: 32, setter: floatMat42Setter },\n    [GL_TYPE.FLOAT_MAT4X3]: { Type: Float32Array, size: 48, setter: floatMat43Setter },\n    [GL_TYPE.SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_3D },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_CUBE_MAP },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: GL_TYPE.TEXTURE_2D_ARRAY }\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function (b) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 }\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw ('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw 'unsupported typed array type';\n}\n// Texture helper\nexport function setTextureParams(gl, data = {}, oldData = {}) {\n    if (data.flipY != null && data.flipY !== oldData.flipY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n    }\n    if ((data.wrap && data.wrap !== oldData.wrap)\n        || (data.wrapS && data.wrapS !== oldData.wrapS)\n        || (data.wrapT && data.wrapT !== oldData.wrapT)) {\n        let wrapS, wrapT;\n        if (data.wrap) {\n            wrapS = wrapT = data.wrap;\n        }\n        else {\n            wrapT = data.wrapT || 'CLAMP_TO_EDGE';\n            wrapS = data.wrapS || 'CLAMP_TO_EDGE';\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n    }\n    if (data.magFilter && data.magFilter !== oldData.magFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n    }\n    if (data.minFilter && data.minFilter !== oldData.minFilter) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n    }\n}\n// Framebuffers\nexport function updateRenderTarget(gl, target, data, oldData) {\n    if (target.width == null || target.height == null) {\n        return;\n    }\n    if (target.frameBuffer == null) {\n        target.frameBuffer = gl.createFramebuffer();\n    }\n    if (!target.textures) {\n        target.textures = [];\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n    if (target.textureConfig.type === gl.FLOAT) {\n        gl.getExtension('OES_texture_float');\n    }\n    const texCount = target.textureConfig.count;\n    if (texCount > 1) {\n        const glDB = gl.getExtension('WEBGL_draw_buffers') || { drawBuffersWEBGL() { } };\n        const bufferAttachments = [];\n        for (let i = 0; i < texCount; i++) {\n            bufferAttachments.push(glDB[`COLOR_ATTACHMENT${i}_WEBGL`]);\n        }\n        glDB.drawBuffersWEBGL(bufferAttachments);\n        for (let i = 0; i < texCount; i++) {\n            if (target.textures[i] == null) {\n                target.textures[i] = gl.createTexture();\n            }\n            const texture = target.textures[i];\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n            setTextureParams(gl, data, oldData);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture, 0);\n        }\n    }\n    else {\n        if (target.textures[0] == null) {\n            target.textures[0] = gl.createTexture();\n        }\n        const texture = target.textures[0];\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, target.width, target.height, 0, gl.RGBA, target.textureConfig.type, null);\n        setTextureParams(gl, data, oldData);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n    if (target.depthBuffer == null) {\n        target.depthBuffer = gl.createRenderbuffer();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, target.depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target.depthBuffer);\n    const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (err !== gl.FRAMEBUFFER_COMPLETE) {\n        console.error('framebuffer error', err, data);\n    }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n}\nexport function destroyRenderTarget(gl, target) {\n    gl.deleteFramebuffer(target.frameBuffer);\n    gl.deleteRenderbuffer(target.depthBuffer);\n    for (const texture of target.textures) {\n        gl.deleteTexture(texture);\n    }\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(gl, id = 'Form' + formCounter++) {\n        this.gl = gl;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this.gl;\n        if (data.drawType) {\n            this.drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this.itemCount = data.itemCount;\n        }\n        this.attribs = this.attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this.attribs[id] == null) {\n                this.attribs[id] = {\n                    buffer: gl.createBuffer()\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this.elements == null) {\n                this.elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null\n                };\n            }\n            this.elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        for (const id in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[id].buffer);\n        }\n        if (this.elements) {\n            this.gl.deleteBuffer(this.elements.buffer);\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","import { createUniformSetters, createAttributeSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(gl, id = 'Shade' + shadeCounter++) {\n        this.gl = gl;\n        this.id = id;\n        this.program = gl.createProgram();\n        this.frag = gl.createShader(gl.FRAGMENT_SHADER);\n        this.vert = gl.createShader(gl.VERTEX_SHADER);\n        gl.attachShader(this.program, this.vert);\n        gl.attachShader(this.program, this.frag);\n    }\n    update(data) {\n        const gl = this.gl;\n        const frag = (data.frag && data.frag.trim()) || this.fragSource;\n        const vert = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(frag && vert)) {\n            return this;\n        }\n        if (frag.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        gl.shaderSource(this.vert, vert);\n        gl.shaderSource(this.frag, frag);\n        gl.compileShader(this.vert);\n        gl.compileShader(this.frag);\n        if (!gl.getShaderParameter(this.vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(this.vert), addLineNumbers(vert));\n        }\n        if (!gl.getShaderParameter(this.frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(this.frag), addLineNumbers(frag));\n        }\n        gl.linkProgram(this.program);\n        const linked = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(this.program);\n            console.error('Error in program linking:', lastError);\n        }\n        this.uniformSetters = createUniformSetters(gl, this.program);\n        this.attributeSetters = createAttributeSetters(gl, this.program);\n        this.fragSource = frag;\n        this.vertSource = vert;\n        return this;\n    }\n    destroy() {\n        this.gl.deleteProgram(this.program);\n        this.gl.deleteShader(this.frag);\n        this.gl.deleteShader(this.vert);\n    }\n}\nfunction addLineNumbers(src) {\n    return src.trim().split('\\n')\n        .map((line, i) => (i + 1) + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this.drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { setTextureParams, updateRenderTarget, destroyRenderTarget } from './render-utils';\nimport { times } from 'tvs-libs/dist/lib/utils/sequence';\nimport { Painter } from './painter';\nimport { defaultTextureSettings, defaultShaders } from './asset-lib';\nlet staticLayerCount = 1;\nexport class StaticLayer {\n    constructor(gl, id = 'StaticLayer' + staticLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n        this._texture = gl.createTexture();\n    }\n    texture() {\n        return this._texture;\n    }\n    update(data) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture());\n        if (data.asset) {\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n        }\n        setTextureParams(this.gl, data, this.data);\n        if (data.asset) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        this.gl.deleteTexture(this.texture());\n    }\n}\nlet drawingLayerCount = 1;\nexport class DrawingLayer {\n    constructor(gl, id = 'DrawingLayer' + drawingLayerCount++) {\n        this.gl = gl;\n        this.id = id;\n        this.data = {};\n    }\n    texture(i = 0) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            if (this.targets) {\n                console.log(`PAINTER: Using buffer texture ${this.targets[0].id}`);\n            }\n        }\n        return (this.targets && this.targets[0].textures[i]) || null;\n    }\n    update(data) {\n        if (data.buffered && !this.targets) {\n            this.targets = times(i => ({\n                id: this.id + '_target' + (i + 1),\n                width: data.width || this.gl.canvas.width,\n                height: data.height || this.gl.canvas.height,\n                frameBuffer: null, textures: [], depthBuffer: null,\n                textureConfig: {\n                    type: (data.textureConfig && data.textureConfig.type) || this.gl.UNSIGNED_BYTE,\n                    count: (data.textureConfig && data.textureConfig.count) || 1\n                }\n            }), data.doubleBuffered ? 2 : 1);\n            if (!(data.wrap || data.wrapS || data.wrapT)) {\n                data.wrap = defaultTextureSettings.wrap;\n            }\n            if (!data.minFilter) {\n                data.minFilter = defaultTextureSettings.minFilter;\n            }\n            if (!data.magFilter) {\n                data.magFilter = defaultTextureSettings.magFilter;\n            }\n            this.targets.forEach(t => updateRenderTarget(this.gl, t, data, this.data));\n        }\n        else if (this.targets && data.width && data.height) {\n            this.targets.forEach(t => {\n                t.width = data.width;\n                t.height = data.height;\n                updateRenderTarget(this.gl, t, data, this.data);\n            });\n        }\n        if (data.sketches) {\n            this.sketches = data.sketches;\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag, vert: defaultShaders.basicEffect.vert });\n            }\n        }\n        if (data.uniforms) {\n            this.uniforms = data.uniforms;\n        }\n        Object.assign(this.data, data);\n        return this;\n    }\n    destroy() {\n        if (this.sketches) {\n            for (const sketch of this.sketches) {\n                sketch.destroy();\n            }\n        }\n        if (this.targets) {\n            this.targets.forEach(t => destroyRenderTarget(this.gl, t));\n            this.targets = undefined;\n        }\n    }\n}\n//# sourceMappingURL=layer.js.map","import { updateRenderTarget, applyDrawSettings, revertDrawSettings, destroyRenderTarget } from './render-utils';\nimport { resizeCanvas } from './utils/context';\nimport { defaultForms, defaultShaders, defaultTextureSettings, getDefaultLayerSettings } from './asset-lib';\nimport { Form } from './form';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { StaticLayer, DrawingLayer } from './layer';\nexport class Painter {\n    constructor(gl) {\n        this.gl = gl;\n        this.targets = [\n            { id: 'MainTarget_1' },\n            { id: 'MainTarget_2' }\n        ];\n        this.resize(1, true);\n        this.renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this.result = this.createFlatSketch();\n        this.result.shade.update(defaultShaders.basicEffect);\n    }\n    resize(multiplier = 1, forceUpdateTargets = false) {\n        const canvas = this.gl.canvas;\n        const needUpdate = resizeCanvas(canvas, multiplier);\n        if (needUpdate || forceUpdateTargets) {\n            this.targets.forEach(t => {\n                t.width = canvas.width;\n                t.height = canvas.height;\n                t.textureConfig = {\n                    count: 1,\n                    type: this.gl.UNSIGNED_BYTE\n                };\n                updateRenderTarget(this.gl, t, defaultTextureSettings);\n            });\n        }\n        return this;\n    }\n    destroy() {\n        this.result.destroy();\n        for (const target of this.targets) {\n            destroyRenderTarget(this.gl, target);\n        }\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, getDefaultLayerSettings(this.gl), drawSettings));\n        return this;\n    }\n    createForm(id) { return new Form(this.gl, id); }\n    createShade(id) { return new Shade(this.gl, id); }\n    createSketch(id) { return new Sketch(id); }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this.renderQuad,\n            shade: this.createShade(s.id + '_defaultShade')\n        });\n    }\n    createStaticLayer(id) { return new StaticLayer(this.gl, id); }\n    createDrawingLayer(id) { return new DrawingLayer(this.gl, id); }\n    createEffectLayer(id) {\n        const l = this.createDrawingLayer(id);\n        return l.update({\n            sketches: [this.createFlatSketch(l.id + '_effectSketch')]\n        });\n    }\n    draw(sketch, globalUniforms) {\n        draw(this.gl, sketch, null, globalUniforms);\n        return this;\n    }\n    compose(...layers) {\n        composeLayers(this.gl, layers, this.targets, this.result);\n        return this;\n    }\n}\nPainter.debug = false;\nfunction draw(gl, sketch, defaultTexture, globalUniforms) {\n    const { shade, form, drawSettings, uniforms } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade.program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, defaultTexture);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    if (Array.isArray(uniforms)) {\n        for (const instanceUniforms of uniforms) {\n            drawInstance(gl, sketch, defaultTexture, instanceUniforms);\n        }\n    }\n    else {\n        drawInstance(gl, sketch, defaultTexture, uniforms);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, defaultTexture, uniforms) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, defaultTexture);\n    }\n    if (sketch.form.elements && sketch.form.elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form.elements.buffer);\n        gl.drawElements(sketch.form.drawType, sketch.form.itemCount, sketch.form.elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form.drawType, 0, sketch.form.itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form.attribs) {\n        const setter = shade.attributeSetters[name];\n        if (setter) {\n            setter.setter(form.attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, defaultTexture) {\n    for (const name in uniforms) {\n        const setter = shade.uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (value === null || typeof value === 'string') {\n                setter.setter(defaultTexture);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, targets, uniforms, resultSketch, directRender) {\n    const source = targets[0];\n    const target = targets[1];\n    if (directRender) {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering directly to viewport`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    else if (layer.targets) {\n        const i = layer.targets.length - 1;\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to layer target ${layer.targets[i].id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, layer.targets[i].frameBuffer);\n        gl.viewport(0, 0, layer.targets[i].width, layer.targets[i].height);\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering to target ${target.id}`);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n    if (layer.data.drawSettings) {\n        applyDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (layer.sketches) {\n        for (const sketch of layer.sketches) {\n            draw(gl, sketch, (layer.looping && layer.texture()) || source.textures[0], uniforms);\n        }\n    }\n    else {\n        // Display static texture\n        draw(gl, resultSketch, null, { source: layer.texture() });\n    }\n    if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n        console.log(`PAINTER: Render success!`);\n    }\n    if (layer.data.drawSettings) {\n        revertDrawSettings(gl, layer.data.drawSettings);\n    }\n    if (!directRender) {\n        if (!layer.targets) {\n            targets[0] = target;\n            targets[1] = source;\n        }\n        else if (layer.targets.length === 2) {\n            const tmp = layer.targets[0];\n            layer.targets[0] = layer.targets[1];\n            layer.targets[1] = tmp;\n            layer.looping = true;\n        }\n    }\n}\nfunction composeLayers(gl, layers, targets, result) {\n    const last = layers.length - 1;\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n            console.log(`PAINTER: Rendering layer ${layer.id}`);\n        }\n        if (Array.isArray(layer.uniforms)) {\n            const newLast = last + layer.uniforms.length - 1;\n            layer.looping = false;\n            for (let j = 0; j < layer.uniforms.length; j++) {\n                if (process.env.NODE_ENV !== 'production' && Painter.debug) {\n                    console.log(`PAINTER: Layer pass ${j + 1}`);\n                }\n                const directRender = i + j === newLast;\n                renderLayer(gl, layer, targets, layer.uniforms[j], result, directRender);\n            }\n        }\n        else {\n            const directRender = i === last;\n            renderLayer(gl, layer, targets, layer.uniforms, result, directRender);\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 }\n    };\n    const destroy = windowSize(s => state.size = s);\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object'\n        && typeof obj2 === 'object'\n        && !Array.isArray(obj1)\n        && !Array.isArray(obj2)\n        && obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) && !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, { ignore: ignore && ignore[key] });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\n//# sourceMappingURL=object.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n};\nexport function mouse(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0 },\n        dragging: false\n    };\n    let x = 0, y = 0, oX = 0, oY = 0;\n    function onMouseDown(e) {\n        state.pressed[e.button] = e;\n        if (e.button === Buttons.LEFT) {\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n        }\n        cb(state);\n    }\n    function onMouseUp(e) {\n        delete state.pressed[e.button];\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.dragging = false;\n        cb(state);\n    }\n    function onMouseMove(e) {\n        if (state.dragging) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function mouseObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { }\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = mouse(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=mouse.js.map","import { once } from 'shared-utils/scheduler'\nimport { windowSize } from 'tvs-libs/dist/lib/events/dom'\nimport { keyboard } from 'tvs-libs/dist/lib/events/keyboard'\nimport { KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { mouse } from 'tvs-libs/dist/lib/events/mouse'\nimport { deepOverride } from 'tvs-libs/dist/lib/utils/object'\nimport { Layer } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/lib/form'\nimport { Painter } from 'tvs-painter/dist/lib/painter'\nimport { Shade } from 'tvs-painter/dist/lib/shade'\nimport { Sketch } from 'tvs-painter/dist/lib/sketch'\nimport { getContext } from 'tvs-painter/dist/lib/utils/context'\n\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nexport function getPainter(canvas: HTMLCanvasElement) {\n\tinit(canvas)\n\treturn painter\n}\n\nconst forms: {[id: string]: Form} = {}\nexport function getForm(painter: Painter, id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: {[id: string]: Shade} = {}\nexport function getShade(painter: Painter, id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: {[id: string]: Sketch} = {}\nexport function getSketch(painter: Painter, id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst drawingLayers: {[id: string]: Layer} = {}\nexport function getDrawingLayer(painter: Painter, id: string) {\n\treturn drawingLayers[id] = (drawingLayers[id] = painter.createDrawingLayer('DrawLayer_' + id))\n}\n\nconst staticLayers: {[id: string]: Layer} = {}\nexport function getStaticLayer(painter: Painter, id: string) {\n\treturn staticLayers[id] = (staticLayers[id] = painter.createStaticLayer('StaticLayer_' + id))\n}\n\nconst effectLayers: {[id: string]: Layer} = {}\nexport function getEffectLayer(painter: Painter, id: string) {\n\treturn effectLayers[id] = (effectLayers[id] = painter.createEffectLayer('EffectLayer_' + id))\n}\n\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\tsizeMultiplier: number\n\t\tcanvas: HTMLCanvasElement,\n\t\tmouse: MouseState,\n\t\tkeys: KeyState,\n\t\ttpf: number\n\t}\n}\n\nexport const state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1\n\t}\n} as BaseState\nwindow['state'] = state\n\nexport function get<S extends BaseState = BaseState, K extends keyof S = keyof S>(prop: K): S[K] {\n\treturn (state as S)[prop]\n}\n\nexport function set<S extends BaseState = BaseState, K extends keyof S = keyof S>(key: K, val: S[K], opts?: {reset: any}) {\n\tconst s = state as S\n\tif (s[key]) {\n\t\tconst reset = opts && opts.reset\n\t\tif (reset !== true) {\n\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t}\n\t}\n\ts[key] = val\n}\n\nexport function getState<S extends BaseState>() {\n\treturn state as S\n}\n\n\n// === Systems ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (event: string, state: S) => void\nconst systems: {[id: string]: ActionHandler<any>} = {}\n\nexport function addSystem<S extends BaseState = BaseState>(id: string, s: ActionHandler<S>) {\n\tsystems[id] = s\n}\n\nexport function dispatch(event: string) {\n\tfor (const k in systems) {\n\t\tsystems[k](event, state)\n\t}\n}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize'\n}\n\n// === Init ===\n\nlet cancelWindow: () => void\nlet cancelMouse: () => void\nlet cancelKeys: () => void\n\nexport function init (canvas: HTMLCanvasElement) {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(getContext(canvas))\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelMouse && cancelMouse()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() => once(() => {\n\t\t\tpainter.resize(state.device.sizeMultiplier)\n\t\t\tdispatch(baseEvents.RESIZE)\n\t\t}, 'resize'))\n\n\t\tcancelMouse = mouse(\n\t\t\t{ element: canvas, enableRightButton: true },\n\t\t\tm => state.device.mouse = m\n\t\t)\n\n\t\tcancelKeys = keyboard(k => state.device.keys = k)\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - (iy / gridY);\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new ((vertices.length / 3) > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = (ix + 1) + gridX1 * (iy + 1);\n            const d = (ix + 1) + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            'position': {\n                buffer: vertices\n            },\n            'normal': {\n                buffer: normals\n            },\n            'uv': {\n                buffer: uvs\n            }\n        },\n        elements: {\n            buffer: indices\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length\n    };\n}\n//# sourceMappingURL=plane.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/lib/events/keyboard'\nimport { MouseState } from 'tvs-libs/dist/lib/events/mouse'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\n\n\nexport class Camera {\n\tposition = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t}\n\n\tupdateRotationX (amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY (amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[8], this.rotationYMat[9], this.rotationYMat[10])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[0], this.rotationYMat[1], this.rotationYMat[2])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp (dist: number) {\n\t\tconst v = vec3.fromValues(this.rotationYMat[4], this.rotationYMat[5], this.rotationYMat[6])\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate () {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper()\n\t\tObject.assign(this, props)\n\t}\n\n\tupdate () {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\n\nexport function WithKeyNavigation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromKeys (speed: number, keys: KeyState) {\n\t\t\tif (!keys) return\n\t\t\tif (keys[Keys.UP] || keys[Keys.W]) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.DOWN] || keys[Keys.S]) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys[Keys.LEFT] || keys[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys[Keys.RIGHT] || keys[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport function WithMouseRotation<T extends Constructor<Camera>> (Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromMouse (speed: number, m: MouseState) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST'\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        enable: [gl.DEPTH_TEST],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA]\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([\n                    -1, 1,\n                    -1, -1,\n                    1, 1,\n                    1, -1\n                ]),\n                storeType: 'STATIC'\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([\n                    0, 1,\n                    0, 0,\n                    1, 1,\n                    1, 0\n                ]),\n                storeType: 'STATIC'\n            }\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4\n    }\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`\n    }\n};\n//# sourceMappingURL=asset-lib.js.map","import { dot, normalize, cross, sub } from './vectors';\nexport function planeFromNormalAndCoplanarPoint(n, point) {\n    const d = dot(n, point);\n    return [n[0], n[1], n[2], -d];\n}\nexport function planeFromThreeCoplanarPoints(p1, p2, p3) {\n    return planeFromNormalAndCoplanarPoint(normalFromThreeCoplanarPoints(p1, p2, p3), p1);\n}\nexport function normalFromThreeCoplanarPoints(p1, p2, p3) {\n    return normalize(cross(sub(p3, p2), sub(p1, p2)));\n}\nexport function mirrorMatrixFromPlane(plane) {\n    const [a, b, c, d] = plane;\n    return [\n        1 - 2 * a * a, -2 * a * b, -2 * a * c, 0,\n        -2 * a * b, 1 - 2 * b * b, -2 * b * c, 0,\n        -2 * a * c, -2 * b * c, 1 - 2 * c * c, 0,\n        -2 * a * d, -2 * b * d, -2 * c * d, 1\n    ];\n}\nexport function getYawQuat(rotYAngle) {\n    rotYAngle *= 0.5;\n    return [0, Math.sin(rotYAngle), 0, Math.cos(rotYAngle)];\n}\nexport function getPitchQuat(rotXAngle) {\n    rotXAngle *= 0.5;\n    return [Math.sin(rotXAngle), 0, 0, Math.cos(rotXAngle)];\n}\nexport function getRollQuat(rotZAngle) {\n    rotZAngle *= 0.5;\n    return [0, 0, Math.sin(rotZAngle), Math.cos(rotZAngle)];\n}\n//# sourceMappingURL=geometry.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(array.map(fn), res);\n}\nexport function shuffle(arr) {\n    const shuffled = [];\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = (shuffled[i] !== undefined) ? shuffled[i] : arr[i];\n        shuffled[i] = (shuffled[j] !== undefined) ? shuffled[j] : arr[j];\n        shuffled[j] = temp;\n    }\n    return shuffled;\n}\nexport function map(fn, coll) {\n    if (Array.isArray(coll)) {\n        return coll.map(fn);\n    }\n    else {\n        const obj = {};\n        for (const key in coll) {\n            obj[key] = fn(coll[key], key);\n        }\n        return obj;\n    }\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\n//# sourceMappingURL=sequence.js.map","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { }\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","module.exports = \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D image;\\nuniform vec3 color;\\nuniform vec4 connections;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec4 tex = texture2D(image, vUv);\\n  if (tex.r > 0.9) {\\n    discard;\\n  }\\n\\n  float up = 0.0;\\n  float right = 0.0;\\n  float down = 0.0;\\n  float left = 0.0;\\n  float x = vUv.x - 0.5;\\n  float y = vUv.y;\\n\\n  if (connections[0] > 0.0) {\\n    up = x * x * 2.0 + y * y * 2.0;\\n    up = connections[0] - up;\\n    up = max(0.0, up);\\n    up *= up;\\n  }\\n\\n  if (connections[1] > 0.0) {\\n    x = vUv.x - 1.0;\\n    y = vUv.y - 0.5;\\n    right = x * x * 2.0 + y * y * 2.0;\\n    right = connections[1] - right;\\n    right = max(0.0, right);\\n    right *= right;\\n  }\\n\\n  if (connections[2] > 0.0) {\\n    x = vUv.x - 0.5;\\n    y = vUv.y - 1.0;\\n    down = x * x * 2.0 + y * y * 2.0;\\n    down = connections[2] - down;\\n    down = max(0.0, down);\\n    down *= down;\\n  }\\n\\n  if (connections[3] > 0.0) {\\n    x = vUv.x;\\n    y = vUv.y - 0.5;\\n    left = x * x * 2.0 + y * y * 2.0;\\n    left = connections[3] - left;\\n    left = max(0.0, left);\\n    left *= left;\\n  }\\n\\n  // smooth out border\\n  /* col /= resolution.x * resolution.y * 0.5; */\\n  /* col = sqrt(col); */\\n\\n\\tfloat glow = up + right + left + down;\\n\\n\\tvec3 result = 0.8 - color.rgb * (1.0 - tex.r);\\n\\tfloat red = result.r;\\n\\n\\tif (abs(tex.g - tex.r) > 0.1 && tex.g > 0.9) {\\n\\t\\tred = mix(red, 1.0, glow);\\n\\t}\\n\\n  gl_FragColor = vec4(red, result.gb, 1.0);\\n  // gl_FragColor = vec4(color, 1.0);\\n  // gl_FragColor = connections;\\n}\\n\"","import { equalArray } from '../utils/predicates';\nexport function vec(v) {\n    if (typeof v === 'number') {\n        return new Float32Array(v);\n    }\n    return new Float32Array(v);\n}\nexport function add(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] + vec2[i];\n    }\n    return res;\n}\nexport function sub(vec1, vec2, res = []) {\n    for (let i = 0; i < vec1.length; i++) {\n        res[i] = vec1[i] - vec2[i];\n    }\n    return res;\n}\nexport function mul(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] * scalar;\n    }\n    return res;\n}\nexport function div(scalar, vec, res = []) {\n    for (let i = 0; i < vec.length; i++) {\n        res[i] = vec[i] / scalar;\n    }\n    return res;\n}\nexport function length(vec) {\n    let sum = 0;\n    for (let i = 0; i < vec.length; i++) {\n        const val = vec[i];\n        sum += val * val;\n    }\n    return Math.sqrt(sum);\n}\nexport function normalize(vec, res = []) {\n    return div(length(vec), vec, res);\n}\nexport function limit(maxLength, vec) {\n    const l = length(vec);\n    if (maxLength < l) {\n        return mul(maxLength / l, vec);\n    }\n    else {\n        return vec;\n    }\n}\nexport function dot(v1, v2) {\n    let d = 0;\n    for (let i = 0; i < v1.length; i++) {\n        d += v1[i] * v2[i];\n    }\n    return d;\n}\nexport function cross(v1, v2, res = []) {\n    res[0] = v1[1] * v2[2] - v1[2] * v2[1];\n    res[1] = v1[2] * v2[0] - v1[0] * v2[2];\n    res[2] = v1[0] * v2[1] - v1[1] * v2[0];\n    return res;\n}\nexport function cross2D(v1, v2) {\n    return v1[0] * v2[1] - v1[1] * v2[0];\n}\nexport const isEqual = equalArray;\n//# sourceMappingURL=vectors.js.map","export function getContext(canvas, contextAttributes) {\n    const gl = canvas.getContext('webgl', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n    if (gl == null) {\n        throw Error('Webgl context cannot be initialized');\n    }\n    return gl;\n}\nexport function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    const width = (canvas.clientWidth * multiplier) | 0;\n    const height = (canvas.clientHeight * multiplier) | 0;\n    if (canvas.width !== width\n        || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map"],"sourceRoot":""}