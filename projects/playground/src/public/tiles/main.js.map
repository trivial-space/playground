{"version":3,"sources":["webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///../node_modules/gl-matrix/esm/quat.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../node_modules/gl-matrix/esm/mat3.js","webpack:///./shared-utils/scheduler.ts","webpack:///../libs/dist/events/keyboard.js","webpack:///../libs/dist/utils/object.js","webpack:///../painter/dist/contants.js","webpack:///../painter/dist/asset-lib.js","webpack:///../painter/dist/render-utils.js","webpack:///../painter/dist/form.js","webpack:///../libs/dist/math/random.js","webpack:///../libs/dist/utils/sequence.js","webpack:///../painter/dist/texture.js","webpack:///../painter/dist/render-target.js","webpack:///../libs/dist/utils/predicates.js","webpack:///../painter/dist/frame.js","webpack:///../painter/dist/layer.js","webpack:///../painter/dist/shade.js","webpack:///../painter/dist/sketch.js","webpack:///../painter/dist/painter.js","webpack:///../painter/dist/utils/context.js","webpack:///../libs/dist/events/pointer.js","webpack:///./shared-utils/painterState.ts","webpack:///./shared-utils/transitions.ts","webpack:///../libs/dist/math/core.js","webpack:///./tiles/context.ts","webpack:///../libs/dist/events/dom.js","webpack:///./tiles/state/data.ts","webpack:///./tiles/state/tiles.ts","webpack:///../libs/dist/math/geometry.js","webpack:///./shared-utils/vr/camera.ts","webpack:///./tiles/viewport.ts","webpack:///./tiles/renderer.ts","webpack:///./tiles/glsl/base-frag.glsl","webpack:///./tiles/glsl/base-vert.glsl","webpack:///../painter/dist/utils/geometry/plane.js","webpack:///./tiles/index.ts"],"names":["ARRAY_TYPE","Float32Array","Array","create","out","multiply","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","fromRotationTranslation","q","v","x","y","z","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","Math","random","PI","hypot","i","arguments","length","sqrt","ax","ay","az","aw","bx","by","bz","bw","updateOnce","updateRepeat","willUpdate","uidCounter","oldTime","processUpdates","time","tpf","id","updates","requestAnimationFrame","Keys","deepOverride","obj1","obj2","opt","ignore","isArray","key","hasOwnProperty","val1","val2","undefined","defaultTextureSettings","defaultForms","renderQuad","attribs","buffer","storeType","drawType","itemCount","defaultShaders","vert","frag","getBindPointForSamplerType","type","typeMap","bindPoint","intSetter","gl","location","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","texture","activeTexture","TEXTURE0","bindTexture","_texture","samplerArraySetter","size","units","Int32Array","textures","index","Type","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","uniform3fv","uniform4fv","Uint32Array","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","floatAttribSetter","typeInfo","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","itemSize","normalize","stride","offset","intAttribSetter","vertexAttribIPointer","matAttribSetter","defaultSize","count","numComponents","rowOffset","attrTypeMap","applyDrawSettings","settings","enable","setting","disable","blendFunc","apply","depthFunc","cullFace","frontFace","lineWidth","colorMask","depthMask","clearColor","clearDepth","clearBits","clear","revertDrawSettings","Int8Array","Uint8Array","Int16Array","Uint16Array","formCounter","Form","_painter","this","data","_drawType","_itemCount","_attribs","attribData","createBuffer","bufferData","elements","_elements","glType","typedArray","Uint8ClampedArray","Error","getGLTypeForTypedArray","ELEMENT_ARRAY_BUFFER","deleteBuffer","randInt","int","floor","normalRand","pickRandom","arr","doTimes","fn","times","res","textureCount","Texture","_data","createTexture","TEXTURE_2D","wrap","wrapS","wrapT","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","magFilter","TEXTURE_MAG_FILTER","minFilter","TEXTURE_MIN_FILTER","asset","texImage2D","RGBA","UNSIGNED_BYTE","isWebGL2","RGBA32F","width","height","flipY","pixelStorei","UNPACK_FLIP_Y_WEBGL","indexOf","generateMipmap","Object","assign","deleteTexture","targetCount","RenderTarget","antialias","frameBuffer","antiAliasFrameBuffer","antiAliasRenderBuffer","depthBuffer","bufferStructure","_a","every","buf","k1","keys","arr1","arr2","equalArray","equalObject","createFramebuffer","createRenderbuffer","some","t","getExtension","texCount","bufferAttachments","COLOR_ATTACHMENT0","bindFramebuffer","FRAMEBUFFER","glx","attachment","COLOR_ATTACHMENT0_WEBGL","drawBuffers","drawBuffersWEBGL","gl2","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","min","getParameter","MAX_SAMPLES","RGBA8","framebufferRenderbuffer","DEPTH_COMPONENT16","DEPTH_ATTACHMENT","renderbufferStorage","update","framebufferTexture2D","err","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","error","deleteFramebuffer","deleteRenderbuffer","frameCount","Frame","layers","_targets","_textures","_b","_c","_d","selfReferencing","layerCount","reduce","layer","_uniforms","canvas","_destroyTargets","targetData","forEach","tex","destroy","tmp","Layer","sketches","sketch","shade","uniforms","shadeCounter","Shade","fragSource","trim","vertSource","program","createProgram","createShader","FRAGMENT_SHADER","VERTEX_SHADER","_program","_frag","_vert","attachShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","lastError","getProgramInfoLog","_uniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","name","substr","toString","uniformSetters","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","createUniformSetters","_attributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","deleteProgram","deleteShader","src","split","map","line","join","sketchCounter","Sketch","drawSettings","_drawSettings","form","Painter","opts","maxBufferSamples","useWebGL1","getContext","sizeMultiplier","resize","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","getDefaultLayerSettings","_renderQuad","createForm","_staticSketch","createFlatSketch","multiplier","rect","getBoundingClientRect","resizeCanvas","s","createSketch","createShade","l","createLayer","globalUniforms","viewport","draw","frames","frame","renderFrame","idx","source","image","sources","useProgram","shadeForm","shadeUniforms","drawInstance","drawElements","drawArrays","value","renderLayer","target","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","clearBufferfv","COLOR","blitFramebuffer","COLOR_BUFFER_BIT","LINEAR","layerPasses","j","_swapTargets","currentCanvas","painter","getForm","shades","getShade","getSketch","getLayer","getFrame","createFrame","effects","getEffect","createEffect","state","device","window","eventHandlers","baseEvents","FRAME","RESIZE","cancelWindow","cancelPointer","cancelKeys","linear","step","Transition","options","easeFn","duration","delay","repeat","done","progress","oldValue","onStart","newValue","onUpdate","onComplete","transitions","initialized","pushTransition","Q","transitionProps","listen","filter","push","getPainterContext","callback","innerWidth","innerHeight","addEventListener","removeEventListener","windowSize","once","emit","cb","element","document","enableRightButton","holdDelay","holdRadius","pressed","drag","dX","dY","xMax","yMax","dragging","holding","oX","oY","timeout","onPointerDown","e","isPrimary","button","clientX","clientY","clearTimeout","setTimeout","onPointerUp","_e","event","onPointerMove","max","abs","preventDefault","pointer","m","onKeydown","keyCode","Date","now","onKeyup","keyboard","k","get","prop","set","val","reset","getElementById","events","INIT","ON_IMAGES_LOADED","NEW_ACTIVE_TILES","specs","lbA1","file","connections","lbA2","lbA3","lbB1","lbB2","lbB3","lrA1","lrB1","lrC1","lrD1","lrD2","lrD3","lrE1","lrE2","lrE3","lrtbA1","lrtbB1","lrtbC1","ltbA1","ltbB1","sets","TileState","baseColor","gridIndex","pos","posOffset","transform","neighbours","flipped","yawDirection","yawDelay","yaw","rotation","updateTransform","r","g","color","tileSpecId","turn","tileSpec","roll","side","neighbour","nIndex","current","next","isConnected","neighbourSide","p","rotateHalf","part","cos","smooth","acc","slow","pow","tiles","images","Promise","all","values","coll","mapObj","_n","img","Image","onload","then","aspect","colCount","tileDensity","rowCount","ceil","newWidth","newHeight","grid","heightDiff","widthDiff","createTile","left","right","currentHeight","newCol","unshift","up","down","row","tile","makeGrid","activeTiles","firstLeftIndex","firstUpIndex","widthDelta","activeCols","activeRows","offX","offY","iX","iY","connect","createActiveTiles","animationDuration","chance","animationChance","tileSize","disconnect","dir","num","rot","rise","liftHeight","sinkHeight","rotYAngle","sin","rotZAngle","updateTiles","PerspectiveCamera","props","position","rotationX","rotationY","rotationXMat","rotationYMat","projectionMat","viewMat","needsUpdateView","updateRotationX","updateRotationY","amount","rad","c","dist","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","super","fovy","near","far","needsUpdateProjection","nf","f","tan","Infinity","viewPort","cam","camera","distance","updateDrawSettings","DEPTH_TEST","CULL_FACE","widthSegments","heightSegments","widthHalf","heightHalf","segmentWidth","segmentHeight","vertices","gridX1","normals","uvs","iy","ix","offset2","gridY","gridX","indices","d","normal","uv","plane","each","view","projection"],"mappings":"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","file":"tiles/main.js","sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","// onNextTick\n// schedule actions on next animation frame\n\ntype Callback = (n: number) => void\n\nlet updateOnce: { [id: string]: Callback } | null = null\nconst updateRepeat: { [id: string]: Callback } = {}\n\nlet willUpdate = false\n\nlet uidCounter = 0\n\nlet oldTime = 0\n\nfunction processUpdates(time: number) {\n\tconst tpf = oldTime ? time - oldTime : oldTime\n\toldTime = time\n\n\tif (updateOnce) {\n\t\tfor (const id in updateOnce) {\n\t\t\tupdateOnce[id](tpf)\n\t\t}\n\t\tupdateOnce = null\n\t}\n\n\tlet updates = 0\n\tfor (const id in updateRepeat) {\n\t\tupdates++\n\t\tupdateRepeat[id](tpf)\n\t}\n\n\tif (!updates) {\n\t\twillUpdate = false\n\t\toldTime = 0\n\t} else {\n\t\trequestAnimationFrame(processUpdates)\n\t}\n}\n\nexport function once(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateOnce = updateOnce || {}\n\tupdateOnce[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n}\n\nexport function repeat(fn: Callback, id?: string | number) {\n\tid = id || fn.name || uidCounter++\n\tupdateRepeat[id] = fn\n\n\tif (!willUpdate) {\n\t\trequestAnimationFrame(processUpdates)\n\t\twillUpdate = true\n\t}\n\n\treturn id\n}\n\nexport function stop(id: Callback | string | number) {\n\tif (typeof id === 'function') {\n\t\tid = id.name\n\t}\n\tdelete updateRepeat[id]\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export var Keys;\n(function (Keys) {\n    Keys[Keys[\"CANCEL\"] = 3] = \"CANCEL\";\n    Keys[Keys[\"HELP\"] = 6] = \"HELP\";\n    Keys[Keys[\"BACK_SPACE\"] = 8] = \"BACK_SPACE\";\n    Keys[Keys[\"TAB\"] = 9] = \"TAB\";\n    Keys[Keys[\"CLEAR\"] = 12] = \"CLEAR\";\n    Keys[Keys[\"RETURN\"] = 13] = \"RETURN\";\n    Keys[Keys[\"ENTER\"] = 14] = \"ENTER\";\n    Keys[Keys[\"SHIFT\"] = 16] = \"SHIFT\";\n    Keys[Keys[\"CONTROL\"] = 17] = \"CONTROL\";\n    Keys[Keys[\"ALT\"] = 18] = \"ALT\";\n    Keys[Keys[\"PAUSE\"] = 19] = \"PAUSE\";\n    Keys[Keys[\"CAPS_LOCK\"] = 20] = \"CAPS_LOCK\";\n    Keys[Keys[\"ESCAPE\"] = 27] = \"ESCAPE\";\n    Keys[Keys[\"SPACE\"] = 32] = \"SPACE\";\n    Keys[Keys[\"PAGE_UP\"] = 33] = \"PAGE_UP\";\n    Keys[Keys[\"PAGE_DOWN\"] = 34] = \"PAGE_DOWN\";\n    Keys[Keys[\"END\"] = 35] = \"END\";\n    Keys[Keys[\"HOME\"] = 36] = \"HOME\";\n    Keys[Keys[\"LEFT\"] = 37] = \"LEFT\";\n    Keys[Keys[\"UP\"] = 38] = \"UP\";\n    Keys[Keys[\"RIGHT\"] = 39] = \"RIGHT\";\n    Keys[Keys[\"DOWN\"] = 40] = \"DOWN\";\n    Keys[Keys[\"PRINTSCREEN\"] = 44] = \"PRINTSCREEN\";\n    Keys[Keys[\"INSERT\"] = 45] = \"INSERT\";\n    Keys[Keys[\"DELETE\"] = 46] = \"DELETE\";\n    Keys[Keys[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    Keys[Keys[\"DIGIT_1\"] = 49] = \"DIGIT_1\";\n    Keys[Keys[\"DIGIT_2\"] = 50] = \"DIGIT_2\";\n    Keys[Keys[\"DIGIT_3\"] = 51] = \"DIGIT_3\";\n    Keys[Keys[\"DIGIT_4\"] = 52] = \"DIGIT_4\";\n    Keys[Keys[\"DIGIT_5\"] = 53] = \"DIGIT_5\";\n    Keys[Keys[\"DIGIT_6\"] = 54] = \"DIGIT_6\";\n    Keys[Keys[\"DIGIT_7\"] = 55] = \"DIGIT_7\";\n    Keys[Keys[\"DIGIT_8\"] = 56] = \"DIGIT_8\";\n    Keys[Keys[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    Keys[Keys[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Keys[Keys[\"EQUALS\"] = 61] = \"EQUALS\";\n    Keys[Keys[\"A\"] = 65] = \"A\";\n    Keys[Keys[\"B\"] = 66] = \"B\";\n    Keys[Keys[\"C\"] = 67] = \"C\";\n    Keys[Keys[\"D\"] = 68] = \"D\";\n    Keys[Keys[\"E\"] = 69] = \"E\";\n    Keys[Keys[\"F\"] = 70] = \"F\";\n    Keys[Keys[\"G\"] = 71] = \"G\";\n    Keys[Keys[\"H\"] = 72] = \"H\";\n    Keys[Keys[\"I\"] = 73] = \"I\";\n    Keys[Keys[\"J\"] = 74] = \"J\";\n    Keys[Keys[\"K\"] = 75] = \"K\";\n    Keys[Keys[\"L\"] = 76] = \"L\";\n    Keys[Keys[\"M\"] = 77] = \"M\";\n    Keys[Keys[\"N\"] = 78] = \"N\";\n    Keys[Keys[\"O\"] = 79] = \"O\";\n    Keys[Keys[\"P\"] = 80] = \"P\";\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\n    Keys[Keys[\"R\"] = 82] = \"R\";\n    Keys[Keys[\"S\"] = 83] = \"S\";\n    Keys[Keys[\"T\"] = 84] = \"T\";\n    Keys[Keys[\"U\"] = 85] = \"U\";\n    Keys[Keys[\"V\"] = 86] = \"V\";\n    Keys[Keys[\"W\"] = 87] = \"W\";\n    Keys[Keys[\"X\"] = 88] = \"X\";\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\n    Keys[Keys[\"CONTEXT_MENU\"] = 93] = \"CONTEXT_MENU\";\n    Keys[Keys[\"NUMPAD0\"] = 96] = \"NUMPAD0\";\n    Keys[Keys[\"NUMPAD1\"] = 97] = \"NUMPAD1\";\n    Keys[Keys[\"NUMPAD2\"] = 98] = \"NUMPAD2\";\n    Keys[Keys[\"NUMPAD3\"] = 99] = \"NUMPAD3\";\n    Keys[Keys[\"NUMPAD4\"] = 100] = \"NUMPAD4\";\n    Keys[Keys[\"NUMPAD5\"] = 101] = \"NUMPAD5\";\n    Keys[Keys[\"NUMPAD6\"] = 102] = \"NUMPAD6\";\n    Keys[Keys[\"NUMPAD7\"] = 103] = \"NUMPAD7\";\n    Keys[Keys[\"NUMPAD8\"] = 104] = \"NUMPAD8\";\n    Keys[Keys[\"NUMPAD9\"] = 105] = \"NUMPAD9\";\n    Keys[Keys[\"MULTIPLY\"] = 106] = \"MULTIPLY\";\n    Keys[Keys[\"ADD\"] = 107] = \"ADD\";\n    Keys[Keys[\"SEPARATOR\"] = 108] = \"SEPARATOR\";\n    Keys[Keys[\"SUBTRACT\"] = 109] = \"SUBTRACT\";\n    Keys[Keys[\"DECIMAL\"] = 110] = \"DECIMAL\";\n    Keys[Keys[\"DIVIDE\"] = 111] = \"DIVIDE\";\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\n    Keys[Keys[\"NUM_LOCK\"] = 144] = \"NUM_LOCK\";\n    Keys[Keys[\"SCROLL_LOCK\"] = 145] = \"SCROLL_LOCK\";\n    Keys[Keys[\"COMMA\"] = 188] = \"COMMA\";\n    Keys[Keys[\"PERIOD\"] = 190] = \"PERIOD\";\n    Keys[Keys[\"SLASH\"] = 191] = \"SLASH\";\n    Keys[Keys[\"BACK_QUOTE\"] = 192] = \"BACK_QUOTE\";\n    Keys[Keys[\"OPEN_BRACKET\"] = 219] = \"OPEN_BRACKET\";\n    Keys[Keys[\"BACK_SLASH\"] = 220] = \"BACK_SLASH\";\n    Keys[Keys[\"CLOSE_BRACKET\"] = 221] = \"CLOSE_BRACKET\";\n    Keys[Keys[\"QUOTE\"] = 222] = \"QUOTE\";\n    Keys[Keys[\"META\"] = 224] = \"META\";\n})(Keys || (Keys = {}));\nexport function keyboard(opts, callback) {\n    const cb = callback || opts;\n    const { element = window } = opts;\n    const pressed = {};\n    function onKeydown(event) {\n        pressed[event.keyCode] = Date.now();\n        cb(pressed);\n    }\n    function onKeyup(event) {\n        delete pressed[event.keyCode];\n        cb(pressed);\n    }\n    element.addEventListener('keyup', onKeyup, false);\n    element.addEventListener('keydown', onKeydown, false);\n    cb(pressed);\n    return function stop() {\n        element.removeEventListener('keyup', onKeyup);\n        element.removeEventListener('keydown', onKeydown);\n    };\n}\nexport function keyboardObserver(opts) {\n    const observer = {\n        Keys,\n        state: { pressed: {} },\n        destroy: () => { },\n    };\n    function callback(pressed) {\n        observer.state.pressed = pressed;\n    }\n    observer.destroy = keyboard(callback, opts);\n    return observer;\n}\n//# sourceMappingURL=keyboard.js.map","export function deepmerge(obj1, obj2) {\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        const result = Object.assign({}, obj1);\n        for (const key in obj2) {\n            const val1 = obj1[key];\n            const val2 = obj2[key];\n            if (typeof val2 !== 'undefined') {\n                result[key] = deepmerge(val1, val2);\n            }\n            else {\n                delete result[key];\n            }\n        }\n        return result;\n    }\n    return obj2;\n}\nexport function deepOverride(obj1, obj2, opt) {\n    const ignore = opt && opt.ignore;\n    if (typeof obj1 === 'object' &&\n        typeof obj2 === 'object' &&\n        !Array.isArray(obj1) &&\n        !Array.isArray(obj2) &&\n        obj1 !== obj2) {\n        for (const key in obj1) {\n            if (obj1.hasOwnProperty(key) &&\n                !(ignore && key in ignore && ignore[key] === true)) {\n                const val1 = obj1[key];\n                const val2 = obj2[key];\n                if (val2 !== undefined) {\n                    obj1[key] = deepOverride(val1, val2, {\n                        ignore: ignore && ignore[key],\n                    });\n                }\n            }\n        }\n        return obj1;\n    }\n    return obj2;\n}\nexport function mapObj(fn, coll, res = {}) {\n    for (const key in coll) {\n        res[key] = fn(coll[key], key);\n    }\n    return res;\n}\n//# sourceMappingURL=object.js.map","export const GEOMETRY_PROP_POSITION = 'position';\nexport const GEOMETRY_PROP_NORMAL = 'normal';\nexport const GEOMETRY_PROP_UV = 'uv';\nexport const UNIFORM_SOURCE_TEXTURE = 'source';\nexport const VARYING_UV_COORDS = 'coords';\nexport const GL_TYPE = {\n    FLOAT: 0x1406,\n    FLOAT_VEC2: 0x8b50,\n    FLOAT_VEC3: 0x8b51,\n    FLOAT_VEC4: 0x8b52,\n    INT: 0x1404,\n    INT_VEC2: 0x8b53,\n    INT_VEC3: 0x8b54,\n    INT_VEC4: 0x8b55,\n    BOOL: 0x8b56,\n    BOOL_VEC2: 0x8b57,\n    BOOL_VEC3: 0x8b58,\n    BOOL_VEC4: 0x8b59,\n    FLOAT_MAT2: 0x8b5a,\n    FLOAT_MAT3: 0x8b5b,\n    FLOAT_MAT4: 0x8b5c,\n    SAMPLER_2D: 0x8b5e,\n    SAMPLER_CUBE: 0x8b60,\n    SAMPLER_3D: 0x8b5f,\n    SAMPLER_2D_SHADOW: 0x8b62,\n    FLOAT_MAT2X3: 0x8b65,\n    FLOAT_MAT2X4: 0x8b66,\n    FLOAT_MAT3X2: 0x8b67,\n    FLOAT_MAT3X4: 0x8b68,\n    FLOAT_MAT4X2: 0x8b69,\n    FLOAT_MAT4X3: 0x8b6a,\n    SAMPLER_2D_ARRAY: 0x8dc1,\n    SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n    SAMPLER_CUBE_SHADOW: 0x8dc5,\n    UNSIGNED_INT: 0x1405,\n    UNSIGNED_INT_VEC2: 0x8dc6,\n    UNSIGNED_INT_VEC3: 0x8dc7,\n    UNSIGNED_INT_VEC4: 0x8dc8,\n    INT_SAMPLER_2D: 0x8dca,\n    INT_SAMPLER_3D: 0x8dcb,\n    INT_SAMPLER_CUBE: 0x8dcc,\n    INT_SAMPLER_2D_ARRAY: 0x8dcf,\n    UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n    UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n    TEXTURE_2D: 0x0de1,\n    TEXTURE_CUBE_MAP: 0x8513,\n    TEXTURE_3D: 0x806f,\n    TEXTURE_2D_ARRAY: 0x8c1a,\n    BYTE: 0x1400,\n    UNSIGNED_BYTE: 0x1401,\n    SHORT: 0x1402,\n    UNSIGNED_SHORT: 0x1403,\n    UNSIGNED_SHORT_4_4_4_4: 0x8033,\n    UNSIGNED_SHORT_5_5_5_1: 0x8034,\n    UNSIGNED_SHORT_5_6_5: 0x8363,\n    HALF_FLOAT: 0x140b,\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n    UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n    UNSIGNED_INT_24_8: 0x84fa,\n};\nexport const TEXTURE_FORMAT = {\n    RED: 0x1903,\n    RG: 0x8227,\n    RGB: 0x1907,\n    RGBA: 0x1908,\n    RED_INTEGER: 0x8d94,\n    RG_INTEGER: 0x8228,\n    RGB_INTEGER: 0x8d98,\n    RGBA_INTEGER: 0x8d99,\n    DEPTH_COMPONENT: 0x1902,\n};\nexport const TEXTURE_FORMAT_INTERNAL = {\n    R8: 0x8229,\n    RG8: 0x822b,\n    RGB8: 0x8051,\n    RGBA8: 0x8058,\n    R16F: 0x822d,\n    RG16F: 0x822f,\n    RGB16F: 0x881b,\n    RGBA16F: 0x881a,\n    R32F: 0x822e,\n    RG32F: 0x8230,\n    RGB32F: 0x8815,\n    RGBA32F: 0x8814,\n    R8I: 0x8231,\n    RG8I: 0x8237,\n    RGB8I: 0x8d8f,\n    RGBA8I: 0x8d8e,\n    R8UI: 0x8232,\n    RG8UI: 0x8238,\n    RGB8UI: 0x8d7d,\n    RGBA8UI: 0x8d7c,\n    R16I: 0x8233,\n    RG16I: 0x8239,\n    RGB16I: 0x8d89,\n    RGBA16I: 0x8d88,\n    R16UI: 0x8234,\n    RG16UI: 0x823a,\n    RGB16UI: 0x8d77,\n    RGBA16UI: 0x8d76,\n    R32I: 0x8235,\n    RG32I: 0x823b,\n    RGB32I: 0x8d83,\n    RGBA32I: 0x8d82,\n    R32UI: 0x8236,\n    RG32UI: 0x823c,\n    RGB32UI: 0x8d71,\n    RGBA32UI: 0x8d70,\n    RGB10_A2: 0x8059,\n    RGB10_A2UI: 0x906f,\n    SRGB: 0x8c40,\n    SRGB8: 0x8c41,\n    SRGB8_ALPHA8: 0x8c43,\n    R8_SNORM: 0x8f94,\n    RG8_SNORM: 0x8f95,\n    RGB8_SNORM: 0x8f96,\n    RGBA8_SNORM: 0x8f97,\n    DEPTH_COMPONENT16: 0x81a5,\n    DEPTH_COMPONENT24: 0x81a6,\n    DEPTH_COMPONENT32F: 0x8cac,\n};\nexport const TEXTURE_FORMAT_DEFAULTS = {\n    [GL_TYPE.UNSIGNED_BYTE]: {\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R8,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG8,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB8,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA8,\n    },\n    [GL_TYPE.UNSIGNED_SHORT]: {\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT16,\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R16UI,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG16UI,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB16UI,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA16UI,\n    },\n    [GL_TYPE.UNSIGNED_INT]: {\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT24,\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R32UI,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG32UI,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB32UI,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA32UI,\n    },\n    [GL_TYPE.FLOAT]: {\n        [TEXTURE_FORMAT.RED]: TEXTURE_FORMAT_INTERNAL.R16F,\n        [TEXTURE_FORMAT.RG]: TEXTURE_FORMAT_INTERNAL.RG16F,\n        [TEXTURE_FORMAT.RGB]: TEXTURE_FORMAT_INTERNAL.RGB16F,\n        [TEXTURE_FORMAT.RGBA]: TEXTURE_FORMAT_INTERNAL.RGBA16F,\n        [TEXTURE_FORMAT.DEPTH_COMPONENT]: TEXTURE_FORMAT_INTERNAL.DEPTH_COMPONENT32F,\n    },\n    COMPRESSED_TYPES: {},\n};\n//# sourceMappingURL=contants.js.map","import * as constants from './contants';\nexport const defaultTextureSettings = {\n    wrap: 'CLAMP_TO_EDGE',\n    minFilter: 'LINEAR',\n    magFilter: 'NEAREST',\n};\nexport function getDefaultLayerSettings(gl) {\n    return {\n        clearColor: [0.0, 0.0, 0.0, 1.0],\n        blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA],\n    };\n}\nexport const defaultForms = {\n    renderQuad: {\n        attribs: {\n            [constants.GEOMETRY_PROP_POSITION]: {\n                buffer: new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]),\n                storeType: 'STATIC',\n            },\n            [constants.GEOMETRY_PROP_UV]: {\n                buffer: new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]),\n                storeType: 'STATIC',\n            },\n        },\n        drawType: 'TRIANGLE_STRIP',\n        itemCount: 4,\n    },\n};\nexport const defaultShaders = {\n    basicEffect: {\n        vert: `\nattribute vec2 ${constants.GEOMETRY_PROP_POSITION};\nattribute vec2 ${constants.GEOMETRY_PROP_UV};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\t${constants.VARYING_UV_COORDS} = ${constants.GEOMETRY_PROP_UV};\n\tgl_Position = vec4(${constants.GEOMETRY_PROP_POSITION}, 0.0, 1.0);\n}`,\n        frag: `precision mediump float;\nuniform sampler2D ${constants.UNIFORM_SOURCE_TEXTURE};\nvarying vec2 ${constants.VARYING_UV_COORDS};\nvoid main() {\n\tgl_FragColor = texture2D(${constants.UNIFORM_SOURCE_TEXTURE}, ${constants.VARYING_UV_COORDS});\n}`,\n    },\n};\n//# sourceMappingURL=asset-lib.js.map","import { GL_TYPE } from './contants';\n// Attrib and Uniform Setters\nfunction getBindPointForSamplerType(type) {\n    return typeMap[type].bindPoint;\n}\nfunction floatSetter(gl, location) {\n    return (v) => {\n        gl.uniform1f(location, v);\n    };\n}\nfunction floatArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1fv(location, v);\n    };\n}\nfunction floatVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2fv(location, v);\n    };\n}\nfunction floatVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3fv(location, v);\n    };\n}\nfunction floatVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4fv(location, v);\n    };\n}\nfunction intSetter(gl, location) {\n    return (v) => {\n        gl.uniform1i(location, v);\n    };\n}\nfunction intArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1iv(location, v);\n    };\n}\nfunction intVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2iv(location, v);\n    };\n}\nfunction intVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3iv(location, v);\n    };\n}\nfunction intVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4iv(location, v);\n    };\n}\nfunction uintSetter(gl, location) {\n    return (v) => {\n        gl.uniform1ui(location, v);\n    };\n}\nfunction uintArraySetter(gl, location) {\n    return (v) => {\n        gl.uniform1uiv(location, v);\n    };\n}\nfunction uintVec2Setter(gl, location) {\n    return (v) => {\n        gl.uniform2uiv(location, v);\n    };\n}\nfunction uintVec3Setter(gl, location) {\n    return (v) => {\n        gl.uniform3uiv(location, v);\n    };\n}\nfunction uintVec4Setter(gl, location) {\n    return (v) => {\n        gl.uniform4uiv(location, v);\n    };\n}\nfunction floatMat2Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2fv(location, false, v);\n    };\n}\nfunction floatMat3Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3fv(location, false, v);\n    };\n}\nfunction floatMat4Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4fv(location, false, v);\n    };\n}\nfunction floatMat23Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x3fv(location, false, v);\n    };\n}\nfunction floatMat32Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x2fv(location, false, v);\n    };\n}\nfunction floatMat24Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix2x4fv(location, false, v);\n    };\n}\nfunction floatMat42Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x2fv(location, false, v);\n    };\n}\nfunction floatMat34Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix3x4fv(location, false, v);\n    };\n}\nfunction floatMat43Setter(gl, location) {\n    return (v) => {\n        gl.uniformMatrix4x3fv(location, false, v);\n    };\n}\nfunction samplerSetter(gl, type, unit, location) {\n    const bindPoint = getBindPointForSamplerType(type);\n    return (texture) => {\n        gl.uniform1i(location, unit);\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture._texture);\n    };\n}\nfunction samplerArraySetter(gl, type, unit, location, size) {\n    const bindPoint = getBindPointForSamplerType(type);\n    const units = new Int32Array(size);\n    for (let i = 0; i < size; ++i) {\n        units[i] = unit + i;\n    }\n    return (textures) => {\n        gl.uniform1iv(location, units);\n        for (const index in textures) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, textures[index]._texture);\n        }\n    };\n}\nfunction isSamplerInfo(info) {\n    return info.Type === null;\n}\nconst typeMap = {\n    [GL_TYPE.FLOAT]: {\n        Type: Float32Array,\n        size: 4,\n        setter: floatSetter,\n        arraySetter: floatArraySetter,\n    },\n    [GL_TYPE.FLOAT_VEC2]: {\n        Type: Float32Array,\n        size: 8,\n        setter: floatVec2Setter,\n    },\n    [GL_TYPE.FLOAT_VEC3]: {\n        Type: Float32Array,\n        size: 12,\n        setter: floatVec3Setter,\n    },\n    [GL_TYPE.FLOAT_VEC4]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatVec4Setter,\n    },\n    [GL_TYPE.INT]: {\n        Type: Int32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.INT_VEC2]: { Type: Int32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.INT_VEC3]: { Type: Int32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.INT_VEC4]: { Type: Int32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.UNSIGNED_INT]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: uintSetter,\n        arraySetter: uintArraySetter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        Type: Uint32Array,\n        size: 8,\n        setter: uintVec2Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        Type: Uint32Array,\n        size: 12,\n        setter: uintVec3Setter,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        Type: Uint32Array,\n        size: 16,\n        setter: uintVec4Setter,\n    },\n    [GL_TYPE.BOOL]: {\n        Type: Uint32Array,\n        size: 4,\n        setter: intSetter,\n        arraySetter: intArraySetter,\n    },\n    [GL_TYPE.BOOL_VEC2]: { Type: Uint32Array, size: 8, setter: intVec2Setter },\n    [GL_TYPE.BOOL_VEC3]: { Type: Uint32Array, size: 12, setter: intVec3Setter },\n    [GL_TYPE.BOOL_VEC4]: { Type: Uint32Array, size: 16, setter: intVec4Setter },\n    [GL_TYPE.FLOAT_MAT2]: {\n        Type: Float32Array,\n        size: 16,\n        setter: floatMat2Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3]: {\n        Type: Float32Array,\n        size: 36,\n        setter: floatMat3Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4]: {\n        Type: Float32Array,\n        size: 64,\n        setter: floatMat4Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X3]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat23Setter,\n    },\n    [GL_TYPE.FLOAT_MAT2X4]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat24Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X2]: {\n        Type: Float32Array,\n        size: 24,\n        setter: floatMat32Setter,\n    },\n    [GL_TYPE.FLOAT_MAT3X4]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat34Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X2]: {\n        Type: Float32Array,\n        size: 32,\n        setter: floatMat42Setter,\n    },\n    [GL_TYPE.FLOAT_MAT4X3]: {\n        Type: Float32Array,\n        size: 48,\n        setter: floatMat43Setter,\n    },\n    [GL_TYPE.SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.SAMPLER_2D_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_2D_ARRAY_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.SAMPLER_CUBE_SHADOW]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_3D]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_3D,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_CUBE]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_CUBE_MAP,\n    },\n    [GL_TYPE.UNSIGNED_INT_SAMPLER_2D_ARRAY]: {\n        Type: null,\n        size: 0,\n        setter: samplerSetter,\n        arraySetter: samplerArraySetter,\n        bindPoint: GL_TYPE.TEXTURE_2D_ARRAY,\n    },\n};\nfunction floatAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, typeInfo.itemSize, GL_TYPE.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n    };\n}\nfunction intAttribSetter(gl, location, typeInfo) {\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribIPointer(location, typeInfo.itemSize, GL_TYPE.INT, b.stride || 0, b.offset || 0);\n    };\n}\nfunction matAttribSetter(gl, location, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return (b) => {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        const numComponents = defaultSize;\n        const size = numComponents / count;\n        const typeInfo = typeMap[GL_TYPE.FLOAT];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for (let i = 0; i < count; ++i) {\n            gl.enableVertexAttribArray(location + i);\n            gl.vertexAttribPointer(location + i, size, GL_TYPE.FLOAT, normalize, stride, offset + rowOffset * i);\n        }\n    };\n}\nconst attrTypeMap = {\n    [GL_TYPE.FLOAT]: { size: 4, setter: floatAttribSetter, itemSize: 1 },\n    [GL_TYPE.FLOAT_VEC2]: { size: 8, setter: floatAttribSetter, itemSize: 2 },\n    [GL_TYPE.FLOAT_VEC3]: { size: 12, setter: floatAttribSetter, itemSize: 3 },\n    [GL_TYPE.FLOAT_VEC4]: { size: 16, setter: floatAttribSetter, itemSize: 4 },\n    [GL_TYPE.INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.INT_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.INT_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.INT_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.UNSIGNED_INT]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.UNSIGNED_INT_VEC2]: {\n        size: 8,\n        setter: intAttribSetter,\n        itemSize: 2,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC3]: {\n        size: 12,\n        setter: intAttribSetter,\n        itemSize: 3,\n    },\n    [GL_TYPE.UNSIGNED_INT_VEC4]: {\n        size: 16,\n        setter: intAttribSetter,\n        itemSize: 4,\n    },\n    [GL_TYPE.BOOL]: { size: 4, setter: intAttribSetter, itemSize: 1 },\n    [GL_TYPE.BOOL_VEC2]: { size: 8, setter: intAttribSetter, itemSize: 2 },\n    [GL_TYPE.BOOL_VEC3]: { size: 12, setter: intAttribSetter, itemSize: 3 },\n    [GL_TYPE.BOOL_VEC4]: { size: 16, setter: intAttribSetter, itemSize: 4 },\n    [GL_TYPE.FLOAT_MAT2]: { size: 4, setter: matAttribSetter, count: 2 },\n    [GL_TYPE.FLOAT_MAT3]: { size: 9, setter: matAttribSetter, count: 3 },\n    [GL_TYPE.FLOAT_MAT4]: { size: 16, setter: matAttribSetter, count: 4 },\n};\nexport function createUniformSetters(gl, program) {\n    let textureUnit = 0;\n    function createUniformSetter(program, uniformInfo) {\n        const location = gl.getUniformLocation(program, uniformInfo.name);\n        const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n        const type = uniformInfo.type;\n        const typeInfo = typeMap[type];\n        if (!typeInfo) {\n            throw new Error('unknown type: 0x' + type.toString(16)); // we should never get here.\n        }\n        if (location == null) {\n            return;\n        }\n        let setter;\n        if (isSamplerInfo(typeInfo)) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) {\n                setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n            }\n            else {\n                setter = typeInfo.setter(gl, type, unit, location);\n            }\n        }\n        else {\n            if (typeInfo.arraySetter && isArray) {\n                setter = typeInfo.arraySetter(gl, location);\n            }\n            else {\n                setter = typeInfo.setter(gl, location);\n            }\n        }\n        return { setter, location };\n    }\n    const uniformSetters = {};\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; ++i) {\n        const uniformInfo = gl.getActiveUniform(program, i);\n        if (!uniformInfo) {\n            continue;\n        }\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.substr(-3) === '[0]') {\n            name = name.substr(0, name.length - 3);\n        }\n        if (program) {\n            const setter = createUniformSetter(program, uniformInfo);\n            if (setter) {\n                uniformSetters[name] = setter;\n            }\n        }\n    }\n    return uniformSetters;\n}\nexport function createAttributeSetters(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < numAttribs; i++) {\n        const attribInfo = gl.getActiveAttrib(program, i);\n        if (!attribInfo) {\n            break;\n        }\n        const location = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, location, typeInfo);\n        attribSetters[attribInfo.name] = { setter, location };\n    }\n    return attribSetters;\n}\n// Type helpers\nexport const glTypeToTypedArray = {\n    [GL_TYPE.BYTE]: Int8Array,\n    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,\n    [GL_TYPE.SHORT]: Int16Array,\n    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,\n    [GL_TYPE.INT]: Int32Array,\n    [GL_TYPE.UNSIGNED_INT]: Uint32Array,\n    [GL_TYPE.FLOAT]: Float32Array,\n    [GL_TYPE.UNSIGNED_SHORT_4_4_4_4]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_5_5_1]: Uint16Array,\n    [GL_TYPE.UNSIGNED_SHORT_5_6_5]: Uint16Array,\n    [GL_TYPE.HALF_FLOAT]: Uint16Array,\n    [GL_TYPE.UNSIGNED_INT_2_10_10_10_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_10F_11F_11F_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_5_9_9_9_REV]: Uint32Array,\n    [GL_TYPE.FLOAT_32_UNSIGNED_INT_24_8_REV]: Uint32Array,\n    [GL_TYPE.UNSIGNED_INT_24_8]: Uint32Array,\n};\nexport function getGLTypeForTypedArray(typedArray) {\n    if (typedArray instanceof Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArray instanceof Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArray instanceof Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArray instanceof Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArray instanceof Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArray instanceof Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArray instanceof Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\nexport function getGLTypeForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) {\n        return GL_TYPE.BYTE;\n    }\n    if (typedArrayType === Uint8Array) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Uint8ClampedArray) {\n        return GL_TYPE.UNSIGNED_BYTE;\n    }\n    if (typedArrayType === Int16Array) {\n        return GL_TYPE.SHORT;\n    }\n    if (typedArrayType === Uint16Array) {\n        return GL_TYPE.UNSIGNED_SHORT;\n    }\n    if (typedArrayType === Int32Array) {\n        return GL_TYPE.INT;\n    }\n    if (typedArrayType === Uint32Array) {\n        return GL_TYPE.UNSIGNED_INT;\n    }\n    if (typedArrayType === Float32Array) {\n        return GL_TYPE.FLOAT;\n    }\n    throw new Error('unsupported typed array type');\n}\n// Settings\nexport function applyDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.enable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.blendFunc) {\n        gl.blendFunc.apply(gl, settings.blendFunc);\n    }\n    if (settings.depthFunc != null) {\n        gl.depthFunc(settings.depthFunc);\n    }\n    if (settings.cullFace != null) {\n        gl.cullFace(settings.cullFace);\n    }\n    if (settings.frontFace != null) {\n        gl.frontFace(settings.frontFace);\n    }\n    if (settings.lineWidth != null) {\n        gl.lineWidth(settings.lineWidth);\n    }\n    if (settings.colorMask) {\n        gl.colorMask.apply(gl, settings.colorMask);\n    }\n    if (settings.depthMask != null) {\n        gl.depthMask(settings.depthMask);\n    }\n    if (settings.clearColor) {\n        gl.clearColor.apply(gl, settings.clearColor);\n    }\n    if (settings.clearDepth != null) {\n        gl.clearDepth(settings.clearDepth);\n    }\n    if (settings.clearBits != null) {\n        gl.clear(settings.clearBits);\n    }\n}\nexport function revertDrawSettings(gl, settings) {\n    if (settings.enable) {\n        for (const setting of settings.enable) {\n            gl.disable(setting);\n        }\n    }\n    if (settings.disable) {\n        for (const setting of settings.disable) {\n            gl.enable(setting);\n        }\n    }\n}\n//# sourceMappingURL=render-utils.js.map","import { getGLTypeForTypedArray } from './render-utils';\nlet formCounter = 1;\nexport class Form {\n    constructor(_painter, id = 'Form' + formCounter++) {\n        this._painter = _painter;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        if (data.drawType) {\n            this._drawType = gl[data.drawType];\n        }\n        if (data.itemCount) {\n            this._itemCount = data.itemCount;\n        }\n        this._attribs = this._attribs || {};\n        for (const id in data.attribs) {\n            const attribData = data.attribs[id];\n            if (this._attribs[id] == null) {\n                this._attribs[id] = {\n                    buffer: gl.createBuffer(),\n                };\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this._attribs[id].buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, attribData.buffer, gl[(attribData.storeType || 'STATIC') + '_DRAW']);\n        }\n        if (data.elements) {\n            const buffer = data.elements.buffer;\n            if (this._elements == null) {\n                this._elements = {\n                    buffer: gl.createBuffer(),\n                    glType: null,\n                };\n            }\n            this._elements.glType = getGLTypeForTypedArray(buffer);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._elements.buffer);\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, buffer, gl[(data.elements.storeType || 'STATIC') + '_DRAW']);\n        }\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        for (const id in this._attribs) {\n            gl.deleteBuffer(this._attribs[id].buffer);\n        }\n        this._attribs = {};\n        if (this._elements) {\n            gl.deleteBuffer(this._elements.buffer);\n            this._elements = undefined;\n        }\n    }\n}\n//# sourceMappingURL=form.js.map","export function randInt(int) {\n    return Math.floor(Math.random() * int);\n}\nexport function randIntInRange(from, to) {\n    return randInt(to - from) + from;\n}\nexport function normalRand() {\n    return (Math.random() + Math.random() + Math.random()) / 3;\n}\n//# sourceMappingURL=random.js.map","import { randInt, randIntInRange } from '../math/random';\nexport function pickRandom(arr) {\n    return arr[randInt(arr.length)];\n}\nexport function doTimes(fn, count) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\nexport function times(fn, count, res = []) {\n    for (let i = 0; i < count; i++) {\n        res[i] = fn(i);\n    }\n    return res;\n}\nexport function repeat(count, item) {\n    return times(() => item, count);\n}\nexport function concat(arr, ...arrs) {\n    return arr.concat(...arrs);\n}\nexport function zip(fn, as, bs, res = []) {\n    const length = Math.min(as.length, bs.length);\n    for (let i = 0; i < length; i++) {\n        res[i] = fn(as[i], bs[i]);\n    }\n    return res;\n}\nexport function flatten(array, res = []) {\n    for (const subarray of array) {\n        const currentLength = res.length;\n        for (let i = 0; i < subarray.length; i++) {\n            res[i + currentLength] = subarray[i];\n        }\n    }\n    return res;\n}\nexport function mapcat(fn, array, res = []) {\n    return flatten(map(fn, array, res));\n}\nexport const flatMap = mapcat;\nexport function reverse(arr, res = []) {\n    for (let i = 0; i < arr.length; i++) {\n        res[i] = arr[arr.length - 1 - i];\n    }\n    return res;\n}\nexport function shuffle(arr, res = []) {\n    for (let i = 0; i < arr.length; i++) {\n        const j = randIntInRange(i, arr.length);\n        const temp = res[i] !== undefined ? res[i] : arr[i];\n        res[i] = res[j] !== undefined ? res[j] : arr[j];\n        res[j] = temp;\n    }\n    return res;\n}\nexport function map(fn, coll, res = []) {\n    for (let i = 0; i < coll.length; i++) {\n        res[i] = fn(coll[i], i);\n    }\n    return res;\n}\nexport function each(fn, coll) {\n    for (const key in coll) {\n        fn(coll[key], key);\n    }\n}\nexport function reduce(fn, start, arr) {\n    for (let i = 0; i < arr.length; i++) {\n        start = fn(start, arr[i]);\n    }\n    return start;\n}\nexport function fold(fn, arr) {\n    const [start, ...rest] = arr;\n    return reduce(fn, start, rest);\n}\nexport const last = (arr) => arr[arr.length - 1];\n//# sourceMappingURL=sequence.js.map","import { defaultTextureSettings } from './asset-lib';\nlet textureCount = 1;\nexport class Texture {\n    constructor(_painter, id = 'Texture' + textureCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this._texture = null;\n        this._data = {};\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        if (this._texture == null) {\n            this._texture = gl.createTexture();\n        }\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\n        if ((data.wrap && data.wrap !== this._data.wrap) ||\n            (data.wrapS && data.wrapS !== this._data.wrapS) ||\n            (data.wrapT && data.wrapT !== this._data.wrapT)) {\n            let wrapS, wrapT;\n            if (data.wrap) {\n                wrapS = wrapT = data.wrap;\n            }\n            else {\n                wrapT = data.wrapT || defaultTextureSettings.wrap;\n                wrapS = data.wrapS || defaultTextureSettings.wrap;\n            }\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[wrapS]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[wrapT]);\n        }\n        else if (!(this._data.wrap || this._data.wrapS || this._data.wrapT)) {\n            this._data.wrap = this._data.wrapT = this._data.wrapS = defaultTextureSettings.wrap;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl[this._data.wrap]);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl[this._data.wrap]);\n        }\n        if (data.magFilter && data.magFilter !== this._data.magFilter) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[data.magFilter]);\n        }\n        else if (!this._data.magFilter) {\n            this._data.magFilter = defaultTextureSettings.magFilter;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl[this._data.magFilter]);\n        }\n        if (data.minFilter && data.minFilter !== this._data.minFilter) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[data.minFilter]);\n        }\n        else if (!this._data.minFilter) {\n            this._data.minFilter = defaultTextureSettings.minFilter;\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl[this._data.minFilter]);\n        }\n        if (data.asset) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data.asset);\n        }\n        if (data.data !== undefined) {\n            gl.texImage2D(gl.TEXTURE_2D, 0, data.type === 'FLOAT' && this._painter.isWebGL2\n                ? gl.RGBA32F\n                : gl.RGBA, data.width, // width and height are required if using custom data\n            data.height, 0, gl.RGBA, gl[data.type || 'UNSIGNED_BYTE'], data.data);\n        }\n        if (data.flipY != null && data.flipY !== this._data.flipY) {\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, data.flipY);\n        }\n        if (data.minFilter && data.minFilter.indexOf('MIPMAP') > 0) {\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        Object.assign(this._data, data);\n        return this;\n    }\n    destroy() {\n        this._painter.gl.deleteTexture(this._texture);\n        this._data = {};\n        this._texture = null;\n    }\n}\n//# sourceMappingURL=texture.js.map","import { equalObject } from 'tvs-libs/dist/utils/predicates';\nimport { Texture } from './texture';\nlet targetCount = 1;\nexport class RenderTarget {\n    constructor(_painter, id = 'Form' + targetCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this.width = 0;\n        this.height = 0;\n        this.antialias = false;\n        this.frameBuffer = null;\n        this.antiAliasFrameBuffer = null;\n        this.antiAliasRenderBuffer = null;\n        this.textures = [];\n        this.depthBuffer = null;\n        this.bufferStructure = [];\n        this._data = {};\n    }\n    update(data) {\n        var _a;\n        const gl = this._painter.gl;\n        const width = data.width || this.width;\n        const height = data.height || this.height;\n        if (!(width && height)) {\n            return this;\n        }\n        else if (width === this.width && height === this.height) {\n            if (!data.bufferStructure)\n                return this;\n            if (data.bufferStructure.length === this.bufferStructure.length &&\n                this.bufferStructure.every((buf, i) => equalObject(buf, data.bufferStructure[i]))) {\n                return this;\n            }\n        }\n        if (this.frameBuffer == null) {\n            this.frameBuffer = gl.createFramebuffer();\n        }\n        if (this.depthBuffer == null) {\n            this.depthBuffer = gl.createRenderbuffer();\n        }\n        if (data.bufferStructure && data.bufferStructure.length) {\n            this.bufferStructure = data.bufferStructure;\n            if (this.bufferStructure.some(t => t.type === 'FLOAT')) {\n                if (this._painter.isWebGL2) {\n                    gl.getExtension('EXT_color_buffer_float');\n                }\n                else {\n                    gl.getExtension('OES_texture_float');\n                }\n            }\n        }\n        const texCount = this.bufferStructure.length || 1;\n        const bufferAttachments = [gl.COLOR_ATTACHMENT0];\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n        if (texCount > 1) {\n            let glx;\n            if (!this._painter.isWebGL2) {\n                glx = gl.getExtension('WEBGL_draw_buffers');\n            }\n            const attachment = this._painter.isWebGL2\n                ? gl.COLOR_ATTACHMENT0\n                : glx.COLOR_ATTACHMENT0_WEBGL;\n            for (let i = 0; i < texCount; i++) {\n                bufferAttachments[i] = attachment + i;\n            }\n            this._painter.isWebGL2\n                ? gl.drawBuffers(bufferAttachments)\n                : glx.drawBuffersWEBGL(bufferAttachments);\n        }\n        this.antialias =\n            texCount === 1 &&\n                this._painter.isWebGL2 &&\n                (data.antialias || ((_a = this._data) === null || _a === void 0 ? void 0 : _a.antialias));\n        if (this.antialias) {\n            const gl2 = gl;\n            if (this.antiAliasFrameBuffer == null) {\n                this.antiAliasFrameBuffer = gl.createFramebuffer();\n            }\n            if (this.antiAliasRenderBuffer == null) {\n                this.antiAliasRenderBuffer = gl.createRenderbuffer();\n            }\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.antiAliasFrameBuffer);\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.antiAliasRenderBuffer);\n            gl2.renderbufferStorageMultisample(gl.RENDERBUFFER, Math.min(4, gl.getParameter(gl2.MAX_SAMPLES)), gl2.RGBA8, width, height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.antiAliasRenderBuffer);\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);\n            gl2.renderbufferStorageMultisample(gl.RENDERBUFFER, Math.min(4, gl.getParameter(gl2.MAX_SAMPLES)), gl.DEPTH_COMPONENT16, width, height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n        }\n        else {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);\n        }\n        for (let i = 0; i < texCount; i++) {\n            if (!this.textures[i]) {\n                this.textures[i] = new Texture(this._painter, this.id + '_Texture' + i);\n            }\n            const texture = this.textures[i];\n            texture.update(Object.assign(Object.assign({ minFilter: 'NEAREST', magFilter: 'NEAREST' }, this.bufferStructure[i]), { data: null, width,\n                height }));\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, bufferAttachments[i], gl.TEXTURE_2D, texture._texture, 0);\n        }\n        if (this.antialias) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.antiAliasFrameBuffer);\n            const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n            if (err !== gl.FRAMEBUFFER_COMPLETE) {\n                console.error('antialias framebuffer error', err, data);\n            }\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n        }\n        const err = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        if (err !== gl.FRAMEBUFFER_COMPLETE) {\n            console.error('framebuffer error', err, data);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        Object.assign(this._data, data);\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        gl.deleteFramebuffer(this.frameBuffer);\n        gl.deleteRenderbuffer(this.depthBuffer);\n        for (const texture of this.textures) {\n            gl.deleteTexture(texture);\n        }\n        if (this.antiAliasFrameBuffer) {\n            gl.deleteFramebuffer(this.antiAliasFrameBuffer);\n        }\n        if (this.antiAliasRenderBuffer) {\n            gl.deleteRenderbuffer(this.antiAliasRenderBuffer);\n        }\n        this.textures = [];\n        this.frameBuffer = null;\n        this.depthBuffer = null;\n        this._data = {};\n        this.bufferStructure = [];\n        this.width = 0;\n        this.height = 0;\n    }\n}\n//# sourceMappingURL=render-target.js.map","export const and = (p1, p2) => (a, b) => p1(a, b) && p2(a, b);\nexport const not = (p) => (...args) => !p(...args);\nexport const defined = a => a != null;\nexport const notEmpty = a => a && a.length;\nexport const unequal = (a, b) => a !== b;\nexport const equal = (a, b) => a === b;\nexport function equalArray(arr1, arr2) {\n    if (arr1 === arr2) {\n        return true;\n    }\n    if (!arr2 || !arr1) {\n        return false;\n    }\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalObject(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (!obj2) {\n        return false;\n    }\n    const k1 = Object.keys(obj1);\n    const k2 = Object.keys(obj2);\n    if (!equalArray(k1, k2)) {\n        return false;\n    }\n    for (const key of k1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=predicates.js.map","import { times } from 'tvs-libs/dist/utils/sequence';\nimport { RenderTarget } from './render-target';\nimport { Texture } from './texture';\nlet frameCount = 1;\nexport class Frame {\n    constructor(_painter, id = 'Frame' + frameCount++) {\n        this._painter = _painter;\n        this.id = id;\n        this.width = 0;\n        this.height = 0;\n        this.layers = [];\n        this._data = {};\n        this._targets = [];\n        this._textures = [];\n    }\n    image(i = 0) {\n        return ((this._targets.length &&\n            this._targets[this._targets.length - 1].textures[i]) ||\n            this._textures[i]);\n    }\n    update(data = {}) {\n        var _a, _b, _c, _d;\n        const gl = this._painter.gl;\n        const layers = Array.isArray(data.layers)\n            ? data.layers\n            : data.layers\n                ? [data.layers]\n                : this.layers;\n        const selfReferencing = data.selfReferencing || this._data.selfReferencing;\n        const layerCount = layers.reduce((count, layer) => count + (layer._uniforms.length || 1), 0);\n        const targetCount = selfReferencing || layerCount > 1 ? 2 : layerCount;\n        const width = data.width || ((_a = data.texture) === null || _a === void 0 ? void 0 : _a.width) ||\n            this._data.width || ((_b = this._data.texture) === null || _b === void 0 ? void 0 : _b.width) ||\n            gl.canvas.width;\n        const height = data.height || ((_c = data.texture) === null || _c === void 0 ? void 0 : _c.height) ||\n            this._data.height || ((_d = this._data.texture) === null || _d === void 0 ? void 0 : _d.height) ||\n            gl.canvas.height;\n        const antialias = data.antialias || this._data.antialias || true;\n        if (targetCount !== this._targets.length) {\n            this._destroyTargets();\n        }\n        const targetData = Object.assign(Object.assign({}, data), { width, height, antialias });\n        if (!this._targets.length && targetCount > 0) {\n            this._targets = times(i => new RenderTarget(this._painter, this.id + '_target' + (i + 1)).update(targetData), targetCount);\n        }\n        else if (this._targets.length) {\n            this._targets.forEach(t => {\n                t.update(targetData);\n            });\n        }\n        if (data.texture) {\n            // Hardcode to one static texture for now\n            if (!this._textures[0]) {\n                this._textures[0] = new Texture(this._painter, this.id + '_Texture0');\n            }\n            data.texture.width = width;\n            data.texture.height = height;\n            this._textures[0].update(data.texture);\n        }\n        Object.assign(this._data, data);\n        this.layers = layers;\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    destroy() {\n        this._destroyTargets();\n        this._textures.forEach(tex => tex.destroy());\n        this._textures = [];\n        this._data = {};\n        this.layers = [];\n        this.width = 0;\n        this.height = 0;\n    }\n    _destroyTargets() {\n        this._targets.forEach(t => t.destroy());\n        this._targets = [];\n    }\n    _swapTargets() {\n        if (this._targets.length > 1) {\n            const tmp = this._targets[0];\n            this._targets[0] = this._targets[1];\n            this._targets[1] = tmp;\n        }\n    }\n}\n//# sourceMappingURL=frame.js.map","let layerCount = 1;\nexport class Layer {\n    constructor(id = 'DrawingLayer' + layerCount++) {\n        this.id = id;\n        this.sketches = [];\n        this._data = {};\n        this._uniforms = [];\n    }\n    update(data) {\n        if (data.sketches) {\n            this.sketches = Array.isArray(data.sketches)\n                ? data.sketches\n                : [data.sketches];\n        }\n        if (data.frag) {\n            const sketch = this.sketches && this.sketches[0];\n            if (sketch) {\n                sketch.shade.update({ frag: data.frag });\n            }\n        }\n        if (data.uniforms) {\n            this._uniforms = Array.isArray(data.uniforms)\n                ? data.uniforms\n                : [data.uniforms];\n        }\n        Object.assign(this._data, data);\n        return this;\n    }\n    destroy() {\n        for (const sketch of this.sketches) {\n            sketch.destroy();\n        }\n        this._data.sketches = [];\n        this._data = {};\n        this._uniforms = [];\n    }\n}\n//# sourceMappingURL=layer.js.map","import { createAttributeSetters, createUniformSetters } from './render-utils';\nlet shadeCounter = 1;\nexport class Shade {\n    constructor(_painter, id = 'Shade' + shadeCounter++) {\n        this._painter = _painter;\n        this.id = id;\n    }\n    update(data) {\n        const gl = this._painter.gl;\n        const fragSource = (data.frag && data.frag.trim()) || this.fragSource;\n        const vertSource = (data.vert && data.vert.trim()) || this.vertSource;\n        if (!(fragSource &&\n            vertSource &&\n            (fragSource !== this.fragSource || vertSource !== this.vertSource))) {\n            return this;\n        }\n        this.destroy();\n        if (fragSource.indexOf('GL_EXT_draw_buffers') >= 0) {\n            gl.getExtension('WEBGL_draw_buffers');\n        }\n        const program = gl.createProgram();\n        const frag = gl.createShader(gl.FRAGMENT_SHADER);\n        const vert = gl.createShader(gl.VERTEX_SHADER);\n        if (!(program && vert && frag))\n            return;\n        this._program = program;\n        this._frag = frag;\n        this._vert = vert;\n        gl.attachShader(program, vert);\n        gl.attachShader(program, frag);\n        gl.shaderSource(vert, vertSource);\n        gl.shaderSource(frag, fragSource);\n        gl.compileShader(vert);\n        gl.compileShader(frag);\n        if (!gl.getShaderParameter(vert, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Vertex Shader!\\n', gl.getShaderInfoLog(vert), addLineNumbers(vertSource));\n        }\n        if (!gl.getShaderParameter(frag, gl.COMPILE_STATUS)) {\n            console.error('Error Compiling Fragment Shader!\\n', gl.getShaderInfoLog(frag), addLineNumbers(fragSource));\n        }\n        gl.linkProgram(program);\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n            const lastError = gl.getProgramInfoLog(program);\n            console.error('Error in program linking:', lastError);\n        }\n        this._uniformSetters = createUniformSetters(gl, program);\n        this._attributeSetters = createAttributeSetters(gl, program);\n        this.fragSource = fragSource;\n        this.vertSource = vertSource;\n        return this;\n    }\n    destroy() {\n        const gl = this._painter.gl;\n        gl.deleteProgram(this._program);\n        gl.deleteShader(this._frag);\n        gl.deleteShader(this._vert);\n        this.vertSource = undefined;\n        this.fragSource = undefined;\n        this._attributeSetters = {};\n        this._uniformSetters = {};\n    }\n}\nfunction addLineNumbers(src) {\n    return src\n        .trim()\n        .split('\\n')\n        .map((line, i) => i + 1 + ': ' + line)\n        .join('\\n');\n}\n//# sourceMappingURL=shade.js.map","let sketchCounter = 1;\nexport class Sketch {\n    constructor(id = 'Sketch' + sketchCounter++) {\n        this.id = id;\n        this._uniforms = [];\n    }\n    update(data) {\n        if (data.drawSettings) {\n            this._drawSettings = data.drawSettings;\n        }\n        if (data.form) {\n            this.form = data.form;\n        }\n        if (data.shade) {\n            this.shade = data.shade;\n        }\n        if (data.uniforms) {\n            this._uniforms = Array.isArray(data.uniforms)\n                ? data.uniforms\n                : [data.uniforms];\n        }\n        return this;\n    }\n    destroy() {\n        this.form && this.form.destroy();\n        this.shade && this.shade.destroy();\n        this._drawSettings = undefined;\n        this._uniforms = [];\n    }\n}\n//# sourceMappingURL=sketch.js.map","import { defaultForms, defaultShaders, getDefaultLayerSettings, } from './asset-lib';\nimport { Form } from './form';\nimport { Frame } from './frame';\nimport { Layer } from './layer';\nimport { applyDrawSettings, revertDrawSettings } from './render-utils';\nimport { Shade } from './shade';\nimport { Sketch } from './sketch';\nimport { resizeCanvas } from './utils/context';\nexport class Painter {\n    constructor(canvas, opts = {}) {\n        this.canvas = canvas;\n        this.isWebGL2 = true;\n        this.maxBufferSamples = 0;\n        let gl = null;\n        if (!opts.useWebGL1) {\n            gl =\n                canvas.getContext('webgl2', opts) ||\n                    canvas.getContext('experimental-webgl2', opts);\n        }\n        if (gl == null) {\n            this.isWebGL2 = false;\n            gl =\n                canvas.getContext('webgl', opts) ||\n                    canvas.getContext('experimental-webgl', opts);\n        }\n        if (gl == null) {\n            throw Error('Cannot initialize WebGL.');\n        }\n        this.gl = gl;\n        this.sizeMultiplier = opts.sizeMultiplier || 1;\n        if (this.isWebGL2) {\n            this.maxBufferSamples = gl.getParameter(gl.MAX_SAMPLES);\n        }\n        this.resize();\n        applyDrawSettings(gl, getDefaultLayerSettings(gl));\n        this._renderQuad = this.createForm().update(defaultForms.renderQuad);\n        this._staticSketch = this.createFlatSketch();\n    }\n    resize() {\n        resizeCanvas(this.gl.canvas, this.sizeMultiplier);\n        return this;\n    }\n    destroy() {\n        this._staticSketch.destroy();\n        this._renderQuad.destroy();\n    }\n    updateDrawSettings(drawSettings) {\n        applyDrawSettings(this.gl, Object.assign({}, drawSettings));\n        return this;\n    }\n    createForm(id) {\n        return new Form(this, id);\n    }\n    createShade(id) {\n        return new Shade(this, id);\n    }\n    createSketch(id) {\n        return new Sketch(id);\n    }\n    createFlatSketch(id) {\n        const s = this.createSketch(id);\n        return s.update({\n            form: this._renderQuad,\n            shade: this.createShade(s.id + '_defaultShade').update(defaultShaders.basicEffect),\n        });\n    }\n    createFrame(id) {\n        return new Frame(this, id);\n    }\n    createLayer(id) {\n        return new Layer(id);\n    }\n    createEffect(id) {\n        const l = this.createLayer(id);\n        return l.update({\n            sketches: this.createFlatSketch(l.id + '_effectSketch'),\n        });\n    }\n    draw(sketch, globalUniforms) {\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        draw(gl, sketch, globalUniforms);\n        return this;\n    }\n    compose(...frames) {\n        for (const frame of frames) {\n            renderFrame(this.gl, frame);\n        }\n        return this;\n    }\n    display(frame, idx = 0) {\n        return this.draw(this._staticSketch, { source: frame.image(idx) });\n    }\n}\nfunction draw(gl, sketch, globalUniforms, sources) {\n    const { shade: shade, form: form, _drawSettings: drawSettings, _uniforms: uniforms, } = sketch;\n    if (!(shade && form)) {\n        throw Error('cannot draw, shader or geometry are not set');\n    }\n    gl.useProgram(shade._program);\n    shadeForm(shade, form);\n    if (globalUniforms) {\n        shadeUniforms(shade, globalUniforms, sources);\n    }\n    if (drawSettings) {\n        applyDrawSettings(gl, drawSettings);\n    }\n    for (let i = 0; i < (uniforms.length || 1); i++) {\n        drawInstance(gl, sketch, uniforms[i], sources);\n    }\n    if (drawSettings) {\n        revertDrawSettings(gl, drawSettings);\n    }\n}\nfunction drawInstance(gl, sketch, uniforms, sources) {\n    if (uniforms) {\n        shadeUniforms(sketch.shade, uniforms, sources);\n    }\n    if (sketch.form._elements && sketch.form._elements.glType != null) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sketch.form._elements.buffer);\n        gl.drawElements(sketch.form._drawType, sketch.form._itemCount, sketch.form._elements.glType, 0);\n    }\n    else {\n        gl.drawArrays(sketch.form._drawType, 0, sketch.form._itemCount);\n    }\n}\nfunction shadeForm(shade, form) {\n    for (const name in form._attribs) {\n        const setter = shade._attributeSetters[name];\n        if (setter) {\n            setter.setter(form._attribs[name]);\n        }\n    }\n}\nfunction shadeUniforms(shade, uniforms, sources) {\n    for (const name in uniforms) {\n        const setter = shade._uniformSetters[name];\n        if (setter) {\n            let value = uniforms[name];\n            if (typeof value === 'function') {\n                value = value();\n            }\n            if (typeof value === 'string' && sources) {\n                setter.setter(sources[value]);\n            }\n            else {\n                setter.setter(value);\n            }\n        }\n    }\n}\nfunction renderLayer(gl, layer, uniforms, target, source) {\n    if (target) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.antialias ? target.antiAliasFrameBuffer : target.frameBuffer);\n        gl.viewport(0, 0, target.width, target.height);\n    }\n    else {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    }\n    if (layer._data.drawSettings) {\n        applyDrawSettings(gl, layer._data.drawSettings);\n    }\n    for (const sketch of layer.sketches) {\n        draw(gl, sketch, uniforms, source);\n    }\n    if (target && target.antialias) {\n        const gl2 = gl;\n        // \"blit\" the cube into the color buffer, which adds antialiasing\n        gl.bindFramebuffer(gl2.READ_FRAMEBUFFER, target.antiAliasFrameBuffer);\n        gl.bindFramebuffer(gl2.DRAW_FRAMEBUFFER, target.frameBuffer);\n        gl2.clearBufferfv(gl2.COLOR, 0, [1.0, 1.0, 1.0, 1.0]);\n        gl2.blitFramebuffer(0, 0, target.width, target.height, 0, 0, target.width, target.height, gl.COLOR_BUFFER_BIT, gl.LINEAR);\n    }\n    if (layer._data.drawSettings) {\n        revertDrawSettings(gl, layer._data.drawSettings);\n    }\n}\nfunction renderFrame(gl, frame) {\n    for (let i = 0; i < frame.layers.length; i++) {\n        const layer = frame.layers[i];\n        const layerPasses = layer._uniforms.length || 1;\n        for (let j = 0; j < layerPasses; j++) {\n            const target = frame._targets[0];\n            const sources = i + j === 0 && frame._textures.length\n                ? frame._textures\n                : frame._targets[1] && frame._targets[1].textures;\n            renderLayer(gl, layer, layer._uniforms[j], target, sources);\n            frame._swapTargets();\n        }\n    }\n}\n//# sourceMappingURL=painter.js.map","export function makeClear(gl, ...clearArray) {\n    return clearArray.reduce((res, item) => res | gl[item.toUpperCase() + '_BUFFER_BIT'], 0);\n}\nexport function setBlendFunc(gl, blendOpts) {\n    gl.blendFunc.apply(gl, blendOpts.map(opt => gl[opt.toUpperCase()]));\n}\n/**\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] optional `window.devicePixelRatio`.\n * @return {boolean} true if the canvas was resized.\n */\nexport function resizeCanvas(canvas, multiplier = 1) {\n    let width = canvas.width;\n    let height = canvas.height;\n    if ('clientWidth' in canvas) {\n        const rect = canvas.getBoundingClientRect();\n        width = (rect.width * multiplier) | 0;\n        height = (rect.height * multiplier) | 0;\n    }\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=context.js.map","export const Buttons = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2,\n};\nexport function pointer(opts, callback) {\n    const cb = callback || opts;\n    const { element = document, enableRightButton, holdDelay = 400, holdRadius = 5, } = opts;\n    const state = {\n        pressed: {},\n        drag: { x: 0, y: 0, dX: 0, dY: 0, xMax: 0, yMax: 0 },\n        dragging: false,\n        holding: false,\n    };\n    let x = 0, y = 0, oX = 0, oY = 0, timeout = null;\n    function onPointerDown(e) {\n        if (e.isPrimary) {\n            state.pressed[e.button] = e;\n            x = oX = e.clientX;\n            y = oY = e.clientY;\n            state.dragging = true;\n            timeout != null && clearTimeout(timeout);\n            timeout = setTimeout(() => {\n                if (state.drag.xMax < holdRadius && state.drag.yMax < holdRadius) {\n                    state.holding = true;\n                    cb(state);\n                }\n            }, holdDelay);\n        }\n        else {\n            state.pressed[Buttons.RIGHT] = e;\n        }\n        cb(state);\n    }\n    function onPointerUp(_e) {\n        state.pressed = {};\n        delete state.drag.event;\n        state.drag.x = 0;\n        state.drag.y = 0;\n        state.drag.dX = 0;\n        state.drag.dY = 0;\n        state.drag.xMax = 0;\n        state.drag.yMax = 0;\n        state.dragging = false;\n        state.holding = false;\n        timeout != null && clearTimeout(timeout);\n        timeout = null;\n        cb(state);\n    }\n    function onPointerMove(e) {\n        if (state.dragging && e.isPrimary) {\n            state.drag.event = e;\n            state.drag.x = x - e.clientX;\n            state.drag.y = y - e.clientY;\n            state.drag.dX = oX - e.clientX;\n            state.drag.dY = oY - e.clientY;\n            state.drag.xMax = Math.max(Math.abs(state.drag.x), state.drag.xMax);\n            state.drag.yMax = Math.max(Math.abs(state.drag.y), state.drag.yMax);\n            oX = e.clientX;\n            oY = e.clientY;\n            cb(state);\n        }\n    }\n    function preventDefault(e) {\n        e.preventDefault();\n    }\n    element.addEventListener('pointerdown', onPointerDown);\n    document.addEventListener('pointermove', onPointerMove);\n    document.addEventListener('pointerup', onPointerUp);\n    document.addEventListener('pointerleave', onPointerUp);\n    document.addEventListener('pointercancel', onPointerUp);\n    if (enableRightButton) {\n        element.addEventListener('contextmenu', preventDefault);\n    }\n    cb(state);\n    return function destroy() {\n        element.removeEventListener('pointerdown', onPointerDown);\n        document.removeEventListener('pointermove', onPointerMove);\n        document.removeEventListener('pointerup', onPointerUp);\n        document.removeEventListener('pointerleave', onPointerUp);\n        document.removeEventListener('pointercancel', onPointerUp);\n        if (enableRightButton) {\n            element.removeEventListener('contextmenu', preventDefault);\n        }\n    };\n}\nexport function pointerObserver(opts = {}) {\n    const observer = {\n        Buttons,\n        state: {},\n        destroy: () => { },\n    };\n    function callback(state) {\n        observer.state = state;\n    }\n    observer.destroy = pointer(opts, callback);\n    return observer;\n}\n//# sourceMappingURL=pointer.js.map","import { once } from './scheduler'\nimport { windowSize } from 'tvs-libs/dist/events/dom'\nimport { keyboard, KeyState } from 'tvs-libs/dist/events/keyboard'\nimport { deepOverride } from 'tvs-libs/dist/utils/object'\nimport { GL, PainterOptions } from 'tvs-painter'\nimport { Form } from 'tvs-painter/dist/form'\nimport { Frame } from 'tvs-painter/dist/frame'\nimport { Layer } from 'tvs-painter/dist/layer'\nimport { Painter } from 'tvs-painter/dist/painter'\nimport { Shade } from 'tvs-painter/dist/shade'\nimport { Sketch } from 'tvs-painter/dist/sketch'\nimport { PointerState, pointer } from 'tvs-libs/dist/events/pointer'\nimport { getPackedSettings } from 'http2'\n\n// === Painter ===\n\nlet currentCanvas: HTMLCanvasElement\nlet painter: Painter\n\nconst forms: { [id: string]: Form } = {}\nfunction getForm(id: string) {\n\treturn forms[id] || (forms[id] = painter.createForm('Form_' + id))\n}\n\nconst shades: { [id: string]: Shade } = {}\nfunction getShade(id: string) {\n\treturn shades[id] || (shades[id] = painter.createShade('Shade_' + id))\n}\n\nconst sketches: { [id: string]: Sketch } = {}\nfunction getSketch(id: string) {\n\treturn sketches[id] || (sketches[id] = painter.createSketch('Sketch_' + id))\n}\n\nconst layers: { [id: string]: Layer } = {}\nfunction getLayer(id: string) {\n\treturn layers[id] || (layers[id] = painter.createLayer('Layer_' + id))\n}\n\nconst frames: { [id: string]: Frame } = {}\nfunction getFrame(id: string) {\n\treturn frames[id] || (frames[id] = painter.createFrame('Frame_' + id))\n}\n\nconst effects: { [id: string]: Layer } = {}\nfunction getEffect(id: string) {\n\treturn effects[id] || (effects[id] = painter.createEffect('Effect_' + id))\n}\n\n// === State ===\n\nexport interface BaseState {\n\tdevice: {\n\t\ttpf: number\n\t\tcanvas: HTMLCanvasElement\n\t\tpointer: PointerState\n\t\tkeys: KeyState\n\t\tsizeMultiplier: number\n\t}\n}\n\nconst state: BaseState = {\n\tdevice: {\n\t\ttpf: 0,\n\t\tsizeMultiplier: 1,\n\t},\n} as BaseState\n;(window as any).state = state\n\n// === Events ===\n\ntype ActionHandler<S extends BaseState = BaseState> = (state: S) => void\n\nconst eventHandlers: {\n\t[event: string]: { [id: string]: ActionHandler<any> }\n} = {}\n\nexport const baseEvents = {\n\tFRAME: 'frame',\n\tRESIZE: 'resize',\n}\n\n// === Context ===\n\nlet cancelWindow: () => void\nlet cancelPointer: () => void\nlet cancelKeys: () => void\n\nexport function getPainterContext<S extends BaseState>(\n\tcanvas: HTMLCanvasElement,\n\topts?: PainterOptions,\n): PainterContext<S> {\n\tif (canvas !== currentCanvas) {\n\t\tcurrentCanvas = canvas\n\n\t\tpainter = new Painter(canvas, opts)\n\n\t\tstate.device.canvas = canvas\n\n\t\tcancelWindow && cancelWindow()\n\t\tcancelPointer && cancelPointer()\n\t\tcancelKeys && cancelKeys()\n\n\t\tcancelWindow = windowSize(() =>\n\t\t\tonce(() => {\n\t\t\t\tpainter.sizeMultiplier = state.device.sizeMultiplier\n\t\t\t\tpainter.resize()\n\t\t\t\temit(baseEvents.RESIZE)\n\t\t\t}, 'resize'),\n\t\t)\n\n\t\tcancelPointer = pointer(\n\t\t\t{\n\t\t\t\telement: canvas,\n\t\t\t\tenableRightButton: true,\n\t\t\t\tholdRadius: 7,\n\t\t\t\tholdDelay: 250,\n\t\t\t},\n\t\t\t(m) => (state.device.pointer = m),\n\t\t)\n\n\t\tcancelKeys = keyboard((k) => (state.device.keys = k))\n\t}\n\n\treturn {\n\t\tpainter,\n\t\tgl: painter.gl,\n\t\tgetForm,\n\t\tgetShade,\n\t\tgetSketch,\n\t\tgetLayer,\n\t\tgetFrame,\n\t\tgetEffect,\n\n\t\tstate: state as S,\n\n\t\tget,\n\t\tset,\n\t\tlisten,\n\t\temit,\n\t}\n\n\tfunction get<K extends keyof S = keyof S>(prop: K): S[K] {\n\t\treturn (state as S)[prop]\n\t}\n\n\tfunction set<K extends keyof S = keyof S>(\n\t\tkey: K,\n\t\tval: S[K],\n\t\topts?: { reset: any },\n\t) {\n\t\tconst s = state as S\n\t\tif (s[key]) {\n\t\t\tconst reset = opts && opts.reset\n\t\t\tif (reset !== true) {\n\t\t\t\tval = deepOverride(val, s[key], { ignore: reset })\n\t\t\t}\n\t\t}\n\t\ts[key] = val\n\t}\n\n\tfunction listen(id: string, event: string, s: ActionHandler<S>) {\n\t\tif (!eventHandlers[event]) eventHandlers[event] = {}\n\t\teventHandlers[event][id] = s\n\t}\n\n\tfunction emit(event: string) {\n\t\tconst e = eventHandlers[event]\n\t\tif (e)\n\t\t\tfor (const id in e) {\n\t\t\t\te[id](state as S)\n\t\t\t}\n\t}\n}\n\nexport interface PainterContext<S extends BaseState = BaseState> {\n\tpainter: Painter\n\tgl: GL\n\tgetForm: typeof getForm\n\tgetShade: typeof getShade\n\tgetSketch: typeof getSketch\n\tgetLayer: typeof getLayer\n\tgetFrame: typeof getFrame\n\tgetEffect: typeof getEffect\n\tstate: S\n\tget<K extends keyof S = keyof S>(prop: K): S[K]\n\tset<K extends keyof S = keyof S>(\n\t\tkey: K,\n\t\tval: S[K],\n\t\topts?: { reset: any },\n\t): void\n\tlisten(id: string, event: string, s: ActionHandler<S>): void\n\temit(event: string): void\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { baseEvents, PainterContext } from './painterState'\n\nexport const linear = (step: number) => step\n\nexport class Transition {\n\teaseFn = linear\n\tduration = 1000\n\tdelay = 0\n\trepeat = false\n\tonComplete?: () => void\n\tonStart?: () => void\n\tonUpdate?: (step: number) => void\n\n\tprogress: number\n\toldValue: number\n\n\tdone = false\n\n\tconstructor(options: Partial<Transition>) {\n\t\tObject.assign(this, options)\n\n\t\tthis.progress = -this.delay\n\t\tthis.oldValue = this.easeFn(0)\n\t}\n\n\tupdate(step: number) {\n\t\tif (this.done) {\n\t\t\treturn 0\n\t\t}\n\n\t\tthis.progress += step\n\n\t\tif (this.progress <= 0) {\n\t\t\treturn 0\n\t\t}\n\n\t\tif (this.progress <= step && this.onStart) {\n\t\t\tthis.onStart()\n\t\t}\n\n\t\tconst newValue =\n\t\t\tthis.progress < this.duration\n\t\t\t\t? this.easeFn(this.progress / this.duration)\n\t\t\t\t: this.easeFn(1)\n\n\t\tconst value = newValue - this.oldValue\n\t\tthis.oldValue = newValue\n\n\t\tif (this.onUpdate) this.onUpdate(value)\n\n\t\tif (this.progress >= this.duration) {\n\t\t\tif (\n\t\t\t\tthis.repeat === true ||\n\t\t\t\t(typeof this.repeat === 'number' && this.repeat > 0)\n\t\t\t) {\n\t\t\t\tif (typeof this.repeat === 'number') {\n\t\t\t\t\tthis.repeat--\n\t\t\t\t}\n\t\t\t\tthis.progress = 0\n\t\t\t} else {\n\t\t\t\tif (this.onComplete) {\n\t\t\t\t\tthis.onComplete()\n\t\t\t\t}\n\t\t\t\tthis.done = true\n\t\t\t}\n\t\t}\n\n\t\treturn value\n\t}\n}\n\nlet transitions: Transition[] = []\nlet initialized = false\n\nexport function pushTransition(\n\tQ: PainterContext,\n\ttransitionProps: Partial<Transition>,\n) {\n\tif (!initialized) {\n\t\tQ.listen('_transitionRunner', baseEvents.FRAME, (s) => {\n\t\t\ttransitions = transitions.filter((t) => !t.done)\n\t\t\ttransitions.forEach((t) => t.update(s.device.tpf))\n\t\t})\n\t\tinitialized = true\n\t}\n\n\tconst t = new Transition(transitionProps)\n\ttransitions.push(t)\n\treturn t\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function sign(num) {\n    if (num > 0) {\n        return 1;\n    }\n    else if (num < 0) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function lerp(step, start, end) {\n    return start + step * (end - start);\n}\nexport function clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n}\nexport const DEG_TO_RAD_FACTOR = Math.PI / 180;\nexport function degToRad(degrees) {\n    return degrees * DEG_TO_RAD_FACTOR;\n}\n//# sourceMappingURL=core.js.map","import {\n\tbaseEvents,\n\tBaseState,\n\tgetPainterContext,\n} from '../shared-utils/painterState'\nimport { Tiles } from './state/tiles'\nimport { ViewPort } from './viewport'\n\nexport interface State extends BaseState {\n\tviewPort: ViewPort\n\ttiles: Tiles\n}\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nexport const Q = getPainterContext<State>(canvas)\n\nexport const events = {\n\t...baseEvents,\n\tINIT: 'init',\n\tON_IMAGES_LOADED: 'on_image_loaded',\n\tNEW_ACTIVE_TILES: 'new_active_tiles',\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export function windowSize(callback) {\n    function resize() {\n        callback({\n            width: window.innerWidth,\n            height: window.innerHeight,\n        });\n    }\n    window.addEventListener('resize', resize);\n    resize();\n    return function stop() {\n        window.removeEventListener('resize', resize);\n    };\n}\nexport function windowSizeObserver() {\n    const state = {\n        size: { width: 0, height: 0 },\n    };\n    const destroy = windowSize(s => (state.size = s));\n    return { state, destroy };\n}\n//# sourceMappingURL=dom.js.map","import { Unpacked } from 'tvs-libs/dist/types'\n\nexport interface TileSpec {\n\tfile: string\n\tconnections: [number, number, number, number]\n}\n\nexport const specs = {\n\tlbA1: {\n\t\tfile: 'tile_lb_A_1',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbA2: {\n\t\tfile: 'tile_lb_A_2',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbA3: {\n\t\tfile: 'tile_lb_A_3',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB1: {\n\t\tfile: 'tile_lb_B_1',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB2: {\n\t\tfile: 'tile_lb_B_2',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlbB3: {\n\t\tfile: 'tile_lb_B_3',\n\t\tconnections: [0, 0, 1, 1]\n\t},\n\tlrA1: {\n\t\tfile: 'tile_lr_A_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrB1: {\n\t\tfile: 'tile_lr_B_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrC1: {\n\t\tfile: 'tile_lr_C_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD1: {\n\t\tfile: 'tile_lr_D_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD2: {\n\t\tfile: 'tile_lr_D_2',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrD3: {\n\t\tfile: 'tile_lr_D_3',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE1: {\n\t\tfile: 'tile_lr_E_1',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE2: {\n\t\tfile: 'tile_lr_E_2',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrE3: {\n\t\tfile: 'tile_lr_E_3',\n\t\tconnections: [0, 1, 0, 1]\n\t},\n\tlrtbA1: {\n\t\tfile: 'tile_lrtb_A_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tlrtbB1: {\n\t\tfile: 'tile_lrtb_B_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tlrtbC1: {\n\t\tfile: 'tile_lrtb_C_1',\n\t\tconnections: [1, 1, 1, 1]\n\t},\n\tltbA1: {\n\t\tfile: 'tile_ltb_A_1',\n\t\tconnections: [1, 0, 1, 1]\n\t},\n\tltbB1: {\n\t\tfile: 'tile_ltb_B_1',\n\t\tconnections: [1, 0, 1, 1]\n\t}\n} as { [k: string]: TileSpec }\n\nexport const sets = [\n\t{\n\t\tlbA1: 1,\n\t\tlbA2: 1,\n\t\tlbA3: 1,\n\t\tlbB1: 1,\n\t\tlbB2: 1,\n\t\tlbB3: 1,\n\t\tlrD1: 1,\n\t\tlrD2: 1,\n\t\tlrD3: 1,\n\t\tlrE1: 1,\n\t\tlrE2: 1,\n\t\tlrE3: 1,\n\t\tlrtbA1: 1,\n\t\tlrtbB1: 1,\n\t\tlrtbC1: 1,\n\t\tltbA1: 1,\n\t\tltbB1: 1\n\t}\n]\n\nexport type Set = Unpacked<typeof sets>\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { mat4, quat } from 'gl-matrix'\nimport { pushTransition } from '../../shared-utils/transitions'\nimport { sign } from 'tvs-libs/dist/math/core'\nimport { getRollQuat, getYawQuat } from 'tvs-libs/dist/math/geometry'\nimport { normalRand, randInt } from 'tvs-libs/dist/math/random'\nimport { doTimes, pickRandom, times } from 'tvs-libs/dist/utils/sequence'\nimport { events, Q } from '../context'\nimport { Set, sets, specs, TileSpec } from './data'\nimport { mapObj } from 'tvs-libs/dist/utils/object'\n\ntype Color = number[]\ntype Position = [number, number]\n\nexport class Tiles {\n\ttileSize = 3\n\ttileDensity = 11\n\tcolor = [normalRand(), normalRand(), normalRand()]\n\tset = pickRandom(sets)\n\tanimationDuration = 1700\n\tanimationChance = 0.01\n\tliftHeight = 1\n\tsinkHeight = -100\n\tflipped = false\n\tcolCount = 0\n\trowCount = 0\n\timages: { [id: string]: HTMLImageElement } = {}\n\tactiveTiles: TileState[] = []\n\tgrid: TileState[][] = []\n}\n\nclass TileState {\n\tgridIndex: Position = [0, 0]\n\tpos: Position = [0, 0]\n\tposOffset: Position = [0, 0]\n\ttransform = mat4.create()\n\ttileSpecId: string\n\ttileSpec: TileSpec\n\tturn: number\n\troll: number\n\tcolor: Color\n\tneighbours: (TileState | undefined)[] = []\n\tflipped = false\n\tyawDirection = 0\n\tyawDelay = 0\n\tyaw = 0\n\theight = 0\n\trotation = quat.create()\n\tupdateTransform = false\n\tconnections = [0, 0, 0, 0]\n\n\tconstructor(\n\t\tset: { [id: string]: number },\n\t\tbaseColor: Color,\n\t\tspecs: { [id: string]: TileSpec },\n\t) {\n\t\tconst [r, g, b] = baseColor\n\t\tthis.color = [\n\t\t\tr + (normalRand() - 0.6) * 0.25,\n\t\t\tg + (normalRand() - 0.6) * 0.25,\n\t\t\tb + (normalRand() - 0.6) * 0.25,\n\t\t]\n\t\tthis.tileSpecId = pickRandom(Object.keys(set))\n\t\tthis.turn = randInt(3)\n\t\tthis.tileSpec = specs[this.tileSpecId]\n\n\t\tthis.roll = (this.turn * Math.PI) / 2\n\t}\n\n\tisConnected() {\n\t\treturn !!(this.height < 0.1 && this.height > -0.1)\n\t}\n\n\tconnect() {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst index = (i + 4 - this.turn) % 4\n\t\t\tconst side = this.tileSpec.connections[index]\n\t\t\tconst neighbour = this.neighbours[i]\n\t\t\tconst nIndex = neighbour ? (i + 6 - neighbour.turn) % 4 : 0\n\t\t\tconst current = this.connections[index]\n\t\t\tlet next: number\n\t\t\tif (this.isConnected() && neighbour && neighbour.isConnected()) {\n\t\t\t\tconst neighbourSide = neighbour.tileSpec.connections[nIndex]\n\t\t\t\tnext = side && neighbourSide\n\t\t\t} else {\n\t\t\t\tnext = 0\n\t\t\t}\n\t\t\tif (current !== next) {\n\t\t\t\tnext === 0\n\t\t\t\t\t? pushTransition(Q, {\n\t\t\t\t\t\t\tduration: 300,\n\t\t\t\t\t\t\tonUpdate: (p) => {\n\t\t\t\t\t\t\t\tthis.connections[index] = Math.max(\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\tthis.connections[index] - p,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\t\t\t\tneighbour.connections[nIndex] = Math.max(\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tneighbour.connections[nIndex] - p,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  })\n\t\t\t\t\t: pushTransition(Q, {\n\t\t\t\t\t\t\tduration: 300,\n\t\t\t\t\t\t\tonUpdate: (p) => {\n\t\t\t\t\t\t\t\tthis.connections[index] = Math.min(\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\tthis.connections[index] + p,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\t\t\t\tneighbour.connections[nIndex] = Math.min(\n\t\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t\tneighbour.connections[nIndex] + p,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  })\n\t\t\t}\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tconst neighbour = this.neighbours[i]\n\t\t\tconst nIndex = neighbour ? (i + 6 - neighbour.turn) % 4 : 0\n\t\t\tpushTransition(Q, {\n\t\t\t\tduration: 300,\n\t\t\t\tonUpdate: (p) => {\n\t\t\t\t\tthis.connections[i] = Math.max(0, this.connections[i] - p)\n\t\t\t\t\tif (neighbour) {\n\t\t\t\t\t\tneighbour.connections[nIndex] = Math.max(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tneighbour.connections[nIndex] - p,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n}\n\nconst SIDES_INDEX = {\n\tUP: 0,\n\tRIGHT: 1,\n\tDOWN: 2,\n\tLEFT: 3,\n}\n\nfunction rotateHalf(part: number) {\n\treturn -Math.cos(part * Math.PI * 2) * 0.5 + 0.5\n}\n\nfunction smooth(part: number) {\n\treturn -Math.cos(part * Math.PI) * 0.5 + 0.5\n}\n\nfunction acc(part: number) {\n\treturn part * part * part * part\n}\n\nfunction slow(part: number) {\n\treturn Math.pow(part, 0.25)\n}\n\n// ===== basic properties =====\n\nQ.listen('tiles', events.INIT, ({ tiles: t }) => {\n\tt.images = {}\n\tPromise.all(\n\t\tObject.values(\n\t\t\tmapObj(\n\t\t\t\t(_n, key) =>\n\t\t\t\t\tnew Promise((res) => {\n\t\t\t\t\t\tconst img = new Image()\n\t\t\t\t\t\timg.onload = res\n\t\t\t\t\t\timg.src = 'img/' + specs[key].file + '.jpg'\n\t\t\t\t\t\tt.images[key] = img\n\t\t\t\t\t}),\n\t\t\t\tt.set,\n\t\t\t),\n\t\t),\n\t).then(() => {\n\t\tQ.emit(events.ON_IMAGES_LOADED)\n\t\tQ.emit(events.RESIZE)\n\t})\n\treturn\n})\n\nQ.listen('tiles', events.RESIZE, ({ tiles: t, ...s }) => {\n\tconst canvas = s.device.canvas\n\tconst aspect = canvas.width / canvas.height\n\tt.colCount = Math.floor(Math.pow(canvas.width / 1000, 0.5) * t.tileDensity)\n\tt.rowCount = Math.ceil(t.colCount / aspect)\n\tmakeGrid(t.colCount, t.rowCount, t.color, t.set, t.grid)\n\tcreateActiveTiles(t)\n})\n\nQ.listen('tiles', events.FRAME, ({ tiles: t }) => {\n\tupdateTiles(t)\n})\n\nQ.set('tiles', new Tiles())\n\n// ===== primary state =====\n\nfunction makeGrid(\n\tnewWidth: number,\n\tnewHeight: number,\n\tcolor: Color,\n\tset: Set,\n\tgrid: TileState[][],\n) {\n\tconst width = grid.length\n\tconst height = (grid[0] && grid[0].length) || 0\n\n\tconst heightDiff = newHeight - height\n\tconst widthDiff = newWidth - width\n\n\tconst createTile = () => new TileState(set, color, specs)\n\n\t// create new grid columns left and right\n\tif (widthDiff > 0) {\n\t\tconst left = Math.floor(widthDiff / 2)\n\t\tconst right = widthDiff - left\n\t\tconst currentHeight = Math.max(newHeight, height)\n\n\t\tconst newCol = () => times(createTile, currentHeight)\n\n\t\tgrid.unshift(...times(newCol, left))\n\t\tgrid.push(...times(newCol, right))\n\t}\n\n\t// create new gid rows at top and bottom\n\tif (heightDiff > 0) {\n\t\tconst up = Math.floor(heightDiff / 2)\n\t\tconst down = heightDiff - up\n\n\t\tgrid.forEach((row) => {\n\t\t\trow.unshift(...times(createTile, up))\n\t\t\trow.push(...times(createTile, down))\n\t\t})\n\t}\n\n\tif (widthDiff > 0 || heightDiff > 0) {\n\t\tfor (let x = 0; x < grid.length; x++) {\n\t\t\tfor (let y = 0; y < grid[x].length; y++) {\n\t\t\t\tconst tile = grid[x][y]\n\t\t\t\ttile.gridIndex = [x, y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.LEFT] = grid[x - 1] && grid[x - 1][y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.RIGHT] = grid[x + 1] && grid[x + 1][y]\n\t\t\t\ttile.neighbours[SIDES_INDEX.UP] = grid[x][y - 1]\n\t\t\t\ttile.neighbours[SIDES_INDEX.DOWN] = grid[x][y + 1]\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction createActiveTiles(t: Tiles) {\n\tconst tiles = (t.activeTiles = [] as TileState[])\n\tconst width = t.grid.length\n\tconst height = t.grid[0].length\n\tconst firstLeftIndex = -Math.floor(width / 2)\n\tconst firstUpIndex = -Math.floor(height / 2)\n\tconst widthDelta = width - t.colCount\n\tlet activeCols = Math.floor(widthDelta / 2)\n\tif ((width + 1) % 2 && widthDelta % 2) activeCols++\n\tconst activeRows = Math.floor((height - t.rowCount) / 2)\n\tconst offX = ((t.colCount + 1) % 2) * 0.5\n\tconst offY = (t.rowCount % 2) * 0.5 + 0.5\n\n\tdoTimes((x) => {\n\t\tdoTimes((y) => {\n\t\t\tconst tile = t.grid[x + activeCols][y + activeRows]\n\t\t\tif (tile) {\n\t\t\t\tconst [iX, iY] = tile.gridIndex\n\t\t\t\ttile.posOffset = [offX, offY]\n\t\t\t\ttile.updateTransform = true\n\t\t\t\ttile.yawDelay = (x + (t.rowCount - y + 1)) * 100\n\t\t\t\ttile.pos = [firstLeftIndex + iX, firstUpIndex + iY]\n\t\t\t\ttiles.push(tile)\n\t\t\t}\n\t\t}, t.rowCount)\n\t}, t.colCount)\n\n\ttiles.forEach((t) => t.connect())\n\n\tQ.emit(events.NEW_ACTIVE_TILES)\n}\n\nexport function updateTiles(t: Tiles) {\n\tconst tiles = t.activeTiles\n\tconst duration = t.animationDuration\n\tconst chance = t.animationChance / t.activeTiles.length\n\tconst offset = t.tileSize * 0.95\n\n\tfor (const i in tiles) {\n\t\tconst tile: TileState = tiles[i]\n\n\t\tif (Math.random() < chance) {\n\t\t\ttile.disconnect()\n\t\t\tconst dir = sign(Math.random() - 0.5)\n\n\t\t\tpushTransition(Q, {\n\t\t\t\tduration,\n\t\t\t\teaseFn: smooth,\n\t\t\t\tonUpdate: (rot) => {\n\t\t\t\t\ttile.roll += ((rot * Math.PI) / 2) * dir\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t\tonComplete: () => {\n\t\t\t\t\ttile.turn =\n\t\t\t\t\t\tdir > 0\n\t\t\t\t\t\t\t? (tile.turn + 1) % 4\n\t\t\t\t\t\t\t: dir < 0\n\t\t\t\t\t\t\t? (tile.turn + 3) % 4\n\t\t\t\t\t\t\t: tile.turn\n\t\t\t\t\ttile.connect()\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tpushTransition(Q, {\n\t\t\t\tduration,\n\t\t\t\teaseFn: rotateHalf,\n\t\t\t\tonUpdate: (rise) => {\n\t\t\t\t\ttile.height += rise * t.liftHeight\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif (t.flipped !== tile.flipped) {\n\t\t\ttile.flipped = t.flipped\n\t\t\tpushTransition(Q, {\n\t\t\t\tduration,\n\t\t\t\teaseFn: t.flipped ? acc : slow,\n\t\t\t\tdelay: tile.yawDelay,\n\t\t\t\tonStart: () => tile.disconnect(),\n\t\t\t\tonUpdate: (rot) => {\n\t\t\t\t\ttile.yaw += rot * Math.PI\n\t\t\t\t\ttile.height += rot * t.sinkHeight * (tile.flipped ? 1 : -1)\n\t\t\t\t\ttile.updateTransform = true\n\t\t\t\t},\n\t\t\t\tonComplete: () => {\n\t\t\t\t\tif (!tile.flipped) {\n\t\t\t\t\t\ttile.connect()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif (tile.updateTransform) {\n\t\t\ttile.updateTransform = false\n\t\t\tquat.multiply(\n\t\t\t\ttile.rotation,\n\t\t\t\tgetYawQuat(tile.yaw) as quat,\n\t\t\t\tgetRollQuat(tile.roll) as quat,\n\t\t\t)\n\t\t\tconst [x, y] = tile.pos\n\t\t\tconst [offX, offY] = tile.posOffset\n\t\t\tmat4.fromRotationTranslation(tile.transform, tile.rotation, [\n\t\t\t\t(x + offX) * offset,\n\t\t\t\t(y + offY) * offset,\n\t\t\t\ttile.height,\n\t\t\t])\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { cross, dot, normalize, sub } from './vectors';\nexport function planeFromNormalAndCoplanarPoint(n, point) {\n    const d = dot(n, point);\n    return [n[0], n[1], n[2], -d];\n}\nexport function planeFromThreeCoplanarPoints(p1, p2, p3) {\n    return planeFromNormalAndCoplanarPoint(normalFromThreeCoplanarPoints(p1, p2, p3), p1);\n}\nexport function normalFromThreeCoplanarPoints(p1, p2, p3) {\n    return normalize(cross(sub(p3, p2), sub(p1, p2)));\n}\n/*            | 1-2Nx2   -2NxNy  -2NxNz  -2NxD |\nMreflection = |  -2NxNy 1-2Ny2   -2NyNz  -2NyD |\n              |  -2NxNz  -2NyNz 1-2Nz2   -2NzD |\n              |    0       0       0       1   |\nhttp://khayyam.kaplinski.com/2011/09/reflective-water-with-glsl-part-i.html\n\n              mat.m._00 = 1-2*a*a;\tmat.m._01 = -2*a*b;\tmat.m._02 = -2*a*c;\tmat.m._03 = -2*a*d;\n              mat.m._10 = -2*a*b; mat.m._11 = 1-2*b*b;\tmat.m._12 = -2*b*c;\tmat.m._13 = -2*b*d;\n              mat.m._20 = -2*a*c;\tmat.m._21 = -2*b*c;\tmat.m._22 = 1-2*c*c;\tmat.m._23 = -2*c*d;\n              mat.m._30 = 0.0f;\tmat.m._31 = 0.0f;\tmat.m._32 = 0.0f;\tmat.m._33 = 1.0f;\nhttps://www.opengl.org/discussion_boards/showthread.php/147784-Mirror-Matrices\n*/\nexport function mirrorMatrixFromPlane(plane) {\n    const [a, b, c, d] = plane;\n    // prettier-ignore\n    return [\n        1 - 2 * a * a, -2 * a * b, -2 * a * c, 0,\n        -2 * a * b, 1 - 2 * b * b, -2 * b * c, 0,\n        -2 * a * c, -2 * b * c, 1 - 2 * c * c, 0,\n        -2 * a * d, -2 * b * d, -2 * c * d, 1,\n    ];\n}\nexport function getYawQuat(rotYAngle) {\n    rotYAngle *= 0.5;\n    return [0, Math.sin(rotYAngle), 0, Math.cos(rotYAngle)];\n}\nexport function getPitchQuat(rotXAngle) {\n    rotXAngle *= 0.5;\n    return [Math.sin(rotXAngle), 0, 0, Math.cos(rotXAngle)];\n}\nexport function getRollQuat(rotZAngle) {\n    rotZAngle *= 0.5;\n    return [0, 0, Math.sin(rotZAngle), Math.cos(rotZAngle)];\n}\n//# sourceMappingURL=geometry.js.map","import { mat4, vec3 } from 'gl-matrix'\nimport { Keys, KeyState } from 'tvs-libs/dist/events/keyboard'\nimport { Constructor } from 'tvs-libs/lib/oop/mixins'\nimport { PointerState, Buttons } from 'tvs-libs/dist/events/pointer'\n\nexport class Camera {\n\tposition: vec3 = [0, 0, 0]\n\trotationX = 0\n\trotationY = 0\n\trotationXMat = mat4.create()\n\trotationYMat = mat4.create()\n\tprojectionMat = mat4.create()\n\tviewMat = mat4.create()\n\tneedsUpdateView = true\n\n\tconstructor(props?: Partial<Camera>) {\n\t\tObject.assign(this, props)\n\t\tthis.updateRotationX()\n\t\tthis.updateRotationY()\n\t}\n\n\tupdateRotationX(amount: number = 0) {\n\t\tthis.rotationX += amount\n\t\tmat4.fromXRotation(this.rotationXMat, this.rotationX)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdateRotationY(amount: number = 0) {\n\t\tthis.rotationY += amount\n\t\tmat4.fromYRotation(this.rotationYMat, this.rotationY)\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveForward(dist: number) {\n\t\tconst v = vec3.fromValues(\n\t\t\tthis.rotationYMat[8],\n\t\t\tthis.rotationYMat[9],\n\t\t\tthis.rotationYMat[10],\n\t\t)\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveLeft(dist: number) {\n\t\tconst v = vec3.fromValues(\n\t\t\tthis.rotationYMat[0],\n\t\t\tthis.rotationYMat[1],\n\t\t\tthis.rotationYMat[2],\n\t\t)\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, -dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tmoveUp(dist: number) {\n\t\tconst v = vec3.fromValues(\n\t\t\tthis.rotationYMat[4],\n\t\t\tthis.rotationYMat[5],\n\t\t\tthis.rotationYMat[6],\n\t\t)\n\t\tvec3.add(this.position as any, this.position, vec3.scale(v, v, dist))\n\t\tthis.needsUpdateView = true\n\t}\n\n\tupdate() {\n\t\tif (this.needsUpdateView) {\n\t\t\tmat4.fromTranslation(this.viewMat, this.position)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationYMat)\n\t\t\tmat4.multiply(this.viewMat, this.viewMat, this.rotationXMat)\n\t\t\tmat4.invert(this.viewMat, this.viewMat)\n\t\t\tthis.needsUpdateView = false\n\t\t}\n\t}\n}\n\nexport class PerspectiveCamera extends Camera {\n\tfovy = Math.PI * 0.6\n\taspect = 1\n\tnear = 0.1\n\tfar = 1000\n\tneedsUpdateProjection = true\n\n\tconstructor(props?: Partial<PerspectiveCamera>) {\n\t\tsuper(props)\n\t\tObject.assign(this, props)\n\t\tthis.update()\n\t}\n\n\tupdate() {\n\t\tsuper.update()\n\n\t\tif (this.needsUpdateProjection) {\n\t\t\tmat4.perspective(\n\t\t\t\tthis.projectionMat,\n\t\t\t\tthis.fovy,\n\t\t\t\tthis.aspect,\n\t\t\t\tthis.near,\n\t\t\t\tthis.far,\n\t\t\t)\n\t\t\tthis.needsUpdateProjection = false\n\t\t}\n\t}\n}\n\nexport function WithInputNavigation<T extends Constructor<Camera>>(Cam: T) {\n\treturn class extends Cam {\n\t\tupdatePosFromInput(speed: number, keys?: KeyState, pointer?: PointerState) {\n\t\t\tif (!(keys || pointer)) return\n\t\t\tif (\n\t\t\t\tkeys?.[Keys.UP] ||\n\t\t\t\tkeys?.[Keys.W] ||\n\t\t\t\t(pointer?.holding && !pointer.pressed[Buttons.RIGHT])\n\t\t\t) {\n\t\t\t\tthis.moveForward(speed)\n\t\t\t}\n\t\t\tif (\n\t\t\t\tkeys?.[Keys.DOWN] ||\n\t\t\t\tkeys?.[Keys.S] ||\n\t\t\t\tpointer?.pressed[Buttons.RIGHT]\n\t\t\t) {\n\t\t\t\tthis.moveForward(-speed)\n\t\t\t}\n\t\t\tif (keys?.[Keys.LEFT] || keys?.[Keys.A]) {\n\t\t\t\tthis.moveLeft(speed)\n\t\t\t}\n\t\t\tif (keys?.[Keys.RIGHT] || keys?.[Keys.D]) {\n\t\t\t\tthis.moveLeft(-speed)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function WithInputRotation<T extends Constructor<Camera>>(Cam: T) {\n\treturn class extends Cam {\n\t\t_oldMouse = { x: 0, y: 0 }\n\n\t\tupdateRotFromPointer(\n\t\t\tspeed: number,\n\t\t\tm: { dragging: boolean; drag: { x: number; y: number } },\n\t\t) {\n\t\t\tif (m.dragging) {\n\t\t\t\tconst deltaX = this._oldMouse.x - m.drag.x\n\t\t\t\tconst deltaY = this._oldMouse.y - m.drag.y\n\t\t\t\tthis._oldMouse.x = m.drag.x\n\t\t\t\tthis._oldMouse.y = m.drag.y\n\t\t\t\tdeltaY && this.updateRotationX(deltaY * speed)\n\t\t\t\tdeltaX && this.updateRotationY(deltaX * speed)\n\t\t\t} else {\n\t\t\t\tthis._oldMouse.x && (this._oldMouse.x = 0)\n\t\t\t\tthis._oldMouse.y && (this._oldMouse.y = 0)\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { PerspectiveCamera } from '../shared-utils/vr/camera'\nimport { events, Q } from './context'\n\nexport class ViewPort {\n\tdistance = 1\n\tcamera = new PerspectiveCamera({\n\t\tfovy: Math.PI * 0.5,\n\t\tposition: [0, 0, 0],\n\t})\n}\n\nQ.listen('viewPort', events.RESIZE, (s) => {\n\tconst v = s.viewPort\n\tconst cam = v.camera\n\tv.distance = s.tiles.colCount * s.tiles.tileSize * 0.47\n\tcam.aspect = s.device.canvas.width / s.device.canvas.height\n\tcam.needsUpdateProjection = true\n\tcam.position = [0, 0, v.distance / cam.aspect]\n\tcam.needsUpdateView = true\n\tcam.update()\n})\n\nQ.set('viewPort', new ViewPort())\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","import { each } from 'tvs-libs/dist/utils/sequence'\nimport { Frame } from 'tvs-painter/dist/frame'\nimport { plane } from 'tvs-painter/dist/utils/geometry/plane'\nimport { events, Q } from './context'\nimport frag from './glsl/base-frag.glsl'\nimport vert from './glsl/base-vert.glsl'\n\n// ===== Settings =====\n\nQ.painter.updateDrawSettings({\n\tclearColor: [1, 1, 1, 1],\n\tenable: [Q.gl.DEPTH_TEST, Q.gl.CULL_FACE],\n})\n\n// ===== shaders =====\n\nconst shade = Q.getShade('shade').update({ frag, vert })\n\n// ===== geometries =====\n\nconst tileSize = Q.state.tiles.tileSize\nconst form = Q.getForm('form').update(plane(tileSize, tileSize, 3, 3))\n\n// ===== textures =====\n\nconst textures: { [id: string]: Frame } = {}\n\n// ===== objects =====\n\nexport const tiles = Q.getSketch('tiles')\n\nQ.listen('render', events.ON_IMAGES_LOADED, (s) => {\n\teach((img, key) => {\n\t\ttextures[key] = Q.getFrame(key).update({\n\t\t\ttexture: {\n\t\t\t\tminFilter: 'LINEAR_MIPMAP_LINEAR',\n\t\t\t\tmagFilter: 'LINEAR',\n\t\t\t\tasset: img,\n\t\t\t},\n\t\t})\n\t}, s.tiles.images)\n})\n\nQ.listen('render', events.NEW_ACTIVE_TILES, (s) => {\n\ttiles.update({\n\t\tform,\n\t\tshade,\n\t\tuniforms: s.tiles.activeTiles.map((tile) => ({\n\t\t\tview: () => s.viewPort.camera.viewMat,\n\t\t\tprojection: () => s.viewPort.camera.projectionMat,\n\t\t\ttransform: tile.transform,\n\t\t\timage: textures[tile.tileSpecId] && textures[tile.tileSpecId].image(),\n\t\t\tcolor: tile.color,\n\t\t\tconnections: tile.connections,\n\t\t})),\n\t})\n})\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D image;\\nuniform vec3 color;\\nuniform vec4 connections;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec4 tex = texture2D(image, vUv);\\n  if (tex.r > 0.9) {\\n    discard;\\n  }\\n\\n  float up = 0.0;\\n  float right = 0.0;\\n  float down = 0.0;\\n  float left = 0.0;\\n  float x = vUv.x - 0.5;\\n  float y = vUv.y;\\n\\n  if (connections[0] > 0.0) {\\n    up = x * x * 2.0 + y * y * 2.0;\\n    up = connections[0] - up;\\n    up = max(0.0, up);\\n    up *= up;\\n  }\\n\\n  if (connections[1] > 0.0) {\\n    x = vUv.x - 1.0;\\n    y = vUv.y - 0.5;\\n    right = x * x * 2.0 + y * y * 2.0;\\n    right = connections[1] - right;\\n    right = max(0.0, right);\\n    right *= right;\\n  }\\n\\n  if (connections[2] > 0.0) {\\n    x = vUv.x - 0.5;\\n    y = vUv.y - 1.0;\\n    down = x * x * 2.0 + y * y * 2.0;\\n    down = connections[2] - down;\\n    down = max(0.0, down);\\n    down *= down;\\n  }\\n\\n  if (connections[3] > 0.0) {\\n    x = vUv.x;\\n    y = vUv.y - 0.5;\\n    left = x * x * 2.0 + y * y * 2.0;\\n    left = connections[3] - left;\\n    left = max(0.0, left);\\n    left *= left;\\n  }\\n\\n  // smooth out border\\n  /* col /= resolution.x * resolution.y * 0.5; */\\n  /* col = sqrt(col); */\\n\\n\\tfloat glow = up + right + left + down;\\n\\n\\tvec3 result = 0.8 - color.rgb * (1.0 - tex.r);\\n\\tfloat red = result.r;\\n\\n\\tif (abs(tex.g - tex.r) > 0.1 && tex.g > 0.9) {\\n\\t\\tred = mix(red, 1.0, glow);\\n\\t}\\n\\n  gl_FragColor = vec4(red, result.gb, 1.0);\\n  // gl_FragColor = vec4(color, 1.0);\\n  // gl_FragColor = connections;\\n}\\n\";","export default \"#define GLSLIFY 1\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\nuniform mat4 transform;\\nuniform mat4 projection;\\nuniform mat4 view;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\tgl_Position = projection * view * transform * vec4(position, 1.0);\\n}\\n\";","export function plane(width, height, widthSegments, heightSegments) {\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const gridX = widthSegments || 1;\n    const gridY = heightSegments || 1;\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n    const vertices = new Float32Array(gridX1 * gridY1 * 3);\n    const normals = new Float32Array(gridX1 * gridY1 * 3);\n    const uvs = new Float32Array(gridX1 * gridY1 * 2);\n    let iy, ix;\n    let offset = 0;\n    let offset2 = 0;\n    for (iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf;\n            vertices[offset] = x;\n            vertices[offset + 1] = -y;\n            normals[offset + 2] = 1;\n            uvs[offset2] = ix / gridX;\n            uvs[offset2 + 1] = 1 - iy / gridY;\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n    offset = 0;\n    const indices = new (vertices.length / 3 > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            const a = ix + gridX1 * iy;\n            const b = ix + gridX1 * (iy + 1);\n            const c = ix + 1 + gridX1 * (iy + 1);\n            const d = ix + 1 + gridX1 * iy;\n            indices[offset] = a;\n            indices[offset + 1] = b;\n            indices[offset + 2] = d;\n            indices[offset + 3] = b;\n            indices[offset + 4] = c;\n            indices[offset + 5] = d;\n            offset += 6;\n        }\n    }\n    return {\n        attribs: {\n            position: {\n                buffer: vertices,\n            },\n            normal: {\n                buffer: normals,\n            },\n            uv: {\n                buffer: uvs,\n            },\n        },\n        elements: {\n            buffer: indices,\n        },\n        drawType: 'TRIANGLES',\n        itemCount: indices.length,\n    };\n}\n//# sourceMappingURL=plane.js.map","import './state/tiles'\nimport './viewport'\n\nimport { repeat } from '../shared-utils/scheduler'\nimport { events, Q } from './context'\nimport { tiles } from './renderer'\n\n// state.device.sizeMultiplier = window.devicePixelRatio\n\nQ.listen('start', events.ON_IMAGES_LOADED, (s) => {\n\trepeat((tpf) => {\n\t\ts.device.tpf = tpf\n\t\tQ.emit(events.FRAME)\n\t\tQ.painter.draw(tiles)\n\t}, 'loop')\n})\n\nQ.emit(events.INIT)\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}